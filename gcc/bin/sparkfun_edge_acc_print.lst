
bin/sparkfun_edge_acc_print.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 25 d4 00 00 1d d4 00 00 65 c8 00 00     ....%.......e...
    c010:	65 c8 00 00 65 c8 00 00 65 c8 00 00 00 00 00 00     e...e...e.......
	...
    c02c:	21 d4 00 00 21 d4 00 00 00 00 00 00 21 d4 00 00     !...!.......!...
    c03c:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c04c:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c05c:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c06c:	21 d4 00 00 21 d4 00 00 21 d4 00 00 8d d4 00 00     !...!...!.......
    c07c:	71 c5 00 00 21 d4 00 00 21 d4 00 00 49 d5 00 00     q...!...!...I...
    c08c:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c09c:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c0ac:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c0bc:	21 d4 00 00 21 d4 00 00 21 d4 00 00 21 d4 00 00     !...!...!...!...
    c0cc:	21 d4 00 00                                         !...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <uart_print>:
// UART print string
//
//*****************************************************************************
void
uart_print(char *pcStr)
{
    c518:	b530      	push	{r4, r5, lr}
    c51a:	b087      	sub	sp, #28
    uint32_t ui32BytesWritten = 0;

    //
    // Measure the length of the string.
    //
    while (pcStr[ui32StrLen] != 0)
    c51c:	7804      	ldrb	r4, [r0, #0]
    uint32_t ui32BytesWritten = 0;
    c51e:	2300      	movs	r3, #0
    c520:	9300      	str	r3, [sp, #0]
    while (pcStr[ui32StrLen] != 0)
    c522:	b13c      	cbz	r4, c534 <uart_print+0x1c>
    c524:	4603      	mov	r3, r0
    c526:	f1c0 0201 	rsb	r2, r0, #1
    {
        ui32StrLen++;
    c52a:	18d4      	adds	r4, r2, r3
    while (pcStr[ui32StrLen] != 0)
    c52c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c530:	2900      	cmp	r1, #0
    c532:	d1fa      	bne.n	c52a <uart_print+0x12>
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c534:	4d0c      	ldr	r5, [pc, #48]	; (c568 <uart_print+0x50>)
    const am_hal_uart_transfer_t sUartWrite =
    c536:	9002      	str	r0, [sp, #8]
    c538:	2300      	movs	r3, #0
    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c53a:	6828      	ldr	r0, [r5, #0]
    const am_hal_uart_transfer_t sUartWrite =
    c53c:	9403      	str	r4, [sp, #12]
    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c53e:	a901      	add	r1, sp, #4
    const am_hal_uart_transfer_t sUartWrite =
    c540:	9301      	str	r3, [sp, #4]
    c542:	9304      	str	r3, [sp, #16]
    c544:	f8cd d014 	str.w	sp, [sp, #20]
    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c548:	f003 fb4c 	bl	fbe4 <am_hal_uart_transfer>
    c54c:	b928      	cbnz	r0, c55a <uart_print+0x42>

    if (ui32BytesWritten != ui32StrLen)
    c54e:	9b00      	ldr	r3, [sp, #0]
    c550:	42a3      	cmp	r3, r4
    c552:	d000      	beq.n	c556 <uart_print+0x3e>
    {
        //
        // Couldn't send the whole string!!
        //
        while(1);
    c554:	e7fe      	b.n	c554 <uart_print+0x3c>
    }
}
    c556:	b007      	add	sp, #28
    c558:	bd30      	pop	{r4, r5, pc}
    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    c55a:	6828      	ldr	r0, [r5, #0]
    c55c:	a901      	add	r1, sp, #4
    c55e:	f003 fb41 	bl	fbe4 <am_hal_uart_transfer>
    ui32LastError = ui32ErrorStatus;
    c562:	4b02      	ldr	r3, [pc, #8]	; (c56c <uart_print+0x54>)
    c564:	6018      	str	r0, [r3, #0]
    while (1);
    c566:	e7fe      	b.n	c566 <uart_print+0x4e>
    c568:	100012f8 	.word	0x100012f8
    c56c:	100012f4 	.word	0x100012f4

0000c570 <am_uart_isr>:
{
    c570:	b510      	push	{r4, lr}
    am_hal_uart_interrupt_status_get(phUART, &ui32Status, true);
    c572:	4c09      	ldr	r4, [pc, #36]	; (c598 <am_uart_isr+0x28>)
{
    c574:	b082      	sub	sp, #8
    am_hal_uart_interrupt_status_get(phUART, &ui32Status, true);
    c576:	2201      	movs	r2, #1
    c578:	4669      	mov	r1, sp
    c57a:	6820      	ldr	r0, [r4, #0]
    c57c:	f003 fe34 	bl	101e8 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(phUART, ui32Status);
    c580:	9900      	ldr	r1, [sp, #0]
    c582:	6820      	ldr	r0, [r4, #0]
    c584:	f003 fe1e 	bl	101c4 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(phUART, ui32Status, &ui32Idle);
    c588:	6820      	ldr	r0, [r4, #0]
    c58a:	9900      	ldr	r1, [sp, #0]
    c58c:	aa01      	add	r2, sp, #4
    c58e:	f003 fd8b 	bl	100a8 <am_hal_uart_interrupt_service>
}
    c592:	b002      	add	sp, #8
    c594:	bd10      	pop	{r4, pc}
    c596:	bf00      	nop
    c598:	100012f8 	.word	0x100012f8

0000c59c <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5a0:	2100      	movs	r1, #0
{
    c5a2:	b08b      	sub	sp, #44	; 0x2c
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5a4:	4608      	mov	r0, r1
    ////////////////////
    
    //
    // Initialize the printf interface for UART output.
    //
    CHECK_ERRORS(am_hal_uart_initialize(0, &phUART));
    c5a6:	4d8c      	ldr	r5, [pc, #560]	; (c7d8 <main+0x23c>)
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c5a8:	f001 fea2 	bl	e2f0 <am_hal_clkgen_control>
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c5ac:	488b      	ldr	r0, [pc, #556]	; (c7dc <main+0x240>)
    c5ae:	f001 fcfd 	bl	dfac <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c5b2:	f001 fd21 	bl	dff8 <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c5b6:	f001 fa63 	bl	da80 <am_bsp_low_power_init>
    CHECK_ERRORS(am_hal_uart_initialize(0, &phUART));
    c5ba:	4629      	mov	r1, r5
    c5bc:	2000      	movs	r0, #0
    c5be:	f003 f93f 	bl	f840 <am_hal_uart_initialize>
    c5c2:	b130      	cbz	r0, c5d2 <main+0x36>
    c5c4:	4629      	mov	r1, r5
    c5c6:	2000      	movs	r0, #0
    c5c8:	f003 f93a 	bl	f840 <am_hal_uart_initialize>
    ui32LastError = ui32ErrorStatus;
    c5cc:	4b84      	ldr	r3, [pc, #528]	; (c7e0 <main+0x244>)
    c5ce:	6018      	str	r0, [r3, #0]
    while (1);
    c5d0:	e7fe      	b.n	c5d0 <main+0x34>
    CHECK_ERRORS(am_hal_uart_power_control(phUART, AM_HAL_SYSCTRL_WAKE, false));
    c5d2:	4604      	mov	r4, r0
    c5d4:	4602      	mov	r2, r0
    c5d6:	4601      	mov	r1, r0
    c5d8:	6828      	ldr	r0, [r5, #0]
    c5da:	f003 f96d 	bl	f8b8 <am_hal_uart_power_control>
    c5de:	b138      	cbz	r0, c5f0 <main+0x54>
    c5e0:	6828      	ldr	r0, [r5, #0]
    c5e2:	4622      	mov	r2, r4
    c5e4:	4621      	mov	r1, r4
    c5e6:	f003 f967 	bl	f8b8 <am_hal_uart_power_control>
    ui32LastError = ui32ErrorStatus;
    c5ea:	4b7d      	ldr	r3, [pc, #500]	; (c7e0 <main+0x244>)
    c5ec:	6018      	str	r0, [r3, #0]
    while (1);
    c5ee:	e7fe      	b.n	c5ee <main+0x52>
    CHECK_ERRORS(am_hal_uart_configure(phUART, &g_sUartConfig));
    c5f0:	497c      	ldr	r1, [pc, #496]	; (c7e4 <main+0x248>)
    c5f2:	6828      	ldr	r0, [r5, #0]
    c5f4:	f003 f9d2 	bl	f99c <am_hal_uart_configure>
    c5f8:	2800      	cmp	r0, #0
    c5fa:	f040 80cd 	bne.w	c798 <main+0x1fc>

    //
    // Enable the UART pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c5fe:	4b7a      	ldr	r3, [pc, #488]	; (c7e8 <main+0x24c>)
    ///////////////////////
    //end testing new uart
    //////////////////////
    
    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c600:	4c7a      	ldr	r4, [pc, #488]	; (c7ec <main+0x250>)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c602:	6819      	ldr	r1, [r3, #0]

    // Set up Pin 1 as output
    am_hal_gpio_pinconfig(AM_BSP_GPIO_1, g_AM_HAL_GPIO_OUTPUT_12);

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c604:	4f7a      	ldr	r7, [pc, #488]	; (c7f0 <main+0x254>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);

    am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c606:	f8df b230 	ldr.w	fp, [pc, #560]	; c838 <main+0x29c>
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c60a:	f8df a228 	ldr.w	sl, [pc, #552]	; c834 <main+0x298>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    c60e:	2030      	movs	r0, #48	; 0x30
    c610:	f002 f850 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    c614:	4b77      	ldr	r3, [pc, #476]	; (c7f4 <main+0x258>)
    c616:	2031      	movs	r0, #49	; 0x31
    c618:	6819      	ldr	r1, [r3, #0]
    c61a:	f002 f84b 	bl	e6b4 <am_hal_gpio_pinconfig>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c61e:	4b76      	ldr	r3, [pc, #472]	; (c7f8 <main+0x25c>)
    c620:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    c624:	601d      	str	r5, [r3, #0]
    am_hal_interrupt_master_enable();
    c626:	f002 f9f7 	bl	ea18 <am_hal_interrupt_master_enable>
    am_util_stdio_printf_init(uart_print);
    c62a:	4874      	ldr	r0, [pc, #464]	; (c7fc <main+0x260>)
    c62c:	f000 fa86 	bl	cb3c <am_util_stdio_printf_init>
    am_util_stdio_terminal_clear();
    c630:	f000 feee 	bl	d410 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
    c634:	4872      	ldr	r0, [pc, #456]	; (c800 <main+0x264>)
    c636:	f000 fed1 	bl	d3dc <am_util_stdio_printf>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c63a:	6821      	ldr	r1, [r4, #0]
    c63c:	202e      	movs	r0, #46	; 0x2e
    c63e:	f002 f839 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c642:	6821      	ldr	r1, [r4, #0]
    c644:	2025      	movs	r0, #37	; 0x25
    c646:	f002 f835 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c64a:	6821      	ldr	r1, [r4, #0]
    c64c:	202c      	movs	r0, #44	; 0x2c
    c64e:	f002 f831 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c652:	6821      	ldr	r1, [r4, #0]
    c654:	202f      	movs	r0, #47	; 0x2f
    c656:	f002 f82d 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c65a:	4b6a      	ldr	r3, [pc, #424]	; (c804 <main+0x268>)
    c65c:	200e      	movs	r0, #14
    c65e:	6819      	ldr	r1, [r3, #0]
    c660:	f002 f828 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_1, g_AM_HAL_GPIO_OUTPUT_12);
    c664:	6821      	ldr	r1, [r4, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c666:	4c68      	ldr	r4, [pc, #416]	; (c808 <main+0x26c>)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_1, g_AM_HAL_GPIO_OUTPUT_12);
    c668:	2001      	movs	r0, #1
    c66a:	f002 f823 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c66e:	2620      	movs	r6, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c674:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c678:	f04f 0902 	mov.w	r9, #2
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c67c:	f8c7 8000 	str.w	r8, [r7]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c680:	603e      	str	r6, [r7, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c682:	603b      	str	r3, [r7, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c684:	603d      	str	r5, [r7, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c686:	f8cb 9000 	str.w	r9, [fp]
    am_util_stdio_terminal_clear();
    c68a:	f000 fec1 	bl	d410 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n\n");
    c68e:	485f      	ldr	r0, [pc, #380]	; (c80c <main+0x270>)
    c690:	f000 fea4 	bl	d3dc <am_util_stdio_printf>
    am_util_stdio_printf("Initializing accelerometer... \r\n");
    c694:	485e      	ldr	r0, [pc, #376]	; (c810 <main+0x274>)
    c696:	f000 fea1 	bl	d3dc <am_util_stdio_printf>
    int accInitRes = initAccelerometer();
    c69a:	f001 f8a7 	bl	d7ec <initAccelerometer>
    c69e:	4601      	mov	r1, r0
    am_util_stdio_printf("Accelerometer init returned %8x\r\n\n", accInitRes);
    c6a0:	485c      	ldr	r0, [pc, #368]	; (c814 <main+0x278>)
    c6a2:	f000 fe9b 	bl	d3dc <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
}

static int testADC(void)
{
    initADC();
    c6a6:	f000 ffb5 	bl	d614 <initADC>
    enableAdcInterrupts();
    c6aa:	f000 ffd3 	bl	d654 <enableAdcInterrupts>
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c6ae:	f8ca 9000 	str.w	r9, [sl]
    am_util_stdio_printf("Interval between readings: ~%d", TIME_DELAY_MILISECONDS);
    c6b2:	f241 3188 	movw	r1, #5000	; 0x1388
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c6b6:	f8c4 8000 	str.w	r8, [r4]
    am_util_stdio_printf("Interval between readings: ~%d", TIME_DELAY_MILISECONDS);
    c6ba:	4857      	ldr	r0, [pc, #348]	; (c818 <main+0x27c>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c6bc:	6026      	str	r6, [r4, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c6be:	6025      	str	r5, [r4, #0]
    am_util_stdio_printf("Interval between readings: ~%d", TIME_DELAY_MILISECONDS);
    c6c0:	f000 fe8c 	bl	d3dc <am_util_stdio_printf>
    am_util_stdio_printf("ms\r\n\n");
    c6c4:	4855      	ldr	r0, [pc, #340]	; (c81c <main+0x280>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c6c6:	4e56      	ldr	r6, [pc, #344]	; (c820 <main+0x284>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c6c8:	4d56      	ldr	r5, [pc, #344]	; (c824 <main+0x288>)
    am_util_stdio_printf("ms\r\n\n");
    c6ca:	f000 fe87 	bl	d3dc <am_util_stdio_printf>
    am_util_stdio_printf("AccX [mg], AccY [mg], AccZ [mg]\r\n");
    c6ce:	4856      	ldr	r0, [pc, #344]	; (c828 <main+0x28c>)
    c6d0:	f000 fe84 	bl	d3dc <am_util_stdio_printf>
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c6d4:	e9cd b406 	strd	fp, r4, [sp, #24]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c6d8:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c6da:	f04f 0801 	mov.w	r8, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c6de:	aa09      	add	r2, sp, #36	; 0x24
    c6e0:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c6e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c6e6:	f002 f921 	bl	e92c <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c6ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c6ec:	a908      	add	r1, sp, #32
    c6ee:	4630      	mov	r0, r6
        if( pin14Val == 0 ){ break; }
    c6f0:	2c00      	cmp	r4, #0
    c6f2:	d058      	beq.n	c7a6 <main+0x20a>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c6f4:	f001 f9a0 	bl	da38 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c6f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c6fc:	2b00      	cmp	r3, #0
    c6fe:	d0eb      	beq.n	c6d8 <main+0x13c>
            am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c700:	9b06      	ldr	r3, [sp, #24]
            acceleration_mg[0] =
    c702:	4c4a      	ldr	r4, [pc, #296]	; (c82c <main+0x290>)
            am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c704:	f04f 0b02 	mov.w	fp, #2
    c708:	f8c3 b000 	str.w	fp, [r3]
            am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c70c:	2320      	movs	r3, #32
    c70e:	603b      	str	r3, [r7, #0]
            am_util_delay_ms(TIME_DELAY_COMM_SET_UP);
    c710:	2019      	movs	r0, #25
    c712:	f000 f893 	bl	c83c <am_util_delay_ms>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c716:	2300      	movs	r3, #0
    c718:	602b      	str	r3, [r5, #0]
    c71a:	80ab      	strh	r3, [r5, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c71c:	4941      	ldr	r1, [pc, #260]	; (c824 <main+0x288>)
    c71e:	4630      	mov	r0, r6
    c720:	f001 f99a 	bl	da58 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c724:	f9b5 0000 	ldrsh.w	r0, [r5]
    c728:	f001 f8cc 	bl	d8c4 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c72c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
            acceleration_mg[0] =
    c730:	ed84 0a00 	vstr	s0, [r4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c734:	f001 f8c6 	bl	d8c4 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c738:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
            acceleration_mg[1] =
    c73c:	ed84 0a01 	vstr	s0, [r4, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c740:	f001 f8c0 	bl	d8c4 <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("%04.2f ,%04.2f ,%04.2f \r\n",
    c744:	6820      	ldr	r0, [r4, #0]
            acceleration_mg[2] =
    c746:	ed84 0a02 	vstr	s0, [r4, #8]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c74a:	ee10 8a10 	vmov	r8, s0
            am_util_stdio_printf("%04.2f ,%04.2f ,%04.2f \r\n",
    c74e:	f7ff fe3b 	bl	c3c8 <__aeabi_f2d>
    c752:	4602      	mov	r2, r0
    c754:	460b      	mov	r3, r1
    c756:	4640      	mov	r0, r8
    c758:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c75c:	f7ff fe34 	bl	c3c8 <__aeabi_f2d>
    c760:	4680      	mov	r8, r0
    c762:	4689      	mov	r9, r1
    c764:	6860      	ldr	r0, [r4, #4]
    c766:	e9cd 8902 	strd	r8, r9, [sp, #8]
    c76a:	f7ff fe2d 	bl	c3c8 <__aeabi_f2d>
    c76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c772:	e9cd 0100 	strd	r0, r1, [sp]
    c776:	482e      	ldr	r0, [pc, #184]	; (c830 <main+0x294>)
    c778:	f000 fe30 	bl	d3dc <am_util_stdio_printf>
            am_util_delay_ms(TIME_DELAY_COMM_SET_UP);
    c77c:	2019      	movs	r0, #25
    c77e:	f000 f85d 	bl	c83c <am_util_delay_ms>
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c782:	9b07      	ldr	r3, [sp, #28]
            am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c784:	f8ca b000 	str.w	fp, [sl]
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c788:	461a      	mov	r2, r3
    c78a:	2320      	movs	r3, #32
            am_util_delay_ms(TIME_DELAY_MILISECONDS - (2*TIME_DELAY_COMM_SET_UP));
    c78c:	f241 3056 	movw	r0, #4950	; 0x1356
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c790:	6013      	str	r3, [r2, #0]
            am_util_delay_ms(TIME_DELAY_MILISECONDS - (2*TIME_DELAY_COMM_SET_UP));
    c792:	f000 f853 	bl	c83c <am_util_delay_ms>
    {
    c796:	e79f      	b.n	c6d8 <main+0x13c>
    CHECK_ERRORS(am_hal_uart_configure(phUART, &g_sUartConfig));
    c798:	6828      	ldr	r0, [r5, #0]
    c79a:	4912      	ldr	r1, [pc, #72]	; (c7e4 <main+0x248>)
    c79c:	f003 f8fe 	bl	f99c <am_hal_uart_configure>
    ui32LastError = ui32ErrorStatus;
    c7a0:	4b0f      	ldr	r3, [pc, #60]	; (c7e0 <main+0x244>)
    c7a2:	6018      	str	r0, [r3, #0]
    while (1);
    c7a4:	e7fe      	b.n	c7a4 <main+0x208>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c7a6:	4b18      	ldr	r3, [pc, #96]	; (c808 <main+0x26c>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c7a8:	4a22      	ldr	r2, [pc, #136]	; (c834 <main+0x298>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c7aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    c7ae:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c7b0:	2020      	movs	r0, #32
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c7b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c7b6:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c7b8:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c7ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c7be:	2102      	movs	r1, #2
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c7c0:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c7c2:	6011      	str	r1, [r2, #0]
    am_bsp_debug_printf_disable();
    c7c4:	f001 f98e 	bl	dae4 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c7c8:	4640      	mov	r0, r8
    c7ca:	f003 f801 	bl	f7d0 <am_hal_sysctrl_sleep>
}
    c7ce:	4620      	mov	r0, r4
    c7d0:	b00b      	add	sp, #44	; 0x2c
    c7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7d6:	bf00      	nop
    c7d8:	100012f8 	.word	0x100012f8
    c7dc:	0001078c 	.word	0x0001078c
    c7e0:	100012f4 	.word	0x100012f4
    c7e4:	000104fc 	.word	0x000104fc
    c7e8:	00010780 	.word	0x00010780
    c7ec:	00010900 	.word	0x00010900
    c7f0:	40010094 	.word	0x40010094
    c7f4:	0001077c 	.word	0x0001077c
    c7f8:	e000e100 	.word	0xe000e100
    c7fc:	0000c519 	.word	0x0000c519
    c800:	00010420 	.word	0x00010420
    c804:	00010790 	.word	0x00010790
    c808:	4001009c 	.word	0x4001009c
    c80c:	00010430 	.word	0x00010430
    c810:	0001044c 	.word	0x0001044c
    c814:	00010470 	.word	0x00010470
    c818:	00010494 	.word	0x00010494
    c81c:	000104b4 	.word	0x000104b4
    c820:	10001418 	.word	0x10001418
    c824:	10001300 	.word	0x10001300
    c828:	000104bc 	.word	0x000104bc
    c82c:	10001308 	.word	0x10001308
    c830:	000104e0 	.word	0x000104e0
    c834:	40010098 	.word	0x40010098
    c838:	40010090 	.word	0x40010090

0000c83c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c83c:	b510      	push	{r4, lr}
    c83e:	b084      	sub	sp, #16
    c840:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c842:	a801      	add	r0, sp, #4
    c844:	f001 fde0 	bl	e408 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c848:	9b01      	ldr	r3, [sp, #4]
    c84a:	4805      	ldr	r0, [pc, #20]	; (c860 <am_util_delay_ms+0x24>)
    c84c:	fba0 2303 	umull	r2, r3, r0, r3
    c850:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c852:	fb04 f003 	mul.w	r0, r4, r3
    c856:	f001 fed9 	bl	e60c <am_hal_flash_delay>
}
    c85a:	b004      	add	sp, #16
    c85c:	bd10      	pop	{r4, pc}
    c85e:	bf00      	nop
    c860:	057619f1 	.word	0x057619f1

0000c864 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c864:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c866:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c86a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c86c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c870:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c874:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c878:	f000 f806 	bl	c888 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c87c:	bd01      	pop	{r0, pc}
    c87e:	bf00      	nop

0000c880 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c880:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c882:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c884:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c886:	4770      	bx	lr

0000c888 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c888:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c88a:	2300      	movs	r3, #0
{
    c88c:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c88e:	e9cd 3300 	strd	r3, r3, [sp]
    c892:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c896:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c89a:	4a2b      	ldr	r2, [pc, #172]	; (c948 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c89c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c89e:	6813      	ldr	r3, [r2, #0]
    c8a0:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c8a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8a4:	b2db      	uxtb	r3, r3
    c8a6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c8aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c8b0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8b6:	0c1b      	lsrs	r3, r3, #16
    c8b8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c8bc:	6913      	ldr	r3, [r2, #16]
    c8be:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c8c0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    c8c4:	079b      	lsls	r3, r3, #30
{
    c8c6:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c8c8:	d437      	bmi.n	c93a <am_util_faultisr_collect_data+0xb2>
    c8ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c8ce:	4621      	mov	r1, r4
    c8d0:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c8d2:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c8d4:	f7ff ffd4 	bl	c880 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c8d8:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c8da:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c8dc:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c8de:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c8e0:	f7ff ffce 	bl	c880 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c8e4:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c8e6:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c8e8:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c8ea:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c8ec:	f7ff ffc8 	bl	c880 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c8f0:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c8f2:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c8f4:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c8f6:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c8f8:	f7ff ffc2 	bl	c880 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c8fc:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c8fe:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c900:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c902:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c904:	f7ff ffbc 	bl	c880 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c908:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c90a:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c90c:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c90e:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c910:	f7ff ffb6 	bl	c880 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c914:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c916:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c918:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c91a:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c91c:	f7ff ffb0 	bl	c880 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c920:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c922:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c924:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c926:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c928:	f7ff ffaa 	bl	c880 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c92c:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c92e:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c930:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c932:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c934:	f002 fddc 	bl	f4f0 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c938:	e7fe      	b.n	c938 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c93a:	4601      	mov	r1, r0
    c93c:	2006      	movs	r0, #6
    c93e:	f7ff ff9f 	bl	c880 <getStackedReg>
    c942:	4603      	mov	r3, r0
    c944:	e7c3      	b.n	c8ce <am_util_faultisr_collect_data+0x46>
    c946:	bf00      	nop
    c948:	e000ed28 	.word	0xe000ed28

0000c94c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c94c:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c94e:	460e      	mov	r6, r1
    c950:	2700      	movs	r7, #0
    c952:	ea56 0307 	orrs.w	r3, r6, r7
    c956:	d045      	beq.n	c9e4 <divu64_10+0x98>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c958:	0844      	lsrs	r4, r0, #1
    c95a:	0883      	lsrs	r3, r0, #2
    c95c:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c960:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
    c964:	18e4      	adds	r4, r4, r3
    c966:	ea4f 0251 	mov.w	r2, r1, lsr #1
    c96a:	ea4f 0391 	mov.w	r3, r1, lsr #2
    c96e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 4);
    c972:	0923      	lsrs	r3, r4, #4
    c974:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c978:	18e4      	adds	r4, r4, r3
    c97a:	ea4f 1312 	mov.w	r3, r2, lsr #4
    c97e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 8);
    c982:	0a23      	lsrs	r3, r4, #8
    c984:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    c988:	18e4      	adds	r4, r4, r3
    c98a:	ea4f 2312 	mov.w	r3, r2, lsr #8
    c98e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 16);
    c992:	0c23      	lsrs	r3, r4, #16
    c994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c998:	18e4      	adds	r4, r4, r3
    c99a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c99e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 32);
    c9a2:	18a4      	adds	r4, r4, r2
    c9a4:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c9a8:	08e3      	lsrs	r3, r4, #3
    c9aa:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c9ae:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c9b0:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c9b2:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c9b6:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c9ba:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c9bc:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c9c0:	18e4      	adds	r4, r4, r3
    c9c2:	eb42 0505 	adc.w	r5, r2, r5
    c9c6:	1924      	adds	r4, r4, r4
    c9c8:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c9ca:	1b00      	subs	r0, r0, r4
    c9cc:	eb61 0105 	sbc.w	r1, r1, r5
    c9d0:	0900      	lsrs	r0, r0, #4
    c9d2:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c9d6:	18c0      	adds	r0, r0, r3
    c9d8:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c9dc:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c9e0:	bcf0      	pop	{r4, r5, r6, r7}
    c9e2:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c9e4:	0882      	lsrs	r2, r0, #2
    c9e6:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c9ea:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c9ee:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c9f2:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c9f6:	08d2      	lsrs	r2, r2, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9f8:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c9fa:	eb02 0382 	add.w	r3, r2, r2, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9fe:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
    ca02:	eb02 1010 	add.w	r0, r2, r0, lsr #4
    ca06:	2100      	movs	r1, #0
}
    ca08:	bcf0      	pop	{r4, r5, r6, r7}
    ca0a:	4770      	bx	lr

0000ca0c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca10:	b08b      	sub	sp, #44	; 0x2c
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    ca12:	f10d 0e0c 	add.w	lr, sp, #12
{
    ca16:	9201      	str	r2, [sp, #4]
        tbuf[ix++] = uMod + '0';
    ca18:	f04f 0800 	mov.w	r8, #0
    ca1c:	e049      	b.n	cab2 <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ca1e:	eb16 0309 	adds.w	r3, r6, r9
    ca22:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 4);
    ca26:	091c      	lsrs	r4, r3, #4
    ca28:	ea44 7407 	orr.w	r4, r4, r7, lsl #28
    ca2c:	191b      	adds	r3, r3, r4
    ca2e:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    ca32:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 8);
    ca36:	0a1c      	lsrs	r4, r3, #8
    ca38:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
    ca3c:	191b      	adds	r3, r3, r4
    ca3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
    ca42:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 16);
    ca46:	0c1c      	lsrs	r4, r3, #16
    ca48:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    ca4c:	191b      	adds	r3, r3, r4
    ca4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    ca52:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 32);
    ca56:	19db      	adds	r3, r3, r7
    ca58:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    ca5c:	08db      	lsrs	r3, r3, #3
    ca5e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    ca62:	08d2      	lsrs	r2, r2, #3
        return q64 + ((r64 + 6) >> 4);
    ca64:	1d84      	adds	r4, r0, #6
        r64 = ui64Val - q64*10;
    ca66:	ea4f 0583 	mov.w	r5, r3, lsl #2
    ca6a:	ea4f 0682 	mov.w	r6, r2, lsl #2
    ca6e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
        return q64 + ((r64 + 6) >> 4);
    ca72:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    ca76:	18ed      	adds	r5, r5, r3
    ca78:	eb42 0606 	adc.w	r6, r2, r6
    ca7c:	196d      	adds	r5, r5, r5
    ca7e:	4176      	adcs	r6, r6
        return q64 + ((r64 + 6) >> 4);
    ca80:	1b64      	subs	r4, r4, r5
    ca82:	eb61 0106 	sbc.w	r1, r1, r6
    ca86:	0924      	lsrs	r4, r4, #4
    ca88:	ea44 7401 	orr.w	r4, r4, r1, lsl #28
    ca8c:	18e3      	adds	r3, r4, r3
        uMod = ui64Val - (u64Tmp * 10);
    ca8e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    ca92:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
        tbuf[ix++] = uMod + '0';
    ca96:	f100 0030 	add.w	r0, r0, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    ca9a:	ea4f 1111 	mov.w	r1, r1, lsr #4
        tbuf[ix++] = uMod + '0';
    ca9e:	f88e 0000 	strb.w	r0, [lr]
        return q64 + ((r64 + 6) >> 4);
    caa2:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    caa6:	f108 0401 	add.w	r4, r8, #1
    caaa:	4618      	mov	r0, r3
    caac:	46a0      	mov	r8, r4
    caae:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cab2:	0882      	lsrs	r2, r0, #2
    cab4:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    cab8:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    cabc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    cac0:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    cac4:	08d3      	lsrs	r3, r2, #3
        r32 = ui32Val - q32*10;
    cac6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    caca:	1d82      	adds	r2, r0, #6
    cacc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
    cad0:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    cad4:	2500      	movs	r5, #0
    cad6:	460c      	mov	r4, r1
        uMod = ui64Val - (u64Tmp * 10);
    cad8:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cadc:	0846      	lsrs	r6, r0, #1
    cade:	ea4f 0990 	mov.w	r9, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    cae2:	eba0 0a4b 	sub.w	sl, r0, fp, lsl #1
    if ( ui64Val >> 32 )
    cae6:	432c      	orrs	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cae8:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
    caec:	ea49 7981 	orr.w	r9, r9, r1, lsl #30
    caf0:	ea4f 0751 	mov.w	r7, r1, lsr #1
    caf4:	ea4f 0c91 	mov.w	ip, r1, lsr #2
        q64 += (q64 >> 32);
    caf8:	462a      	mov	r2, r5
        tbuf[ix++] = uMod + '0';
    cafa:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
    if ( ui64Val >> 32 )
    cafe:	d18e      	bne.n	ca1e <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    cb00:	f88e a000 	strb.w	sl, [lr]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cb04:	4618      	mov	r0, r3
    cb06:	2100      	movs	r1, #0
        tbuf[ix++] = uMod + '0';
    cb08:	f108 0401 	add.w	r4, r8, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
    cb0c:	2b00      	cmp	r3, #0
    cb0e:	d1cd      	bne.n	caac <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cb10:	9a01      	ldr	r2, [sp, #4]
    cb12:	b17a      	cbz	r2, cb34 <uint64_to_str+0x128>
    cb14:	ab03      	add	r3, sp, #12
    cb16:	4423      	add	r3, r4
    cb18:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    cb1a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cb1e:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    cb22:	a903      	add	r1, sp, #12
    cb24:	4299      	cmp	r1, r3
    cb26:	d1f8      	bne.n	cb1a <uint64_to_str+0x10e>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cb28:	9b01      	ldr	r3, [sp, #4]
    cb2a:	4443      	add	r3, r8
    cb2c:	4698      	mov	r8, r3
    cb2e:	2300      	movs	r3, #0
    cb30:	f888 3001 	strb.w	r3, [r8, #1]
    }

    return iNumDig;
}
    cb34:	4620      	mov	r0, r4
    cb36:	b00b      	add	sp, #44	; 0x2c
    cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cb3c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    cb3c:	4b01      	ldr	r3, [pc, #4]	; (cb44 <am_util_stdio_printf_init+0x8>)
    cb3e:	6018      	str	r0, [r3, #0]
}
    cb40:	4770      	bx	lr
    cb42:	bf00      	nop
    cb44:	10001414 	.word	0x10001414

0000cb48 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    cb4c:	780b      	ldrb	r3, [r1, #0]
{
    cb4e:	b089      	sub	sp, #36	; 0x24
    cb50:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    cb52:	2b00      	cmp	r3, #0
    cb54:	f000 8092 	beq.w	cc7c <am_util_stdio_vsprintf+0x134>
    cb58:	4693      	mov	fp, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb5a:	f04f 0a00 	mov.w	sl, #0
    cb5e:	e00b      	b.n	cb78 <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cb60:	b11d      	cbz	r5, cb6a <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb62:	2b0a      	cmp	r3, #10
    cb64:	d07e      	beq.n	cc64 <am_util_stdio_vsprintf+0x11c>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    cb66:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    cb6a:	3101      	adds	r1, #1
            ++ui32CharCnt;
    cb6c:	f10a 0a01 	add.w	sl, sl, #1
    while ( *pcFmt != 0x0 )
    cb70:	780b      	ldrb	r3, [r1, #0]
    cb72:	2b00      	cmp	r3, #0
    cb74:	f000 8083 	beq.w	cc7e <am_util_stdio_vsprintf+0x136>
        if ( *pcFmt != '%' )
    cb78:	2b25      	cmp	r3, #37	; 0x25
    cb7a:	d1f1      	bne.n	cb60 <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    cb7c:	784b      	ldrb	r3, [r1, #1]
    cb7e:	2b30      	cmp	r3, #48	; 0x30
    cb80:	f000 8090 	beq.w	cca4 <am_util_stdio_vsprintf+0x15c>
        ++pcFmt;
    cb84:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    cb86:	f04f 0820 	mov.w	r8, #32
    if ( *pcStr == '-')
    cb8a:	2b2d      	cmp	r3, #45	; 0x2d
    cb8c:	d07e      	beq.n	cc8c <am_util_stdio_vsprintf+0x144>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    cb92:	2000      	movs	r0, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb94:	2a09      	cmp	r2, #9
    bool bNeg = false;
    cb96:	4607      	mov	r7, r0
    cb98:	4634      	mov	r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb9a:	f200 8081 	bhi.w	cca0 <am_util_stdio_vsprintf+0x158>
    cb9e:	3001      	adds	r0, #1
    cba0:	1b00      	subs	r0, r0, r4
    cba2:	2100      	movs	r1, #0
        ui32Val *= 10;
    cba4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    cba8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    cbac:	eb04 0c00 	add.w	ip, r4, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cbb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    cbb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cbb8:	2a09      	cmp	r2, #9
        ui32Val += (*pcStr - '0');
    cbba:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cbbe:	d9f1      	bls.n	cba4 <am_util_stdio_vsprintf+0x5c>
    cbc0:	f816 300c 	ldrb.w	r3, [r6, ip]
    cbc4:	eb06 040c 	add.w	r4, r6, ip
    return bNeg ? -ui32Val : ui32Val;
    cbc8:	b107      	cbz	r7, cbcc <am_util_stdio_vsprintf+0x84>
    cbca:	4249      	negs	r1, r1
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cbcc:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cbce:	460a      	mov	r2, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cbd0:	f000 8146 	beq.w	ce60 <am_util_stdio_vsprintf+0x318>
    cbd4:	ea81 79e1 	eor.w	r9, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cbd8:	2b2e      	cmp	r3, #46	; 0x2e
    cbda:	eba9 79e1 	sub.w	r9, r9, r1, asr #31
    cbde:	f000 8116 	beq.w	ce0e <am_util_stdio_vsprintf+0x2c6>
        iPrecision = 6;             // printf() default precision for %f is 6
    cbe2:	2606      	movs	r6, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cbe4:	2b6c      	cmp	r3, #108	; 0x6c
    cbe6:	d104      	bne.n	cbf2 <am_util_stdio_vsprintf+0xaa>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cbe8:	7863      	ldrb	r3, [r4, #1]
    cbea:	2b6c      	cmp	r3, #108	; 0x6c
    cbec:	f000 8186 	beq.w	cefc <am_util_stdio_vsprintf+0x3b4>
            pcFmt++;
    cbf0:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    cbf2:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    cbf6:	2a32      	cmp	r2, #50	; 0x32
    cbf8:	d858      	bhi.n	ccac <am_util_stdio_vsprintf+0x164>
    cbfa:	e8df f012 	tbh	[pc, r2, lsl #1]
    cbfe:	005e      	.short	0x005e
    cc00:	00570057 	.word	0x00570057
    cc04:	00570057 	.word	0x00570057
    cc08:	00570057 	.word	0x00570057
    cc0c:	00570057 	.word	0x00570057
    cc10:	00570057 	.word	0x00570057
    cc14:	00570057 	.word	0x00570057
    cc18:	00570057 	.word	0x00570057
    cc1c:	00570057 	.word	0x00570057
    cc20:	01fe0057 	.word	0x01fe0057
    cc24:	00570057 	.word	0x00570057
    cc28:	00570057 	.word	0x00570057
    cc2c:	00570057 	.word	0x00570057
    cc30:	00570057 	.word	0x00570057
    cc34:	00570057 	.word	0x00570057
    cc38:	009700e9 	.word	0x009700e9
    cc3c:	005e0057 	.word	0x005e0057
    cc40:	00570057 	.word	0x00570057
    cc44:	00570097 	.word	0x00570097
    cc48:	00570057 	.word	0x00570057
    cc4c:	00570057 	.word	0x00570057
    cc50:	00570057 	.word	0x00570057
    cc54:	00570057 	.word	0x00570057
    cc58:	00570130 	.word	0x00570130
    cc5c:	005700f5 	.word	0x005700f5
    cc60:	03330057 	.word	0x03330057
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cc64:	4aa4      	ldr	r2, [pc, #656]	; (cef8 <am_util_stdio_vsprintf+0x3b0>)
    cc66:	7812      	ldrb	r2, [r2, #0]
    cc68:	2a00      	cmp	r2, #0
    cc6a:	f43f af7c 	beq.w	cb66 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    cc6e:	230d      	movs	r3, #13
    cc70:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    cc74:	f10a 0a01 	add.w	sl, sl, #1
    cc78:	780b      	ldrb	r3, [r1, #0]
    cc7a:	e774      	b.n	cb66 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cc7c:	469a      	mov	sl, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    cc7e:	b10d      	cbz	r5, cc84 <am_util_stdio_vsprintf+0x13c>
    {
        *pcBuf = 0x0;
    cc80:	2300      	movs	r3, #0
    cc82:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    cc84:	4650      	mov	r0, sl
    cc86:	b009      	add	sp, #36	; 0x24
    cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pcStr++;
    cc8c:	7873      	ldrb	r3, [r6, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        uCnt++;
    cc92:	2001      	movs	r0, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc94:	2a09      	cmp	r2, #9
        bNeg = true;
    cc96:	4607      	mov	r7, r0
        pcStr++;
    cc98:	eb06 0400 	add.w	r4, r6, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc9c:	f67f af7f 	bls.w	cb9e <am_util_stdio_vsprintf+0x56>
    cca0:	2100      	movs	r1, #0
    cca2:	e791      	b.n	cbc8 <am_util_stdio_vsprintf+0x80>
            ui8PadChar = '0';
    cca4:	4698      	mov	r8, r3
            ++pcFmt;
    cca6:	1c8e      	adds	r6, r1, #2
    cca8:	788b      	ldrb	r3, [r1, #2]
    ccaa:	e76e      	b.n	cb8a <am_util_stdio_vsprintf+0x42>
                if ( pcBuf )
    ccac:	b10d      	cbz	r5, ccb2 <am_util_stdio_vsprintf+0x16a>
                    *pcBuf++ = *pcFmt;
    ccae:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    ccb2:	f10a 0a01 	add.w	sl, sl, #1
        ++pcFmt;
    ccb6:	1c61      	adds	r1, r4, #1
    ccb8:	e75a      	b.n	cb70 <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
    ccba:	2d00      	cmp	r5, #0
    ccbc:	d0fb      	beq.n	ccb6 <am_util_stdio_vsprintf+0x16e>
                    float fValue = va_arg(pArgs, double);
    ccbe:	f10b 0b07 	add.w	fp, fp, #7
    ccc2:	f02b 0b07 	bic.w	fp, fp, #7
    ccc6:	e8fb 0102 	ldrd	r0, r1, [fp], #8
    ccca:	f7ff fbd5 	bl	c478 <__aeabi_d2f>
    ccce:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    ccd2:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    ccd6:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    ccd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    ccdc:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    ccde:	f000 833d 	beq.w	d35c <am_util_stdio_vsprintf+0x814>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cce2:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    cce6:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    ccea:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    ccec:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ccee:	f3c0 0016 	ubfx	r0, r0, #0, #23
    ccf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    ccf6:	f300 8353 	bgt.w	d3a0 <am_util_stdio_vsprintf+0x858>
    else if (iExp2 < -23)
    ccfa:	f112 0f17 	cmn.w	r2, #23
    ccfe:	f2c0 834b 	blt.w	d398 <am_util_stdio_vsprintf+0x850>
    else if (iExp2 >= 23)
    cd02:	2a16      	cmp	r2, #22
    cd04:	f340 8262 	ble.w	d1cc <am_util_stdio_vsprintf+0x684>
        i32IntPart = i32Significand << (iExp2 - 23);
    cd08:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    cd0a:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    cd0c:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    cd10:	f2c0 82bc 	blt.w	d28c <am_util_stdio_vsprintf+0x744>
    cd14:	462b      	mov	r3, r5
    i32FracPart = 0;
    cd16:	2700      	movs	r7, #0
    if (i32IntPart == 0)
    cd18:	2800      	cmp	r0, #0
    cd1a:	f000 82b2 	beq.w	d282 <am_util_stdio_vsprintf+0x73a>
            *pcBuf++ = '-';
    cd1e:	4698      	mov	r8, r3
    cd20:	bfde      	ittt	le
    cd22:	232d      	movle	r3, #45	; 0x2d
    cd24:	f808 3b01 	strble.w	r3, [r8], #1
            uint64_to_str(-i32IntPart, pcBuf);
    cd28:	4240      	negle	r0, r0
    cd2a:	e25e      	b.n	d1ea <am_util_stdio_vsprintf+0x6a2>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cd2c:	f85b 6b04 	ldr.w	r6, [fp], #4
    cd30:	17f7      	asrs	r7, r6, #31
                if ( i64Val < 0 )
    cd32:	2e00      	cmp	r6, #0
    cd34:	f177 0300 	sbcs.w	r3, r7, #0
    cd38:	f2c0 8150 	blt.w	cfdc <am_util_stdio_vsprintf+0x494>
                    ui64Val = i64Val;
    cd3c:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    cd40:	2900      	cmp	r1, #0
    cd42:	d05a      	beq.n	cdfa <am_util_stdio_vsprintf+0x2b2>
    int iNDigits = ui64Val ? 0 : 1;
    cd44:	4633      	mov	r3, r6
    cd46:	4630      	mov	r0, r6
    cd48:	433b      	orrs	r3, r7
    cd4a:	4639      	mov	r1, r7
    cd4c:	bf0c      	ite	eq
    cd4e:	2601      	moveq	r6, #1
    cd50:	2600      	movne	r6, #0
    while ( ui64Val )
    cd52:	ea50 0301 	orrs.w	r3, r0, r1
    cd56:	f000 8336 	beq.w	d3c6 <am_util_stdio_vsprintf+0x87e>
                    bNeg = false;
    cd5a:	2300      	movs	r3, #0
    cd5c:	461f      	mov	r7, r3
    cd5e:	e9dd 0100 	ldrd	r0, r1, [sp]
        ui64Val = divu64_10(ui64Val);
    cd62:	f7ff fdf3 	bl	c94c <divu64_10>
    while ( ui64Val )
    cd66:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cd6a:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cd6e:	d1f8      	bne.n	cd62 <am_util_stdio_vsprintf+0x21a>
                    iWidth -= ndigits_in_i64(ui64Val);
    cd70:	eba9 0906 	sub.w	r9, r9, r6
                    if ( bNeg )
    cd74:	b12f      	cbz	r7, cd82 <am_util_stdio_vsprintf+0x23a>
                        if ( ui8PadChar == '0' )
    cd76:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    cd7a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                        if ( ui8PadChar == '0' )
    cd7e:	f000 8314 	beq.w	d3aa <am_util_stdio_vsprintf+0x862>
    if ( i32NumChars <= 0 )
    cd82:	f1b9 0f00 	cmp.w	r9, #0
    cd86:	f340 8305 	ble.w	d394 <am_util_stdio_vsprintf+0x84c>
    while ( i32NumChars-- )
    cd8a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    int32_t i32Cnt = 0;
    cd8e:	2100      	movs	r1, #0
    cd90:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    cd92:	4632      	mov	r2, r6
        if ( pcBuf )
    cd94:	2e00      	cmp	r6, #0
    cd96:	f000 829a 	beq.w	d2ce <am_util_stdio_vsprintf+0x786>
            *pcBuf++ = cPadChar;
    cd9a:	f802 8b01 	strb.w	r8, [r2], #1
    cd9e:	4618      	mov	r0, r3
    cda0:	4616      	mov	r6, r2
        i32Cnt++;
    cda2:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cda4:	1e43      	subs	r3, r0, #1
    cda6:	2800      	cmp	r0, #0
    cda8:	d1f3      	bne.n	cd92 <am_util_stdio_vsprintf+0x24a>
    cdaa:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    cdac:	2d00      	cmp	r5, #0
    cdae:	f000 82dd 	beq.w	d36c <am_util_stdio_vsprintf+0x824>
    cdb2:	440d      	add	r5, r1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cdb4:	b11f      	cbz	r7, cdbe <am_util_stdio_vsprintf+0x276>
    cdb6:	f1b8 0f20 	cmp.w	r8, #32
    cdba:	f000 8118 	beq.w	cfee <am_util_stdio_vsprintf+0x4a6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdbe:	e9dd 0100 	ldrd	r0, r1, [sp]
    cdc2:	462a      	mov	r2, r5
    cdc4:	f7ff fe22 	bl	ca0c <uint64_to_str>
                    pcBuf += iVal;
    cdc8:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    cdca:	4482      	add	sl, r0
        ++pcFmt;
    cdcc:	1c61      	adds	r1, r4, #1
    cdce:	e6cf      	b.n	cb70 <am_util_stdio_vsprintf+0x28>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cdd0:	f10b 0304 	add.w	r3, fp, #4
                if ( pcBuf )
    cdd4:	b11d      	cbz	r5, cdde <am_util_stdio_vsprintf+0x296>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cdd6:	f8db 2000 	ldr.w	r2, [fp]
    cdda:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    cdde:	f10a 0a01 	add.w	sl, sl, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cde2:	469b      	mov	fp, r3
        ++pcFmt;
    cde4:	1c61      	adds	r1, r4, #1
    cde6:	e6c3      	b.n	cb70 <am_util_stdio_vsprintf+0x28>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cde8:	f85b 6b04 	ldr.w	r6, [fp], #4
    cdec:	2300      	movs	r3, #0
    cdee:	4632      	mov	r2, r6
    cdf0:	e9cd 2300 	strd	r2, r3, [sp]
                if ( iWidth )
    cdf4:	2900      	cmp	r1, #0
    cdf6:	f040 81b4 	bne.w	d162 <am_util_stdio_vsprintf+0x61a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdfa:	e9dd 0100 	ldrd	r0, r1, [sp]
    cdfe:	462a      	mov	r2, r5
    ce00:	f7ff fe04 	bl	ca0c <uint64_to_str>
                if ( pcBuf )
    ce04:	2d00      	cmp	r5, #0
    ce06:	d1df      	bne.n	cdc8 <am_util_stdio_vsprintf+0x280>
                if ( pcBuf )
    ce08:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    ce0a:	4482      	add	sl, r0
                break;
    ce0c:	e7de      	b.n	cdcc <am_util_stdio_vsprintf+0x284>
    if ( *pcStr == '-')
    ce0e:	7862      	ldrb	r2, [r4, #1]
    ce10:	2a2d      	cmp	r2, #45	; 0x2d
            ++pcFmt;
    ce12:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    ce16:	f000 8197 	beq.w	d148 <am_util_stdio_vsprintf+0x600>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    ce1e:	2b09      	cmp	r3, #9
    ce20:	f200 82af 	bhi.w	d382 <am_util_stdio_vsprintf+0x83a>
    uint32_t ui32Val = 0, uCnt = 0;
    ce24:	2300      	movs	r3, #0
    bool bNeg = false;
    ce26:	469e      	mov	lr, r3
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce28:	4664      	mov	r4, ip
    ce2a:	3301      	adds	r3, #1
    ce2c:	1b1e      	subs	r6, r3, r4
    bool bNeg = false;
    ce2e:	2300      	movs	r3, #0
        ui32Val *= 10;
    ce30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    ce34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ce38:	19a7      	adds	r7, r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce3a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    ce3e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    ce42:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    ce44:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce48:	d9f2      	bls.n	ce30 <am_util_stdio_vsprintf+0x2e8>
    return bNeg ? -ui32Val : ui32Val;
    ce4a:	f1be 0f00 	cmp.w	lr, #0
    ce4e:	d000      	beq.n	ce52 <am_util_stdio_vsprintf+0x30a>
    ce50:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce52:	461e      	mov	r6, r3
            pcFmt += ui32NumChars;
    ce54:	eb0c 0407 	add.w	r4, ip, r7
    ce58:	f81c 3007 	ldrb.w	r3, [ip, r7]
    ce5c:	e6c2      	b.n	cbe4 <am_util_stdio_vsprintf+0x9c>
        switch ( *pcFmt )
    ce5e:	464a      	mov	r2, r9
                pcStr = va_arg(pArgs, char *);
    ce60:	f85b 3b04 	ldr.w	r3, [fp], #4
    if ( !pcBuf )
    ce64:	2b00      	cmp	r3, #0
    ce66:	f000 81e0 	beq.w	d22a <am_util_stdio_vsprintf+0x6e2>
    while ( *pcBuf++ )
    ce6a:	461e      	mov	r6, r3
    ce6c:	f816 1b01 	ldrb.w	r1, [r6], #1
    ce70:	2900      	cmp	r1, #0
    ce72:	f000 8289 	beq.w	d388 <am_util_stdio_vsprintf+0x840>
    uint32_t ui32RetVal = 0;
    ce76:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    ce78:	f816 0b01 	ldrb.w	r0, [r6], #1
        ui32RetVal++;
    ce7c:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    ce7e:	2800      	cmp	r0, #0
    ce80:	d1fa      	bne.n	ce78 <am_util_stdio_vsprintf+0x330>
                if ( iWidth > 0 )
    ce82:	2a00      	cmp	r2, #0
    ce84:	dd02      	ble.n	ce8c <am_util_stdio_vsprintf+0x344>
                    if ( ui32strlen < iWidth )
    ce86:	42ba      	cmp	r2, r7
    ce88:	f200 81ee 	bhi.w	d268 <am_util_stdio_vsprintf+0x720>
    ce8c:	f1c3 0c01 	rsb	ip, r3, #1
                while (*pcStr != 0x0)
    ce90:	46d6      	mov	lr, sl
    ce92:	4628      	mov	r0, r5
    ce94:	eb0c 060a 	add.w	r6, ip, sl
    ce98:	e000      	b.n	ce9c <am_util_stdio_vsprintf+0x354>
                        *pcBuf++ = *pcStr;
    ce9a:	4628      	mov	r0, r5
    ce9c:	eb06 0a03 	add.w	sl, r6, r3
                    if ( pcBuf )
    cea0:	2d00      	cmp	r5, #0
    cea2:	f000 8102 	beq.w	d0aa <am_util_stdio_vsprintf+0x562>
                        *pcBuf++ = *pcStr;
    cea6:	7001      	strb	r1, [r0, #0]
                while (*pcStr != 0x0)
    cea8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    ceac:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    ceae:	2900      	cmp	r1, #0
    ceb0:	d1f3      	bne.n	ce9a <am_util_stdio_vsprintf+0x352>
                if ( iWidth )
    ceb2:	2a00      	cmp	r2, #0
    ceb4:	f43f aeff 	beq.w	ccb6 <am_util_stdio_vsprintf+0x16e>
                    iWidth = -iWidth;
    ceb8:	f1c2 0900 	rsb	r9, r2, #0
                    if ( ui32strlen < iWidth )
    cebc:	45b9      	cmp	r9, r7
    cebe:	f67f aefa 	bls.w	ccb6 <am_util_stdio_vsprintf+0x16e>
                        iWidth -= ui32strlen;
    cec2:	eba9 0307 	sub.w	r3, r9, r7
    if ( i32NumChars <= 0 )
    cec6:	2b00      	cmp	r3, #0
    cec8:	f340 8268 	ble.w	d39c <am_util_stdio_vsprintf+0x854>
    while ( i32NumChars-- )
    cecc:	3b01      	subs	r3, #1
    cece:	462e      	mov	r6, r5
    int32_t i32Cnt = 0;
    ced0:	2100      	movs	r1, #0
            *pcBuf++ = cPadChar;
    ced2:	4632      	mov	r2, r6
        if ( pcBuf )
    ced4:	2e00      	cmp	r6, #0
    ced6:	f000 8130 	beq.w	d13a <am_util_stdio_vsprintf+0x5f2>
            *pcBuf++ = cPadChar;
    ceda:	f802 8b01 	strb.w	r8, [r2], #1
    cede:	4618      	mov	r0, r3
    cee0:	4616      	mov	r6, r2
        i32Cnt++;
    cee2:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cee4:	1e43      	subs	r3, r0, #1
    cee6:	2800      	cmp	r0, #0
    cee8:	d1f3      	bne.n	ced2 <am_util_stdio_vsprintf+0x38a>
    ceea:	448a      	add	sl, r1
                        pcBuf += pcBuf ? iWidth : 0;
    ceec:	2d00      	cmp	r5, #0
    ceee:	f43f aee2 	beq.w	ccb6 <am_util_stdio_vsprintf+0x16e>
    cef2:	440d      	add	r5, r1
                        iWidth = 0;
    cef4:	e6df      	b.n	ccb6 <am_util_stdio_vsprintf+0x16e>
    cef6:	bf00      	nop
    cef8:	10001064 	.word	0x10001064
        switch ( *pcFmt )
    cefc:	78a3      	ldrb	r3, [r4, #2]
    cefe:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
                pcFmt++;
    cf02:	3402      	adds	r4, #2
        switch ( *pcFmt )
    cf04:	2a32      	cmp	r2, #50	; 0x32
    cf06:	f63f aed1 	bhi.w	ccac <am_util_stdio_vsprintf+0x164>
    cf0a:	a001      	add	r0, pc, #4	; (adr r0, cf10 <am_util_stdio_vsprintf+0x3c8>)
    cf0c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    cf10:	0000ccbb 	.word	0x0000ccbb
    cf14:	0000ccad 	.word	0x0000ccad
    cf18:	0000ccad 	.word	0x0000ccad
    cf1c:	0000ccad 	.word	0x0000ccad
    cf20:	0000ccad 	.word	0x0000ccad
    cf24:	0000ccad 	.word	0x0000ccad
    cf28:	0000ccad 	.word	0x0000ccad
    cf2c:	0000ccad 	.word	0x0000ccad
    cf30:	0000ccad 	.word	0x0000ccad
    cf34:	0000ccad 	.word	0x0000ccad
    cf38:	0000ccad 	.word	0x0000ccad
    cf3c:	0000ccad 	.word	0x0000ccad
    cf40:	0000ccad 	.word	0x0000ccad
    cf44:	0000ccad 	.word	0x0000ccad
    cf48:	0000ccad 	.word	0x0000ccad
    cf4c:	0000ccad 	.word	0x0000ccad
    cf50:	0000ccad 	.word	0x0000ccad
    cf54:	0000ccad 	.word	0x0000ccad
    cf58:	0000d2ad 	.word	0x0000d2ad
    cf5c:	0000ccad 	.word	0x0000ccad
    cf60:	0000ccad 	.word	0x0000ccad
    cf64:	0000ccad 	.word	0x0000ccad
    cf68:	0000ccad 	.word	0x0000ccad
    cf6c:	0000ccad 	.word	0x0000ccad
    cf70:	0000ccad 	.word	0x0000ccad
    cf74:	0000ccad 	.word	0x0000ccad
    cf78:	0000ccad 	.word	0x0000ccad
    cf7c:	0000ccad 	.word	0x0000ccad
    cf80:	0000ccad 	.word	0x0000ccad
    cf84:	0000cdd1 	.word	0x0000cdd1
    cf88:	0000d027 	.word	0x0000d027
    cf8c:	0000ccad 	.word	0x0000ccad
    cf90:	0000ccbb 	.word	0x0000ccbb
    cf94:	0000ccad 	.word	0x0000ccad
    cf98:	0000ccad 	.word	0x0000ccad
    cf9c:	0000d027 	.word	0x0000d027
    cfa0:	0000ccad 	.word	0x0000ccad
    cfa4:	0000ccad 	.word	0x0000ccad
    cfa8:	0000ccad 	.word	0x0000ccad
    cfac:	0000ccad 	.word	0x0000ccad
    cfb0:	0000ccad 	.word	0x0000ccad
    cfb4:	0000ccad 	.word	0x0000ccad
    cfb8:	0000ccad 	.word	0x0000ccad
    cfbc:	0000ccad 	.word	0x0000ccad
    cfc0:	0000ccad 	.word	0x0000ccad
    cfc4:	0000ce5f 	.word	0x0000ce5f
    cfc8:	0000ccad 	.word	0x0000ccad
    cfcc:	0000d035 	.word	0x0000d035
    cfd0:	0000ccad 	.word	0x0000ccad
    cfd4:	0000ccad 	.word	0x0000ccad
    cfd8:	0000d2bd 	.word	0x0000d2bd
                    ui64Val = -i64Val;          // Get absolute value
    cfdc:	4276      	negs	r6, r6
    cfde:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    cfe2:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    cfe6:	2900      	cmp	r1, #0
    cfe8:	f040 81bc 	bne.w	d364 <am_util_stdio_vsprintf+0x81c>
                        if ( pcBuf )
    cfec:	b115      	cbz	r5, cff4 <am_util_stdio_vsprintf+0x4ac>
                            *pcBuf++ = '-';
    cfee:	232d      	movs	r3, #45	; 0x2d
    cff0:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    cff4:	f10a 0a01 	add.w	sl, sl, #1
    cff8:	e6ff      	b.n	cdfa <am_util_stdio_vsprintf+0x2b2>
        bLower = bLongLong = false;
    cffa:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cffc:	f85b 2b04 	ldr.w	r2, [fp], #4
    d000:	2300      	movs	r3, #0
                if ( iWidth )
    d002:	2900      	cmp	r1, #0
    d004:	d15d      	bne.n	d0c2 <am_util_stdio_vsprintf+0x57a>
    if ( ui64Val == 0 )
    d006:	ea52 0103 	orrs.w	r1, r2, r3
    d00a:	d120      	bne.n	d04e <am_util_stdio_vsprintf+0x506>
    if (pcBuf)
    d00c:	2d00      	cmp	r5, #0
    d00e:	f000 80a6 	beq.w	d15e <am_util_stdio_vsprintf+0x616>
            *pcBuf++ = tbuf[ix];
    d012:	462b      	mov	r3, r5
    d014:	2230      	movs	r2, #48	; 0x30
    d016:	f803 2b01 	strb.w	r2, [r3], #1
    d01a:	2001      	movs	r0, #1
    d01c:	461d      	mov	r5, r3
        *pcBuf = 0;
    d01e:	2200      	movs	r2, #0
    d020:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    d022:	4482      	add	sl, r0
                break;
    d024:	e6d2      	b.n	cdcc <am_util_stdio_vsprintf+0x284>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d026:	f10b 0b07 	add.w	fp, fp, #7
    d02a:	f02b 0b07 	bic.w	fp, fp, #7
    d02e:	e8fb 6702 	ldrd	r6, r7, [fp], #8
    d032:	e67e      	b.n	cd32 <am_util_stdio_vsprintf+0x1ea>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d034:	f10b 0b07 	add.w	fp, fp, #7
    d038:	f02b 0b07 	bic.w	fp, fp, #7
    d03c:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    d040:	e9cd 2300 	strd	r2, r3, [sp]
    d044:	e6d6      	b.n	cdf4 <am_util_stdio_vsprintf+0x2ac>
    if ( ui64Val == 0 )
    d046:	ea52 0103 	orrs.w	r1, r2, r3
    d04a:	f000 8088 	beq.w	d15e <am_util_stdio_vsprintf+0x616>
    d04e:	2f00      	cmp	r7, #0
    d050:	f10d 0c0c 	add.w	ip, sp, #12
    d054:	bf14      	ite	ne
    d056:	f04f 0e27 	movne.w	lr, #39	; 0x27
    d05a:	f04f 0e07 	moveq.w	lr, #7
    d05e:	4667      	mov	r7, ip
    int iNumDig, ix = 0;
    d060:	2000      	movs	r0, #0
        cCh = ui64Val & 0xf;
    d062:	f002 010f 	and.w	r1, r2, #15
        if ( cCh > 9 )
    d066:	2909      	cmp	r1, #9
        ui64Val >>= 4;
    d068:	ea4f 1612 	mov.w	r6, r2, lsr #4
    d06c:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
            cCh += bLower ? 0x27 : 0x7;
    d070:	bf88      	it	hi
    d072:	4471      	addhi	r1, lr
        ui64Val >>= 4;
    d074:	ea4f 1813 	mov.w	r8, r3, lsr #4
        tbuf[ix++] = cCh + '0';
    d078:	3130      	adds	r1, #48	; 0x30
        ui64Val >>= 4;
    d07a:	4632      	mov	r2, r6
    d07c:	4643      	mov	r3, r8
        tbuf[ix++] = cCh + '0';
    d07e:	f807 1b01 	strb.w	r1, [r7], #1
    while ( ui64Val )
    d082:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    d086:	f100 0001 	add.w	r0, r0, #1
    while ( ui64Val )
    d08a:	d1ea      	bne.n	d062 <am_util_stdio_vsprintf+0x51a>
    if (pcBuf)
    d08c:	2d00      	cmp	r5, #0
    d08e:	f43f aebb 	beq.w	ce08 <am_util_stdio_vsprintf+0x2c0>
    d092:	eb0c 0300 	add.w	r3, ip, r0
    d096:	1e6a      	subs	r2, r5, #1
            *pcBuf++ = tbuf[ix];
    d098:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    d09c:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    d0a0:	4563      	cmp	r3, ip
    d0a2:	d1f9      	bne.n	d098 <am_util_stdio_vsprintf+0x550>
    d0a4:	182b      	adds	r3, r5, r0
    d0a6:	461d      	mov	r5, r3
    d0a8:	e7b9      	b.n	d01e <am_util_stdio_vsprintf+0x4d6>
    d0aa:	eb0c 010e 	add.w	r1, ip, lr
                    ++ui32CharCnt;
    d0ae:	eb01 0a03 	add.w	sl, r1, r3
                while (*pcStr != 0x0)
    d0b2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d1f9      	bne.n	d0ae <am_util_stdio_vsprintf+0x566>
                if ( iWidth )
    d0ba:	2a00      	cmp	r2, #0
    d0bc:	f43f adfb 	beq.w	ccb6 <am_util_stdio_vsprintf+0x16e>
    d0c0:	e6fa      	b.n	ceb8 <am_util_stdio_vsprintf+0x370>
    int iDigits = ui64Val ? 0 : 1;
    d0c2:	ea52 0103 	orrs.w	r1, r2, r3
    d0c6:	bf0c      	ite	eq
    d0c8:	2601      	moveq	r6, #1
    d0ca:	2600      	movne	r6, #0
    while ( ui64Val )
    d0cc:	ea52 0103 	orrs.w	r1, r2, r3
    d0d0:	d00e      	beq.n	d0f0 <am_util_stdio_vsprintf+0x5a8>
    d0d2:	4610      	mov	r0, r2
    d0d4:	4619      	mov	r1, r3
        ui64Val >>= 4;
    d0d6:	ea4f 1c10 	mov.w	ip, r0, lsr #4
    d0da:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
    d0de:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    d0e2:	4660      	mov	r0, ip
    d0e4:	4671      	mov	r1, lr
    while ( ui64Val )
    d0e6:	ea50 0c01 	orrs.w	ip, r0, r1
        ++iDigits;
    d0ea:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    d0ee:	d1f2      	bne.n	d0d6 <am_util_stdio_vsprintf+0x58e>
                    iWidth -= ndigits_in_hex(ui64Val);
    d0f0:	eba9 0106 	sub.w	r1, r9, r6
    if ( i32NumChars <= 0 )
    d0f4:	2900      	cmp	r1, #0
    d0f6:	f340 812f 	ble.w	d358 <am_util_stdio_vsprintf+0x810>
    while ( i32NumChars-- )
    d0fa:	3901      	subs	r1, #1
    d0fc:	46ae      	mov	lr, r5
    int32_t i32Cnt = 0;
    d0fe:	46a4      	mov	ip, r4
    d100:	2600      	movs	r6, #0
    d102:	462c      	mov	r4, r5
    d104:	460d      	mov	r5, r1
            *pcBuf++ = cPadChar;
    d106:	4620      	mov	r0, r4
        if ( pcBuf )
    d108:	b194      	cbz	r4, d130 <am_util_stdio_vsprintf+0x5e8>
            *pcBuf++ = cPadChar;
    d10a:	f800 8b01 	strb.w	r8, [r0], #1
    d10e:	4629      	mov	r1, r5
    d110:	4604      	mov	r4, r0
        i32Cnt++;
    d112:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    d114:	1e4d      	subs	r5, r1, #1
    d116:	2900      	cmp	r1, #0
    d118:	d1f5      	bne.n	d106 <am_util_stdio_vsprintf+0x5be>
    d11a:	4664      	mov	r4, ip
    d11c:	4675      	mov	r5, lr
    d11e:	44b2      	add	sl, r6
                    pcBuf += pcBuf ? iWidth : 0;
    d120:	2d00      	cmp	r5, #0
    d122:	d090      	beq.n	d046 <am_util_stdio_vsprintf+0x4fe>
    if ( ui64Val == 0 )
    d124:	ea52 0103 	orrs.w	r1, r2, r3
    d128:	4435      	add	r5, r6
    d12a:	f43f af72 	beq.w	d012 <am_util_stdio_vsprintf+0x4ca>
    d12e:	e78e      	b.n	d04e <am_util_stdio_vsprintf+0x506>
        i32Cnt++;
    d130:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    d132:	1e69      	subs	r1, r5, #1
    d134:	2d00      	cmp	r5, #0
    d136:	d1ec      	bne.n	d112 <am_util_stdio_vsprintf+0x5ca>
    d138:	e7ef      	b.n	d11a <am_util_stdio_vsprintf+0x5d2>
        i32Cnt++;
    d13a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d13c:	1e58      	subs	r0, r3, #1
    d13e:	2b00      	cmp	r3, #0
    d140:	f47f aecf 	bne.w	cee2 <am_util_stdio_vsprintf+0x39a>
    d144:	448a      	add	sl, r1
    d146:	e6d1      	b.n	ceec <am_util_stdio_vsprintf+0x3a4>
        pcStr++;
    d148:	78a2      	ldrb	r2, [r4, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d14a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    d14e:	2b09      	cmp	r3, #9
        pcStr++;
    d150:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d154:	f200 8126 	bhi.w	d3a4 <am_util_stdio_vsprintf+0x85c>
        uCnt++;
    d158:	2301      	movs	r3, #1
        bNeg = true;
    d15a:	469e      	mov	lr, r3
    d15c:	e665      	b.n	ce2a <am_util_stdio_vsprintf+0x2e2>
    if ( ui64Val == 0 )
    d15e:	2001      	movs	r0, #1
    d160:	e652      	b.n	ce08 <am_util_stdio_vsprintf+0x2c0>
    int iNDigits = ui64Val ? 0 : 1;
    d162:	e9dd 0100 	ldrd	r0, r1, [sp]
    d166:	4603      	mov	r3, r0
    d168:	430b      	orrs	r3, r1
    d16a:	bf0c      	ite	eq
    d16c:	2601      	moveq	r6, #1
    d16e:	2600      	movne	r6, #0
    while ( ui64Val )
    d170:	ea50 0301 	orrs.w	r3, r0, r1
    d174:	d006      	beq.n	d184 <am_util_stdio_vsprintf+0x63c>
        ui64Val = divu64_10(ui64Val);
    d176:	f7ff fbe9 	bl	c94c <divu64_10>
    while ( ui64Val )
    d17a:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    d17e:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    d182:	d1f8      	bne.n	d176 <am_util_stdio_vsprintf+0x62e>
                    iWidth -= ndigits_in_u64(ui64Val);
    d184:	eba9 0306 	sub.w	r3, r9, r6
    if ( i32NumChars <= 0 )
    d188:	2b00      	cmp	r3, #0
    d18a:	f340 8101 	ble.w	d390 <am_util_stdio_vsprintf+0x848>
    while ( i32NumChars-- )
    d18e:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d190:	2100      	movs	r1, #0
    d192:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    d194:	4632      	mov	r2, r6
        if ( pcBuf )
    d196:	b19e      	cbz	r6, d1c0 <am_util_stdio_vsprintf+0x678>
            *pcBuf++ = cPadChar;
    d198:	f802 8b01 	strb.w	r8, [r2], #1
    d19c:	4618      	mov	r0, r3
    d19e:	4616      	mov	r6, r2
        i32Cnt++;
    d1a0:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d1a2:	1e43      	subs	r3, r0, #1
    d1a4:	2800      	cmp	r0, #0
    d1a6:	d1f5      	bne.n	d194 <am_util_stdio_vsprintf+0x64c>
    d1a8:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    d1aa:	2d00      	cmp	r5, #0
    d1ac:	f000 80e3 	beq.w	d376 <am_util_stdio_vsprintf+0x82e>
    d1b0:	440d      	add	r5, r1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d1b2:	462a      	mov	r2, r5
    d1b4:	e9dd 0100 	ldrd	r0, r1, [sp]
    d1b8:	f7ff fc28 	bl	ca0c <uint64_to_str>
                    pcBuf += iVal;
    d1bc:	4405      	add	r5, r0
    d1be:	e604      	b.n	cdca <am_util_stdio_vsprintf+0x282>
        i32Cnt++;
    d1c0:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d1c2:	1e58      	subs	r0, r3, #1
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d1eb      	bne.n	d1a0 <am_util_stdio_vsprintf+0x658>
    d1c8:	448a      	add	sl, r1
    d1ca:	e7ee      	b.n	d1aa <am_util_stdio_vsprintf+0x662>
    else if (iExp2 >= 0)
    d1cc:	2a00      	cmp	r2, #0
    d1ce:	db4f      	blt.n	d270 <am_util_stdio_vsprintf+0x728>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d1d0:	f1a1 077e 	sub.w	r7, r1, #126	; 0x7e
    d1d4:	fa00 f707 	lsl.w	r7, r0, r7
        i32IntPart = i32Significand >> (23 - iExp2);
    d1d8:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d1dc:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d1de:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d1e2:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d1e6:	db52      	blt.n	d28e <am_util_stdio_vsprintf+0x746>
    d1e8:	46a8      	mov	r8, r5
            uint64_to_str(-i32IntPart, pcBuf);
    d1ea:	4642      	mov	r2, r8
    d1ec:	17c1      	asrs	r1, r0, #31
    d1ee:	f7ff fc0d 	bl	ca0c <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d1f2:	f898 3000 	ldrb.w	r3, [r8]
    d1f6:	b11b      	cbz	r3, d200 <am_util_stdio_vsprintf+0x6b8>
    d1f8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	d1fb      	bne.n	d1f8 <am_util_stdio_vsprintf+0x6b0>
    *pcBuf++ = '.';
    d200:	232e      	movs	r3, #46	; 0x2e
    d202:	f888 3000 	strb.w	r3, [r8]
    if (i32FracPart == 0)
    d206:	2f00      	cmp	r7, #0
    d208:	d168      	bne.n	d2dc <am_util_stdio_vsprintf+0x794>
        *pcBuf++ = '0';
    d20a:	f108 0102 	add.w	r1, r8, #2
    d20e:	2330      	movs	r3, #48	; 0x30
    d210:	1b4a      	subs	r2, r1, r5
    d212:	f888 3001 	strb.w	r3, [r8, #1]
    *pcBuf = 0x00;
    d216:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    d218:	429a      	cmp	r2, r3
    *pcBuf = 0x00;
    d21a:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    d21c:	f2c0 8094 	blt.w	d348 <am_util_stdio_vsprintf+0x800>
    d220:	4613      	mov	r3, r2
                    ui32CharCnt += iVal;
    d222:	449a      	add	sl, r3
                    pcBuf += iVal;
    d224:	441d      	add	r5, r3
        ++pcFmt;
    d226:	1c61      	adds	r1, r4, #1
    d228:	e4a2      	b.n	cb70 <am_util_stdio_vsprintf+0x28>
                if ( iWidth > 0 )
    d22a:	2a00      	cmp	r2, #0
    d22c:	dd34      	ble.n	d298 <am_util_stdio_vsprintf+0x750>
        return ui32RetVal;
    d22e:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    d230:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    int32_t i32Cnt = 0;
    d234:	2100      	movs	r1, #0
    while ( i32NumChars-- )
    d236:	462a      	mov	r2, r5
            *pcBuf++ = cPadChar;
    d238:	4610      	mov	r0, r2
        if ( pcBuf )
    d23a:	2a00      	cmp	r2, #0
    d23c:	d040      	beq.n	d2c0 <am_util_stdio_vsprintf+0x778>
            *pcBuf++ = cPadChar;
    d23e:	f800 8b01 	strb.w	r8, [r0], #1
    d242:	464e      	mov	r6, r9
    d244:	4602      	mov	r2, r0
        i32Cnt++;
    d246:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d248:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    d24c:	2e00      	cmp	r6, #0
    d24e:	d1f3      	bne.n	d238 <am_util_stdio_vsprintf+0x6f0>
    d250:	4608      	mov	r0, r1
    d252:	448a      	add	sl, r1
    d254:	7819      	ldrb	r1, [r3, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    d256:	b105      	cbz	r5, d25a <am_util_stdio_vsprintf+0x712>
    d258:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    d25a:	2900      	cmp	r1, #0
    d25c:	f43f ad2b 	beq.w	ccb6 <am_util_stdio_vsprintf+0x16e>
                        iWidth = 0;
    d260:	2200      	movs	r2, #0
    d262:	e613      	b.n	ce8c <am_util_stdio_vsprintf+0x344>
        bLower = bLongLong = false;
    d264:	2701      	movs	r7, #1
    d266:	e6c9      	b.n	cffc <am_util_stdio_vsprintf+0x4b4>
    d268:	1bd2      	subs	r2, r2, r7
    if ( i32NumChars <= 0 )
    d26a:	2a00      	cmp	r2, #0
    d26c:	ddf3      	ble.n	d256 <am_util_stdio_vsprintf+0x70e>
    d26e:	e7df      	b.n	d230 <am_util_stdio_vsprintf+0x6e8>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d270:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d272:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d274:	fa40 f702 	asr.w	r7, r0, r2
        *pcBuf++ = '-';
    d278:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    d27a:	da02      	bge.n	d282 <am_util_stdio_vsprintf+0x73a>
        *pcBuf++ = '-';
    d27c:	222d      	movs	r2, #45	; 0x2d
    d27e:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    d282:	4698      	mov	r8, r3
    d284:	2330      	movs	r3, #48	; 0x30
    d286:	f808 3b01 	strb.w	r3, [r8], #1
    d28a:	e7b9      	b.n	d200 <am_util_stdio_vsprintf+0x6b8>
    i32FracPart = 0;
    d28c:	2700      	movs	r7, #0
        *pcBuf++ = '-';
    d28e:	462b      	mov	r3, r5
    d290:	222d      	movs	r2, #45	; 0x2d
    d292:	f803 2b01 	strb.w	r2, [r3], #1
    d296:	e53f      	b.n	cd18 <am_util_stdio_vsprintf+0x1d0>
    d298:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    d29a:	461f      	mov	r7, r3
    d29c:	2900      	cmp	r1, #0
    d29e:	f47f adf5 	bne.w	ce8c <am_util_stdio_vsprintf+0x344>
    d2a2:	460f      	mov	r7, r1
                if ( iWidth )
    d2a4:	2a00      	cmp	r2, #0
    d2a6:	f43f ad06 	beq.w	ccb6 <am_util_stdio_vsprintf+0x16e>
    d2aa:	e605      	b.n	ceb8 <am_util_stdio_vsprintf+0x370>
        bLower = bLongLong = false;
    d2ac:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d2ae:	f10b 0b07 	add.w	fp, fp, #7
    d2b2:	f02b 0b07 	bic.w	fp, fp, #7
    d2b6:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    d2ba:	e6a2      	b.n	d002 <am_util_stdio_vsprintf+0x4ba>
        switch ( *pcFmt )
    d2bc:	2701      	movs	r7, #1
    d2be:	e7f6      	b.n	d2ae <am_util_stdio_vsprintf+0x766>
        i32Cnt++;
    d2c0:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d2c2:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
    d2c6:	f1b9 0f00 	cmp.w	r9, #0
    d2ca:	d1bc      	bne.n	d246 <am_util_stdio_vsprintf+0x6fe>
    d2cc:	e7c0      	b.n	d250 <am_util_stdio_vsprintf+0x708>
        i32Cnt++;
    d2ce:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d2d0:	1e58      	subs	r0, r3, #1
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	f47f ad65 	bne.w	cda2 <am_util_stdio_vsprintf+0x25a>
    d2d8:	448a      	add	sl, r1
    d2da:	e567      	b.n	cdac <am_util_stdio_vsprintf+0x264>
    *pcBuf++ = '.';
    d2dc:	f108 0101 	add.w	r1, r8, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d2e0:	1b4a      	subs	r2, r1, r5
    d2e2:	f1c2 0313 	rsb	r3, r2, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d2e6:	42b3      	cmp	r3, r6
    d2e8:	bfa8      	it	ge
    d2ea:	4633      	movge	r3, r6
        for (jx = 0; jx < iMax; jx++)
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	dd10      	ble.n	d312 <am_util_stdio_vsprintf+0x7ca>
    d2f0:	1c5e      	adds	r6, r3, #1
    d2f2:	4446      	add	r6, r8
    *pcBuf++ = '.';
    d2f4:	4608      	mov	r0, r1
            i32FracPart *= 10;
    d2f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d2fa:	15fa      	asrs	r2, r7, #23
    d2fc:	3230      	adds	r2, #48	; 0x30
    d2fe:	f800 2b01 	strb.w	r2, [r0], #1
            i32FracPart *= 10;
    d302:	007f      	lsls	r7, r7, #1
        for (jx = 0; jx < iMax; jx++)
    d304:	4286      	cmp	r6, r0
            i32FracPart &= 0x00FFFFFF;
    d306:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d30a:	d1f4      	bne.n	d2f6 <am_util_stdio_vsprintf+0x7ae>
    d30c:	4419      	add	r1, r3
    d30e:	4498      	add	r8, r3
    d310:	1b4a      	subs	r2, r1, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d312:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d316:	f347 53c7 	sbfx	r3, r7, #23, #8
    d31a:	2b04      	cmp	r3, #4
    d31c:	f77f af7b 	ble.w	d216 <am_util_stdio_vsprintf+0x6ce>
            while ( pcBuftmp >= pcBufInitial )
    d320:	45a8      	cmp	r8, r5
    d322:	f4ff af78 	bcc.w	d216 <am_util_stdio_vsprintf+0x6ce>
    d326:	4643      	mov	r3, r8
                    *pcBuftmp = '0';
    d328:	2730      	movs	r7, #48	; 0x30
    d32a:	e003      	b.n	d334 <am_util_stdio_vsprintf+0x7ec>
    d32c:	705f      	strb	r7, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d32e:	429d      	cmp	r5, r3
    d330:	f63f af71 	bhi.w	d216 <am_util_stdio_vsprintf+0x6ce>
                    *pcBuftmp = '0';
    d334:	461e      	mov	r6, r3
                if ( *pcBuftmp == '.' )
    d336:	f813 0901 	ldrb.w	r0, [r3], #-1
    d33a:	282e      	cmp	r0, #46	; 0x2e
    d33c:	d0f7      	beq.n	d32e <am_util_stdio_vsprintf+0x7e6>
                else if ( *pcBuftmp == '9' )
    d33e:	2839      	cmp	r0, #57	; 0x39
    d340:	d0f4      	beq.n	d32c <am_util_stdio_vsprintf+0x7e4>
                    *pcBuftmp += 1;
    d342:	3001      	adds	r0, #1
    d344:	7030      	strb	r0, [r6, #0]
                    break;
    d346:	e766      	b.n	d216 <am_util_stdio_vsprintf+0x6ce>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d348:	1c53      	adds	r3, r2, #1
    d34a:	d025      	beq.n	d398 <am_util_stdio_vsprintf+0x850>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d34c:	3202      	adds	r2, #2
    d34e:	d027      	beq.n	d3a0 <am_util_stdio_vsprintf+0x858>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d350:	4b1f      	ldr	r3, [pc, #124]	; (d3d0 <am_util_stdio_vsprintf+0x888>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d352:	602b      	str	r3, [r5, #0]
    d354:	2303      	movs	r3, #3
    d356:	e764      	b.n	d222 <am_util_stdio_vsprintf+0x6da>
    d358:	2600      	movs	r6, #0
    d35a:	e6e1      	b.n	d120 <am_util_stdio_vsprintf+0x5d8>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d35c:	4b1d      	ldr	r3, [pc, #116]	; (d3d4 <am_util_stdio_vsprintf+0x88c>)
    d35e:	602b      	str	r3, [r5, #0]
    d360:	2303      	movs	r3, #3
    d362:	e75e      	b.n	d222 <am_util_stdio_vsprintf+0x6da>
                    bNeg = true;
    d364:	2301      	movs	r3, #1
    d366:	461f      	mov	r7, r3
    int iNDigits = ui64Val ? 0 : 1;
    d368:	2600      	movs	r6, #0
    d36a:	e4f8      	b.n	cd5e <am_util_stdio_vsprintf+0x216>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d36c:	b327      	cbz	r7, d3b8 <am_util_stdio_vsprintf+0x870>
    d36e:	f1b8 0f20 	cmp.w	r8, #32
    d372:	f43f ae3f 	beq.w	cff4 <am_util_stdio_vsprintf+0x4ac>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d376:	e9dd 0100 	ldrd	r0, r1, [sp]
    d37a:	462a      	mov	r2, r5
    d37c:	f7ff fb46 	bl	ca0c <uint64_to_str>
                if ( pcBuf )
    d380:	e542      	b.n	ce08 <am_util_stdio_vsprintf+0x2c0>
    uint32_t ui32Val = 0, uCnt = 0;
    d382:	2700      	movs	r7, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d384:	463b      	mov	r3, r7
    d386:	e564      	b.n	ce52 <am_util_stdio_vsprintf+0x30a>
                if ( iWidth > 0 )
    d388:	2a00      	cmp	r2, #0
    d38a:	dd8a      	ble.n	d2a2 <am_util_stdio_vsprintf+0x75a>
    uint32_t ui32RetVal = 0;
    d38c:	460f      	mov	r7, r1
    d38e:	e74f      	b.n	d230 <am_util_stdio_vsprintf+0x6e8>
    d390:	2100      	movs	r1, #0
    d392:	e70a      	b.n	d1aa <am_util_stdio_vsprintf+0x662>
    d394:	2100      	movs	r1, #0
    d396:	e509      	b.n	cdac <am_util_stdio_vsprintf+0x264>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d398:	4b0e      	ldr	r3, [pc, #56]	; (d3d4 <am_util_stdio_vsprintf+0x88c>)
    d39a:	e7da      	b.n	d352 <am_util_stdio_vsprintf+0x80a>
    d39c:	2100      	movs	r1, #0
    d39e:	e5a5      	b.n	ceec <am_util_stdio_vsprintf+0x3a4>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d3a0:	4b0d      	ldr	r3, [pc, #52]	; (d3d8 <am_util_stdio_vsprintf+0x890>)
    d3a2:	e7d6      	b.n	d352 <am_util_stdio_vsprintf+0x80a>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d3a4:	2300      	movs	r3, #0
        uCnt++;
    d3a6:	2701      	movs	r7, #1
    d3a8:	e552      	b.n	ce50 <am_util_stdio_vsprintf+0x308>
                            if ( pcBuf )
    d3aa:	b115      	cbz	r5, d3b2 <am_util_stdio_vsprintf+0x86a>
                                *pcBuf++ = '-';
    d3ac:	232d      	movs	r3, #45	; 0x2d
    d3ae:	f805 3b01 	strb.w	r3, [r5], #1
                            ++ui32CharCnt;
    d3b2:	f10a 0a01 	add.w	sl, sl, #1
    d3b6:	e4e4      	b.n	cd82 <am_util_stdio_vsprintf+0x23a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
    d3bc:	462a      	mov	r2, r5
    d3be:	f7ff fb25 	bl	ca0c <uint64_to_str>
                ui32CharCnt += iVal;
    d3c2:	4482      	add	sl, r0
                break;
    d3c4:	e502      	b.n	cdcc <am_util_stdio_vsprintf+0x284>
                    bNeg = false;
    d3c6:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    d3c8:	eba9 0906 	sub.w	r9, r9, r6
                    bNeg = false;
    d3cc:	461f      	mov	r7, r3
    d3ce:	e4d8      	b.n	cd82 <am_util_stdio_vsprintf+0x23a>
    d3d0:	003f2e3f 	.word	0x003f2e3f
    d3d4:	00302e30 	.word	0x00302e30
    d3d8:	00232e23 	.word	0x00232e23

0000d3dc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d3dc:	b40f      	push	{r0, r1, r2, r3}
    d3de:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d3e0:	4d09      	ldr	r5, [pc, #36]	; (d408 <am_util_stdio_printf+0x2c>)
    d3e2:	682c      	ldr	r4, [r5, #0]
{
    d3e4:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d3e6:	b14c      	cbz	r4, d3fc <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3e8:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3ea:	9906      	ldr	r1, [sp, #24]
    d3ec:	4807      	ldr	r0, [pc, #28]	; (d40c <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    d3ee:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3f0:	f7ff fbaa 	bl	cb48 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3f4:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3f6:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d3f8:	4804      	ldr	r0, [pc, #16]	; (d40c <am_util_stdio_printf+0x30>)
    d3fa:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d3fc:	4620      	mov	r0, r4
    d3fe:	b003      	add	sp, #12
    d400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d404:	b004      	add	sp, #16
    d406:	4770      	bx	lr
    d408:	10001414 	.word	0x10001414
    d40c:	10001068 	.word	0x10001068

0000d410 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d410:	4801      	ldr	r0, [pc, #4]	; (d418 <am_util_stdio_terminal_clear+0x8>)
    d412:	f7ff bfe3 	b.w	d3dc <am_util_stdio_printf>
    d416:	bf00      	nop
    d418:	00010524 	.word	0x00010524

0000d41c <NMI_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d41c:	e7fe      	b.n	d41c <NMI_Handler>
    d41e:	bf00      	nop

0000d420 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d420:	e7fe      	b.n	d420 <DebugMon_Handler>
    d422:	bf00      	nop

0000d424 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d424:	4811      	ldr	r0, [pc, #68]	; (d46c <zero_loop+0x12>)
    d426:	4912      	ldr	r1, [pc, #72]	; (d470 <zero_loop+0x16>)
    d428:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d42a:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d42e:	4811      	ldr	r0, [pc, #68]	; (d474 <zero_loop+0x1a>)
    d430:	6801      	ldr	r1, [r0, #0]
    d432:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d436:	6001      	str	r1, [r0, #0]
    d438:	f3bf 8f4f 	dsb	sy
    d43c:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d440:	480d      	ldr	r0, [pc, #52]	; (d478 <zero_loop+0x1e>)
    d442:	490e      	ldr	r1, [pc, #56]	; (d47c <zero_loop+0x22>)
    d444:	4a0e      	ldr	r2, [pc, #56]	; (d480 <zero_loop+0x26>)

0000d446 <copy_loop>:
    d446:	f850 3b04 	ldr.w	r3, [r0], #4
    d44a:	f841 3b04 	str.w	r3, [r1], #4
    d44e:	4291      	cmp	r1, r2
    d450:	dbf9      	blt.n	d446 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d452:	480c      	ldr	r0, [pc, #48]	; (d484 <zero_loop+0x2a>)
    d454:	490c      	ldr	r1, [pc, #48]	; (d488 <zero_loop+0x2e>)
    d456:	f04f 0200 	mov.w	r2, #0

0000d45a <zero_loop>:
    d45a:	4288      	cmp	r0, r1
    d45c:	bfb8      	it	lt
    d45e:	f840 2b04 	strlt.w	r2, [r0], #4
    d462:	dbfa      	blt.n	d45a <zero_loop>
    main();
    d464:	f7ff f89a 	bl	c59c <main>
    __asm("    bkpt     ");
    d468:	be00      	bkpt	0x0000
}
    d46a:	0000      	.short	0x0000
    d46c:	e000ed08 	.word	0xe000ed08
    d470:	0000c000 	.word	0x0000c000
    d474:	e000ed88 	.word	0xe000ed88
    d478:	00010b78 	.word	0x00010b78
    d47c:	10001000 	.word	0x10001000
    d480:	10001064 	.word	0x10001064
    d484:	10001064 	.word	0x10001064
    d488:	10004cdc 	.word	0x10004cdc

0000d48c <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d48c:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d48e:	2001      	movs	r0, #1
{
    d490:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d492:	f001 f8ab 	bl	e5ec <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d496:	4925      	ldr	r1, [pc, #148]	; (d52c <am_ctimer_isr+0xa0>)
    d498:	2000      	movs	r0, #0
    d49a:	f000 fb59 	bl	db50 <am_hal_adc_initialize>
    d49e:	bb68      	cbnz	r0, d4fc <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d4a0:	4c22      	ldr	r4, [pc, #136]	; (d52c <am_ctimer_isr+0xa0>)
    d4a2:	2200      	movs	r2, #0
    d4a4:	6820      	ldr	r0, [r4, #0]
    d4a6:	4611      	mov	r1, r2
    d4a8:	f000 fd1c 	bl	dee4 <am_hal_adc_power_control>
    d4ac:	2800      	cmp	r0, #0
    d4ae:	d139      	bne.n	d524 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d4b0:	4b1f      	ldr	r3, [pc, #124]	; (d530 <am_ctimer_isr+0xa4>)
    d4b2:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d4b4:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d4b6:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d4b8:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d4ba:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d4be:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d4c0:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d4c4:	f000 fbb4 	bl	dc30 <am_hal_adc_configure>
    d4c8:	bb40      	cbnz	r0, d51c <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d4ca:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d4ce:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d4d0:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d4d2:	9500      	str	r5, [sp, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d4d4:	466a      	mov	r2, sp
    d4d6:	2100      	movs	r1, #0
    ADCSlotConfig.bEnabled        = true;
    d4d8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d4dc:	f000 fbe0 	bl	dca0 <am_hal_adc_configure_slot>
    d4e0:	b9c0      	cbnz	r0, d514 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d4e2:	6820      	ldr	r0, [r4, #0]
    d4e4:	2101      	movs	r1, #1
    d4e6:	f000 fc49 	bl	dd7c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d4ea:	6820      	ldr	r0, [r4, #0]
    d4ec:	f000 fc0e 	bl	dd0c <am_hal_adc_enable>
    d4f0:	b940      	cbnz	r0, d504 <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d4f2:	6820      	ldr	r0, [r4, #0]
    d4f4:	f000 fce4 	bl	dec0 <am_hal_adc_sw_trigger>
}
    d4f8:	b005      	add	sp, #20
    d4fa:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d4fc:	480d      	ldr	r0, [pc, #52]	; (d534 <am_ctimer_isr+0xa8>)
    d4fe:	f7ff ff6d 	bl	d3dc <am_util_stdio_printf>
    d502:	e7cd      	b.n	d4a0 <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d504:	480c      	ldr	r0, [pc, #48]	; (d538 <am_ctimer_isr+0xac>)
    d506:	f7ff ff69 	bl	d3dc <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d50a:	6820      	ldr	r0, [r4, #0]
    d50c:	f000 fcd8 	bl	dec0 <am_hal_adc_sw_trigger>
}
    d510:	b005      	add	sp, #20
    d512:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d514:	4809      	ldr	r0, [pc, #36]	; (d53c <am_ctimer_isr+0xb0>)
    d516:	f7ff ff61 	bl	d3dc <am_util_stdio_printf>
    d51a:	e7e2      	b.n	d4e2 <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d51c:	4808      	ldr	r0, [pc, #32]	; (d540 <am_ctimer_isr+0xb4>)
    d51e:	f7ff ff5d 	bl	d3dc <am_util_stdio_printf>
    d522:	e7d2      	b.n	d4ca <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d524:	4807      	ldr	r0, [pc, #28]	; (d544 <am_ctimer_isr+0xb8>)
    d526:	f7ff ff59 	bl	d3dc <am_util_stdio_printf>
    d52a:	e7c1      	b.n	d4b0 <am_ctimer_isr+0x24>
    d52c:	1000116c 	.word	0x1000116c
    d530:	00070001 	.word	0x00070001
    d534:	00010538 	.word	0x00010538
    d538:	000105d8 	.word	0x000105d8
    d53c:	000105b0 	.word	0x000105b0
    d540:	0001058c 	.word	0x0001058c
    d544:	0001056c 	.word	0x0001056c

0000d548 <am_adc_isr>:
{
    d548:	b510      	push	{r4, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d54a:	4c2a      	ldr	r4, [pc, #168]	; (d5f4 <am_adc_isr+0xac>)
{
    d54c:	b086      	sub	sp, #24
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d54e:	6820      	ldr	r0, [r4, #0]
    d550:	2200      	movs	r2, #0
    d552:	a902      	add	r1, sp, #8
    d554:	f000 fc28 	bl	dda8 <am_hal_adc_interrupt_status>
    d558:	b9e8      	cbnz	r0, d596 <am_adc_isr+0x4e>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d55a:	9902      	ldr	r1, [sp, #8]
    d55c:	6820      	ldr	r0, [r4, #0]
    d55e:	f000 fc41 	bl	dde4 <am_hal_adc_interrupt_clear>
    d562:	bb08      	cbnz	r0, d5a8 <am_adc_isr+0x60>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d564:	9b02      	ldr	r3, [sp, #8]
    d566:	07db      	lsls	r3, r3, #31
    d568:	d424      	bmi.n	d5b4 <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d56a:	4b23      	ldr	r3, [pc, #140]	; (d5f8 <am_adc_isr+0xb0>)
    d56c:	9a04      	ldr	r2, [sp, #16]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d56e:	6820      	ldr	r0, [r4, #0]
    audioSample = Sample.ui32Sample;
    d570:	601a      	str	r2, [r3, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d572:	f000 fbeb 	bl	dd4c <am_hal_adc_disable>
    d576:	2800      	cmp	r0, #0
    d578:	d137      	bne.n	d5ea <am_adc_isr+0xa2>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d57a:	200a      	movs	r0, #10
    d57c:	f002 f878 	bl	f670 <am_hal_pwrctrl_periph_disable>
    d580:	2800      	cmp	r0, #0
    d582:	d12e      	bne.n	d5e2 <am_adc_isr+0x9a>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d584:	6820      	ldr	r0, [r4, #0]
    d586:	f000 fb33 	bl	dbf0 <am_hal_adc_deinitialize>
    d58a:	bb10      	cbnz	r0, d5d2 <am_adc_isr+0x8a>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d58c:	6820      	ldr	r0, [r4, #0]
    d58e:	f000 fc97 	bl	dec0 <am_hal_adc_sw_trigger>
}
    d592:	b006      	add	sp, #24
    d594:	bd10      	pop	{r4, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d596:	4819      	ldr	r0, [pc, #100]	; (d5fc <am_adc_isr+0xb4>)
    d598:	f7ff ff20 	bl	d3dc <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d59c:	9902      	ldr	r1, [sp, #8]
    d59e:	6820      	ldr	r0, [r4, #0]
    d5a0:	f000 fc20 	bl	dde4 <am_hal_adc_interrupt_clear>
    d5a4:	2800      	cmp	r0, #0
    d5a6:	d0dd      	beq.n	d564 <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d5a8:	4815      	ldr	r0, [pc, #84]	; (d600 <am_adc_isr+0xb8>)
    d5aa:	f7ff ff17 	bl	d3dc <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d5ae:	9b02      	ldr	r3, [sp, #8]
    d5b0:	07db      	lsls	r3, r3, #31
    d5b2:	d5da      	bpl.n	d56a <am_adc_isr+0x22>
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d5b4:	ab04      	add	r3, sp, #16
        uint32_t    ui32NumSamples = 1;
    d5b6:	2101      	movs	r1, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d5b8:	9300      	str	r3, [sp, #0]
    d5ba:	6820      	ldr	r0, [r4, #0]
        uint32_t    ui32NumSamples = 1;
    d5bc:	9103      	str	r1, [sp, #12]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d5be:	ab03      	add	r3, sp, #12
    d5c0:	2200      	movs	r2, #0
    d5c2:	f000 fc21 	bl	de08 <am_hal_adc_samples_read>
    d5c6:	2800      	cmp	r0, #0
    d5c8:	d0cf      	beq.n	d56a <am_adc_isr+0x22>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d5ca:	480e      	ldr	r0, [pc, #56]	; (d604 <am_adc_isr+0xbc>)
    d5cc:	f7ff ff06 	bl	d3dc <am_util_stdio_printf>
    d5d0:	e7cb      	b.n	d56a <am_adc_isr+0x22>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d5d2:	480d      	ldr	r0, [pc, #52]	; (d608 <am_adc_isr+0xc0>)
    d5d4:	f7ff ff02 	bl	d3dc <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d5d8:	6820      	ldr	r0, [r4, #0]
    d5da:	f000 fc71 	bl	dec0 <am_hal_adc_sw_trigger>
}
    d5de:	b006      	add	sp, #24
    d5e0:	bd10      	pop	{r4, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d5e2:	480a      	ldr	r0, [pc, #40]	; (d60c <am_adc_isr+0xc4>)
    d5e4:	f7ff fefa 	bl	d3dc <am_util_stdio_printf>
    d5e8:	e7cc      	b.n	d584 <am_adc_isr+0x3c>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d5ea:	4809      	ldr	r0, [pc, #36]	; (d610 <am_adc_isr+0xc8>)
    d5ec:	f7ff fef6 	bl	d3dc <am_util_stdio_printf>
    d5f0:	e7c3      	b.n	d57a <am_adc_isr+0x32>
    d5f2:	bf00      	nop
    d5f4:	1000116c 	.word	0x1000116c
    d5f8:	10001168 	.word	0x10001168
    d5fc:	000105f8 	.word	0x000105f8
    d600:	0001061c 	.word	0x0001061c
    d604:	00010644 	.word	0x00010644
    d608:	000106c0 	.word	0x000106c0
    d60c:	00010690 	.word	0x00010690
    d610:	00010670 	.word	0x00010670

0000d614 <initADC>:
{
    d614:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d616:	4b0e      	ldr	r3, [pc, #56]	; (d650 <initADC+0x3c>)
    d618:	200b      	movs	r0, #11
    d61a:	6819      	ldr	r1, [r3, #0]
    d61c:	f001 f84a 	bl	e6b4 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d620:	f44f 7215 	mov.w	r2, #596	; 0x254
    d624:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d628:	2000      	movs	r0, #0
    d62a:	f000 ff0b 	bl	e444 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d62e:	2001      	movs	r0, #1
    d630:	f000 ffc8 	bl	e5c4 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d634:	2300      	movs	r3, #0
    d636:	4618      	mov	r0, r3
    d638:	2201      	movs	r2, #1
    d63a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d63e:	f000 ff6b 	bl	e518 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d642:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d646:	2000      	movs	r0, #0
    d648:	f000 ff3c 	bl	e4c4 <am_hal_ctimer_start>
}
    d64c:	2000      	movs	r0, #0
    d64e:	bd08      	pop	{r3, pc}
    d650:	000106ec 	.word	0x000106ec

0000d654 <enableAdcInterrupts>:
    d654:	4b04      	ldr	r3, [pc, #16]	; (d668 <enableAdcInterrupts+0x14>)
    d656:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d65a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d65e:	6019      	str	r1, [r3, #0]
    d660:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d662:	f001 b9d9 	b.w	ea18 <am_hal_interrupt_master_enable>
    d666:	bf00      	nop
    d668:	e000e100 	.word	0xe000e100

0000d66c <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d66c:	2b80      	cmp	r3, #128	; 0x80
    d66e:	d840      	bhi.n	d6f2 <platform_read+0x86>
{
    d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d674:	4690      	mov	r8, r2
    d676:	b08a      	sub	sp, #40	; 0x28
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d678:	2a00      	cmp	r2, #0
    d67a:	d044      	beq.n	d706 <platform_read+0x9a>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d67c:	4d28      	ldr	r5, [pc, #160]	; (d720 <platform_read+0xb4>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d67e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d730 <platform_read+0xc4>
    d682:	460e      	mov	r6, r1
    d684:	461f      	mov	r7, r3
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d688:	466c      	mov	r4, sp
    d68a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d68c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d68e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d690:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d694:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d696:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d69a:	f04f 0a01 	mov.w	sl, #1
    iomTransfer.ui32PauseCondition = 0;     // ?
    d69e:	2400      	movs	r4, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6a0:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d6a4:	f8cd a004 	str.w	sl, [sp, #4]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d6a8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6ac:	4669      	mov	r1, sp
    iomTransfer.ui32PauseCondition = 0;     // ?
    d6ae:	2500      	movs	r5, #0
    d6b0:	e9cd 4508 	strd	r4, r5, [sp, #32]
    iomTransfer.pui32RxBuffer = NULL;
    d6b4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d6b8:	9602      	str	r6, [sp, #8]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d6ba:	f8ad a01c 	strh.w	sl, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d6be:	f88d a01e 	strb.w	sl, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d6c2:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d6c4:	f88d 3010 	strb.w	r3, [sp, #16]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6c8:	f001 fd00 	bl	f0cc <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d6cc:	4604      	mov	r4, r0
    d6ce:	b990      	cbnz	r0, d6f6 <platform_read+0x8a>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6d0:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d6d4:	f88d 401c 	strb.w	r4, [sp, #28]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6d8:	4669      	mov	r1, sp
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d6da:	f88d a010 	strb.w	sl, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d6de:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d6e2:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d6e4:	f001 fcf2 	bl	f0cc <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d6e8:	4604      	mov	r4, r0
    d6ea:	b998      	cbnz	r0, d714 <platform_read+0xa8>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d6ec:	b00a      	add	sp, #40	; 0x28
    d6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d6f2:	2001      	movs	r0, #1
}
    d6f4:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d6f6:	4601      	mov	r1, r0
    d6f8:	480a      	ldr	r0, [pc, #40]	; (d724 <platform_read+0xb8>)
    d6fa:	f7ff fe6f 	bl	d3dc <am_util_stdio_printf>
        return retVal32;
    d6fe:	4620      	mov	r0, r4
}
    d700:	b00a      	add	sp, #40	; 0x28
    d702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d706:	4808      	ldr	r0, [pc, #32]	; (d728 <platform_read+0xbc>)
    d708:	f7ff fe68 	bl	d3dc <am_util_stdio_printf>
    d70c:	2001      	movs	r0, #1
}
    d70e:	b00a      	add	sp, #40	; 0x28
    d710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d714:	4601      	mov	r1, r0
    d716:	4805      	ldr	r0, [pc, #20]	; (d72c <platform_read+0xc0>)
    d718:	f7ff fe60 	bl	d3dc <am_util_stdio_printf>
        return retVal32;
    d71c:	4620      	mov	r0, r4
    d71e:	e7e5      	b.n	d6ec <platform_read+0x80>
    d720:	10001000 	.word	0x10001000
    d724:	00010708 	.word	0x00010708
    d728:	000106f0 	.word	0x000106f0
    d72c:	00010718 	.word	0x00010718
    d730:	10001624 	.word	0x10001624

0000d734 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d734:	2b80      	cmp	r3, #128	; 0x80
    d736:	d83e      	bhi.n	d7b6 <platform_write+0x82>
{
    d738:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d73a:	4e26      	ldr	r6, [pc, #152]	; (d7d4 <platform_write+0xa0>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d73c:	4f26      	ldr	r7, [pc, #152]	; (d7d8 <platform_write+0xa4>)
    d73e:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d740:	469c      	mov	ip, r3
    d742:	4614      	mov	r4, r2
    d744:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d746:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d748:	466d      	mov	r5, sp
    d74a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d74c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d74e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d750:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d754:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d758:	f8df e08c 	ldr.w	lr, [pc, #140]	; d7e8 <platform_write+0xb4>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d75c:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d760:	2601      	movs	r6, #1
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d762:	2200      	movs	r2, #0
    iomTransfer.ui32PauseCondition = 0;     // ?
    d764:	2000      	movs	r0, #0
    d766:	2100      	movs	r1, #0
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d768:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.pui32RxBuffer = i2cRX;
    d76c:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d770:	e9cd 0108 	strd	r0, r1, [sp, #32]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d774:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d776:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d77a:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d77e:	f8ad 201c 	strh.w	r2, [sp, #28]
    if(bufp == NULL){
    d782:	b30c      	cbz	r4, d7c8 <platform_write+0x94>
    while(len--){
    d784:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    d788:	b289      	uxth	r1, r1
    d78a:	f1bc 0f00 	cmp.w	ip, #0
    d78e:	d009      	beq.n	d7a4 <platform_write+0x70>
    d790:	1c4b      	adds	r3, r1, #1
    d792:	18e2      	adds	r2, r4, r3
    d794:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d798:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d79c:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d7a0:	42bb      	cmp	r3, r7
    d7a2:	d1f9      	bne.n	d798 <platform_write+0x64>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d7a4:	4b0d      	ldr	r3, [pc, #52]	; (d7dc <platform_write+0xa8>)
    d7a6:	4669      	mov	r1, sp
    d7a8:	6818      	ldr	r0, [r3, #0]
    d7aa:	f001 fc8f 	bl	f0cc <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d7ae:	4606      	mov	r6, r0
    d7b0:	b918      	cbnz	r0, d7ba <platform_write+0x86>
}
    d7b2:	b00b      	add	sp, #44	; 0x2c
    d7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d7b6:	2001      	movs	r0, #1
}
    d7b8:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d7ba:	4601      	mov	r1, r0
    d7bc:	4808      	ldr	r0, [pc, #32]	; (d7e0 <platform_write+0xac>)
    d7be:	f7ff fe0d 	bl	d3dc <am_util_stdio_printf>
        return retVal32;
    d7c2:	4630      	mov	r0, r6
}
    d7c4:	b00b      	add	sp, #44	; 0x2c
    d7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d7c8:	4806      	ldr	r0, [pc, #24]	; (d7e4 <platform_write+0xb0>)
    d7ca:	f7ff fe07 	bl	d3dc <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d7ce:	4630      	mov	r0, r6
    d7d0:	e7ef      	b.n	d7b2 <platform_write+0x7e>
    d7d2:	bf00      	nop
    d7d4:	10001000 	.word	0x10001000
    d7d8:	10001424 	.word	0x10001424
    d7dc:	10001624 	.word	0x10001624
    d7e0:	00010744 	.word	0x00010744
    d7e4:	0001072c 	.word	0x0001072c
    d7e8:	10001628 	.word	0x10001628

0000d7ec <initAccelerometer>:
{
    d7ec:	b530      	push	{r4, r5, lr}
    dev_ctx.write_reg = platform_write;
    d7ee:	4a2c      	ldr	r2, [pc, #176]	; (d8a0 <initAccelerometer+0xb4>)
    d7f0:	4b2c      	ldr	r3, [pc, #176]	; (d8a4 <initAccelerometer+0xb8>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d7f2:	4c2d      	ldr	r4, [pc, #180]	; (d8a8 <initAccelerometer+0xbc>)
    dev_ctx.write_reg = platform_write;
    d7f4:	6013      	str	r3, [r2, #0]
{
    d7f6:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d7f8:	2300      	movs	r3, #0
    d7fa:	2001      	movs	r0, #1
    d7fc:	9301      	str	r3, [sp, #4]
    d7fe:	e9cd 3303 	strd	r3, r3, [sp, #12]
    dev_ctx.read_reg = platform_read;
    d802:	4d2a      	ldr	r5, [pc, #168]	; (d8ac <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d804:	9305      	str	r3, [sp, #20]
    d806:	f88d 0004 	strb.w	r0, [sp, #4]
    d80a:	4b29      	ldr	r3, [pc, #164]	; (d8b0 <initAccelerometer+0xc4>)
    dev_ctx.read_reg = platform_read;
    d80c:	6055      	str	r5, [r2, #4]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d80e:	4621      	mov	r1, r4
    d810:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d812:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d814:	f001 f984 	bl	eb20 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d818:	b140      	cbz	r0, d82c <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d81a:	4c26      	ldr	r4, [pc, #152]	; (d8b4 <initAccelerometer+0xc8>)
    d81c:	4820      	ldr	r0, [pc, #128]	; (d8a0 <initAccelerometer+0xb4>)
    d81e:	4621      	mov	r1, r4
    d820:	f000 f924 	bl	da6c <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d824:	7821      	ldrb	r1, [r4, #0]
    d826:	2933      	cmp	r1, #51	; 0x33
    d828:	d01b      	beq.n	d862 <initAccelerometer+0x76>
        while(1)
    d82a:	e7fe      	b.n	d82a <initAccelerometer+0x3e>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d82c:	4602      	mov	r2, r0
    d82e:	4601      	mov	r1, r0
    d830:	6820      	ldr	r0, [r4, #0]
    d832:	f001 fa0d 	bl	ec50 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d836:	2800      	cmp	r0, #0
    d838:	d1ef      	bne.n	d81a <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d83a:	6820      	ldr	r0, [r4, #0]
    d83c:	a901      	add	r1, sp, #4
    d83e:	f001 fb17 	bl	ee70 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d842:	2800      	cmp	r0, #0
    d844:	d1e9      	bne.n	d81a <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d846:	4b1c      	ldr	r3, [pc, #112]	; (d8b8 <initAccelerometer+0xcc>)
    d848:	202b      	movs	r0, #43	; 0x2b
    d84a:	6819      	ldr	r1, [r3, #0]
    d84c:	f000 ff32 	bl	e6b4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d850:	4b1a      	ldr	r3, [pc, #104]	; (d8bc <initAccelerometer+0xd0>)
    d852:	202a      	movs	r0, #42	; 0x2a
    d854:	6819      	ldr	r1, [r3, #0]
    d856:	f000 ff2d 	bl	e6b4 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d85a:	6820      	ldr	r0, [r4, #0]
    d85c:	f001 f988 	bl	eb70 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d860:	e7db      	b.n	d81a <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d862:	4817      	ldr	r0, [pc, #92]	; (d8c0 <initAccelerometer+0xd4>)
    d864:	f7ff fdba 	bl	d3dc <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d868:	2101      	movs	r1, #1
    d86a:	480d      	ldr	r0, [pc, #52]	; (d8a0 <initAccelerometer+0xb4>)
    d86c:	f000 f8ca 	bl	da04 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d870:	2103      	movs	r1, #3
    d872:	480b      	ldr	r0, [pc, #44]	; (d8a0 <initAccelerometer+0xb4>)
    d874:	f000 f82c 	bl	d8d0 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d878:	2103      	movs	r1, #3
    d87a:	4809      	ldr	r0, [pc, #36]	; (d8a0 <initAccelerometer+0xb4>)
    d87c:	f000 f88e 	bl	d99c <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d880:	2100      	movs	r1, #0
    d882:	4807      	ldr	r0, [pc, #28]	; (d8a0 <initAccelerometer+0xb4>)
    d884:	f000 f8a4 	bl	d9d0 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d888:	2103      	movs	r1, #3
    d88a:	4805      	ldr	r0, [pc, #20]	; (d8a0 <initAccelerometer+0xb4>)
    d88c:	f000 f820 	bl	d8d0 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d890:	2100      	movs	r1, #0
    d892:	4803      	ldr	r0, [pc, #12]	; (d8a0 <initAccelerometer+0xb4>)
    d894:	f000 f836 	bl	d904 <lis2dh12_operating_mode_set>
}
    d898:	2000      	movs	r0, #0
    d89a:	b007      	add	sp, #28
    d89c:	bd30      	pop	{r4, r5, pc}
    d89e:	bf00      	nop
    d8a0:	10001418 	.word	0x10001418
    d8a4:	0000d735 	.word	0x0000d735
    d8a8:	10001624 	.word	0x10001624
    d8ac:	0000d66d 	.word	0x0000d66d
    d8b0:	000186a0 	.word	0x000186a0
    d8b4:	10001170 	.word	0x10001170
    d8b8:	00010784 	.word	0x00010784
    d8bc:	00010788 	.word	0x00010788
    d8c0:	0001075c 	.word	0x0001075c

0000d8c4 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
    d8c4:	ee00 0a10 	vmov	s0, r0
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d8c8:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d8cc:	4770      	bx	lr
    d8ce:	bf00      	nop

0000d8d0 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d8d0:	b570      	push	{r4, r5, r6, lr}
    d8d2:	b082      	sub	sp, #8
    d8d4:	4604      	mov	r4, r0
    d8d6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8d8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d8dc:	aa01      	add	r2, sp, #4
    d8de:	2301      	movs	r3, #1
    d8e0:	211f      	movs	r1, #31
    d8e2:	47b0      	blx	r6
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d8e4:	b958      	cbnz	r0, d8fe <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d8e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8ea:	6826      	ldr	r6, [r4, #0]
    d8ec:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d8ee:	f365 1387 	bfi	r3, r5, #6, #2
    d8f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8f6:	aa01      	add	r2, sp, #4
    d8f8:	2301      	movs	r3, #1
    d8fa:	211f      	movs	r1, #31
    d8fc:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d8fe:	b002      	add	sp, #8
    d900:	bd70      	pop	{r4, r5, r6, pc}
    d902:	bf00      	nop

0000d904 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d904:	b570      	push	{r4, r5, r6, lr}
    d906:	b082      	sub	sp, #8
    d908:	4604      	mov	r4, r0
    d90a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d90c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d910:	466a      	mov	r2, sp
    d912:	2301      	movs	r3, #1
    d914:	2120      	movs	r1, #32
    d916:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d918:	bb00      	cbnz	r0, d95c <lis2dh12_operating_mode_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d91a:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d91e:	aa01      	add	r2, sp, #4
    d920:	2301      	movs	r3, #1
    d922:	2123      	movs	r1, #35	; 0x23
    d924:	47b0      	blx	r6
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
    d926:	b9c8      	cbnz	r0, d95c <lis2dh12_operating_mode_set+0x58>
    if ( val == LIS2DH12_HR_12bit ) {
    d928:	b9d5      	cbnz	r5, d960 <lis2dh12_operating_mode_set+0x5c>
      ctrl_reg1.lpen = 0;
    d92a:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d92e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d932:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d936:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d93a:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d93e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d942:	6825      	ldr	r5, [r4, #0]
    d944:	68a0      	ldr	r0, [r4, #8]
    d946:	466a      	mov	r2, sp
    d948:	2301      	movs	r3, #1
    d94a:	2120      	movs	r1, #32
    d94c:	47a8      	blx	r5
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  } 
  if (ret == 0) {
    d94e:	b928      	cbnz	r0, d95c <lis2dh12_operating_mode_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d950:	6825      	ldr	r5, [r4, #0]
    d952:	68a0      	ldr	r0, [r4, #8]
    d954:	aa01      	add	r2, sp, #4
    d956:	2301      	movs	r3, #1
    d958:	2123      	movs	r1, #35	; 0x23
    d95a:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d95c:	b002      	add	sp, #8
    d95e:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d960:	2d01      	cmp	r5, #1
    d962:	d10c      	bne.n	d97e <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
    d964:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d968:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d96c:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d970:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d974:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d978:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == LIS2DH12_LP_8bit) {
    d97c:	e7e1      	b.n	d942 <lis2dh12_operating_mode_set+0x3e>
    d97e:	2d02      	cmp	r5, #2
    d980:	d1df      	bne.n	d942 <lis2dh12_operating_mode_set+0x3e>
      ctrl_reg1.lpen = 1;
    d982:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d986:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d98a:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d98e:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d992:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d996:	f88d 2004 	strb.w	r2, [sp, #4]
    d99a:	e7d2      	b.n	d942 <lis2dh12_operating_mode_set+0x3e>

0000d99c <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d99c:	b570      	push	{r4, r5, r6, lr}
    d99e:	b082      	sub	sp, #8
    d9a0:	4604      	mov	r4, r0
    d9a2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9a4:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d9a8:	aa01      	add	r2, sp, #4
    d9aa:	2301      	movs	r3, #1
    d9ac:	2120      	movs	r1, #32
    d9ae:	47b0      	blx	r6
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d9b0:	b958      	cbnz	r0, d9ca <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d9b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d9b6:	6826      	ldr	r6, [r4, #0]
    d9b8:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d9ba:	f365 1307 	bfi	r3, r5, #4, #4
    d9be:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d9c2:	aa01      	add	r2, sp, #4
    d9c4:	2301      	movs	r3, #1
    d9c6:	2120      	movs	r1, #32
    d9c8:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d9ca:	b002      	add	sp, #8
    d9cc:	bd70      	pop	{r4, r5, r6, pc}
    d9ce:	bf00      	nop

0000d9d0 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d9d0:	b570      	push	{r4, r5, r6, lr}
    d9d2:	b082      	sub	sp, #8
    d9d4:	4604      	mov	r4, r0
    d9d6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d9d8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d9dc:	aa01      	add	r2, sp, #4
    d9de:	2301      	movs	r3, #1
    d9e0:	2123      	movs	r1, #35	; 0x23
    d9e2:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d9e4:	b958      	cbnz	r0, d9fe <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d9e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d9ea:	6826      	ldr	r6, [r4, #0]
    d9ec:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d9ee:	f365 1305 	bfi	r3, r5, #4, #2
    d9f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d9f6:	aa01      	add	r2, sp, #4
    d9f8:	2301      	movs	r3, #1
    d9fa:	2123      	movs	r1, #35	; 0x23
    d9fc:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d9fe:	b002      	add	sp, #8
    da00:	bd70      	pop	{r4, r5, r6, pc}
    da02:	bf00      	nop

0000da04 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    da04:	b570      	push	{r4, r5, r6, lr}
    da06:	b082      	sub	sp, #8
    da08:	4604      	mov	r4, r0
    da0a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da0c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    da10:	aa01      	add	r2, sp, #4
    da12:	2301      	movs	r3, #1
    da14:	2123      	movs	r1, #35	; 0x23
    da16:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    da18:	b958      	cbnz	r0, da32 <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    da1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    da1e:	6826      	ldr	r6, [r4, #0]
    da20:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    da22:	f365 13c7 	bfi	r3, r5, #7, #1
    da26:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    da2a:	aa01      	add	r2, sp, #4
    da2c:	2301      	movs	r3, #1
    da2e:	2123      	movs	r1, #35	; 0x23
    da30:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    da32:	b002      	add	sp, #8
    da34:	bd70      	pop	{r4, r5, r6, pc}
    da36:	bf00      	nop

0000da38 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    da38:	b530      	push	{r4, r5, lr}
    da3a:	b083      	sub	sp, #12
    da3c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da3e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    da42:	2301      	movs	r3, #1
    da44:	aa01      	add	r2, sp, #4
    da46:	2127      	movs	r1, #39	; 0x27
    da48:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    da4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    da4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    da52:	7023      	strb	r3, [r4, #0]

  return ret;
}
    da54:	b003      	add	sp, #12
    da56:	bd30      	pop	{r4, r5, pc}

0000da58 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    da58:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da5a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    da5e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da60:	46a4      	mov	ip, r4
    da62:	2306      	movs	r3, #6
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    da64:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da68:	2128      	movs	r1, #40	; 0x28
    da6a:	4760      	bx	ip

0000da6c <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    da6c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da6e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    da72:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da74:	46a4      	mov	ip, r4
    da76:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    da78:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da7c:	210f      	movs	r1, #15
    da7e:	4760      	bx	ip

0000da80 <am_bsp_low_power_init>:
    da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da82:	f001 fcdf 	bl	f444 <am_hal_itm_disable>
    da86:	2000      	movs	r0, #0
    da88:	f7ff f858 	bl	cb3c <am_util_stdio_printf_init>
    da8c:	4b12      	ldr	r3, [pc, #72]	; (dad8 <am_bsp_low_power_init+0x58>)
    da8e:	4f13      	ldr	r7, [pc, #76]	; (dadc <am_bsp_low_power_init+0x5c>)
    da90:	6819      	ldr	r1, [r3, #0]
    da92:	2021      	movs	r0, #33	; 0x21
    da94:	f000 fe0e 	bl	e6b4 <am_hal_gpio_pinconfig>
    da98:	f001 fe16 	bl	f6c8 <am_hal_pwrctrl_low_power_init>
    da9c:	2000      	movs	r0, #0
    da9e:	f001 fe85 	bl	f7ac <am_hal_rtc_osc_select>
    daa2:	2100      	movs	r1, #0
    daa4:	2003      	movs	r0, #3
    daa6:	f000 fc23 	bl	e2f0 <am_hal_clkgen_control>
    daaa:	f001 fe87 	bl	f7bc <am_hal_rtc_osc_disable>
    daae:	4b0c      	ldr	r3, [pc, #48]	; (dae0 <am_bsp_low_power_init+0x60>)
    dab0:	681e      	ldr	r6, [r3, #0]
    dab2:	2400      	movs	r4, #0
    dab4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    dab8:	4631      	mov	r1, r6
    daba:	4628      	mov	r0, r5
    dabc:	f000 fdfa 	bl	e6b4 <am_hal_gpio_pinconfig>
    dac0:	2103      	movs	r1, #3
    dac2:	4628      	mov	r0, r5
    dac4:	f000 ff64 	bl	e990 <am_hal_gpio_state_write>
    dac8:	3401      	adds	r4, #1
    daca:	4628      	mov	r0, r5
    dacc:	2100      	movs	r1, #0
    dace:	f000 ff5f 	bl	e990 <am_hal_gpio_state_write>
    dad2:	2c04      	cmp	r4, #4
    dad4:	d1ee      	bne.n	dab4 <am_bsp_low_power_init+0x34>
    dad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dad8:	000108c4 	.word	0x000108c4
    dadc:	10001028 	.word	0x10001028
    dae0:	000108c8 	.word	0x000108c8

0000dae4 <am_bsp_debug_printf_disable>:
    dae4:	b538      	push	{r3, r4, r5, lr}
    dae6:	4b17      	ldr	r3, [pc, #92]	; (db44 <am_bsp_debug_printf_disable+0x60>)
    dae8:	681c      	ldr	r4, [r3, #0]
    daea:	2c01      	cmp	r4, #1
    daec:	d002      	beq.n	daf4 <am_bsp_debug_printf_disable+0x10>
    daee:	2c02      	cmp	r4, #2
    daf0:	d00c      	beq.n	db0c <am_bsp_debug_printf_disable+0x28>
    daf2:	bd38      	pop	{r3, r4, r5, pc}
    daf4:	f001 fca6 	bl	f444 <am_hal_itm_disable>
    daf8:	2000      	movs	r0, #0
    dafa:	f7ff f81f 	bl	cb3c <am_util_stdio_printf_init>
    dafe:	4b12      	ldr	r3, [pc, #72]	; (db48 <am_bsp_debug_printf_disable+0x64>)
    db00:	2021      	movs	r0, #33	; 0x21
    db02:	6819      	ldr	r1, [r3, #0]
    db04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    db08:	f000 bdd4 	b.w	e6b4 <am_hal_gpio_pinconfig>
    db0c:	4d0f      	ldr	r5, [pc, #60]	; (db4c <am_bsp_debug_printf_disable+0x68>)
    db0e:	6828      	ldr	r0, [r5, #0]
    db10:	f002 faa2 	bl	10058 <am_hal_uart_tx_flush>
    db14:	2000      	movs	r0, #0
    db16:	f7ff f811 	bl	cb3c <am_util_stdio_printf_init>
    db1a:	4621      	mov	r1, r4
    db1c:	2200      	movs	r2, #0
    db1e:	6828      	ldr	r0, [r5, #0]
    db20:	f001 feca 	bl	f8b8 <am_hal_uart_power_control>
    db24:	6828      	ldr	r0, [r5, #0]
    db26:	f001 feb3 	bl	f890 <am_hal_uart_deinitialize>
    db2a:	4b07      	ldr	r3, [pc, #28]	; (db48 <am_bsp_debug_printf_disable+0x64>)
    db2c:	681c      	ldr	r4, [r3, #0]
    db2e:	2030      	movs	r0, #48	; 0x30
    db30:	4621      	mov	r1, r4
    db32:	f000 fdbf 	bl	e6b4 <am_hal_gpio_pinconfig>
    db36:	4621      	mov	r1, r4
    db38:	2031      	movs	r0, #49	; 0x31
    db3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    db3e:	f000 bdb9 	b.w	e6b4 <am_hal_gpio_pinconfig>
    db42:	bf00      	nop
    db44:	10001178 	.word	0x10001178
    db48:	000108c4 	.word	0x000108c4
    db4c:	10001174 	.word	0x10001174

0000db50 <am_hal_adc_initialize>:
    db50:	b108      	cbz	r0, db56 <am_hal_adc_initialize+0x6>
    db52:	2005      	movs	r0, #5
    db54:	4770      	bx	lr
    db56:	b139      	cbz	r1, db68 <am_hal_adc_initialize+0x18>
    db58:	4a1b      	ldr	r2, [pc, #108]	; (dbc8 <am_hal_adc_initialize+0x78>)
    db5a:	b538      	push	{r3, r4, r5, lr}
    db5c:	78d3      	ldrb	r3, [r2, #3]
    db5e:	f013 0401 	ands.w	r4, r3, #1
    db62:	d003      	beq.n	db6c <am_hal_adc_initialize+0x1c>
    db64:	2007      	movs	r0, #7
    db66:	bd38      	pop	{r3, r4, r5, pc}
    db68:	2006      	movs	r0, #6
    db6a:	4770      	bx	lr
    db6c:	f043 0301 	orr.w	r3, r3, #1
    db70:	70d3      	strb	r3, [r2, #3]
    db72:	6813      	ldr	r3, [r2, #0]
    db74:	4d15      	ldr	r5, [pc, #84]	; (dbcc <am_hal_adc_initialize+0x7c>)
    db76:	4816      	ldr	r0, [pc, #88]	; (dbd0 <am_hal_adc_initialize+0x80>)
    db78:	6054      	str	r4, [r2, #4]
    db7a:	f365 0317 	bfi	r3, r5, #0, #24
    db7e:	6013      	str	r3, [r2, #0]
    db80:	6004      	str	r4, [r0, #0]
    db82:	600a      	str	r2, [r1, #0]
    db84:	4813      	ldr	r0, [pc, #76]	; (dbd4 <am_hal_adc_initialize+0x84>)
    db86:	4d14      	ldr	r5, [pc, #80]	; (dbd8 <am_hal_adc_initialize+0x88>)
    db88:	f000 fd8a 	bl	e6a0 <am_hal_flash_load_ui32>
    db8c:	6028      	str	r0, [r5, #0]
    db8e:	4813      	ldr	r0, [pc, #76]	; (dbdc <am_hal_adc_initialize+0x8c>)
    db90:	f000 fd86 	bl	e6a0 <am_hal_flash_load_ui32>
    db94:	6068      	str	r0, [r5, #4]
    db96:	4812      	ldr	r0, [pc, #72]	; (dbe0 <am_hal_adc_initialize+0x90>)
    db98:	f000 fd82 	bl	e6a0 <am_hal_flash_load_ui32>
    db9c:	682b      	ldr	r3, [r5, #0]
    db9e:	60a8      	str	r0, [r5, #8]
    dba0:	3301      	adds	r3, #1
    dba2:	d008      	beq.n	dbb6 <am_hal_adc_initialize+0x66>
    dba4:	686b      	ldr	r3, [r5, #4]
    dba6:	3301      	adds	r3, #1
    dba8:	d005      	beq.n	dbb6 <am_hal_adc_initialize+0x66>
    dbaa:	3001      	adds	r0, #1
    dbac:	d003      	beq.n	dbb6 <am_hal_adc_initialize+0x66>
    dbae:	2301      	movs	r3, #1
    dbb0:	732b      	strb	r3, [r5, #12]
    dbb2:	4620      	mov	r0, r4
    dbb4:	bd38      	pop	{r3, r4, r5, pc}
    dbb6:	490b      	ldr	r1, [pc, #44]	; (dbe4 <am_hal_adc_initialize+0x94>)
    dbb8:	4a0b      	ldr	r2, [pc, #44]	; (dbe8 <am_hal_adc_initialize+0x98>)
    dbba:	4b0c      	ldr	r3, [pc, #48]	; (dbec <am_hal_adc_initialize+0x9c>)
    dbbc:	6029      	str	r1, [r5, #0]
    dbbe:	2000      	movs	r0, #0
    dbc0:	606a      	str	r2, [r5, #4]
    dbc2:	60ab      	str	r3, [r5, #8]
    dbc4:	7328      	strb	r0, [r5, #12]
    dbc6:	bd38      	pop	{r3, r4, r5, pc}
    dbc8:	1000182c 	.word	0x1000182c
    dbcc:	00afafaf 	.word	0x00afafaf
    dbd0:	10001828 	.word	0x10001828
    dbd4:	50023840 	.word	0x50023840
    dbd8:	1000117c 	.word	0x1000117c
    dbdc:	50023844 	.word	0x50023844
    dbe0:	50023848 	.word	0x50023848
    dbe4:	4395c000 	.word	0x4395c000
    dbe8:	3f839874 	.word	0x3f839874
    dbec:	bb8c47a1 	.word	0xbb8c47a1

0000dbf0 <am_hal_adc_deinitialize>:
    dbf0:	b128      	cbz	r0, dbfe <am_hal_adc_deinitialize+0xe>
    dbf2:	6803      	ldr	r3, [r0, #0]
    dbf4:	4a0c      	ldr	r2, [pc, #48]	; (dc28 <am_hal_adc_deinitialize+0x38>)
    dbf6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dbfa:	4293      	cmp	r3, r2
    dbfc:	d001      	beq.n	dc02 <am_hal_adc_deinitialize+0x12>
    dbfe:	2002      	movs	r0, #2
    dc00:	4770      	bx	lr
    dc02:	78c3      	ldrb	r3, [r0, #3]
    dc04:	079b      	lsls	r3, r3, #30
    dc06:	d508      	bpl.n	dc1a <am_hal_adc_deinitialize+0x2a>
    dc08:	4b08      	ldr	r3, [pc, #32]	; (dc2c <am_hal_adc_deinitialize+0x3c>)
    dc0a:	681a      	ldr	r2, [r3, #0]
    dc0c:	f36f 0200 	bfc	r2, #0, #1
    dc10:	601a      	str	r2, [r3, #0]
    dc12:	78c3      	ldrb	r3, [r0, #3]
    dc14:	f36f 0341 	bfc	r3, #1, #1
    dc18:	70c3      	strb	r3, [r0, #3]
    dc1a:	78c3      	ldrb	r3, [r0, #3]
    dc1c:	f36f 0300 	bfc	r3, #0, #1
    dc20:	70c3      	strb	r3, [r0, #3]
    dc22:	2000      	movs	r0, #0
    dc24:	4770      	bx	lr
    dc26:	bf00      	nop
    dc28:	01afafaf 	.word	0x01afafaf
    dc2c:	50010000 	.word	0x50010000

0000dc30 <am_hal_adc_configure>:
    dc30:	b128      	cbz	r0, dc3e <am_hal_adc_configure+0xe>
    dc32:	6803      	ldr	r3, [r0, #0]
    dc34:	4a18      	ldr	r2, [pc, #96]	; (dc98 <am_hal_adc_configure+0x68>)
    dc36:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc3a:	4293      	cmp	r3, r2
    dc3c:	d001      	beq.n	dc42 <am_hal_adc_configure+0x12>
    dc3e:	2002      	movs	r0, #2
    dc40:	4770      	bx	lr
    dc42:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc44:	7808      	ldrb	r0, [r1, #0]
    dc46:	784d      	ldrb	r5, [r1, #1]
    dc48:	788c      	ldrb	r4, [r1, #2]
    dc4a:	f891 e003 	ldrb.w	lr, [r1, #3]
    dc4e:	790f      	ldrb	r7, [r1, #4]
    dc50:	794a      	ldrb	r2, [r1, #5]
    dc52:	798b      	ldrb	r3, [r1, #6]
    dc54:	4e11      	ldr	r6, [pc, #68]	; (dc9c <am_hal_adc_configure+0x6c>)
    dc56:	0600      	lsls	r0, r0, #24
    dc58:	04ed      	lsls	r5, r5, #19
    dc5a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    dc5e:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    dc62:	4328      	orrs	r0, r5
    dc64:	0424      	lsls	r4, r4, #16
    dc66:	ea4f 210e 	mov.w	r1, lr, lsl #8
    dc6a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dc6e:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    dc72:	4304      	orrs	r4, r0
    dc74:	f401 7040 	and.w	r0, r1, #768	; 0x300
    dc78:	0139      	lsls	r1, r7, #4
    dc7a:	4320      	orrs	r0, r4
    dc7c:	f001 0110 	and.w	r1, r1, #16
    dc80:	00d2      	lsls	r2, r2, #3
    dc82:	4301      	orrs	r1, r0
    dc84:	f002 0208 	and.w	r2, r2, #8
    dc88:	009b      	lsls	r3, r3, #2
    dc8a:	430a      	orrs	r2, r1
    dc8c:	f003 0304 	and.w	r3, r3, #4
    dc90:	4313      	orrs	r3, r2
    dc92:	6033      	str	r3, [r6, #0]
    dc94:	2000      	movs	r0, #0
    dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc98:	01afafaf 	.word	0x01afafaf
    dc9c:	50010000 	.word	0x50010000

0000dca0 <am_hal_adc_configure_slot>:
    dca0:	b128      	cbz	r0, dcae <am_hal_adc_configure_slot+0xe>
    dca2:	6803      	ldr	r3, [r0, #0]
    dca4:	4816      	ldr	r0, [pc, #88]	; (dd00 <am_hal_adc_configure_slot+0x60>)
    dca6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcaa:	4283      	cmp	r3, r0
    dcac:	d001      	beq.n	dcb2 <am_hal_adc_configure_slot+0x12>
    dcae:	2002      	movs	r0, #2
    dcb0:	4770      	bx	lr
    dcb2:	2907      	cmp	r1, #7
    dcb4:	d901      	bls.n	dcba <am_hal_adc_configure_slot+0x1a>
    dcb6:	2005      	movs	r0, #5
    dcb8:	4770      	bx	lr
    dcba:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcbc:	7813      	ldrb	r3, [r2, #0]
    dcbe:	7854      	ldrb	r4, [r2, #1]
    dcc0:	7890      	ldrb	r0, [r2, #2]
    dcc2:	78d7      	ldrb	r7, [r2, #3]
    dcc4:	f892 e004 	ldrb.w	lr, [r2, #4]
    dcc8:	4d0e      	ldr	r5, [pc, #56]	; (dd04 <am_hal_adc_configure_slot+0x64>)
    dcca:	4e0f      	ldr	r6, [pc, #60]	; (dd08 <am_hal_adc_configure_slot+0x68>)
    dccc:	061b      	lsls	r3, r3, #24
    dcce:	0424      	lsls	r4, r4, #16
    dcd0:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    dcd4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    dcd8:	4323      	orrs	r3, r4
    dcda:	0202      	lsls	r2, r0, #8
    dcdc:	ea43 0e0e 	orr.w	lr, r3, lr
    dce0:	440d      	add	r5, r1
    dce2:	007b      	lsls	r3, r7, #1
    dce4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    dce8:	ea4e 0202 	orr.w	r2, lr, r2
    dcec:	00ad      	lsls	r5, r5, #2
    dcee:	f003 0302 	and.w	r3, r3, #2
    dcf2:	4313      	orrs	r3, r2
    dcf4:	602b      	str	r3, [r5, #0]
    dcf6:	6833      	ldr	r3, [r6, #0]
    dcf8:	3301      	adds	r3, #1
    dcfa:	6033      	str	r3, [r6, #0]
    dcfc:	2000      	movs	r0, #0
    dcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd00:	01afafaf 	.word	0x01afafaf
    dd04:	14004003 	.word	0x14004003
    dd08:	10001828 	.word	0x10001828

0000dd0c <am_hal_adc_enable>:
    dd0c:	4603      	mov	r3, r0
    dd0e:	b128      	cbz	r0, dd1c <am_hal_adc_enable+0x10>
    dd10:	6802      	ldr	r2, [r0, #0]
    dd12:	490c      	ldr	r1, [pc, #48]	; (dd44 <am_hal_adc_enable+0x38>)
    dd14:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dd18:	428a      	cmp	r2, r1
    dd1a:	d001      	beq.n	dd20 <am_hal_adc_enable+0x14>
    dd1c:	2002      	movs	r0, #2
    dd1e:	4770      	bx	lr
    dd20:	78c2      	ldrb	r2, [r0, #3]
    dd22:	f002 0202 	and.w	r2, r2, #2
    dd26:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    dd2a:	b94a      	cbnz	r2, dd40 <am_hal_adc_enable+0x34>
    dd2c:	4906      	ldr	r1, [pc, #24]	; (dd48 <am_hal_adc_enable+0x3c>)
    dd2e:	680a      	ldr	r2, [r1, #0]
    dd30:	f042 0201 	orr.w	r2, r2, #1
    dd34:	600a      	str	r2, [r1, #0]
    dd36:	78da      	ldrb	r2, [r3, #3]
    dd38:	f042 0202 	orr.w	r2, r2, #2
    dd3c:	70da      	strb	r2, [r3, #3]
    dd3e:	4770      	bx	lr
    dd40:	2000      	movs	r0, #0
    dd42:	4770      	bx	lr
    dd44:	01afafaf 	.word	0x01afafaf
    dd48:	50010000 	.word	0x50010000

0000dd4c <am_hal_adc_disable>:
    dd4c:	b128      	cbz	r0, dd5a <am_hal_adc_disable+0xe>
    dd4e:	6803      	ldr	r3, [r0, #0]
    dd50:	4a08      	ldr	r2, [pc, #32]	; (dd74 <am_hal_adc_disable+0x28>)
    dd52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd56:	4293      	cmp	r3, r2
    dd58:	d001      	beq.n	dd5e <am_hal_adc_disable+0x12>
    dd5a:	2002      	movs	r0, #2
    dd5c:	4770      	bx	lr
    dd5e:	4b06      	ldr	r3, [pc, #24]	; (dd78 <am_hal_adc_disable+0x2c>)
    dd60:	681a      	ldr	r2, [r3, #0]
    dd62:	f36f 0200 	bfc	r2, #0, #1
    dd66:	601a      	str	r2, [r3, #0]
    dd68:	78c3      	ldrb	r3, [r0, #3]
    dd6a:	f36f 0341 	bfc	r3, #1, #1
    dd6e:	70c3      	strb	r3, [r0, #3]
    dd70:	2000      	movs	r0, #0
    dd72:	4770      	bx	lr
    dd74:	01afafaf 	.word	0x01afafaf
    dd78:	50010000 	.word	0x50010000

0000dd7c <am_hal_adc_interrupt_enable>:
    dd7c:	b128      	cbz	r0, dd8a <am_hal_adc_interrupt_enable+0xe>
    dd7e:	6803      	ldr	r3, [r0, #0]
    dd80:	4a07      	ldr	r2, [pc, #28]	; (dda0 <am_hal_adc_interrupt_enable+0x24>)
    dd82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd86:	4293      	cmp	r3, r2
    dd88:	d001      	beq.n	dd8e <am_hal_adc_interrupt_enable+0x12>
    dd8a:	2002      	movs	r0, #2
    dd8c:	4770      	bx	lr
    dd8e:	4b05      	ldr	r3, [pc, #20]	; (dda4 <am_hal_adc_interrupt_enable+0x28>)
    dd90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd94:	4311      	orrs	r1, r2
    dd96:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dd9a:	2000      	movs	r0, #0
    dd9c:	4770      	bx	lr
    dd9e:	bf00      	nop
    dda0:	01afafaf 	.word	0x01afafaf
    dda4:	50010000 	.word	0x50010000

0000dda8 <am_hal_adc_interrupt_status>:
    dda8:	b128      	cbz	r0, ddb6 <am_hal_adc_interrupt_status+0xe>
    ddaa:	6803      	ldr	r3, [r0, #0]
    ddac:	480b      	ldr	r0, [pc, #44]	; (dddc <am_hal_adc_interrupt_status+0x34>)
    ddae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ddb2:	4283      	cmp	r3, r0
    ddb4:	d001      	beq.n	ddba <am_hal_adc_interrupt_status+0x12>
    ddb6:	2002      	movs	r0, #2
    ddb8:	4770      	bx	lr
    ddba:	b92a      	cbnz	r2, ddc8 <am_hal_adc_interrupt_status+0x20>
    ddbc:	4b08      	ldr	r3, [pc, #32]	; (dde0 <am_hal_adc_interrupt_status+0x38>)
    ddbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    ddc2:	600b      	str	r3, [r1, #0]
    ddc4:	4610      	mov	r0, r2
    ddc6:	4770      	bx	lr
    ddc8:	4a05      	ldr	r2, [pc, #20]	; (dde0 <am_hal_adc_interrupt_status+0x38>)
    ddca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    ddce:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ddd2:	4003      	ands	r3, r0
    ddd4:	600b      	str	r3, [r1, #0]
    ddd6:	2000      	movs	r0, #0
    ddd8:	4770      	bx	lr
    ddda:	bf00      	nop
    dddc:	01afafaf 	.word	0x01afafaf
    dde0:	50010000 	.word	0x50010000

0000dde4 <am_hal_adc_interrupt_clear>:
    dde4:	b128      	cbz	r0, ddf2 <am_hal_adc_interrupt_clear+0xe>
    dde6:	6803      	ldr	r3, [r0, #0]
    dde8:	4a05      	ldr	r2, [pc, #20]	; (de00 <am_hal_adc_interrupt_clear+0x1c>)
    ddea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ddee:	4293      	cmp	r3, r2
    ddf0:	d001      	beq.n	ddf6 <am_hal_adc_interrupt_clear+0x12>
    ddf2:	2002      	movs	r0, #2
    ddf4:	4770      	bx	lr
    ddf6:	4b03      	ldr	r3, [pc, #12]	; (de04 <am_hal_adc_interrupt_clear+0x20>)
    ddf8:	2000      	movs	r0, #0
    ddfa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    ddfe:	4770      	bx	lr
    de00:	01afafaf 	.word	0x01afafaf
    de04:	50010000 	.word	0x50010000

0000de08 <am_hal_adc_samples_read>:
    de08:	b148      	cbz	r0, de1e <am_hal_adc_samples_read+0x16>
    de0a:	6800      	ldr	r0, [r0, #0]
    de0c:	b470      	push	{r4, r5, r6}
    de0e:	4c2a      	ldr	r4, [pc, #168]	; (deb8 <am_hal_adc_samples_read+0xb0>)
    de10:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    de14:	42a0      	cmp	r0, r4
    de16:	d004      	beq.n	de22 <am_hal_adc_samples_read+0x1a>
    de18:	2002      	movs	r0, #2
    de1a:	bc70      	pop	{r4, r5, r6}
    de1c:	4770      	bx	lr
    de1e:	2002      	movs	r0, #2
    de20:	4770      	bx	lr
    de22:	9803      	ldr	r0, [sp, #12]
    de24:	b1e0      	cbz	r0, de60 <am_hal_adc_samples_read+0x58>
    de26:	2000      	movs	r0, #0
    de28:	681c      	ldr	r4, [r3, #0]
    de2a:	6018      	str	r0, [r3, #0]
    de2c:	b1d2      	cbz	r2, de64 <am_hal_adc_samples_read+0x5c>
    de2e:	9903      	ldr	r1, [sp, #12]
    de30:	4d22      	ldr	r5, [pc, #136]	; (debc <am_hal_adc_samples_read+0xb4>)
    de32:	3a04      	subs	r2, #4
    de34:	3108      	adds	r1, #8
    de36:	f852 0f04 	ldr.w	r0, [r2, #4]!
    de3a:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    de3c:	f3c0 7002 	ubfx	r0, r0, #28, #3
    de40:	f841 0c04 	str.w	r0, [r1, #-4]
    de44:	6810      	ldr	r0, [r2, #0]
    de46:	f3c0 108d 	ubfx	r0, r0, #6, #14
    de4a:	f841 0c08 	str.w	r0, [r1, #-8]
    de4e:	6818      	ldr	r0, [r3, #0]
    de50:	3001      	adds	r0, #1
    de52:	4284      	cmp	r4, r0
    de54:	f101 0108 	add.w	r1, r1, #8
    de58:	6018      	str	r0, [r3, #0]
    de5a:	d8ec      	bhi.n	de36 <am_hal_adc_samples_read+0x2e>
    de5c:	2000      	movs	r0, #0
    de5e:	e7dc      	b.n	de1a <am_hal_adc_samples_read+0x12>
    de60:	2006      	movs	r0, #6
    de62:	e7da      	b.n	de1a <am_hal_adc_samples_read+0x12>
    de64:	9a03      	ldr	r2, [sp, #12]
    de66:	4e15      	ldr	r6, [pc, #84]	; (debc <am_hal_adc_samples_read+0xb4>)
    de68:	f102 0008 	add.w	r0, r2, #8
    de6c:	b9a1      	cbnz	r1, de98 <am_hal_adc_samples_read+0x90>
    de6e:	e001      	b.n	de74 <am_hal_adc_samples_read+0x6c>
    de70:	428c      	cmp	r4, r1
    de72:	d9f3      	bls.n	de5c <am_hal_adc_samples_read+0x54>
    de74:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    de76:	f3c2 118d 	ubfx	r1, r2, #6, #14
    de7a:	f3c2 7502 	ubfx	r5, r2, #28, #3
    de7e:	e900 0022 	stmdb	r0, {r1, r5}
    de82:	6819      	ldr	r1, [r3, #0]
    de84:	f3c2 5207 	ubfx	r2, r2, #20, #8
    de88:	3101      	adds	r1, #1
    de8a:	3008      	adds	r0, #8
    de8c:	6019      	str	r1, [r3, #0]
    de8e:	2a00      	cmp	r2, #0
    de90:	d1ee      	bne.n	de70 <am_hal_adc_samples_read+0x68>
    de92:	e7e3      	b.n	de5c <am_hal_adc_samples_read+0x54>
    de94:	428c      	cmp	r4, r1
    de96:	d9e1      	bls.n	de5c <am_hal_adc_samples_read+0x54>
    de98:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    de9a:	f3c2 0113 	ubfx	r1, r2, #0, #20
    de9e:	f3c2 7502 	ubfx	r5, r2, #28, #3
    dea2:	e900 0022 	stmdb	r0, {r1, r5}
    dea6:	6819      	ldr	r1, [r3, #0]
    dea8:	f3c2 5207 	ubfx	r2, r2, #20, #8
    deac:	3101      	adds	r1, #1
    deae:	3008      	adds	r0, #8
    deb0:	6019      	str	r1, [r3, #0]
    deb2:	2a00      	cmp	r2, #0
    deb4:	d1ee      	bne.n	de94 <am_hal_adc_samples_read+0x8c>
    deb6:	e7d1      	b.n	de5c <am_hal_adc_samples_read+0x54>
    deb8:	01afafaf 	.word	0x01afafaf
    debc:	50010000 	.word	0x50010000

0000dec0 <am_hal_adc_sw_trigger>:
    dec0:	b128      	cbz	r0, dece <am_hal_adc_sw_trigger+0xe>
    dec2:	6803      	ldr	r3, [r0, #0]
    dec4:	4a05      	ldr	r2, [pc, #20]	; (dedc <am_hal_adc_sw_trigger+0x1c>)
    dec6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    deca:	4293      	cmp	r3, r2
    decc:	d001      	beq.n	ded2 <am_hal_adc_sw_trigger+0x12>
    dece:	2002      	movs	r0, #2
    ded0:	4770      	bx	lr
    ded2:	4b03      	ldr	r3, [pc, #12]	; (dee0 <am_hal_adc_sw_trigger+0x20>)
    ded4:	2237      	movs	r2, #55	; 0x37
    ded6:	609a      	str	r2, [r3, #8]
    ded8:	2000      	movs	r0, #0
    deda:	4770      	bx	lr
    dedc:	01afafaf 	.word	0x01afafaf
    dee0:	50010000 	.word	0x50010000

0000dee4 <am_hal_adc_power_control>:
    dee4:	b140      	cbz	r0, def8 <am_hal_adc_power_control+0x14>
    dee6:	6803      	ldr	r3, [r0, #0]
    dee8:	b570      	push	{r4, r5, r6, lr}
    deea:	4c2e      	ldr	r4, [pc, #184]	; (dfa4 <am_hal_adc_power_control+0xc0>)
    deec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    def0:	42a3      	cmp	r3, r4
    def2:	d003      	beq.n	defc <am_hal_adc_power_control+0x18>
    def4:	2002      	movs	r0, #2
    def6:	bd70      	pop	{r4, r5, r6, pc}
    def8:	2002      	movs	r0, #2
    defa:	4770      	bx	lr
    defc:	4604      	mov	r4, r0
    defe:	4615      	mov	r5, r2
    df00:	460e      	mov	r6, r1
    df02:	b329      	cbz	r1, df50 <am_hal_adc_power_control+0x6c>
    df04:	2902      	cmp	r1, #2
    df06:	d821      	bhi.n	df4c <am_hal_adc_power_control+0x68>
    df08:	b1da      	cbz	r2, df42 <am_hal_adc_power_control+0x5e>
    df0a:	4b27      	ldr	r3, [pc, #156]	; (dfa8 <am_hal_adc_power_control+0xc4>)
    df0c:	68da      	ldr	r2, [r3, #12]
    df0e:	6142      	str	r2, [r0, #20]
    df10:	691a      	ldr	r2, [r3, #16]
    df12:	6182      	str	r2, [r0, #24]
    df14:	695a      	ldr	r2, [r3, #20]
    df16:	61c2      	str	r2, [r0, #28]
    df18:	699a      	ldr	r2, [r3, #24]
    df1a:	6202      	str	r2, [r0, #32]
    df1c:	69da      	ldr	r2, [r3, #28]
    df1e:	6242      	str	r2, [r0, #36]	; 0x24
    df20:	6a1a      	ldr	r2, [r3, #32]
    df22:	6282      	str	r2, [r0, #40]	; 0x28
    df24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    df26:	62c2      	str	r2, [r0, #44]	; 0x2c
    df28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df2a:	6302      	str	r2, [r0, #48]	; 0x30
    df2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    df2e:	6342      	str	r2, [r0, #52]	; 0x34
    df30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    df32:	6382      	str	r2, [r0, #56]	; 0x38
    df34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    df38:	63c2      	str	r2, [r0, #60]	; 0x3c
    df3a:	681b      	ldr	r3, [r3, #0]
    df3c:	6103      	str	r3, [r0, #16]
    df3e:	2301      	movs	r3, #1
    df40:	7303      	strb	r3, [r0, #12]
    df42:	200a      	movs	r0, #10
    df44:	f001 fb94 	bl	f670 <am_hal_pwrctrl_periph_disable>
    df48:	2000      	movs	r0, #0
    df4a:	bd70      	pop	{r4, r5, r6, pc}
    df4c:	2006      	movs	r0, #6
    df4e:	bd70      	pop	{r4, r5, r6, pc}
    df50:	b11a      	cbz	r2, df5a <am_hal_adc_power_control+0x76>
    df52:	7b03      	ldrb	r3, [r0, #12]
    df54:	b933      	cbnz	r3, df64 <am_hal_adc_power_control+0x80>
    df56:	2007      	movs	r0, #7
    df58:	bd70      	pop	{r4, r5, r6, pc}
    df5a:	200a      	movs	r0, #10
    df5c:	f001 fb5e 	bl	f61c <am_hal_pwrctrl_periph_enable>
    df60:	4628      	mov	r0, r5
    df62:	bd70      	pop	{r4, r5, r6, pc}
    df64:	200a      	movs	r0, #10
    df66:	f001 fb59 	bl	f61c <am_hal_pwrctrl_periph_enable>
    df6a:	4b0f      	ldr	r3, [pc, #60]	; (dfa8 <am_hal_adc_power_control+0xc4>)
    df6c:	6962      	ldr	r2, [r4, #20]
    df6e:	60da      	str	r2, [r3, #12]
    df70:	69a2      	ldr	r2, [r4, #24]
    df72:	611a      	str	r2, [r3, #16]
    df74:	69e2      	ldr	r2, [r4, #28]
    df76:	615a      	str	r2, [r3, #20]
    df78:	6a22      	ldr	r2, [r4, #32]
    df7a:	619a      	str	r2, [r3, #24]
    df7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    df7e:	61da      	str	r2, [r3, #28]
    df80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    df82:	621a      	str	r2, [r3, #32]
    df84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    df86:	625a      	str	r2, [r3, #36]	; 0x24
    df88:	6b22      	ldr	r2, [r4, #48]	; 0x30
    df8a:	629a      	str	r2, [r3, #40]	; 0x28
    df8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    df8e:	62da      	str	r2, [r3, #44]	; 0x2c
    df90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df92:	631a      	str	r2, [r3, #48]	; 0x30
    df94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    df96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    df9a:	6922      	ldr	r2, [r4, #16]
    df9c:	601a      	str	r2, [r3, #0]
    df9e:	4630      	mov	r0, r6
    dfa0:	7326      	strb	r6, [r4, #12]
    dfa2:	bd70      	pop	{r4, r5, r6, pc}
    dfa4:	01afafaf 	.word	0x01afafaf
    dfa8:	50010000 	.word	0x50010000

0000dfac <am_hal_cachectrl_config>:
    dfac:	b530      	push	{r4, r5, lr}
    dfae:	b083      	sub	sp, #12
    dfb0:	4605      	mov	r5, r0
    dfb2:	f000 fd35 	bl	ea20 <am_hal_interrupt_master_disable>
    dfb6:	4c0f      	ldr	r4, [pc, #60]	; (dff4 <am_hal_cachectrl_config+0x48>)
    dfb8:	9001      	str	r0, [sp, #4]
    dfba:	6823      	ldr	r3, [r4, #0]
    dfbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    dfc0:	6023      	str	r3, [r4, #0]
    dfc2:	9801      	ldr	r0, [sp, #4]
    dfc4:	f000 fd30 	bl	ea28 <am_hal_interrupt_master_set>
    dfc8:	78ab      	ldrb	r3, [r5, #2]
    dfca:	782a      	ldrb	r2, [r5, #0]
    dfcc:	7869      	ldrb	r1, [r5, #1]
    dfce:	005b      	lsls	r3, r3, #1
    dfd0:	0112      	lsls	r2, r2, #4
    dfd2:	b2d2      	uxtb	r2, r2
    dfd4:	f003 0302 	and.w	r3, r3, #2
    dfd8:	4313      	orrs	r3, r2
    dfda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    dfde:	020a      	lsls	r2, r1, #8
    dfe0:	f402 7240 	and.w	r2, r2, #768	; 0x300
    dfe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    dfe8:	4313      	orrs	r3, r2
    dfea:	2000      	movs	r0, #0
    dfec:	6023      	str	r3, [r4, #0]
    dfee:	b003      	add	sp, #12
    dff0:	bd30      	pop	{r4, r5, pc}
    dff2:	bf00      	nop
    dff4:	40018000 	.word	0x40018000

0000dff8 <am_hal_cachectrl_enable>:
    dff8:	4a03      	ldr	r2, [pc, #12]	; (e008 <am_hal_cachectrl_enable+0x10>)
    dffa:	6813      	ldr	r3, [r2, #0]
    dffc:	f043 0301 	orr.w	r3, r3, #1
    e000:	6013      	str	r3, [r2, #0]
    e002:	2000      	movs	r0, #0
    e004:	4770      	bx	lr
    e006:	bf00      	nop
    e008:	40018000 	.word	0x40018000

0000e00c <am_hal_cachectrl_control>:
    e00c:	b510      	push	{r4, lr}
    e00e:	3801      	subs	r0, #1
    e010:	b08e      	sub	sp, #56	; 0x38
    e012:	2810      	cmp	r0, #16
    e014:	f200 8143 	bhi.w	e29e <am_hal_cachectrl_control+0x292>
    e018:	e8df f010 	tbh	[pc, r0, lsl #1]
    e01c:	01380136 	.word	0x01380136
    e020:	0011013e 	.word	0x0011013e
    e024:	001a0018 	.word	0x001a0018
    e028:	001f001c 	.word	0x001f001c
    e02c:	00300022 	.word	0x00300022
    e030:	0074003c 	.word	0x0074003c
    e034:	00e400ac 	.word	0x00e400ac
    e038:	011a00ff 	.word	0x011a00ff
    e03c:	0120      	.short	0x0120
    e03e:	f44f 7208 	mov.w	r2, #544	; 0x220
    e042:	4ba8      	ldr	r3, [pc, #672]	; (e2e4 <am_hal_cachectrl_control+0x2d8>)
    e044:	2000      	movs	r0, #0
    e046:	609a      	str	r2, [r3, #8]
    e048:	b00e      	add	sp, #56	; 0x38
    e04a:	bd10      	pop	{r4, pc}
    e04c:	2240      	movs	r2, #64	; 0x40
    e04e:	e7f8      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e050:	2220      	movs	r2, #32
    e052:	e7f6      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e054:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e058:	e7f3      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e05a:	f44f 7200 	mov.w	r2, #512	; 0x200
    e05e:	e7f0      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e060:	f000 fcde 	bl	ea20 <am_hal_interrupt_master_disable>
    e064:	4a9f      	ldr	r2, [pc, #636]	; (e2e4 <am_hal_cachectrl_control+0x2d8>)
    e066:	9000      	str	r0, [sp, #0]
    e068:	6813      	ldr	r3, [r2, #0]
    e06a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e06e:	6013      	str	r3, [r2, #0]
    e070:	9800      	ldr	r0, [sp, #0]
    e072:	f000 fcd9 	bl	ea28 <am_hal_interrupt_master_set>
    e076:	2000      	movs	r0, #0
    e078:	b00e      	add	sp, #56	; 0x38
    e07a:	bd10      	pop	{r4, pc}
    e07c:	f000 fcd0 	bl	ea20 <am_hal_interrupt_master_disable>
    e080:	4a98      	ldr	r2, [pc, #608]	; (e2e4 <am_hal_cachectrl_control+0x2d8>)
    e082:	9001      	str	r0, [sp, #4]
    e084:	6813      	ldr	r3, [r2, #0]
    e086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e08a:	6013      	str	r3, [r2, #0]
    e08c:	9801      	ldr	r0, [sp, #4]
    e08e:	f000 fccb 	bl	ea28 <am_hal_interrupt_master_set>
    e092:	e7f0      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e094:	f000 fcc4 	bl	ea20 <am_hal_interrupt_master_disable>
    e098:	4603      	mov	r3, r0
    e09a:	4893      	ldr	r0, [pc, #588]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e09c:	9302      	str	r3, [sp, #8]
    e09e:	f000 faff 	bl	e6a0 <am_hal_flash_load_ui32>
    e0a2:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e0a6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e0aa:	488f      	ldr	r0, [pc, #572]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e0ac:	f000 fafc 	bl	e6a8 <am_hal_flash_store_ui32>
    e0b0:	9802      	ldr	r0, [sp, #8]
    e0b2:	f000 fcb9 	bl	ea28 <am_hal_interrupt_master_set>
    e0b6:	f000 fcb3 	bl	ea20 <am_hal_interrupt_master_disable>
    e0ba:	4603      	mov	r3, r0
    e0bc:	488a      	ldr	r0, [pc, #552]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e0be:	9303      	str	r3, [sp, #12]
    e0c0:	f000 faee 	bl	e6a0 <am_hal_flash_load_ui32>
    e0c4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e0c8:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    e0cc:	4886      	ldr	r0, [pc, #536]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e0ce:	f000 faeb 	bl	e6a8 <am_hal_flash_store_ui32>
    e0d2:	9803      	ldr	r0, [sp, #12]
    e0d4:	f000 fca8 	bl	ea28 <am_hal_interrupt_master_set>
    e0d8:	f000 fca2 	bl	ea20 <am_hal_interrupt_master_disable>
    e0dc:	4603      	mov	r3, r0
    e0de:	4882      	ldr	r0, [pc, #520]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e0e0:	9304      	str	r3, [sp, #16]
    e0e2:	f000 fadd 	bl	e6a0 <am_hal_flash_load_ui32>
    e0e6:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e0ea:	f021 010f 	bic.w	r1, r1, #15
    e0ee:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e0f2:	f041 0103 	orr.w	r1, r1, #3
    e0f6:	487c      	ldr	r0, [pc, #496]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e0f8:	f000 fad6 	bl	e6a8 <am_hal_flash_store_ui32>
    e0fc:	9804      	ldr	r0, [sp, #16]
    e0fe:	f000 fc93 	bl	ea28 <am_hal_interrupt_master_set>
    e102:	e7b8      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e104:	f000 fc8c 	bl	ea20 <am_hal_interrupt_master_disable>
    e108:	4603      	mov	r3, r0
    e10a:	4877      	ldr	r0, [pc, #476]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e10c:	9305      	str	r3, [sp, #20]
    e10e:	f000 fac7 	bl	e6a0 <am_hal_flash_load_ui32>
    e112:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e116:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e11a:	4873      	ldr	r0, [pc, #460]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e11c:	f000 fac4 	bl	e6a8 <am_hal_flash_store_ui32>
    e120:	9805      	ldr	r0, [sp, #20]
    e122:	f000 fc81 	bl	ea28 <am_hal_interrupt_master_set>
    e126:	f000 fc7b 	bl	ea20 <am_hal_interrupt_master_disable>
    e12a:	4603      	mov	r3, r0
    e12c:	486e      	ldr	r0, [pc, #440]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e12e:	9306      	str	r3, [sp, #24]
    e130:	f000 fab6 	bl	e6a0 <am_hal_flash_load_ui32>
    e134:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e138:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    e13c:	486a      	ldr	r0, [pc, #424]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e13e:	f000 fab3 	bl	e6a8 <am_hal_flash_store_ui32>
    e142:	9806      	ldr	r0, [sp, #24]
    e144:	f000 fc70 	bl	ea28 <am_hal_interrupt_master_set>
    e148:	f000 fc6a 	bl	ea20 <am_hal_interrupt_master_disable>
    e14c:	4603      	mov	r3, r0
    e14e:	4866      	ldr	r0, [pc, #408]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e150:	9307      	str	r3, [sp, #28]
    e152:	f000 faa5 	bl	e6a0 <am_hal_flash_load_ui32>
    e156:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e15a:	f021 010f 	bic.w	r1, r1, #15
    e15e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e162:	f041 0101 	orr.w	r1, r1, #1
    e166:	4860      	ldr	r0, [pc, #384]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e168:	f000 fa9e 	bl	e6a8 <am_hal_flash_store_ui32>
    e16c:	9807      	ldr	r0, [sp, #28]
    e16e:	f000 fc5b 	bl	ea28 <am_hal_interrupt_master_set>
    e172:	e780      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e174:	f000 fc54 	bl	ea20 <am_hal_interrupt_master_disable>
    e178:	4603      	mov	r3, r0
    e17a:	485b      	ldr	r0, [pc, #364]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e17c:	9308      	str	r3, [sp, #32]
    e17e:	f000 fa8f 	bl	e6a0 <am_hal_flash_load_ui32>
    e182:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e186:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e18a:	4857      	ldr	r0, [pc, #348]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e18c:	f000 fa8c 	bl	e6a8 <am_hal_flash_store_ui32>
    e190:	9808      	ldr	r0, [sp, #32]
    e192:	f000 fc49 	bl	ea28 <am_hal_interrupt_master_set>
    e196:	f000 fc43 	bl	ea20 <am_hal_interrupt_master_disable>
    e19a:	4603      	mov	r3, r0
    e19c:	4852      	ldr	r0, [pc, #328]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e19e:	9309      	str	r3, [sp, #36]	; 0x24
    e1a0:	f000 fa7e 	bl	e6a0 <am_hal_flash_load_ui32>
    e1a4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e1a8:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    e1ac:	484e      	ldr	r0, [pc, #312]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e1ae:	f000 fa7b 	bl	e6a8 <am_hal_flash_store_ui32>
    e1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    e1b4:	f000 fc38 	bl	ea28 <am_hal_interrupt_master_set>
    e1b8:	f000 fc32 	bl	ea20 <am_hal_interrupt_master_disable>
    e1bc:	4603      	mov	r3, r0
    e1be:	484a      	ldr	r0, [pc, #296]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e1c0:	930a      	str	r3, [sp, #40]	; 0x28
    e1c2:	f000 fa6d 	bl	e6a0 <am_hal_flash_load_ui32>
    e1c6:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e1ca:	f021 010f 	bic.w	r1, r1, #15
    e1ce:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e1d2:	f041 0101 	orr.w	r1, r1, #1
    e1d6:	4844      	ldr	r0, [pc, #272]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e1d8:	f000 fa66 	bl	e6a8 <am_hal_flash_store_ui32>
    e1dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    e1de:	f000 fc23 	bl	ea28 <am_hal_interrupt_master_set>
    e1e2:	e748      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e1e4:	2900      	cmp	r1, #0
    e1e6:	d05a      	beq.n	e29e <am_hal_cachectrl_control+0x292>
    e1e8:	680c      	ldr	r4, [r1, #0]
    e1ea:	2c03      	cmp	r4, #3
    e1ec:	d834      	bhi.n	e258 <am_hal_cachectrl_control+0x24c>
    e1ee:	f000 fc17 	bl	ea20 <am_hal_interrupt_master_disable>
    e1f2:	4603      	mov	r3, r0
    e1f4:	483c      	ldr	r0, [pc, #240]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e1f6:	930b      	str	r3, [sp, #44]	; 0x2c
    e1f8:	f000 fa52 	bl	e6a0 <am_hal_flash_load_ui32>
    e1fc:	0323      	lsls	r3, r4, #12
    e1fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    e202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e206:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e20a:	4319      	orrs	r1, r3
    e20c:	4836      	ldr	r0, [pc, #216]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e20e:	f000 fa4b 	bl	e6a8 <am_hal_flash_store_ui32>
    e212:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e214:	f000 fc08 	bl	ea28 <am_hal_interrupt_master_set>
    e218:	e72d      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e21a:	2900      	cmp	r1, #0
    e21c:	d03f      	beq.n	e29e <am_hal_cachectrl_control+0x292>
    e21e:	680c      	ldr	r4, [r1, #0]
    e220:	2c07      	cmp	r4, #7
    e222:	d819      	bhi.n	e258 <am_hal_cachectrl_control+0x24c>
    e224:	f000 fbfc 	bl	ea20 <am_hal_interrupt_master_disable>
    e228:	4603      	mov	r3, r0
    e22a:	482f      	ldr	r0, [pc, #188]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e22c:	930c      	str	r3, [sp, #48]	; 0x30
    e22e:	f000 fa37 	bl	e6a0 <am_hal_flash_load_ui32>
    e232:	0123      	lsls	r3, r4, #4
    e234:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e238:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e23c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e240:	4319      	orrs	r1, r3
    e242:	4829      	ldr	r0, [pc, #164]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e244:	f000 fa30 	bl	e6a8 <am_hal_flash_store_ui32>
    e248:	980c      	ldr	r0, [sp, #48]	; 0x30
    e24a:	f000 fbed 	bl	ea28 <am_hal_interrupt_master_set>
    e24e:	e712      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e250:	b329      	cbz	r1, e29e <am_hal_cachectrl_control+0x292>
    e252:	680c      	ldr	r4, [r1, #0]
    e254:	2c0f      	cmp	r4, #15
    e256:	d926      	bls.n	e2a6 <am_hal_cachectrl_control+0x29a>
    e258:	2001      	movs	r0, #1
    e25a:	e6f5      	b.n	e048 <am_hal_cachectrl_control+0x3c>
    e25c:	b1f9      	cbz	r1, e29e <am_hal_cachectrl_control+0x292>
    e25e:	684a      	ldr	r2, [r1, #4]
    e260:	4b22      	ldr	r3, [pc, #136]	; (e2ec <am_hal_cachectrl_control+0x2e0>)
    e262:	4013      	ands	r3, r2
    e264:	b9db      	cbnz	r3, e29e <am_hal_cachectrl_control+0x292>
    e266:	688b      	ldr	r3, [r1, #8]
    e268:	4820      	ldr	r0, [pc, #128]	; (e2ec <am_hal_cachectrl_control+0x2e0>)
    e26a:	4018      	ands	r0, r3
    e26c:	b9b8      	cbnz	r0, e29e <am_hal_cachectrl_control+0x292>
    e26e:	780c      	ldrb	r4, [r1, #0]
    e270:	b374      	cbz	r4, e2d0 <am_hal_cachectrl_control+0x2c4>
    e272:	2c01      	cmp	r4, #1
    e274:	d113      	bne.n	e29e <am_hal_cachectrl_control+0x292>
    e276:	4c1b      	ldr	r4, [pc, #108]	; (e2e4 <am_hal_cachectrl_control+0x2d8>)
    e278:	61a2      	str	r2, [r4, #24]
    e27a:	61e3      	str	r3, [r4, #28]
    e27c:	784a      	ldrb	r2, [r1, #1]
    e27e:	6823      	ldr	r3, [r4, #0]
    e280:	f362 03c3 	bfi	r3, r2, #3, #1
    e284:	6023      	str	r3, [r4, #0]
    e286:	e6df      	b.n	e048 <am_hal_cachectrl_control+0x3c>
    e288:	2201      	movs	r2, #1
    e28a:	e6da      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e28c:	4b15      	ldr	r3, [pc, #84]	; (e2e4 <am_hal_cachectrl_control+0x2d8>)
    e28e:	681b      	ldr	r3, [r3, #0]
    e290:	01db      	lsls	r3, r3, #7
    e292:	d406      	bmi.n	e2a2 <am_hal_cachectrl_control+0x296>
    e294:	2007      	movs	r0, #7
    e296:	e6d7      	b.n	e048 <am_hal_cachectrl_control+0x3c>
    e298:	f44f 6288 	mov.w	r2, #1088	; 0x440
    e29c:	e6d1      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e29e:	2006      	movs	r0, #6
    e2a0:	e6d2      	b.n	e048 <am_hal_cachectrl_control+0x3c>
    e2a2:	2202      	movs	r2, #2
    e2a4:	e6cd      	b.n	e042 <am_hal_cachectrl_control+0x36>
    e2a6:	f000 fbbb 	bl	ea20 <am_hal_interrupt_master_disable>
    e2aa:	4603      	mov	r3, r0
    e2ac:	480e      	ldr	r0, [pc, #56]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e2ae:	930d      	str	r3, [sp, #52]	; 0x34
    e2b0:	f000 f9f6 	bl	e6a0 <am_hal_flash_load_ui32>
    e2b4:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e2b8:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    e2bc:	f021 010f 	bic.w	r1, r1, #15
    e2c0:	4321      	orrs	r1, r4
    e2c2:	4809      	ldr	r0, [pc, #36]	; (e2e8 <am_hal_cachectrl_control+0x2dc>)
    e2c4:	f000 f9f0 	bl	e6a8 <am_hal_flash_store_ui32>
    e2c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    e2ca:	f000 fbad 	bl	ea28 <am_hal_interrupt_master_set>
    e2ce:	e6d2      	b.n	e076 <am_hal_cachectrl_control+0x6a>
    e2d0:	4c04      	ldr	r4, [pc, #16]	; (e2e4 <am_hal_cachectrl_control+0x2d8>)
    e2d2:	6122      	str	r2, [r4, #16]
    e2d4:	6163      	str	r3, [r4, #20]
    e2d6:	784a      	ldrb	r2, [r1, #1]
    e2d8:	6823      	ldr	r3, [r4, #0]
    e2da:	f362 0382 	bfi	r3, r2, #2, #1
    e2de:	6023      	str	r3, [r4, #0]
    e2e0:	e6b2      	b.n	e048 <am_hal_cachectrl_control+0x3c>
    e2e2:	bf00      	nop
    e2e4:	40018000 	.word	0x40018000
    e2e8:	40018004 	.word	0x40018004
    e2ec:	f800000f 	.word	0xf800000f

0000e2f0 <am_hal_clkgen_control>:
    e2f0:	4b41      	ldr	r3, [pc, #260]	; (e3f8 <am_hal_clkgen_control+0x108>)
    e2f2:	681a      	ldr	r2, [r3, #0]
    e2f4:	b912      	cbnz	r2, e2fc <am_hal_clkgen_control+0xc>
    e2f6:	4a41      	ldr	r2, [pc, #260]	; (e3fc <am_hal_clkgen_control+0x10c>)
    e2f8:	6812      	ldr	r2, [r2, #0]
    e2fa:	601a      	str	r2, [r3, #0]
    e2fc:	2809      	cmp	r0, #9
    e2fe:	d878      	bhi.n	e3f2 <am_hal_clkgen_control+0x102>
    e300:	e8df f000 	tbb	[pc, r0]
    e304:	261e160d 	.word	0x261e160d
    e308:	524c423a 	.word	0x524c423a
    e30c:	055a      	.short	0x055a
    e30e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e312:	2000      	movs	r0, #0
    e314:	6a1a      	ldr	r2, [r3, #32]
    e316:	f36f 0200 	bfc	r2, #0, #1
    e31a:	621a      	str	r2, [r3, #32]
    e31c:	4770      	bx	lr
    e31e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e322:	2200      	movs	r2, #0
    e324:	2147      	movs	r1, #71	; 0x47
    e326:	6159      	str	r1, [r3, #20]
    e328:	4610      	mov	r0, r2
    e32a:	619a      	str	r2, [r3, #24]
    e32c:	615a      	str	r2, [r3, #20]
    e32e:	4770      	bx	lr
    e330:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e334:	2000      	movs	r0, #0
    e336:	68d3      	ldr	r3, [r2, #12]
    e338:	f023 0301 	bic.w	r3, r3, #1
    e33c:	60d3      	str	r3, [r2, #12]
    e33e:	4770      	bx	lr
    e340:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e344:	2000      	movs	r0, #0
    e346:	68d3      	ldr	r3, [r2, #12]
    e348:	f023 0302 	bic.w	r3, r3, #2
    e34c:	60d3      	str	r3, [r2, #12]
    e34e:	4770      	bx	lr
    e350:	4a2b      	ldr	r2, [pc, #172]	; (e400 <am_hal_clkgen_control+0x110>)
    e352:	68d3      	ldr	r3, [r2, #12]
    e354:	b2db      	uxtb	r3, r3
    e356:	2b21      	cmp	r3, #33	; 0x21
    e358:	d106      	bne.n	e368 <am_hal_clkgen_control+0x78>
    e35a:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e35e:	2101      	movs	r1, #1
    e360:	f361 2309 	bfi	r3, r1, #8, #2
    e364:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e368:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e36c:	2000      	movs	r0, #0
    e36e:	68d3      	ldr	r3, [r2, #12]
    e370:	f043 0301 	orr.w	r3, r3, #1
    e374:	60d3      	str	r3, [r2, #12]
    e376:	4770      	bx	lr
    e378:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e37c:	2000      	movs	r0, #0
    e37e:	68d3      	ldr	r3, [r2, #12]
    e380:	f043 0302 	orr.w	r3, r3, #2
    e384:	60d3      	str	r3, [r2, #12]
    e386:	4770      	bx	lr
    e388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e38c:	2200      	movs	r2, #0
    e38e:	2047      	movs	r0, #71	; 0x47
    e390:	2101      	movs	r1, #1
    e392:	6158      	str	r0, [r3, #20]
    e394:	6199      	str	r1, [r3, #24]
    e396:	4610      	mov	r0, r2
    e398:	615a      	str	r2, [r3, #20]
    e39a:	4770      	bx	lr
    e39c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e3a0:	2000      	movs	r0, #0
    e3a2:	68da      	ldr	r2, [r3, #12]
    e3a4:	60da      	str	r2, [r3, #12]
    e3a6:	4770      	bx	lr
    e3a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e3ac:	2000      	movs	r0, #0
    e3ae:	68d3      	ldr	r3, [r2, #12]
    e3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e3b4:	60d3      	str	r3, [r2, #12]
    e3b6:	4770      	bx	lr
    e3b8:	b510      	push	{r4, lr}
    e3ba:	4a11      	ldr	r2, [pc, #68]	; (e400 <am_hal_clkgen_control+0x110>)
    e3bc:	68d3      	ldr	r3, [r2, #12]
    e3be:	b2db      	uxtb	r3, r3
    e3c0:	2b21      	cmp	r3, #33	; 0x21
    e3c2:	460c      	mov	r4, r1
    e3c4:	d008      	beq.n	e3d8 <am_hal_clkgen_control+0xe8>
    e3c6:	b194      	cbz	r4, e3ee <am_hal_clkgen_control+0xfe>
    e3c8:	6823      	ldr	r3, [r4, #0]
    e3ca:	f043 0301 	orr.w	r3, r3, #1
    e3ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e3d2:	2000      	movs	r0, #0
    e3d4:	6213      	str	r3, [r2, #32]
    e3d6:	bd10      	pop	{r4, pc}
    e3d8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e3dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e3e0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e3e4:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e3e8:	f000 f910 	bl	e60c <am_hal_flash_delay>
    e3ec:	e7eb      	b.n	e3c6 <am_hal_clkgen_control+0xd6>
    e3ee:	4b05      	ldr	r3, [pc, #20]	; (e404 <am_hal_clkgen_control+0x114>)
    e3f0:	e7ed      	b.n	e3ce <am_hal_clkgen_control+0xde>
    e3f2:	2006      	movs	r0, #6
    e3f4:	4770      	bx	lr
    e3f6:	bf00      	nop
    e3f8:	1000118c 	.word	0x1000118c
    e3fc:	4ffff000 	.word	0x4ffff000
    e400:	40020000 	.word	0x40020000
    e404:	0025b801 	.word	0x0025b801

0000e408 <am_hal_clkgen_status_get>:
    e408:	b1a8      	cbz	r0, e436 <am_hal_clkgen_status_get+0x2e>
    e40a:	b410      	push	{r4}
    e40c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e410:	490a      	ldr	r1, [pc, #40]	; (e43c <am_hal_clkgen_status_get+0x34>)
    e412:	6994      	ldr	r4, [r2, #24]
    e414:	4b0a      	ldr	r3, [pc, #40]	; (e440 <am_hal_clkgen_status_get+0x38>)
    e416:	f014 0f01 	tst.w	r4, #1
    e41a:	bf08      	it	eq
    e41c:	460b      	moveq	r3, r1
    e41e:	6003      	str	r3, [r0, #0]
    e420:	69d3      	ldr	r3, [r2, #28]
    e422:	f85d 4b04 	ldr.w	r4, [sp], #4
    e426:	f003 0201 	and.w	r2, r3, #1
    e42a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e42e:	6042      	str	r2, [r0, #4]
    e430:	7203      	strb	r3, [r0, #8]
    e432:	2000      	movs	r0, #0
    e434:	4770      	bx	lr
    e436:	2006      	movs	r0, #6
    e438:	4770      	bx	lr
    e43a:	bf00      	nop
    e43c:	02dc6c00 	.word	0x02dc6c00
    e440:	016e3600 	.word	0x016e3600

0000e444 <am_hal_ctimer_config_single>:
    e444:	b5f0      	push	{r4, r5, r6, r7, lr}
    e446:	b083      	sub	sp, #12
    e448:	460e      	mov	r6, r1
    e44a:	4614      	mov	r4, r2
    e44c:	0147      	lsls	r7, r0, #5
    e44e:	4605      	mov	r5, r0
    e450:	f000 fae6 	bl	ea20 <am_hal_interrupt_master_disable>
    e454:	4a19      	ldr	r2, [pc, #100]	; (e4bc <am_hal_ctimer_config_single+0x78>)
    e456:	9001      	str	r0, [sp, #4]
    e458:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e45c:	58bb      	ldr	r3, [r7, r2]
    e45e:	d021      	beq.n	e4a4 <am_hal_ctimer_config_single+0x60>
    e460:	ea23 0306 	bic.w	r3, r3, r6
    e464:	1c71      	adds	r1, r6, #1
    e466:	ea43 0304 	orr.w	r3, r3, r4
    e46a:	d00c      	beq.n	e486 <am_hal_ctimer_config_single+0x42>
    e46c:	50bb      	str	r3, [r7, r2]
    e46e:	9801      	ldr	r0, [sp, #4]
    e470:	f000 fada 	bl	ea28 <am_hal_interrupt_master_set>
    e474:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e478:	429e      	cmp	r6, r3
    e47a:	d01c      	beq.n	e4b6 <am_hal_ctimer_config_single+0x72>
    e47c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e480:	d017      	beq.n	e4b2 <am_hal_ctimer_config_single+0x6e>
    e482:	b003      	add	sp, #12
    e484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e48a:	50bb      	str	r3, [r7, r2]
    e48c:	9801      	ldr	r0, [sp, #4]
    e48e:	f000 facb 	bl	ea28 <am_hal_interrupt_master_set>
    e492:	2200      	movs	r2, #0
    e494:	4b0a      	ldr	r3, [pc, #40]	; (e4c0 <am_hal_ctimer_config_single+0x7c>)
    e496:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e49a:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e49e:	54ac      	strb	r4, [r5, r2]
    e4a0:	b003      	add	sp, #12
    e4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4a4:	0424      	lsls	r4, r4, #16
    e4a6:	b29b      	uxth	r3, r3
    e4a8:	4323      	orrs	r3, r4
    e4aa:	50bb      	str	r3, [r7, r2]
    e4ac:	9801      	ldr	r0, [sp, #4]
    e4ae:	f000 fabb 	bl	ea28 <am_hal_interrupt_master_set>
    e4b2:	2201      	movs	r2, #1
    e4b4:	e7ee      	b.n	e494 <am_hal_ctimer_config_single+0x50>
    e4b6:	2200      	movs	r2, #0
    e4b8:	e7ec      	b.n	e494 <am_hal_ctimer_config_single+0x50>
    e4ba:	bf00      	nop
    e4bc:	4000800c 	.word	0x4000800c
    e4c0:	10001048 	.word	0x10001048

0000e4c4 <am_hal_ctimer_start>:
    e4c4:	b570      	push	{r4, r5, r6, lr}
    e4c6:	b082      	sub	sp, #8
    e4c8:	460c      	mov	r4, r1
    e4ca:	0146      	lsls	r6, r0, #5
    e4cc:	4605      	mov	r5, r0
    e4ce:	f000 faa7 	bl	ea20 <am_hal_interrupt_master_disable>
    e4d2:	4a0f      	ldr	r2, [pc, #60]	; (e510 <am_hal_ctimer_start+0x4c>)
    e4d4:	9001      	str	r0, [sp, #4]
    e4d6:	58b3      	ldr	r3, [r6, r2]
    e4d8:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e4dc:	ea23 0301 	bic.w	r3, r3, r1
    e4e0:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e4e4:	430b      	orrs	r3, r1
    e4e6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e4ea:	bf0c      	ite	eq
    e4ec:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e4f0:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e4f4:	50b3      	str	r3, [r6, r2]
    e4f6:	4b07      	ldr	r3, [pc, #28]	; (e514 <am_hal_ctimer_start+0x50>)
    e4f8:	9801      	ldr	r0, [sp, #4]
    e4fa:	bf0c      	ite	eq
    e4fc:	2101      	moveq	r1, #1
    e4fe:	2100      	movne	r1, #0
    e500:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e504:	545c      	strb	r4, [r3, r1]
    e506:	f000 fa8f 	bl	ea28 <am_hal_interrupt_master_set>
    e50a:	b002      	add	sp, #8
    e50c:	bd70      	pop	{r4, r5, r6, pc}
    e50e:	bf00      	nop
    e510:	4000800c 	.word	0x4000800c
    e514:	10001048 	.word	0x10001048

0000e518 <am_hal_ctimer_period_set>:
    e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e51c:	b082      	sub	sp, #8
    e51e:	4689      	mov	r9, r1
    e520:	4698      	mov	r8, r3
    e522:	0147      	lsls	r7, r0, #5
    e524:	4614      	mov	r4, r2
    e526:	f000 fa7b 	bl	ea20 <am_hal_interrupt_master_disable>
    e52a:	f8df a094 	ldr.w	sl, [pc, #148]	; e5c0 <am_hal_ctimer_period_set+0xa8>
    e52e:	9001      	str	r0, [sp, #4]
    e530:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e534:	4d20      	ldr	r5, [pc, #128]	; (e5b8 <am_hal_ctimer_period_set+0xa0>)
    e536:	4e21      	ldr	r6, [pc, #132]	; (e5bc <am_hal_ctimer_period_set+0xa4>)
    e538:	f857 300a 	ldr.w	r3, [r7, sl]
    e53c:	d01a      	beq.n	e574 <am_hal_ctimer_period_set+0x5c>
    e53e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e542:	2b80      	cmp	r3, #128	; 0x80
    e544:	d01b      	beq.n	e57e <am_hal_ctimer_period_set+0x66>
    e546:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e54a:	2000      	movs	r0, #0
    e54c:	4591      	cmp	r9, r2
    e54e:	4603      	mov	r3, r0
    e550:	d01e      	beq.n	e590 <am_hal_ctimer_period_set+0x78>
    e552:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e556:	d025      	beq.n	e5a4 <am_hal_ctimer_period_set+0x8c>
    e558:	0c1b      	lsrs	r3, r3, #16
    e55a:	b2a2      	uxth	r2, r4
    e55c:	041b      	lsls	r3, r3, #16
    e55e:	4310      	orrs	r0, r2
    e560:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e564:	5178      	str	r0, [r7, r5]
    e566:	51bb      	str	r3, [r7, r6]
    e568:	9801      	ldr	r0, [sp, #4]
    e56a:	f000 fa5d 	bl	ea28 <am_hal_interrupt_master_set>
    e56e:	b002      	add	sp, #8
    e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e574:	0c1b      	lsrs	r3, r3, #16
    e576:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e57a:	2b80      	cmp	r3, #128	; 0x80
    e57c:	d111      	bne.n	e5a2 <am_hal_ctimer_period_set+0x8a>
    e57e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e582:	4591      	cmp	r9, r2
    e584:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e588:	4623      	mov	r3, r4
    e58a:	ebc8 0404 	rsb	r4, r8, r4
    e58e:	d1e0      	bne.n	e552 <am_hal_ctimer_period_set+0x3a>
    e590:	b2a3      	uxth	r3, r4
    e592:	4318      	orrs	r0, r3
    e594:	5178      	str	r0, [r7, r5]
    e596:	9801      	ldr	r0, [sp, #4]
    e598:	f000 fa46 	bl	ea28 <am_hal_interrupt_master_set>
    e59c:	b002      	add	sp, #8
    e59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5a2:	2000      	movs	r0, #0
    e5a4:	b2a3      	uxth	r3, r4
    e5a6:	4318      	orrs	r0, r3
    e5a8:	51b8      	str	r0, [r7, r6]
    e5aa:	9801      	ldr	r0, [sp, #4]
    e5ac:	f000 fa3c 	bl	ea28 <am_hal_interrupt_master_set>
    e5b0:	b002      	add	sp, #8
    e5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5b6:	bf00      	nop
    e5b8:	40008004 	.word	0x40008004
    e5bc:	40008008 	.word	0x40008008
    e5c0:	4000800c 	.word	0x4000800c

0000e5c4 <am_hal_ctimer_int_enable>:
    e5c4:	b510      	push	{r4, lr}
    e5c6:	b082      	sub	sp, #8
    e5c8:	4604      	mov	r4, r0
    e5ca:	f000 fa29 	bl	ea20 <am_hal_interrupt_master_disable>
    e5ce:	4b06      	ldr	r3, [pc, #24]	; (e5e8 <am_hal_ctimer_int_enable+0x24>)
    e5d0:	9001      	str	r0, [sp, #4]
    e5d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e5d6:	4314      	orrs	r4, r2
    e5d8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e5dc:	9801      	ldr	r0, [sp, #4]
    e5de:	f000 fa23 	bl	ea28 <am_hal_interrupt_master_set>
    e5e2:	b002      	add	sp, #8
    e5e4:	bd10      	pop	{r4, pc}
    e5e6:	bf00      	nop
    e5e8:	40008000 	.word	0x40008000

0000e5ec <am_hal_ctimer_int_clear>:
    e5ec:	b510      	push	{r4, lr}
    e5ee:	b082      	sub	sp, #8
    e5f0:	4604      	mov	r4, r0
    e5f2:	f000 fa15 	bl	ea20 <am_hal_interrupt_master_disable>
    e5f6:	4b04      	ldr	r3, [pc, #16]	; (e608 <am_hal_ctimer_int_clear+0x1c>)
    e5f8:	9001      	str	r0, [sp, #4]
    e5fa:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e5fe:	9801      	ldr	r0, [sp, #4]
    e600:	f000 fa12 	bl	ea28 <am_hal_interrupt_master_set>
    e604:	b002      	add	sp, #8
    e606:	bd10      	pop	{r4, pc}
    e608:	40008000 	.word	0x40008000

0000e60c <am_hal_flash_delay>:
    e60c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e612:	075b      	lsls	r3, r3, #29
    e614:	bf46      	itte	mi
    e616:	0040      	lslmi	r0, r0, #1
    e618:	230e      	movmi	r3, #14
    e61a:	230b      	movpl	r3, #11
    e61c:	4298      	cmp	r0, r3
    e61e:	d800      	bhi.n	e622 <am_hal_flash_delay+0x16>
    e620:	4770      	bx	lr
    e622:	1ac0      	subs	r0, r0, r3
    e624:	4b00      	ldr	r3, [pc, #0]	; (e628 <am_hal_flash_delay+0x1c>)
    e626:	4718      	bx	r3
    e628:	0800009d 	.word	0x0800009d

0000e62c <am_hal_flash_delay_status_check>:
    e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e630:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e634:	460d      	mov	r5, r1
    e636:	4616      	mov	r6, r2
    e638:	461f      	mov	r7, r3
    e63a:	b1b4      	cbz	r4, e66a <am_hal_flash_delay_status_check+0x3e>
    e63c:	4604      	mov	r4, r0
    e63e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e642:	f8df 8058 	ldr.w	r8, [pc, #88]	; e69c <am_hal_flash_delay_status_check+0x70>
    e646:	e009      	b.n	e65c <am_hal_flash_delay_status_check+0x30>
    e648:	b324      	cbz	r4, e694 <am_hal_flash_delay_status_check+0x68>
    e64a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e64e:	f013 0f04 	tst.w	r3, #4
    e652:	bf14      	ite	ne
    e654:	2012      	movne	r0, #18
    e656:	2005      	moveq	r0, #5
    e658:	3c01      	subs	r4, #1
    e65a:	47c0      	blx	r8
    e65c:	682b      	ldr	r3, [r5, #0]
    e65e:	4033      	ands	r3, r6
    e660:	429f      	cmp	r7, r3
    e662:	d1f1      	bne.n	e648 <am_hal_flash_delay_status_check+0x1c>
    e664:	2000      	movs	r0, #0
    e666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e66a:	f8df 8030 	ldr.w	r8, [pc, #48]	; e69c <am_hal_flash_delay_status_check+0x70>
    e66e:	4604      	mov	r4, r0
    e670:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e674:	e009      	b.n	e68a <am_hal_flash_delay_status_check+0x5e>
    e676:	b16c      	cbz	r4, e694 <am_hal_flash_delay_status_check+0x68>
    e678:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e67c:	f013 0f04 	tst.w	r3, #4
    e680:	bf14      	ite	ne
    e682:	2012      	movne	r0, #18
    e684:	2005      	moveq	r0, #5
    e686:	3c01      	subs	r4, #1
    e688:	47c0      	blx	r8
    e68a:	682b      	ldr	r3, [r5, #0]
    e68c:	4033      	ands	r3, r6
    e68e:	429f      	cmp	r7, r3
    e690:	d0f1      	beq.n	e676 <am_hal_flash_delay_status_check+0x4a>
    e692:	e7e7      	b.n	e664 <am_hal_flash_delay_status_check+0x38>
    e694:	2004      	movs	r0, #4
    e696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e69a:	bf00      	nop
    e69c:	0800009d 	.word	0x0800009d

0000e6a0 <am_hal_flash_load_ui32>:
    e6a0:	4b00      	ldr	r3, [pc, #0]	; (e6a4 <am_hal_flash_load_ui32+0x4>)
    e6a2:	4718      	bx	r3
    e6a4:	08000075 	.word	0x08000075

0000e6a8 <am_hal_flash_store_ui32>:
    e6a8:	4b01      	ldr	r3, [pc, #4]	; (e6b0 <am_hal_flash_store_ui32+0x8>)
    e6aa:	f043 0301 	orr.w	r3, r3, #1
    e6ae:	4718      	bx	r3
    e6b0:	10001058 	.word	0x10001058

0000e6b4 <am_hal_gpio_pinconfig>:
    e6b4:	2831      	cmp	r0, #49	; 0x31
    e6b6:	d901      	bls.n	e6bc <am_hal_gpio_pinconfig+0x8>
    e6b8:	2006      	movs	r0, #6
    e6ba:	4770      	bx	lr
    e6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6c0:	f001 0307 	and.w	r3, r1, #7
    e6c4:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    e6c8:	b085      	sub	sp, #20
    e6ca:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e6ce:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e6d2:	d014      	beq.n	e6fe <am_hal_gpio_pinconfig+0x4a>
    e6d4:	f3c1 1742 	ubfx	r7, r1, #5, #3
    e6d8:	1dbd      	adds	r5, r7, #6
    e6da:	f005 0507 	and.w	r5, r5, #7
    e6de:	2d03      	cmp	r5, #3
    e6e0:	f042 0201 	orr.w	r2, r2, #1
    e6e4:	f200 80a7 	bhi.w	e836 <am_hal_gpio_pinconfig+0x182>
    e6e8:	4d82      	ldr	r5, [pc, #520]	; (e8f4 <am_hal_gpio_pinconfig+0x240>)
    e6ea:	5c2d      	ldrb	r5, [r5, r0]
    e6ec:	07ee      	lsls	r6, r5, #31
    e6ee:	d403      	bmi.n	e6f8 <am_hal_gpio_pinconfig+0x44>
    e6f0:	4881      	ldr	r0, [pc, #516]	; (e8f8 <am_hal_gpio_pinconfig+0x244>)
    e6f2:	b005      	add	sp, #20
    e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6f8:	3f02      	subs	r7, #2
    e6fa:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    e6fe:	2c00      	cmp	r4, #0
    e700:	f040 8091 	bne.w	e826 <am_hal_gpio_pinconfig+0x172>
    e704:	4c7d      	ldr	r4, [pc, #500]	; (e8fc <am_hal_gpio_pinconfig+0x248>)
    e706:	4d7e      	ldr	r5, [pc, #504]	; (e900 <am_hal_gpio_pinconfig+0x24c>)
    e708:	5c24      	ldrb	r4, [r4, r0]
    e70a:	5c2d      	ldrb	r5, [r5, r0]
    e70c:	411c      	asrs	r4, r3
    e70e:	f014 0f01 	tst.w	r4, #1
    e712:	bf0c      	ite	eq
    e714:	2400      	moveq	r4, #0
    e716:	2402      	movne	r4, #2
    e718:	42ab      	cmp	r3, r5
    e71a:	ea42 0204 	orr.w	r2, r2, r4
    e71e:	f000 8096 	beq.w	e84e <am_hal_gpio_pinconfig+0x19a>
    e722:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e726:	105d      	asrs	r5, r3, #1
    e728:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e72c:	00db      	lsls	r3, r3, #3
    e72e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    e732:	f003 0408 	and.w	r4, r3, #8
    e736:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e73a:	f00e 060c 	and.w	r6, lr, #12
    e73e:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e742:	2e04      	cmp	r6, #4
    e744:	ea43 0304 	orr.w	r3, r3, r4
    e748:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e74c:	462c      	mov	r4, r5
    e74e:	f000 808b 	beq.w	e868 <am_hal_gpio_pinconfig+0x1b4>
    e752:	4c6c      	ldr	r4, [pc, #432]	; (e904 <am_hal_gpio_pinconfig+0x250>)
    e754:	6827      	ldr	r7, [r4, #0]
    e756:	1bcf      	subs	r7, r1, r7
    e758:	fab7 f787 	clz	r7, r7
    e75c:	097f      	lsrs	r7, r7, #5
    e75e:	f01e 0f60 	tst.w	lr, #96	; 0x60
    e762:	bf04      	itt	eq
    e764:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e768:	f364 0300 	bfieq	r3, r4, #0, #1
    e76c:	0084      	lsls	r4, r0, #2
    e76e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e772:	2902      	cmp	r1, #2
    e774:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e778:	d078      	beq.n	e86c <am_hal_gpio_pinconfig+0x1b8>
    e77a:	d87f      	bhi.n	e87c <am_hal_gpio_pinconfig+0x1c8>
    e77c:	2901      	cmp	r1, #1
    e77e:	f04f 0100 	mov.w	r1, #0
    e782:	bf08      	it	eq
    e784:	f042 0204 	orreq.w	r2, r2, #4
    e788:	f005 0518 	and.w	r5, r5, #24
    e78c:	9101      	str	r1, [sp, #4]
    e78e:	f004 041c 	and.w	r4, r4, #28
    e792:	f020 0a03 	bic.w	sl, r0, #3
    e796:	f04f 090f 	mov.w	r9, #15
    e79a:	fa09 f904 	lsl.w	r9, r9, r4
    e79e:	0841      	lsrs	r1, r0, #1
    e7a0:	26ff      	movs	r6, #255	; 0xff
    e7a2:	fa03 f404 	lsl.w	r4, r3, r4
    e7a6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e7aa:	40ae      	lsls	r6, r5
    e7ac:	9300      	str	r3, [sp, #0]
    e7ae:	fa02 f505 	lsl.w	r5, r2, r5
    e7b2:	4683      	mov	fp, r0
    e7b4:	f021 0803 	bic.w	r8, r1, #3
    e7b8:	f000 f932 	bl	ea20 <am_hal_interrupt_master_disable>
    e7bc:	9b00      	ldr	r3, [sp, #0]
    e7be:	9003      	str	r0, [sp, #12]
    e7c0:	ea6f 0909 	mvn.w	r9, r9
    e7c4:	43f6      	mvns	r6, r6
    e7c6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e7ca:	f8df e15c 	ldr.w	lr, [pc, #348]	; e928 <am_hal_gpio_pinconfig+0x274>
    e7ce:	4a4e      	ldr	r2, [pc, #312]	; (e908 <am_hal_gpio_pinconfig+0x254>)
    e7d0:	b15f      	cbz	r7, e7ea <am_hal_gpio_pinconfig+0x136>
    e7d2:	ea4f 07db 	mov.w	r7, fp, lsr #3
    e7d6:	f00b 001f 	and.w	r0, fp, #31
    e7da:	f007 0704 	and.w	r7, r7, #4
    e7de:	f04f 0b01 	mov.w	fp, #1
    e7e2:	494a      	ldr	r1, [pc, #296]	; (e90c <am_hal_gpio_pinconfig+0x258>)
    e7e4:	fa0b f000 	lsl.w	r0, fp, r0
    e7e8:	5078      	str	r0, [r7, r1]
    e7ea:	4849      	ldr	r0, [pc, #292]	; (e910 <am_hal_gpio_pinconfig+0x25c>)
    e7ec:	2773      	movs	r7, #115	; 0x73
    e7ee:	6607      	str	r7, [r0, #96]	; 0x60
    e7f0:	681f      	ldr	r7, [r3, #0]
    e7f2:	4037      	ands	r7, r6
    e7f4:	433d      	orrs	r5, r7
    e7f6:	601d      	str	r5, [r3, #0]
    e7f8:	f858 300e 	ldr.w	r3, [r8, lr]
    e7fc:	ea09 0303 	and.w	r3, r9, r3
    e800:	4323      	orrs	r3, r4
    e802:	f848 300e 	str.w	r3, [r8, lr]
    e806:	f85a 3002 	ldr.w	r3, [sl, r2]
    e80a:	401e      	ands	r6, r3
    e80c:	9b01      	ldr	r3, [sp, #4]
    e80e:	2400      	movs	r4, #0
    e810:	431e      	orrs	r6, r3
    e812:	f84a 6002 	str.w	r6, [sl, r2]
    e816:	6604      	str	r4, [r0, #96]	; 0x60
    e818:	9803      	ldr	r0, [sp, #12]
    e81a:	f000 f905 	bl	ea28 <am_hal_interrupt_master_set>
    e81e:	4620      	mov	r0, r4
    e820:	b005      	add	sp, #20
    e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e826:	2c01      	cmp	r4, #1
    e828:	d017      	beq.n	e85a <am_hal_gpio_pinconfig+0x1a6>
    e82a:	2c02      	cmp	r4, #2
    e82c:	d035      	beq.n	e89a <am_hal_gpio_pinconfig+0x1e6>
    e82e:	4839      	ldr	r0, [pc, #228]	; (e914 <am_hal_gpio_pinconfig+0x260>)
    e830:	b005      	add	sp, #20
    e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e836:	2ec0      	cmp	r6, #192	; 0xc0
    e838:	d02a      	beq.n	e890 <am_hal_gpio_pinconfig+0x1dc>
    e83a:	2e20      	cmp	r6, #32
    e83c:	f47f af5f 	bne.w	e6fe <am_hal_gpio_pinconfig+0x4a>
    e840:	2814      	cmp	r0, #20
    e842:	f43f af55 	beq.w	e6f0 <am_hal_gpio_pinconfig+0x3c>
    e846:	2c00      	cmp	r4, #0
    e848:	f43f af5c 	beq.w	e704 <am_hal_gpio_pinconfig+0x50>
    e84c:	e7eb      	b.n	e826 <am_hal_gpio_pinconfig+0x172>
    e84e:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e852:	2c07      	cmp	r4, #7
    e854:	d128      	bne.n	e8a8 <am_hal_gpio_pinconfig+0x1f4>
    e856:	4830      	ldr	r0, [pc, #192]	; (e918 <am_hal_gpio_pinconfig+0x264>)
    e858:	e74b      	b.n	e6f2 <am_hal_gpio_pinconfig+0x3e>
    e85a:	4c26      	ldr	r4, [pc, #152]	; (e8f4 <am_hal_gpio_pinconfig+0x240>)
    e85c:	5c24      	ldrb	r4, [r4, r0]
    e85e:	07a5      	lsls	r5, r4, #30
    e860:	d5e5      	bpl.n	e82e <am_hal_gpio_pinconfig+0x17a>
    e862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e866:	e74d      	b.n	e704 <am_hal_gpio_pinconfig+0x50>
    e868:	2701      	movs	r7, #1
    e86a:	e778      	b.n	e75e <am_hal_gpio_pinconfig+0xaa>
    e86c:	f005 0518 	and.w	r5, r5, #24
    e870:	f04f 0801 	mov.w	r8, #1
    e874:	fa08 f105 	lsl.w	r1, r8, r5
    e878:	9101      	str	r1, [sp, #4]
    e87a:	e788      	b.n	e78e <am_hal_gpio_pinconfig+0xda>
    e87c:	f005 0518 	and.w	r5, r5, #24
    e880:	f04f 0801 	mov.w	r8, #1
    e884:	fa08 f105 	lsl.w	r1, r8, r5
    e888:	f042 0204 	orr.w	r2, r2, #4
    e88c:	9101      	str	r1, [sp, #4]
    e88e:	e77e      	b.n	e78e <am_hal_gpio_pinconfig+0xda>
    e890:	2814      	cmp	r0, #20
    e892:	f43f af34 	beq.w	e6fe <am_hal_gpio_pinconfig+0x4a>
    e896:	4821      	ldr	r0, [pc, #132]	; (e91c <am_hal_gpio_pinconfig+0x268>)
    e898:	e72b      	b.n	e6f2 <am_hal_gpio_pinconfig+0x3e>
    e89a:	4c16      	ldr	r4, [pc, #88]	; (e8f4 <am_hal_gpio_pinconfig+0x240>)
    e89c:	5c24      	ldrb	r4, [r4, r0]
    e89e:	0764      	lsls	r4, r4, #29
    e8a0:	d5c5      	bpl.n	e82e <am_hal_gpio_pinconfig+0x17a>
    e8a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e8a6:	e72d      	b.n	e704 <am_hal_gpio_pinconfig+0x50>
    e8a8:	4d1d      	ldr	r5, [pc, #116]	; (e920 <am_hal_gpio_pinconfig+0x26c>)
    e8aa:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e8ae:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e8b2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e8b6:	429e      	cmp	r6, r3
    e8b8:	d00c      	beq.n	e8d4 <am_hal_gpio_pinconfig+0x220>
    e8ba:	0084      	lsls	r4, r0, #2
    e8bc:	4425      	add	r5, r4
    e8be:	786e      	ldrb	r6, [r5, #1]
    e8c0:	429e      	cmp	r6, r3
    e8c2:	d012      	beq.n	e8ea <am_hal_gpio_pinconfig+0x236>
    e8c4:	78ae      	ldrb	r6, [r5, #2]
    e8c6:	429e      	cmp	r6, r3
    e8c8:	d00d      	beq.n	e8e6 <am_hal_gpio_pinconfig+0x232>
    e8ca:	78ed      	ldrb	r5, [r5, #3]
    e8cc:	429d      	cmp	r5, r3
    e8ce:	d00e      	beq.n	e8ee <am_hal_gpio_pinconfig+0x23a>
    e8d0:	4814      	ldr	r0, [pc, #80]	; (e924 <am_hal_gpio_pinconfig+0x270>)
    e8d2:	e70e      	b.n	e6f2 <am_hal_gpio_pinconfig+0x3e>
    e8d4:	2300      	movs	r3, #0
    e8d6:	0084      	lsls	r4, r0, #2
    e8d8:	005b      	lsls	r3, r3, #1
    e8da:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e8de:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e8e2:	2700      	movs	r7, #0
    e8e4:	e743      	b.n	e76e <am_hal_gpio_pinconfig+0xba>
    e8e6:	2302      	movs	r3, #2
    e8e8:	e7f6      	b.n	e8d8 <am_hal_gpio_pinconfig+0x224>
    e8ea:	2301      	movs	r3, #1
    e8ec:	e7f4      	b.n	e8d8 <am_hal_gpio_pinconfig+0x224>
    e8ee:	2303      	movs	r3, #3
    e8f0:	e7f2      	b.n	e8d8 <am_hal_gpio_pinconfig+0x224>
    e8f2:	bf00      	nop
    e8f4:	00010794 	.word	0x00010794
    e8f8:	08000100 	.word	0x08000100
    e8fc:	00010890 	.word	0x00010890
    e900:	000108cc 	.word	0x000108cc
    e904:	000108c4 	.word	0x000108c4
    e908:	400100e0 	.word	0x400100e0
    e90c:	400100b4 	.word	0x400100b4
    e910:	40010000 	.word	0x40010000
    e914:	08000102 	.word	0x08000102
    e918:	08000103 	.word	0x08000103
    e91c:	08000101 	.word	0x08000101
    e920:	000107c8 	.word	0x000107c8
    e924:	08000104 	.word	0x08000104
    e928:	40010040 	.word	0x40010040

0000e92c <am_hal_gpio_state_read>:
    e92c:	b1ca      	cbz	r2, e962 <am_hal_gpio_state_read+0x36>
    e92e:	2831      	cmp	r0, #49	; 0x31
    e930:	d904      	bls.n	e93c <am_hal_gpio_state_read+0x10>
    e932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e936:	6013      	str	r3, [r2, #0]
    e938:	2005      	movs	r0, #5
    e93a:	4770      	bx	lr
    e93c:	08c3      	lsrs	r3, r0, #3
    e93e:	2901      	cmp	r1, #1
    e940:	f003 0304 	and.w	r3, r3, #4
    e944:	f000 001f 	and.w	r0, r0, #31
    e948:	d00d      	beq.n	e966 <am_hal_gpio_state_read+0x3a>
    e94a:	d313      	bcc.n	e974 <am_hal_gpio_state_read+0x48>
    e94c:	2902      	cmp	r1, #2
    e94e:	d108      	bne.n	e962 <am_hal_gpio_state_read+0x36>
    e950:	490c      	ldr	r1, [pc, #48]	; (e984 <am_hal_gpio_state_read+0x58>)
    e952:	585b      	ldr	r3, [r3, r1]
    e954:	fa23 f000 	lsr.w	r0, r3, r0
    e958:	f000 0001 	and.w	r0, r0, #1
    e95c:	6010      	str	r0, [r2, #0]
    e95e:	2000      	movs	r0, #0
    e960:	4770      	bx	lr
    e962:	2006      	movs	r0, #6
    e964:	4770      	bx	lr
    e966:	4908      	ldr	r1, [pc, #32]	; (e988 <am_hal_gpio_state_read+0x5c>)
    e968:	585b      	ldr	r3, [r3, r1]
    e96a:	fa23 f000 	lsr.w	r0, r3, r0
    e96e:	f000 0001 	and.w	r0, r0, #1
    e972:	e7f3      	b.n	e95c <am_hal_gpio_state_read+0x30>
    e974:	4905      	ldr	r1, [pc, #20]	; (e98c <am_hal_gpio_state_read+0x60>)
    e976:	585b      	ldr	r3, [r3, r1]
    e978:	fa23 f000 	lsr.w	r0, r3, r0
    e97c:	f000 0001 	and.w	r0, r0, #1
    e980:	e7ec      	b.n	e95c <am_hal_gpio_state_read+0x30>
    e982:	bf00      	nop
    e984:	400100a0 	.word	0x400100a0
    e988:	40010088 	.word	0x40010088
    e98c:	40010080 	.word	0x40010080

0000e990 <am_hal_gpio_state_write>:
    e990:	2831      	cmp	r0, #49	; 0x31
    e992:	d901      	bls.n	e998 <am_hal_gpio_state_write+0x8>
    e994:	2005      	movs	r0, #5
    e996:	4770      	bx	lr
    e998:	2905      	cmp	r1, #5
    e99a:	d901      	bls.n	e9a0 <am_hal_gpio_state_write+0x10>
    e99c:	2006      	movs	r0, #6
    e99e:	4770      	bx	lr
    e9a0:	b570      	push	{r4, r5, r6, lr}
    e9a2:	f000 031f 	and.w	r3, r0, #31
    e9a6:	b082      	sub	sp, #8
    e9a8:	08c0      	lsrs	r0, r0, #3
    e9aa:	2201      	movs	r2, #1
    e9ac:	460d      	mov	r5, r1
    e9ae:	f000 0404 	and.w	r4, r0, #4
    e9b2:	fa02 f603 	lsl.w	r6, r2, r3
    e9b6:	f000 f833 	bl	ea20 <am_hal_interrupt_master_disable>
    e9ba:	1e69      	subs	r1, r5, #1
    e9bc:	9001      	str	r0, [sp, #4]
    e9be:	2904      	cmp	r1, #4
    e9c0:	d817      	bhi.n	e9f2 <am_hal_gpio_state_write+0x62>
    e9c2:	e8df f001 	tbb	[pc, r1]
    e9c6:	0e13      	.short	0x0e13
    e9c8:	030b      	.short	0x030b
    e9ca:	19          	.byte	0x19
    e9cb:	00          	.byte	0x00
    e9cc:	4b0d      	ldr	r3, [pc, #52]	; (ea04 <am_hal_gpio_state_write+0x74>)
    e9ce:	50e6      	str	r6, [r4, r3]
    e9d0:	9801      	ldr	r0, [sp, #4]
    e9d2:	f000 f829 	bl	ea28 <am_hal_interrupt_master_set>
    e9d6:	2000      	movs	r0, #0
    e9d8:	b002      	add	sp, #8
    e9da:	bd70      	pop	{r4, r5, r6, pc}
    e9dc:	4b0a      	ldr	r3, [pc, #40]	; (ea08 <am_hal_gpio_state_write+0x78>)
    e9de:	50e6      	str	r6, [r4, r3]
    e9e0:	e7f6      	b.n	e9d0 <am_hal_gpio_state_write+0x40>
    e9e2:	4a0a      	ldr	r2, [pc, #40]	; (ea0c <am_hal_gpio_state_write+0x7c>)
    e9e4:	58a3      	ldr	r3, [r4, r2]
    e9e6:	4073      	eors	r3, r6
    e9e8:	50a3      	str	r3, [r4, r2]
    e9ea:	e7f1      	b.n	e9d0 <am_hal_gpio_state_write+0x40>
    e9ec:	4b08      	ldr	r3, [pc, #32]	; (ea10 <am_hal_gpio_state_write+0x80>)
    e9ee:	50e6      	str	r6, [r4, r3]
    e9f0:	e7ee      	b.n	e9d0 <am_hal_gpio_state_write+0x40>
    e9f2:	4b08      	ldr	r3, [pc, #32]	; (ea14 <am_hal_gpio_state_write+0x84>)
    e9f4:	50e6      	str	r6, [r4, r3]
    e9f6:	e7eb      	b.n	e9d0 <am_hal_gpio_state_write+0x40>
    e9f8:	4a03      	ldr	r2, [pc, #12]	; (ea08 <am_hal_gpio_state_write+0x78>)
    e9fa:	58a3      	ldr	r3, [r4, r2]
    e9fc:	4073      	eors	r3, r6
    e9fe:	50a3      	str	r3, [r4, r2]
    ea00:	e7e6      	b.n	e9d0 <am_hal_gpio_state_write+0x40>
    ea02:	bf00      	nop
    ea04:	400100a8 	.word	0x400100a8
    ea08:	400100b4 	.word	0x400100b4
    ea0c:	40010088 	.word	0x40010088
    ea10:	40010090 	.word	0x40010090
    ea14:	40010098 	.word	0x40010098

0000ea18 <am_hal_interrupt_master_enable>:
    ea18:	f3ef 8010 	mrs	r0, PRIMASK
    ea1c:	b662      	cpsie	i
    ea1e:	4770      	bx	lr

0000ea20 <am_hal_interrupt_master_disable>:
    ea20:	f3ef 8010 	mrs	r0, PRIMASK
    ea24:	b672      	cpsid	i
    ea26:	4770      	bx	lr

0000ea28 <am_hal_interrupt_master_set>:
    ea28:	f380 8810 	msr	PRIMASK, r0
    ea2c:	4770      	bx	lr
    ea2e:	bf00      	nop

0000ea30 <internal_iom_reset_on_error>:
    ea30:	b570      	push	{r4, r5, r6, lr}
    ea32:	6844      	ldr	r4, [r0, #4]
    ea34:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    ea38:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    ea3c:	3404      	adds	r4, #4
    ea3e:	0324      	lsls	r4, r4, #12
    ea40:	2300      	movs	r3, #0
    ea42:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    ea46:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    ea4a:	050b      	lsls	r3, r1, #20
    ea4c:	d52a      	bpl.n	eaa4 <internal_iom_reset_on_error+0x74>
    ea4e:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    ea52:	079e      	lsls	r6, r3, #30
    ea54:	d450      	bmi.n	eaf8 <internal_iom_reset_on_error+0xc8>
    ea56:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ea5a:	079a      	lsls	r2, r3, #30
    ea5c:	d508      	bpl.n	ea70 <internal_iom_reset_on_error+0x40>
    ea5e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea62:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ea66:	2b03      	cmp	r3, #3
    ea68:	d9f5      	bls.n	ea56 <internal_iom_reset_on_error+0x26>
    ea6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ea6e:	e7f6      	b.n	ea5e <internal_iom_reset_on_error+0x2e>
    ea70:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ea74:	f003 0306 	and.w	r3, r3, #6
    ea78:	2b04      	cmp	r3, #4
    ea7a:	d1f9      	bne.n	ea70 <internal_iom_reset_on_error+0x40>
    ea7c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea80:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ea84:	b173      	cbz	r3, eaa4 <internal_iom_reset_on_error+0x74>
    ea86:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea8a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ea8e:	2b03      	cmp	r3, #3
    ea90:	d9f4      	bls.n	ea7c <internal_iom_reset_on_error+0x4c>
    ea92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ea96:	e7f6      	b.n	ea86 <internal_iom_reset_on_error+0x56>
    ea98:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ea9c:	f003 0306 	and.w	r3, r3, #6
    eaa0:	2b04      	cmp	r3, #4
    eaa2:	d1f9      	bne.n	ea98 <internal_iom_reset_on_error+0x68>
    eaa4:	06cb      	lsls	r3, r1, #27
    eaa6:	d520      	bpl.n	eaea <internal_iom_reset_on_error+0xba>
    eaa8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    eaac:	f003 0306 	and.w	r3, r3, #6
    eab0:	2b04      	cmp	r3, #4
    eab2:	d1f9      	bne.n	eaa8 <internal_iom_reset_on_error+0x78>
    eab4:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    eab8:	f36f 1304 	bfc	r3, #4, #1
    eabc:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    eac0:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    eac4:	f36f 0341 	bfc	r3, #1, #1
    eac8:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    eacc:	0040      	lsls	r0, r0, #1
    eace:	f7ff fd9d 	bl	e60c <am_hal_flash_delay>
    ead2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    ead6:	f043 0302 	orr.w	r3, r3, #2
    eada:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    eade:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    eae2:	f043 0310 	orr.w	r3, r3, #16
    eae6:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    eaea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eaee:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    eaf2:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    eaf6:	bd70      	pop	{r4, r5, r6, pc}
    eaf8:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    eafc:	4e07      	ldr	r6, [pc, #28]	; (eb1c <internal_iom_reset_on_error+0xec>)
    eafe:	2a00      	cmp	r2, #0
    eb00:	d0ca      	beq.n	ea98 <internal_iom_reset_on_error+0x68>
    eb02:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    eb06:	f3c3 2307 	ubfx	r3, r3, #8, #8
    eb0a:	2b03      	cmp	r3, #3
    eb0c:	d9f9      	bls.n	eb02 <internal_iom_reset_on_error+0xd2>
    eb0e:	2a04      	cmp	r2, #4
    eb10:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    eb14:	d9c0      	bls.n	ea98 <internal_iom_reset_on_error+0x68>
    eb16:	3a04      	subs	r2, #4
    eb18:	e7f1      	b.n	eafe <internal_iom_reset_on_error+0xce>
    eb1a:	bf00      	nop
    eb1c:	deadbeef 	.word	0xdeadbeef

0000eb20 <am_hal_iom_initialize>:
    eb20:	2805      	cmp	r0, #5
    eb22:	d901      	bls.n	eb28 <am_hal_iom_initialize+0x8>
    eb24:	2005      	movs	r0, #5
    eb26:	4770      	bx	lr
    eb28:	b1e1      	cbz	r1, eb64 <am_hal_iom_initialize+0x44>
    eb2a:	b4f0      	push	{r4, r5, r6, r7}
    eb2c:	f640 049c 	movw	r4, #2204	; 0x89c
    eb30:	4e0d      	ldr	r6, [pc, #52]	; (eb68 <am_hal_iom_initialize+0x48>)
    eb32:	fb04 f400 	mul.w	r4, r4, r0
    eb36:	1935      	adds	r5, r6, r4
    eb38:	4602      	mov	r2, r0
    eb3a:	78e8      	ldrb	r0, [r5, #3]
    eb3c:	f010 0301 	ands.w	r3, r0, #1
    eb40:	d002      	beq.n	eb48 <am_hal_iom_initialize+0x28>
    eb42:	2007      	movs	r0, #7
    eb44:	bcf0      	pop	{r4, r5, r6, r7}
    eb46:	4770      	bx	lr
    eb48:	f040 0001 	orr.w	r0, r0, #1
    eb4c:	f363 0041 	bfi	r0, r3, #1, #1
    eb50:	70e8      	strb	r0, [r5, #3]
    eb52:	5937      	ldr	r7, [r6, r4]
    eb54:	4805      	ldr	r0, [pc, #20]	; (eb6c <am_hal_iom_initialize+0x4c>)
    eb56:	f360 0717 	bfi	r7, r0, #0, #24
    eb5a:	5137      	str	r7, [r6, r4]
    eb5c:	4618      	mov	r0, r3
    eb5e:	606a      	str	r2, [r5, #4]
    eb60:	600d      	str	r5, [r1, #0]
    eb62:	e7ef      	b.n	eb44 <am_hal_iom_initialize+0x24>
    eb64:	2006      	movs	r0, #6
    eb66:	4770      	bx	lr
    eb68:	1000186c 	.word	0x1000186c
    eb6c:	00123456 	.word	0x00123456

0000eb70 <am_hal_iom_enable>:
    eb70:	b128      	cbz	r0, eb7e <am_hal_iom_enable+0xe>
    eb72:	6803      	ldr	r3, [r0, #0]
    eb74:	4a34      	ldr	r2, [pc, #208]	; (ec48 <am_hal_iom_enable+0xd8>)
    eb76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb7a:	4293      	cmp	r3, r2
    eb7c:	d001      	beq.n	eb82 <am_hal_iom_enable+0x12>
    eb7e:	2002      	movs	r0, #2
    eb80:	4770      	bx	lr
    eb82:	78c3      	ldrb	r3, [r0, #3]
    eb84:	079b      	lsls	r3, r3, #30
    eb86:	d45d      	bmi.n	ec44 <am_hal_iom_enable+0xd4>
    eb88:	6843      	ldr	r3, [r0, #4]
    eb8a:	7a01      	ldrb	r1, [r0, #8]
    eb8c:	b570      	push	{r4, r5, r6, lr}
    eb8e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb92:	3304      	adds	r3, #4
    eb94:	031b      	lsls	r3, r3, #12
    eb96:	3100      	adds	r1, #0
    eb98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    eb9c:	bf18      	it	ne
    eb9e:	2101      	movne	r1, #1
    eba0:	f3c2 0242 	ubfx	r2, r2, #1, #3
    eba4:	4291      	cmp	r1, r2
    eba6:	bf0c      	ite	eq
    eba8:	2201      	moveq	r2, #1
    ebaa:	2210      	movne	r2, #16
    ebac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ebb0:	68c3      	ldr	r3, [r0, #12]
    ebb2:	b084      	sub	sp, #16
    ebb4:	4604      	mov	r4, r0
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d039      	beq.n	ec2e <am_hal_iom_enable+0xbe>
    ebba:	6843      	ldr	r3, [r0, #4]
    ebbc:	4923      	ldr	r1, [pc, #140]	; (ec4c <am_hal_iom_enable+0xdc>)
    ebbe:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ebc2:	3304      	adds	r3, #4
    ebc4:	031a      	lsls	r2, r3, #12
    ebc6:	2300      	movs	r3, #0
    ebc8:	6243      	str	r3, [r0, #36]	; 0x24
    ebca:	61c3      	str	r3, [r0, #28]
    ebcc:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    ebd0:	6902      	ldr	r2, [r0, #16]
    ebd2:	6840      	ldr	r0, [r0, #4]
    ebd4:	68e6      	ldr	r6, [r4, #12]
    ebd6:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    ebda:	2501      	movs	r5, #1
    ebdc:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    ebe0:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    ebe4:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    ebe8:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    ebec:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    ebf0:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    ebf4:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    ebf8:	6223      	str	r3, [r4, #32]
    ebfa:	b2c0      	uxtb	r0, r0
    ebfc:	fa22 f305 	lsr.w	r3, r2, r5
    ec00:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    ec04:	f604 0228 	addw	r2, r4, #2088	; 0x828
    ec08:	a901      	add	r1, sp, #4
    ec0a:	9301      	str	r3, [sp, #4]
    ec0c:	9602      	str	r6, [sp, #8]
    ec0e:	f88d 500c 	strb.w	r5, [sp, #12]
    ec12:	f001 fb05 	bl	10220 <am_hal_cmdq_init>
    ec16:	6863      	ldr	r3, [r4, #4]
    ec18:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec1c:	3304      	adds	r3, #4
    ec1e:	031b      	lsls	r3, r3, #12
    ec20:	b960      	cbnz	r0, ec3c <am_hal_iom_enable+0xcc>
    ec22:	f44f 7180 	mov.w	r1, #256	; 0x100
    ec26:	2202      	movs	r2, #2
    ec28:	6221      	str	r1, [r4, #32]
    ec2a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ec2e:	78e3      	ldrb	r3, [r4, #3]
    ec30:	f043 0302 	orr.w	r3, r3, #2
    ec34:	70e3      	strb	r3, [r4, #3]
    ec36:	2000      	movs	r0, #0
    ec38:	b004      	add	sp, #16
    ec3a:	bd70      	pop	{r4, r5, r6, pc}
    ec3c:	2202      	movs	r2, #2
    ec3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ec42:	e7f9      	b.n	ec38 <am_hal_iom_enable+0xc8>
    ec44:	2000      	movs	r0, #0
    ec46:	4770      	bx	lr
    ec48:	01123456 	.word	0x01123456
    ec4c:	00800040 	.word	0x00800040

0000ec50 <am_hal_iom_power_ctrl>:
    ec50:	b140      	cbz	r0, ec64 <am_hal_iom_power_ctrl+0x14>
    ec52:	b538      	push	{r3, r4, r5, lr}
    ec54:	6803      	ldr	r3, [r0, #0]
    ec56:	4c85      	ldr	r4, [pc, #532]	; (ee6c <am_hal_iom_power_ctrl+0x21c>)
    ec58:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ec5c:	42a3      	cmp	r3, r4
    ec5e:	d003      	beq.n	ec68 <am_hal_iom_power_ctrl+0x18>
    ec60:	2002      	movs	r0, #2
    ec62:	bd38      	pop	{r3, r4, r5, pc}
    ec64:	2002      	movs	r0, #2
    ec66:	4770      	bx	lr
    ec68:	4604      	mov	r4, r0
    ec6a:	4615      	mov	r5, r2
    ec6c:	b199      	cbz	r1, ec96 <am_hal_iom_power_ctrl+0x46>
    ec6e:	2902      	cmp	r1, #2
    ec70:	d80f      	bhi.n	ec92 <am_hal_iom_power_ctrl+0x42>
    ec72:	78c3      	ldrb	r3, [r0, #3]
    ec74:	6840      	ldr	r0, [r0, #4]
    ec76:	079a      	lsls	r2, r3, #30
    ec78:	d519      	bpl.n	ecae <am_hal_iom_power_ctrl+0x5e>
    ec7a:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ec7e:	3304      	adds	r3, #4
    ec80:	031b      	lsls	r3, r3, #12
    ec82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    ec86:	f003 0306 	and.w	r3, r3, #6
    ec8a:	2b04      	cmp	r3, #4
    ec8c:	d00c      	beq.n	eca8 <am_hal_iom_power_ctrl+0x58>
    ec8e:	2003      	movs	r0, #3
    ec90:	bd38      	pop	{r3, r4, r5, pc}
    ec92:	2006      	movs	r0, #6
    ec94:	bd38      	pop	{r3, r4, r5, pc}
    ec96:	2a00      	cmp	r2, #0
    ec98:	f000 80cf 	beq.w	ee3a <am_hal_iom_power_ctrl+0x1ea>
    ec9c:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    eca0:	2b00      	cmp	r3, #0
    eca2:	d146      	bne.n	ed32 <am_hal_iom_power_ctrl+0xe2>
    eca4:	2007      	movs	r0, #7
    eca6:	bd38      	pop	{r3, r4, r5, pc}
    eca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ecaa:	2b00      	cmp	r3, #0
    ecac:	d1ef      	bne.n	ec8e <am_hal_iom_power_ctrl+0x3e>
    ecae:	b3d5      	cbz	r5, ed26 <am_hal_iom_power_ctrl+0xd6>
    ecb0:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ecb4:	3304      	adds	r3, #4
    ecb6:	031b      	lsls	r3, r3, #12
    ecb8:	2201      	movs	r2, #1
    ecba:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    ecbe:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    ecc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ecc6:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    ecca:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    ecce:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    ecd2:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    ecd6:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    ecda:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    ecde:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    ece2:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    ece6:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    ecea:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    ecee:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    ecf2:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    ecf6:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    ecfa:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    ecfe:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    ed02:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    ed06:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    ed0a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    ed0e:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    ed12:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    ed16:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    ed1a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    ed1e:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    ed22:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    ed26:	3002      	adds	r0, #2
    ed28:	b2c0      	uxtb	r0, r0
    ed2a:	f000 fca1 	bl	f670 <am_hal_pwrctrl_periph_disable>
    ed2e:	2000      	movs	r0, #0
    ed30:	bd38      	pop	{r3, r4, r5, pc}
    ed32:	6843      	ldr	r3, [r0, #4]
    ed34:	1c98      	adds	r0, r3, #2
    ed36:	b2c0      	uxtb	r0, r0
    ed38:	f000 fc70 	bl	f61c <am_hal_pwrctrl_periph_enable>
    ed3c:	6863      	ldr	r3, [r4, #4]
    ed3e:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    ed42:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed46:	3304      	adds	r3, #4
    ed48:	031b      	lsls	r3, r3, #12
    ed4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ed4e:	6863      	ldr	r3, [r4, #4]
    ed50:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    ed54:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed58:	3304      	adds	r3, #4
    ed5a:	031b      	lsls	r3, r3, #12
    ed5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ed60:	6863      	ldr	r3, [r4, #4]
    ed62:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    ed66:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed6a:	3304      	adds	r3, #4
    ed6c:	031b      	lsls	r3, r3, #12
    ed6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ed72:	6863      	ldr	r3, [r4, #4]
    ed74:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    ed78:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed7c:	3304      	adds	r3, #4
    ed7e:	031b      	lsls	r3, r3, #12
    ed80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    ed84:	6863      	ldr	r3, [r4, #4]
    ed86:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    ed8a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed8e:	3304      	adds	r3, #4
    ed90:	031b      	lsls	r3, r3, #12
    ed92:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    ed96:	6863      	ldr	r3, [r4, #4]
    ed98:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    ed9c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eda0:	3304      	adds	r3, #4
    eda2:	031b      	lsls	r3, r3, #12
    eda4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    eda8:	6863      	ldr	r3, [r4, #4]
    edaa:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    edae:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edb2:	3304      	adds	r3, #4
    edb4:	031b      	lsls	r3, r3, #12
    edb6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    edba:	6863      	ldr	r3, [r4, #4]
    edbc:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    edc0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edc4:	3304      	adds	r3, #4
    edc6:	031b      	lsls	r3, r3, #12
    edc8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    edcc:	6863      	ldr	r3, [r4, #4]
    edce:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    edd2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edd6:	3304      	adds	r3, #4
    edd8:	031b      	lsls	r3, r3, #12
    edda:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    edde:	6863      	ldr	r3, [r4, #4]
    ede0:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    ede4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ede8:	3304      	adds	r3, #4
    edea:	031b      	lsls	r3, r3, #12
    edec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    edf0:	6863      	ldr	r3, [r4, #4]
    edf2:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    edf6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edfa:	3304      	adds	r3, #4
    edfc:	031b      	lsls	r3, r3, #12
    edfe:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ee02:	6863      	ldr	r3, [r4, #4]
    ee04:	f894 287c 	ldrb.w	r2, [r4, #2172]	; 0x87c
    ee08:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ee0c:	3304      	adds	r3, #4
    ee0e:	031b      	lsls	r3, r3, #12
    ee10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    ee14:	6863      	ldr	r3, [r4, #4]
    ee16:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    ee1a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ee1e:	3304      	adds	r3, #4
    ee20:	031b      	lsls	r3, r3, #12
    ee22:	f022 0201 	bic.w	r2, r2, #1
    ee26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ee2a:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    ee2e:	07db      	lsls	r3, r3, #31
    ee30:	d40a      	bmi.n	ee48 <am_hal_iom_power_ctrl+0x1f8>
    ee32:	2000      	movs	r0, #0
    ee34:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    ee38:	bd38      	pop	{r3, r4, r5, pc}
    ee3a:	6840      	ldr	r0, [r0, #4]
    ee3c:	3002      	adds	r0, #2
    ee3e:	b2c0      	uxtb	r0, r0
    ee40:	f000 fbec 	bl	f61c <am_hal_pwrctrl_periph_enable>
    ee44:	4628      	mov	r0, r5
    ee46:	bd38      	pop	{r3, r4, r5, pc}
    ee48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ee4a:	b953      	cbnz	r3, ee62 <am_hal_iom_power_ctrl+0x212>
    ee4c:	6863      	ldr	r3, [r4, #4]
    ee4e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ee52:	3304      	adds	r3, #4
    ee54:	031b      	lsls	r3, r3, #12
    ee56:	f503 7226 	add.w	r2, r3, #664	; 0x298
    ee5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    ee5e:	e883 000c 	stmia.w	r3, {r2, r3}
    ee62:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    ee66:	f001 fa3f 	bl	102e8 <am_hal_cmdq_enable>
    ee6a:	e7e2      	b.n	ee32 <am_hal_iom_power_ctrl+0x1e2>
    ee6c:	01123456 	.word	0x01123456

0000ee70 <am_hal_iom_configure>:
    ee70:	b128      	cbz	r0, ee7e <am_hal_iom_configure+0xe>
    ee72:	6803      	ldr	r3, [r0, #0]
    ee74:	4a88      	ldr	r2, [pc, #544]	; (f098 <am_hal_iom_configure+0x228>)
    ee76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ee7a:	4293      	cmp	r3, r2
    ee7c:	d001      	beq.n	ee82 <am_hal_iom_configure+0x12>
    ee7e:	2002      	movs	r0, #2
    ee80:	4770      	bx	lr
    ee82:	b111      	cbz	r1, ee8a <am_hal_iom_configure+0x1a>
    ee84:	6843      	ldr	r3, [r0, #4]
    ee86:	2b05      	cmp	r3, #5
    ee88:	d901      	bls.n	ee8e <am_hal_iom_configure+0x1e>
    ee8a:	2006      	movs	r0, #6
    ee8c:	4770      	bx	lr
    ee8e:	78c2      	ldrb	r2, [r0, #3]
    ee90:	0792      	lsls	r2, r2, #30
    ee92:	d501      	bpl.n	ee98 <am_hal_iom_configure+0x28>
    ee94:	2007      	movs	r0, #7
    ee96:	4770      	bx	lr
    ee98:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ee9c:	3304      	adds	r3, #4
    ee9e:	780a      	ldrb	r2, [r1, #0]
    eea0:	031b      	lsls	r3, r3, #12
    eea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eea6:	f241 0410 	movw	r4, #4112	; 0x1010
    eeaa:	7202      	strb	r2, [r0, #8]
    eeac:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    eeb0:	b92a      	cbnz	r2, eebe <am_hal_iom_configure+0x4e>
    eeb2:	7a0e      	ldrb	r6, [r1, #8]
    eeb4:	2e03      	cmp	r6, #3
    eeb6:	d907      	bls.n	eec8 <am_hal_iom_configure+0x58>
    eeb8:	2006      	movs	r0, #6
    eeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eebe:	2a01      	cmp	r2, #1
    eec0:	d06a      	beq.n	ef98 <am_hal_iom_configure+0x128>
    eec2:	2005      	movs	r0, #5
    eec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eec8:	f8d1 a004 	ldr.w	sl, [r1, #4]
    eecc:	4a73      	ldr	r2, [pc, #460]	; (f09c <am_hal_iom_configure+0x22c>)
    eece:	4592      	cmp	sl, r2
    eed0:	d8f2      	bhi.n	eeb8 <am_hal_iom_configure+0x48>
    eed2:	f1ba 0f00 	cmp.w	sl, #0
    eed6:	d03e      	beq.n	ef56 <am_hal_iom_configure+0xe6>
    eed8:	fbb2 f2fa 	udiv	r2, r2, sl
    eedc:	fb0a f402 	mul.w	r4, sl, r2
    eee0:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    eee4:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    eee8:	2c00      	cmp	r4, #0
    eeea:	bf0c      	ite	eq
    eeec:	4614      	moveq	r4, r2
    eeee:	1c54      	addne	r4, r2, #1
    eef0:	4262      	negs	r2, r4
    eef2:	4022      	ands	r2, r4
    eef4:	fab2 f282 	clz	r2, r2
    eef8:	f1c2 021f 	rsb	r2, r2, #31
    eefc:	2a06      	cmp	r2, #6
    eefe:	bfa8      	it	ge
    ef00:	2206      	movge	r2, #6
    ef02:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    ef06:	f240 80c0 	bls.w	f08a <am_hal_iom_configure+0x21a>
    ef0a:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    ef0e:	4f64      	ldr	r7, [pc, #400]	; (f0a0 <am_hal_iom_configure+0x230>)
    ef10:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    ef14:	42bd      	cmp	r5, r7
    ef16:	bf8c      	ite	hi
    ef18:	f04f 0800 	movhi.w	r8, #0
    ef1c:	f04f 0801 	movls.w	r8, #1
    ef20:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    ef24:	f10e 0e01 	add.w	lr, lr, #1
    ef28:	fa0e f702 	lsl.w	r7, lr, r2
    ef2c:	fbb4 f5f7 	udiv	r5, r4, r7
    ef30:	fb07 4715 	mls	r7, r7, r5, r4
    ef34:	2f00      	cmp	r7, #0
    ef36:	bf18      	it	ne
    ef38:	3501      	addne	r5, #1
    ef3a:	fab5 f785 	clz	r7, r5
    ef3e:	f1c7 071f 	rsb	r7, r7, #31
    ef42:	2f07      	cmp	r7, #7
    ef44:	f240 809e 	bls.w	f084 <am_hal_iom_configure+0x214>
    ef48:	3a07      	subs	r2, #7
    ef4a:	443a      	add	r2, r7
    ef4c:	f102 0901 	add.w	r9, r2, #1
    ef50:	f1b9 0f07 	cmp.w	r9, #7
    ef54:	d934      	bls.n	efc0 <am_hal_iom_configure+0x150>
    ef56:	2400      	movs	r4, #0
    ef58:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    ef5c:	f044 0401 	orr.w	r4, r4, #1
    ef60:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    ef64:	68cb      	ldr	r3, [r1, #12]
    ef66:	684d      	ldr	r5, [r1, #4]
    ef68:	690c      	ldr	r4, [r1, #16]
    ef6a:	60c3      	str	r3, [r0, #12]
    ef6c:	2300      	movs	r3, #0
    ef6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ef72:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    ef76:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    ef7a:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    ef7e:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    ef82:	6104      	str	r4, [r0, #16]
    ef84:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    ef88:	4a44      	ldr	r2, [pc, #272]	; (f09c <am_hal_iom_configure+0x22c>)
    ef8a:	fbb2 f2f5 	udiv	r2, r2, r5
    ef8e:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    ef92:	4618      	mov	r0, r3
    ef94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef98:	684a      	ldr	r2, [r1, #4]
    ef9a:	4c42      	ldr	r4, [pc, #264]	; (f0a4 <am_hal_iom_configure+0x234>)
    ef9c:	42a2      	cmp	r2, r4
    ef9e:	d06c      	beq.n	f07a <am_hal_iom_configure+0x20a>
    efa0:	4c41      	ldr	r4, [pc, #260]	; (f0a8 <am_hal_iom_configure+0x238>)
    efa2:	42a2      	cmp	r2, r4
    efa4:	d064      	beq.n	f070 <am_hal_iom_configure+0x200>
    efa6:	4c41      	ldr	r4, [pc, #260]	; (f0ac <am_hal_iom_configure+0x23c>)
    efa8:	42a2      	cmp	r2, r4
    efaa:	d185      	bne.n	eeb8 <am_hal_iom_configure+0x48>
    efac:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    efb0:	4a3f      	ldr	r2, [pc, #252]	; (f0b0 <am_hal_iom_configure+0x240>)
    efb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    efb6:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    efba:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    efbe:	e7cd      	b.n	ef5c <am_hal_iom_configure+0xec>
    efc0:	3f07      	subs	r7, #7
    efc2:	f04f 0c01 	mov.w	ip, #1
    efc6:	fa0c fc07 	lsl.w	ip, ip, r7
    efca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    efce:	ea0c 0c05 	and.w	ip, ip, r5
    efd2:	40fd      	lsrs	r5, r7
    efd4:	f1bc 0f00 	cmp.w	ip, #0
    efd8:	bf18      	it	ne
    efda:	3501      	addne	r5, #1
    efdc:	4f35      	ldr	r7, [pc, #212]	; (f0b4 <am_hal_iom_configure+0x244>)
    efde:	45ba      	cmp	sl, r7
    efe0:	d843      	bhi.n	f06a <am_hal_iom_configure+0x1fa>
    efe2:	f04f 0c01 	mov.w	ip, #1
    efe6:	fa0c fc02 	lsl.w	ip, ip, r2
    efea:	ebbc 0c04 	subs.w	ip, ip, r4
    efee:	bf18      	it	ne
    eff0:	f04f 0c01 	movne.w	ip, #1
    eff4:	1074      	asrs	r4, r6, #1
    eff6:	2c01      	cmp	r4, #1
    eff8:	d04a      	beq.n	f090 <am_hal_iom_configure+0x220>
    effa:	3d01      	subs	r5, #1
    effc:	086f      	lsrs	r7, r5, #1
    effe:	fa0e f402 	lsl.w	r4, lr, r2
    f002:	fb05 fe0c 	mul.w	lr, r5, ip
    f006:	fb0e 4404 	mla	r4, lr, r4, r4
    f00a:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    f00e:	f8df 908c 	ldr.w	r9, [pc, #140]	; f09c <am_hal_iom_configure+0x22c>
    f012:	fbb9 fbf4 	udiv	fp, r9, r4
    f016:	fb04 fa0b 	mul.w	sl, r4, fp
    f01a:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    f01e:	0864      	lsrs	r4, r4, #1
    f020:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    f024:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    f028:	4554      	cmp	r4, sl
    f02a:	bf2c      	ite	cs
    f02c:	46da      	movcs	sl, fp
    f02e:	f10b 0a01 	addcc.w	sl, fp, #1
    f032:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    f036:	f8df b090 	ldr.w	fp, [pc, #144]	; f0c8 <am_hal_iom_configure+0x258>
    f03a:	fbba f4fb 	udiv	r4, sl, fp
    f03e:	043f      	lsls	r7, r7, #16
    f040:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    f044:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    f048:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    f04c:	fb0b ab14 	mls	fp, fp, r4, sl
    f050:	432f      	orrs	r7, r5
    f052:	f1bb 0f00 	cmp.w	fp, #0
    f056:	d105      	bne.n	f064 <am_hal_iom_configure+0x1f4>
    f058:	b124      	cbz	r4, f064 <am_hal_iom_configure+0x1f4>
    f05a:	1e65      	subs	r5, r4, #1
    f05c:	4225      	tst	r5, r4
    f05e:	d101      	bne.n	f064 <am_hal_iom_configure+0x1f4>
    f060:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    f064:	2400      	movs	r4, #0
    f066:	433c      	orrs	r4, r7
    f068:	e776      	b.n	ef58 <am_hal_iom_configure+0xe8>
    f06a:	f04f 0c00 	mov.w	ip, #0
    f06e:	e7c1      	b.n	eff4 <am_hal_iom_configure+0x184>
    f070:	4a11      	ldr	r2, [pc, #68]	; (f0b8 <am_hal_iom_configure+0x248>)
    f072:	4c12      	ldr	r4, [pc, #72]	; (f0bc <am_hal_iom_configure+0x24c>)
    f074:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f078:	e770      	b.n	ef5c <am_hal_iom_configure+0xec>
    f07a:	4a11      	ldr	r2, [pc, #68]	; (f0c0 <am_hal_iom_configure+0x250>)
    f07c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f080:	4c10      	ldr	r4, [pc, #64]	; (f0c4 <am_hal_iom_configure+0x254>)
    f082:	e76b      	b.n	ef5c <am_hal_iom_configure+0xec>
    f084:	f102 0901 	add.w	r9, r2, #1
    f088:	e7a8      	b.n	efdc <am_hal_iom_configure+0x16c>
    f08a:	f04f 0801 	mov.w	r8, #1
    f08e:	e747      	b.n	ef20 <am_hal_iom_configure+0xb0>
    f090:	1eaf      	subs	r7, r5, #2
    f092:	087f      	lsrs	r7, r7, #1
    f094:	3d01      	subs	r5, #1
    f096:	e7b2      	b.n	effe <am_hal_iom_configure+0x18e>
    f098:	01123456 	.word	0x01123456
    f09c:	02dc6c00 	.word	0x02dc6c00
    f0a0:	007a11ff 	.word	0x007a11ff
    f0a4:	00061a80 	.word	0x00061a80
    f0a8:	000f4240 	.word	0x000f4240
    f0ac:	000186a0 	.word	0x000186a0
    f0b0:	0003f070 	.word	0x0003f070
    f0b4:	00b71aff 	.word	0x00b71aff
    f0b8:	00213040 	.word	0x00213040
    f0bc:	06031301 	.word	0x06031301
    f0c0:	0003f270 	.word	0x0003f270
    f0c4:	1d0e1201 	.word	0x1d0e1201
    f0c8:	0003d090 	.word	0x0003d090

0000f0cc <am_hal_iom_blocking_transfer>:
    f0cc:	b128      	cbz	r0, f0da <am_hal_iom_blocking_transfer+0xe>
    f0ce:	6803      	ldr	r3, [r0, #0]
    f0d0:	4ac8      	ldr	r2, [pc, #800]	; (f3f4 <am_hal_iom_blocking_transfer+0x328>)
    f0d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f0d6:	4293      	cmp	r3, r2
    f0d8:	d001      	beq.n	f0de <am_hal_iom_blocking_transfer+0x12>
    f0da:	2002      	movs	r0, #2
    f0dc:	4770      	bx	lr
    f0de:	b159      	cbz	r1, f0f8 <am_hal_iom_blocking_transfer+0x2c>
    f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0e4:	f891 8010 	ldrb.w	r8, [r1, #16]
    f0e8:	f1b8 0f01 	cmp.w	r8, #1
    f0ec:	b087      	sub	sp, #28
    f0ee:	d905      	bls.n	f0fc <am_hal_iom_blocking_transfer+0x30>
    f0f0:	2007      	movs	r0, #7
    f0f2:	b007      	add	sp, #28
    f0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0f8:	2006      	movs	r0, #6
    f0fa:	4770      	bx	lr
    f0fc:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    f100:	f1ba 0f00 	cmp.w	sl, #0
    f104:	d102      	bne.n	f10c <am_hal_iom_blocking_transfer+0x40>
    f106:	f881 a010 	strb.w	sl, [r1, #16]
    f10a:	46d0      	mov	r8, sl
    f10c:	f8d1 9004 	ldr.w	r9, [r1, #4]
    f110:	f1b9 0f03 	cmp.w	r9, #3
    f114:	d901      	bls.n	f11a <am_hal_iom_blocking_transfer+0x4e>
    f116:	2006      	movs	r0, #6
    f118:	e7eb      	b.n	f0f2 <am_hal_iom_blocking_transfer+0x26>
    f11a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    f11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f122:	f8d1 b008 	ldr.w	fp, [r1, #8]
    f126:	4093      	lsls	r3, r2
    f128:	ea13 0f0b 	tst.w	r3, fp
    f12c:	d1f3      	bne.n	f116 <am_hal_iom_blocking_transfer+0x4a>
    f12e:	f1ba 0f00 	cmp.w	sl, #0
    f132:	f000 80c5 	beq.w	f2c0 <am_hal_iom_blocking_transfer+0x1f4>
    f136:	f1b8 0f00 	cmp.w	r8, #0
    f13a:	f000 80d3 	beq.w	f2e4 <am_hal_iom_blocking_transfer+0x218>
    f13e:	698b      	ldr	r3, [r1, #24]
    f140:	2b00      	cmp	r3, #0
    f142:	d0e8      	beq.n	f116 <am_hal_iom_blocking_transfer+0x4a>
    f144:	7a03      	ldrb	r3, [r0, #8]
    f146:	2b01      	cmp	r3, #1
    f148:	f040 80be 	bne.w	f2c8 <am_hal_iom_blocking_transfer+0x1fc>
    f14c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f150:	d8e1      	bhi.n	f116 <am_hal_iom_blocking_transfer+0x4a>
    f152:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    f156:	2b02      	cmp	r3, #2
    f158:	d0ca      	beq.n	f0f0 <am_hal_iom_blocking_transfer+0x24>
    f15a:	7f0b      	ldrb	r3, [r1, #28]
    f15c:	694f      	ldr	r7, [r1, #20]
    f15e:	f8d1 e018 	ldr.w	lr, [r1, #24]
    f162:	9303      	str	r3, [sp, #12]
    f164:	4604      	mov	r4, r0
    f166:	2301      	movs	r3, #1
    f168:	460d      	mov	r5, r1
    f16a:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    f16e:	6866      	ldr	r6, [r4, #4]
    f170:	9300      	str	r3, [sp, #0]
    f172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f176:	2300      	movs	r3, #0
    f178:	f104 0124 	add.w	r1, r4, #36	; 0x24
    f17c:	4598      	cmp	r8, r3
    f17e:	bf18      	it	ne
    f180:	4677      	movne	r7, lr
    f182:	f7ff fa53 	bl	e62c <am_hal_flash_delay_status_check>
    f186:	2800      	cmp	r0, #0
    f188:	d1b3      	bne.n	f0f2 <am_hal_iom_blocking_transfer+0x26>
    f18a:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    f18e:	3604      	adds	r6, #4
    f190:	2301      	movs	r3, #1
    f192:	0336      	lsls	r6, r6, #12
    f194:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    f198:	9300      	str	r3, [sp, #0]
    f19a:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    f19e:	9304      	str	r3, [sp, #16]
    f1a0:	4619      	mov	r1, r3
    f1a2:	2206      	movs	r2, #6
    f1a4:	2304      	movs	r3, #4
    f1a6:	f7ff fa41 	bl	e62c <am_hal_flash_delay_status_check>
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d1a1      	bne.n	f0f2 <am_hal_iom_blocking_transfer+0x26>
    f1ae:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    f1b2:	9305      	str	r3, [sp, #20]
    f1b4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f1b8:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    f1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f1c0:	f360 0300 	bfi	r3, r0, #0, #1
    f1c4:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    f1c8:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    f1cc:	682b      	ldr	r3, [r5, #0]
    f1ce:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    f1d2:	7a23      	ldrb	r3, [r4, #8]
    f1d4:	b91b      	cbnz	r3, f1de <am_hal_iom_blocking_transfer+0x112>
    f1d6:	682b      	ldr	r3, [r5, #0]
    f1d8:	4423      	add	r3, r4
    f1da:	f893 0898 	ldrb.w	r0, [r3, #2200]	; 0x898
    f1de:	f8c6 021c 	str.w	r0, [r6, #540]	; 0x21c
    f1e2:	7a23      	ldrb	r3, [r4, #8]
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d17b      	bne.n	f2e0 <am_hal_iom_blocking_transfer+0x214>
    f1e8:	682b      	ldr	r3, [r5, #0]
    f1ea:	4a83      	ldr	r2, [pc, #524]	; (f3f8 <am_hal_iom_blocking_transfer+0x32c>)
    f1ec:	051b      	lsls	r3, r3, #20
    f1ee:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    f1f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    f1f6:	ea0a 0202 	and.w	r2, sl, r2
    f1fa:	f1b8 0f01 	cmp.w	r8, #1
    f1fe:	ea42 0203 	orr.w	r2, r2, r3
    f202:	d074      	beq.n	f2ee <am_hal_iom_blocking_transfer+0x222>
    f204:	f3cb 230f 	ubfx	r3, fp, #8, #16
    f208:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    f20c:	ea4f 1149 	mov.w	r1, r9, lsl #5
    f210:	ea4f 600b 	mov.w	r0, fp, lsl #24
    f214:	f040 0001 	orr.w	r0, r0, #1
    f218:	f001 0160 	and.w	r1, r1, #96	; 0x60
    f21c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f220:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f224:	4301      	orrs	r1, r0
    f226:	9803      	ldr	r0, [sp, #12]
    f228:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f22c:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    f230:	2b03      	cmp	r3, #3
    f232:	ea42 0201 	orr.w	r2, r2, r1
    f236:	f240 80b8 	bls.w	f3aa <am_hal_iom_blocking_transfer+0x2de>
    f23a:	f1b8 0f00 	cmp.w	r8, #0
    f23e:	d00a      	beq.n	f256 <am_hal_iom_blocking_transfer+0x18a>
    f240:	4641      	mov	r1, r8
    f242:	f857 0b04 	ldr.w	r0, [r7], #4
    f246:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    f24a:	2903      	cmp	r1, #3
    f24c:	f1a3 0304 	sub.w	r3, r3, #4
    f250:	f1a1 0104 	sub.w	r1, r1, #4
    f254:	d82f      	bhi.n	f2b6 <am_hal_iom_blocking_transfer+0x1ea>
    f256:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f25a:	f04f 0800 	mov.w	r8, #0
    f25e:	2701      	movs	r7, #1
    f260:	9904      	ldr	r1, [sp, #16]
    f262:	9700      	str	r7, [sp, #0]
    f264:	2304      	movs	r3, #4
    f266:	2206      	movs	r2, #6
    f268:	4864      	ldr	r0, [pc, #400]	; (f3fc <am_hal_iom_blocking_transfer+0x330>)
    f26a:	f7ff f9df 	bl	e62c <am_hal_flash_delay_status_check>
    f26e:	4605      	mov	r5, r0
    f270:	b978      	cbnz	r0, f292 <am_hal_iom_blocking_transfer+0x1c6>
    f272:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f276:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    f27a:	f040 8090 	bne.w	f39e <am_hal_iom_blocking_transfer+0x2d2>
    f27e:	0599      	lsls	r1, r3, #22
    f280:	f100 8090 	bmi.w	f3a4 <am_hal_iom_blocking_transfer+0x2d8>
    f284:	06da      	lsls	r2, r3, #27
    f286:	f100 80d2 	bmi.w	f42e <am_hal_iom_blocking_transfer+0x362>
    f28a:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    f28e:	d00e      	beq.n	f2ae <am_hal_iom_blocking_transfer+0x1e2>
    f290:	463d      	mov	r5, r7
    f292:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    f296:	4620      	mov	r0, r4
    f298:	f7ff fbca 	bl	ea30 <internal_iom_reset_on_error>
    f29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2a0:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    f2a4:	9b05      	ldr	r3, [sp, #20]
    f2a6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    f2aa:	4628      	mov	r0, r5
    f2ac:	e721      	b.n	f0f2 <am_hal_iom_blocking_transfer+0x26>
    f2ae:	f1b8 0f00 	cmp.w	r8, #0
    f2b2:	d0f3      	beq.n	f29c <am_hal_iom_blocking_transfer+0x1d0>
    f2b4:	e7ec      	b.n	f290 <am_hal_iom_blocking_transfer+0x1c4>
    f2b6:	2b03      	cmp	r3, #3
    f2b8:	d976      	bls.n	f3a8 <am_hal_iom_blocking_transfer+0x2dc>
    f2ba:	2900      	cmp	r1, #0
    f2bc:	d1c1      	bne.n	f242 <am_hal_iom_blocking_transfer+0x176>
    f2be:	e7ca      	b.n	f256 <am_hal_iom_blocking_transfer+0x18a>
    f2c0:	7a03      	ldrb	r3, [r0, #8]
    f2c2:	2b01      	cmp	r3, #1
    f2c4:	f43f af45 	beq.w	f152 <am_hal_iom_blocking_transfer+0x86>
    f2c8:	2b00      	cmp	r3, #0
    f2ca:	f47f af42 	bne.w	f152 <am_hal_iom_blocking_transfer+0x86>
    f2ce:	680b      	ldr	r3, [r1, #0]
    f2d0:	2b03      	cmp	r3, #3
    f2d2:	f63f af20 	bhi.w	f116 <am_hal_iom_blocking_transfer+0x4a>
    f2d6:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    f2da:	f4bf af1c 	bcs.w	f116 <am_hal_iom_blocking_transfer+0x4a>
    f2de:	e738      	b.n	f152 <am_hal_iom_blocking_transfer+0x86>
    f2e0:	2300      	movs	r3, #0
    f2e2:	e782      	b.n	f1ea <am_hal_iom_blocking_transfer+0x11e>
    f2e4:	694b      	ldr	r3, [r1, #20]
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	f47f af2c 	bne.w	f144 <am_hal_iom_blocking_transfer+0x78>
    f2ec:	e713      	b.n	f116 <am_hal_iom_blocking_transfer+0x4a>
    f2ee:	ea4f 1349 	mov.w	r3, r9, lsl #5
    f2f2:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    f2f6:	ea4f 610b 	mov.w	r1, fp, lsl #24
    f2fa:	9b03      	ldr	r3, [sp, #12]
    f2fc:	f041 0102 	orr.w	r1, r1, #2
    f300:	f3cb 200f 	ubfx	r0, fp, #8, #16
    f304:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    f308:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f30c:	ea4e 0301 	orr.w	r3, lr, r1
    f310:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f314:	431a      	orrs	r2, r3
    f316:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f31a:	2200      	movs	r2, #0
    f31c:	f1b8 0f00 	cmp.w	r8, #0
    f320:	d09b      	beq.n	f25a <am_hal_iom_blocking_transfer+0x18e>
    f322:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f326:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f32a:	2b03      	cmp	r3, #3
    f32c:	d81e      	bhi.n	f36c <am_hal_iom_blocking_transfer+0x2a0>
    f32e:	4d33      	ldr	r5, [pc, #204]	; (f3fc <am_hal_iom_blocking_transfer+0x330>)
    f330:	e001      	b.n	f336 <am_hal_iom_blocking_transfer+0x26a>
    f332:	3d01      	subs	r5, #1
    f334:	d093      	beq.n	f25e <am_hal_iom_blocking_transfer+0x192>
    f336:	2010      	movs	r0, #16
    f338:	b10a      	cbz	r2, f33e <am_hal_iom_blocking_transfer+0x272>
    f33a:	4598      	cmp	r8, r3
    f33c:	d88f      	bhi.n	f25e <am_hal_iom_blocking_transfer+0x192>
    f33e:	f7ff f965 	bl	e60c <am_hal_flash_delay>
    f342:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    f346:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f34a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f34e:	2b03      	cmp	r3, #3
    f350:	f002 0201 	and.w	r2, r2, #1
    f354:	d9ed      	bls.n	f332 <am_hal_iom_blocking_transfer+0x266>
    f356:	e009      	b.n	f36c <am_hal_iom_blocking_transfer+0x2a0>
    f358:	2b03      	cmp	r3, #3
    f35a:	6039      	str	r1, [r7, #0]
    f35c:	f1a8 0804 	sub.w	r8, r8, #4
    f360:	d967      	bls.n	f432 <am_hal_iom_blocking_transfer+0x366>
    f362:	f1b8 0f00 	cmp.w	r8, #0
    f366:	f43f af78 	beq.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f36a:	4607      	mov	r7, r0
    f36c:	f1b8 0f03 	cmp.w	r8, #3
    f370:	f1a3 0304 	sub.w	r3, r3, #4
    f374:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    f378:	f107 0004 	add.w	r0, r7, #4
    f37c:	d8ec      	bhi.n	f358 <am_hal_iom_blocking_transfer+0x28c>
    f37e:	f1b8 0f01 	cmp.w	r8, #1
    f382:	7039      	strb	r1, [r7, #0]
    f384:	ea4f 2311 	mov.w	r3, r1, lsr #8
    f388:	f43f af67 	beq.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f38c:	f1b8 0f02 	cmp.w	r8, #2
    f390:	707b      	strb	r3, [r7, #1]
    f392:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f396:	f43f af60 	beq.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f39a:	70b9      	strb	r1, [r7, #2]
    f39c:	e75d      	b.n	f25a <am_hal_iom_blocking_transfer+0x18e>
    f39e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f3a2:	e776      	b.n	f292 <am_hal_iom_blocking_transfer+0x1c6>
    f3a4:	4d16      	ldr	r5, [pc, #88]	; (f400 <am_hal_iom_blocking_transfer+0x334>)
    f3a6:	e774      	b.n	f292 <am_hal_iom_blocking_transfer+0x1c6>
    f3a8:	4688      	mov	r8, r1
    f3aa:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f3ae:	f1b8 0f00 	cmp.w	r8, #0
    f3b2:	f43f af52 	beq.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f3b6:	463b      	mov	r3, r7
    f3b8:	4647      	mov	r7, r8
    f3ba:	4698      	mov	r8, r3
    f3bc:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f3c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f3c4:	2b03      	cmp	r3, #3
    f3c6:	d820      	bhi.n	f40a <am_hal_iom_blocking_transfer+0x33e>
    f3c8:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f3cc:	07d8      	lsls	r0, r3, #31
    f3ce:	d42c      	bmi.n	f42a <am_hal_iom_blocking_transfer+0x35e>
    f3d0:	4d0a      	ldr	r5, [pc, #40]	; (f3fc <am_hal_iom_blocking_transfer+0x330>)
    f3d2:	e005      	b.n	f3e0 <am_hal_iom_blocking_transfer+0x314>
    f3d4:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f3d8:	07db      	lsls	r3, r3, #31
    f3da:	d426      	bmi.n	f42a <am_hal_iom_blocking_transfer+0x35e>
    f3dc:	3d01      	subs	r5, #1
    f3de:	d024      	beq.n	f42a <am_hal_iom_blocking_transfer+0x35e>
    f3e0:	2010      	movs	r0, #16
    f3e2:	f7ff f913 	bl	e60c <am_hal_flash_delay>
    f3e6:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f3ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f3ee:	2b03      	cmp	r3, #3
    f3f0:	d9f0      	bls.n	f3d4 <am_hal_iom_blocking_transfer+0x308>
    f3f2:	e00a      	b.n	f40a <am_hal_iom_blocking_transfer+0x33e>
    f3f4:	01123456 	.word	0x01123456
    f3f8:	000fff00 	.word	0x000fff00
    f3fc:	0007a120 	.word	0x0007a120
    f400:	08000001 	.word	0x08000001
    f404:	2f00      	cmp	r7, #0
    f406:	f43f af28 	beq.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f40a:	f858 2b04 	ldr.w	r2, [r8], #4
    f40e:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f412:	2f03      	cmp	r7, #3
    f414:	f1a3 0304 	sub.w	r3, r3, #4
    f418:	f1a7 0704 	sub.w	r7, r7, #4
    f41c:	f67f af1d 	bls.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f420:	2b03      	cmp	r3, #3
    f422:	d8ef      	bhi.n	f404 <am_hal_iom_blocking_transfer+0x338>
    f424:	2f00      	cmp	r7, #0
    f426:	d1c9      	bne.n	f3bc <am_hal_iom_blocking_transfer+0x2f0>
    f428:	e717      	b.n	f25a <am_hal_iom_blocking_transfer+0x18e>
    f42a:	46b8      	mov	r8, r7
    f42c:	e717      	b.n	f25e <am_hal_iom_blocking_transfer+0x192>
    f42e:	4d04      	ldr	r5, [pc, #16]	; (f440 <am_hal_iom_blocking_transfer+0x374>)
    f430:	e72f      	b.n	f292 <am_hal_iom_blocking_transfer+0x1c6>
    f432:	f1b8 0f00 	cmp.w	r8, #0
    f436:	f43f af10 	beq.w	f25a <am_hal_iom_blocking_transfer+0x18e>
    f43a:	4607      	mov	r7, r0
    f43c:	e771      	b.n	f322 <am_hal_iom_blocking_transfer+0x256>
    f43e:	bf00      	nop
    f440:	08000002 	.word	0x08000002

0000f444 <am_hal_itm_disable>:
    f444:	b510      	push	{r4, lr}
    f446:	4b25      	ldr	r3, [pc, #148]	; (f4dc <am_hal_itm_disable+0x98>)
    f448:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f44c:	b9b3      	cbnz	r3, f47c <am_hal_itm_disable+0x38>
    f44e:	4b24      	ldr	r3, [pc, #144]	; (f4e0 <am_hal_itm_disable+0x9c>)
    f450:	68da      	ldr	r2, [r3, #12]
    f452:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f456:	60da      	str	r2, [r3, #12]
    f458:	68da      	ldr	r2, [r3, #12]
    f45a:	01d2      	lsls	r2, r2, #7
    f45c:	d5fc      	bpl.n	f458 <am_hal_itm_disable+0x14>
    f45e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f462:	4920      	ldr	r1, [pc, #128]	; (f4e4 <am_hal_itm_disable+0xa0>)
    f464:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f468:	4a1f      	ldr	r2, [pc, #124]	; (f4e8 <am_hal_itm_disable+0xa4>)
    f46a:	200f      	movs	r0, #15
    f46c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f470:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f474:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f478:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f47c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f480:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f484:	021b      	lsls	r3, r3, #8
    f486:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f48a:	d4f9      	bmi.n	f480 <am_hal_itm_disable+0x3c>
    f48c:	f44f 7048 	mov.w	r0, #800	; 0x320
    f490:	f7ff f8bc 	bl	e60c <am_hal_flash_delay>
    f494:	4b13      	ldr	r3, [pc, #76]	; (f4e4 <am_hal_itm_disable+0xa0>)
    f496:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f49a:	4621      	mov	r1, r4
    f49c:	2064      	movs	r0, #100	; 0x64
    f49e:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f4a2:	f023 0301 	bic.w	r3, r3, #1
    f4a6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f4aa:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f4ae:	4b0f      	ldr	r3, [pc, #60]	; (f4ec <am_hal_itm_disable+0xa8>)
    f4b0:	4013      	ands	r3, r2
    f4b2:	2b00      	cmp	r3, #0
    f4b4:	d1f9      	bne.n	f4aa <am_hal_itm_disable+0x66>
    f4b6:	3801      	subs	r0, #1
    f4b8:	d1f1      	bne.n	f49e <am_hal_itm_disable+0x5a>
    f4ba:	4a09      	ldr	r2, [pc, #36]	; (f4e0 <am_hal_itm_disable+0x9c>)
    f4bc:	68d3      	ldr	r3, [r2, #12]
    f4be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f4c2:	60d3      	str	r3, [r2, #12]
    f4c4:	68d3      	ldr	r3, [r2, #12]
    f4c6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f4ca:	d1fb      	bne.n	f4c4 <am_hal_itm_disable+0x80>
    f4cc:	4a03      	ldr	r2, [pc, #12]	; (f4dc <am_hal_itm_disable+0x98>)
    f4ce:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f4d2:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d1fb      	bne.n	f4d2 <am_hal_itm_disable+0x8e>
    f4da:	bd10      	pop	{r4, pc}
    f4dc:	40020000 	.word	0x40020000
    f4e0:	e000edf0 	.word	0xe000edf0
    f4e4:	c5acce55 	.word	0xc5acce55
    f4e8:	00150511 	.word	0x00150511
    f4ec:	00800001 	.word	0x00800001

0000f4f0 <am_hal_mcuctrl_info_get>:
    f4f0:	b4f0      	push	{r4, r5, r6, r7}
    f4f2:	b121      	cbz	r1, f4fe <am_hal_mcuctrl_info_get+0xe>
    f4f4:	2801      	cmp	r0, #1
    f4f6:	d038      	beq.n	f56a <am_hal_mcuctrl_info_get+0x7a>
    f4f8:	d320      	bcc.n	f53c <am_hal_mcuctrl_info_get+0x4c>
    f4fa:	2802      	cmp	r0, #2
    f4fc:	d002      	beq.n	f504 <am_hal_mcuctrl_info_get+0x14>
    f4fe:	2006      	movs	r0, #6
    f500:	bcf0      	pop	{r4, r5, r6, r7}
    f502:	4770      	bx	lr
    f504:	4a41      	ldr	r2, [pc, #260]	; (f60c <am_hal_mcuctrl_info_get+0x11c>)
    f506:	684d      	ldr	r5, [r1, #4]
    f508:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f50c:	694c      	ldr	r4, [r1, #20]
    f50e:	f003 0601 	and.w	r6, r3, #1
    f512:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f516:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f51a:	700e      	strb	r6, [r1, #0]
    f51c:	7208      	strb	r0, [r1, #8]
    f51e:	740b      	strb	r3, [r1, #16]
    f520:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f524:	60cb      	str	r3, [r1, #12]
    f526:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f52a:	4328      	orrs	r0, r5
    f52c:	6048      	str	r0, [r1, #4]
    f52e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f532:	4323      	orrs	r3, r4
    f534:	2000      	movs	r0, #0
    f536:	614b      	str	r3, [r1, #20]
    f538:	bcf0      	pop	{r4, r5, r6, r7}
    f53a:	4770      	bx	lr
    f53c:	4a33      	ldr	r2, [pc, #204]	; (f60c <am_hal_mcuctrl_info_get+0x11c>)
    f53e:	6993      	ldr	r3, [r2, #24]
    f540:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f544:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f548:	7008      	strb	r0, [r1, #0]
    f54a:	704b      	strb	r3, [r1, #1]
    f54c:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f550:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f554:	710b      	strb	r3, [r1, #4]
    f556:	6953      	ldr	r3, [r2, #20]
    f558:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f55c:	f003 0301 	and.w	r3, r3, #1
    f560:	2000      	movs	r0, #0
    f562:	708a      	strb	r2, [r1, #2]
    f564:	70cb      	strb	r3, [r1, #3]
    f566:	bcf0      	pop	{r4, r5, r6, r7}
    f568:	4770      	bx	lr
    f56a:	4b28      	ldr	r3, [pc, #160]	; (f60c <am_hal_mcuctrl_info_get+0x11c>)
    f56c:	4c28      	ldr	r4, [pc, #160]	; (f610 <am_hal_mcuctrl_info_get+0x120>)
    f56e:	681a      	ldr	r2, [r3, #0]
    f570:	600a      	str	r2, [r1, #0]
    f572:	6858      	ldr	r0, [r3, #4]
    f574:	6048      	str	r0, [r1, #4]
    f576:	6898      	ldr	r0, [r3, #8]
    f578:	6088      	str	r0, [r1, #8]
    f57a:	68d8      	ldr	r0, [r3, #12]
    f57c:	60c8      	str	r0, [r1, #12]
    f57e:	691d      	ldr	r5, [r3, #16]
    f580:	4824      	ldr	r0, [pc, #144]	; (f614 <am_hal_mcuctrl_info_get+0x124>)
    f582:	610d      	str	r5, [r1, #16]
    f584:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f588:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f58c:	695d      	ldr	r5, [r3, #20]
    f58e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f592:	4b21      	ldr	r3, [pc, #132]	; (f618 <am_hal_mcuctrl_info_get+0x128>)
    f594:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f598:	6208      	str	r0, [r1, #32]
    f59a:	f002 0201 	and.w	r2, r2, #1
    f59e:	614d      	str	r5, [r1, #20]
    f5a0:	61cc      	str	r4, [r1, #28]
    f5a2:	618a      	str	r2, [r1, #24]
    f5a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f5a8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f5ac:	b2d0      	uxtb	r0, r2
    f5ae:	f004 020f 	and.w	r2, r4, #15
    f5b2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f5b6:	624a      	str	r2, [r1, #36]	; 0x24
    f5b8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f5bc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f5c0:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f5c4:	f004 020f 	and.w	r2, r4, #15
    f5c8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f5cc:	628a      	str	r2, [r1, #40]	; 0x28
    f5ce:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f5d2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f5d6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f5da:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f5de:	4302      	orrs	r2, r0
    f5e0:	62ca      	str	r2, [r1, #44]	; 0x2c
    f5e2:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f5e6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f5ea:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f5ee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f5f2:	b2c0      	uxtb	r0, r0
    f5f4:	0400      	lsls	r0, r0, #16
    f5f6:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f5fa:	b2d2      	uxtb	r2, r2
    f5fc:	431a      	orrs	r2, r3
    f5fe:	b2e3      	uxtb	r3, r4
    f600:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f604:	630b      	str	r3, [r1, #48]	; 0x30
    f606:	2000      	movs	r0, #0
    f608:	bcf0      	pop	{r4, r5, r6, r7}
    f60a:	4770      	bx	lr
    f60c:	40020000 	.word	0x40020000
    f610:	00010904 	.word	0x00010904
    f614:	00010944 	.word	0x00010944
    f618:	f0000f00 	.word	0xf0000f00

0000f61c <am_hal_pwrctrl_periph_enable>:
    f61c:	b570      	push	{r4, r5, r6, lr}
    f61e:	b082      	sub	sp, #8
    f620:	4604      	mov	r4, r0
    f622:	f7ff f9fd 	bl	ea20 <am_hal_interrupt_master_disable>
    f626:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f62a:	4d0f      	ldr	r5, [pc, #60]	; (f668 <am_hal_pwrctrl_periph_enable+0x4c>)
    f62c:	4e0f      	ldr	r6, [pc, #60]	; (f66c <am_hal_pwrctrl_periph_enable+0x50>)
    f62e:	9001      	str	r0, [sp, #4]
    f630:	00a4      	lsls	r4, r4, #2
    f632:	68aa      	ldr	r2, [r5, #8]
    f634:	5933      	ldr	r3, [r6, r4]
    f636:	4313      	orrs	r3, r2
    f638:	60ab      	str	r3, [r5, #8]
    f63a:	9801      	ldr	r0, [sp, #4]
    f63c:	4434      	add	r4, r6
    f63e:	f7ff f9f3 	bl	ea28 <am_hal_interrupt_master_set>
    f642:	20a0      	movs	r0, #160	; 0xa0
    f644:	f7fe ffe2 	bl	e60c <am_hal_flash_delay>
    f648:	69ab      	ldr	r3, [r5, #24]
    f64a:	6864      	ldr	r4, [r4, #4]
    f64c:	4223      	tst	r3, r4
    f64e:	d103      	bne.n	f658 <am_hal_pwrctrl_periph_enable+0x3c>
    f650:	20a0      	movs	r0, #160	; 0xa0
    f652:	f7fe ffdb 	bl	e60c <am_hal_flash_delay>
    f656:	69ab      	ldr	r3, [r5, #24]
    f658:	4b03      	ldr	r3, [pc, #12]	; (f668 <am_hal_pwrctrl_periph_enable+0x4c>)
    f65a:	699b      	ldr	r3, [r3, #24]
    f65c:	4223      	tst	r3, r4
    f65e:	bf0c      	ite	eq
    f660:	2001      	moveq	r0, #1
    f662:	2000      	movne	r0, #0
    f664:	b002      	add	sp, #8
    f666:	bd70      	pop	{r4, r5, r6, pc}
    f668:	40021000 	.word	0x40021000
    f66c:	00010984 	.word	0x00010984

0000f670 <am_hal_pwrctrl_periph_disable>:
    f670:	b570      	push	{r4, r5, r6, lr}
    f672:	b082      	sub	sp, #8
    f674:	4604      	mov	r4, r0
    f676:	f7ff f9d3 	bl	ea20 <am_hal_interrupt_master_disable>
    f67a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f67e:	4d10      	ldr	r5, [pc, #64]	; (f6c0 <am_hal_pwrctrl_periph_disable+0x50>)
    f680:	4e10      	ldr	r6, [pc, #64]	; (f6c4 <am_hal_pwrctrl_periph_disable+0x54>)
    f682:	9001      	str	r0, [sp, #4]
    f684:	00a4      	lsls	r4, r4, #2
    f686:	68ab      	ldr	r3, [r5, #8]
    f688:	5932      	ldr	r2, [r6, r4]
    f68a:	ea23 0302 	bic.w	r3, r3, r2
    f68e:	60ab      	str	r3, [r5, #8]
    f690:	9801      	ldr	r0, [sp, #4]
    f692:	4434      	add	r4, r6
    f694:	f7ff f9c8 	bl	ea28 <am_hal_interrupt_master_set>
    f698:	20a0      	movs	r0, #160	; 0xa0
    f69a:	f7fe ffb7 	bl	e60c <am_hal_flash_delay>
    f69e:	69ab      	ldr	r3, [r5, #24]
    f6a0:	6864      	ldr	r4, [r4, #4]
    f6a2:	4223      	tst	r3, r4
    f6a4:	d003      	beq.n	f6ae <am_hal_pwrctrl_periph_disable+0x3e>
    f6a6:	20a0      	movs	r0, #160	; 0xa0
    f6a8:	f7fe ffb0 	bl	e60c <am_hal_flash_delay>
    f6ac:	69ab      	ldr	r3, [r5, #24]
    f6ae:	4b04      	ldr	r3, [pc, #16]	; (f6c0 <am_hal_pwrctrl_periph_disable+0x50>)
    f6b0:	699b      	ldr	r3, [r3, #24]
    f6b2:	4223      	tst	r3, r4
    f6b4:	bf14      	ite	ne
    f6b6:	2001      	movne	r0, #1
    f6b8:	2000      	moveq	r0, #0
    f6ba:	b002      	add	sp, #8
    f6bc:	bd70      	pop	{r4, r5, r6, pc}
    f6be:	bf00      	nop
    f6c0:	40021000 	.word	0x40021000
    f6c4:	00010984 	.word	0x00010984

0000f6c8 <am_hal_pwrctrl_low_power_init>:
    f6c8:	b530      	push	{r4, r5, lr}
    f6ca:	4b33      	ldr	r3, [pc, #204]	; (f798 <am_hal_pwrctrl_low_power_init+0xd0>)
    f6cc:	681a      	ldr	r2, [r3, #0]
    f6ce:	b085      	sub	sp, #20
    f6d0:	b912      	cbnz	r2, f6d8 <am_hal_pwrctrl_low_power_init+0x10>
    f6d2:	4a32      	ldr	r2, [pc, #200]	; (f79c <am_hal_pwrctrl_low_power_init+0xd4>)
    f6d4:	6812      	ldr	r2, [r2, #0]
    f6d6:	601a      	str	r2, [r3, #0]
    f6d8:	4b31      	ldr	r3, [pc, #196]	; (f7a0 <am_hal_pwrctrl_low_power_init+0xd8>)
    f6da:	68db      	ldr	r3, [r3, #12]
    f6dc:	b2db      	uxtb	r3, r3
    f6de:	2b12      	cmp	r3, #18
    f6e0:	d00a      	beq.n	f6f8 <am_hal_pwrctrl_low_power_init+0x30>
    f6e2:	4c30      	ldr	r4, [pc, #192]	; (f7a4 <am_hal_pwrctrl_low_power_init+0xdc>)
    f6e4:	2100      	movs	r1, #0
    f6e6:	200c      	movs	r0, #12
    f6e8:	f7fe fc90 	bl	e00c <am_hal_cachectrl_control>
    f6ec:	69a3      	ldr	r3, [r4, #24]
    f6ee:	05d8      	lsls	r0, r3, #23
    f6f0:	d520      	bpl.n	f734 <am_hal_pwrctrl_low_power_init+0x6c>
    f6f2:	2000      	movs	r0, #0
    f6f4:	b005      	add	sp, #20
    f6f6:	bd30      	pop	{r4, r5, pc}
    f6f8:	4c2a      	ldr	r4, [pc, #168]	; (f7a4 <am_hal_pwrctrl_low_power_init+0xdc>)
    f6fa:	6863      	ldr	r3, [r4, #4]
    f6fc:	07d9      	lsls	r1, r3, #31
    f6fe:	d5f0      	bpl.n	f6e2 <am_hal_pwrctrl_low_power_init+0x1a>
    f700:	f7ff f98e 	bl	ea20 <am_hal_interrupt_master_disable>
    f704:	9003      	str	r0, [sp, #12]
    f706:	68a3      	ldr	r3, [r4, #8]
    f708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f70c:	60a3      	str	r3, [r4, #8]
    f70e:	9803      	ldr	r0, [sp, #12]
    f710:	f7ff f98a 	bl	ea28 <am_hal_interrupt_master_set>
    f714:	20a0      	movs	r0, #160	; 0xa0
    f716:	f7fe ff79 	bl	e60c <am_hal_flash_delay>
    f71a:	69a3      	ldr	r3, [r4, #24]
    f71c:	061a      	lsls	r2, r3, #24
    f71e:	d403      	bmi.n	f728 <am_hal_pwrctrl_low_power_init+0x60>
    f720:	20a0      	movs	r0, #160	; 0xa0
    f722:	f7fe ff73 	bl	e60c <am_hal_flash_delay>
    f726:	69a3      	ldr	r3, [r4, #24]
    f728:	4b1e      	ldr	r3, [pc, #120]	; (f7a4 <am_hal_pwrctrl_low_power_init+0xdc>)
    f72a:	699b      	ldr	r3, [r3, #24]
    f72c:	061b      	lsls	r3, r3, #24
    f72e:	d4d8      	bmi.n	f6e2 <am_hal_pwrctrl_low_power_init+0x1a>
    f730:	2001      	movs	r0, #1
    f732:	e7df      	b.n	f6f4 <am_hal_pwrctrl_low_power_init+0x2c>
    f734:	4d1a      	ldr	r5, [pc, #104]	; (f7a0 <am_hal_pwrctrl_low_power_init+0xd8>)
    f736:	491c      	ldr	r1, [pc, #112]	; (f7a8 <am_hal_pwrctrl_low_power_init+0xe0>)
    f738:	7e2a      	ldrb	r2, [r5, #24]
    f73a:	2001      	movs	r0, #1
    f73c:	4302      	orrs	r2, r0
    f73e:	2307      	movs	r3, #7
    f740:	762a      	strb	r2, [r5, #24]
    f742:	9000      	str	r0, [sp, #0]
    f744:	461a      	mov	r2, r3
    f746:	f242 7010 	movw	r0, #10000	; 0x2710
    f74a:	f7fe ff6f 	bl	e62c <am_hal_flash_delay_status_check>
    f74e:	b110      	cbz	r0, f756 <am_hal_pwrctrl_low_power_init+0x8e>
    f750:	2004      	movs	r0, #4
    f752:	b005      	add	sp, #20
    f754:	bd30      	pop	{r4, r5, pc}
    f756:	6823      	ldr	r3, [r4, #0]
    f758:	f043 0301 	orr.w	r3, r3, #1
    f75c:	6023      	str	r3, [r4, #0]
    f75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f764:	6263      	str	r3, [r4, #36]	; 0x24
    f766:	68eb      	ldr	r3, [r5, #12]
    f768:	b2db      	uxtb	r3, r3
    f76a:	2b11      	cmp	r3, #17
    f76c:	d1c1      	bne.n	f6f2 <am_hal_pwrctrl_low_power_init+0x2a>
    f76e:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f772:	f360 5356 	bfi	r3, r0, #21, #2
    f776:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f77a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f77e:	220f      	movs	r2, #15
    f780:	f362 138b 	bfi	r3, r2, #6, #6
    f784:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f788:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f78c:	f362 0305 	bfi	r3, r2, #0, #6
    f790:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f794:	e7ae      	b.n	f6f4 <am_hal_pwrctrl_low_power_init+0x2c>
    f796:	bf00      	nop
    f798:	1000118c 	.word	0x1000118c
    f79c:	4ffff000 	.word	0x4ffff000
    f7a0:	40020000 	.word	0x40020000
    f7a4:	40021000 	.word	0x40021000
    f7a8:	40020018 	.word	0x40020018

0000f7ac <am_hal_rtc_osc_select>:
    f7ac:	b928      	cbnz	r0, f7ba <am_hal_rtc_osc_select+0xe>
    f7ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f7b2:	68d3      	ldr	r3, [r2, #12]
    f7b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f7b8:	60d3      	str	r3, [r2, #12]
    f7ba:	4770      	bx	lr

0000f7bc <am_hal_rtc_osc_disable>:
    f7bc:	4a03      	ldr	r2, [pc, #12]	; (f7cc <am_hal_rtc_osc_disable+0x10>)
    f7be:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f7c2:	f043 0310 	orr.w	r3, r3, #16
    f7c6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f7ca:	4770      	bx	lr
    f7cc:	40004200 	.word	0x40004200

0000f7d0 <am_hal_sysctrl_sleep>:
    f7d0:	b510      	push	{r4, lr}
    f7d2:	b082      	sub	sp, #8
    f7d4:	4604      	mov	r4, r0
    f7d6:	f7ff f923 	bl	ea20 <am_hal_interrupt_master_disable>
    f7da:	9001      	str	r0, [sp, #4]
    f7dc:	b124      	cbz	r4, f7e8 <am_hal_sysctrl_sleep+0x18>
    f7de:	4b12      	ldr	r3, [pc, #72]	; (f828 <am_hal_sysctrl_sleep+0x58>)
    f7e0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f7e4:	07db      	lsls	r3, r3, #31
    f7e6:	d512      	bpl.n	f80e <am_hal_sysctrl_sleep+0x3e>
    f7e8:	4a10      	ldr	r2, [pc, #64]	; (f82c <am_hal_sysctrl_sleep+0x5c>)
    f7ea:	6913      	ldr	r3, [r2, #16]
    f7ec:	f023 0304 	bic.w	r3, r3, #4
    f7f0:	6113      	str	r3, [r2, #16]
    f7f2:	f3bf 8f4f 	dsb	sy
    f7f6:	4a0e      	ldr	r2, [pc, #56]	; (f830 <am_hal_sysctrl_sleep+0x60>)
    f7f8:	4b0e      	ldr	r3, [pc, #56]	; (f834 <am_hal_sysctrl_sleep+0x64>)
    f7fa:	6812      	ldr	r2, [r2, #0]
    f7fc:	601a      	str	r2, [r3, #0]
    f7fe:	bf30      	wfi
    f800:	f3bf 8f6f 	isb	sy
    f804:	9801      	ldr	r0, [sp, #4]
    f806:	f7ff f90f 	bl	ea28 <am_hal_interrupt_master_set>
    f80a:	b002      	add	sp, #8
    f80c:	bd10      	pop	{r4, pc}
    f80e:	4b0a      	ldr	r3, [pc, #40]	; (f838 <am_hal_sysctrl_sleep+0x68>)
    f810:	681a      	ldr	r2, [r3, #0]
    f812:	b912      	cbnz	r2, f81a <am_hal_sysctrl_sleep+0x4a>
    f814:	4a09      	ldr	r2, [pc, #36]	; (f83c <am_hal_sysctrl_sleep+0x6c>)
    f816:	6812      	ldr	r2, [r2, #0]
    f818:	601a      	str	r2, [r3, #0]
    f81a:	4a04      	ldr	r2, [pc, #16]	; (f82c <am_hal_sysctrl_sleep+0x5c>)
    f81c:	6913      	ldr	r3, [r2, #16]
    f81e:	f043 0304 	orr.w	r3, r3, #4
    f822:	6113      	str	r3, [r2, #16]
    f824:	e7e5      	b.n	f7f2 <am_hal_sysctrl_sleep+0x22>
    f826:	bf00      	nop
    f828:	40020000 	.word	0x40020000
    f82c:	e000ed00 	.word	0xe000ed00
    f830:	5fff0000 	.word	0x5fff0000
    f834:	10001190 	.word	0x10001190
    f838:	1000118c 	.word	0x1000118c
    f83c:	4ffff000 	.word	0x4ffff000

0000f840 <am_hal_uart_initialize>:
    f840:	2801      	cmp	r0, #1
    f842:	d901      	bls.n	f848 <am_hal_uart_initialize+0x8>
    f844:	2005      	movs	r0, #5
    f846:	4770      	bx	lr
    f848:	b169      	cbz	r1, f866 <am_hal_uart_initialize+0x26>
    f84a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f84c:	2264      	movs	r2, #100	; 0x64
    f84e:	4e0e      	ldr	r6, [pc, #56]	; (f888 <am_hal_uart_initialize+0x48>)
    f850:	fb02 f200 	mul.w	r2, r2, r0
    f854:	18b4      	adds	r4, r6, r2
    f856:	4603      	mov	r3, r0
    f858:	78e0      	ldrb	r0, [r4, #3]
    f85a:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f85e:	b2fd      	uxtb	r5, r7
    f860:	b11d      	cbz	r5, f86a <am_hal_uart_initialize+0x2a>
    f862:	2007      	movs	r0, #7
    f864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f866:	2006      	movs	r0, #6
    f868:	4770      	bx	lr
    f86a:	f040 0001 	orr.w	r0, r0, #1
    f86e:	70e0      	strb	r0, [r4, #3]
    f870:	58b0      	ldr	r0, [r6, r2]
    f872:	f8df e018 	ldr.w	lr, [pc, #24]	; f88c <am_hal_uart_initialize+0x4c>
    f876:	f36e 0017 	bfi	r0, lr, #0, #24
    f87a:	50b0      	str	r0, [r6, r2]
    f87c:	6263      	str	r3, [r4, #36]	; 0x24
    f87e:	7127      	strb	r7, [r4, #4]
    f880:	6625      	str	r5, [r4, #96]	; 0x60
    f882:	4628      	mov	r0, r5
    f884:	600c      	str	r4, [r1, #0]
    f886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f888:	10004c14 	.word	0x10004c14
    f88c:	00ea9e06 	.word	0x00ea9e06

0000f890 <am_hal_uart_deinitialize>:
    f890:	b128      	cbz	r0, f89e <am_hal_uart_deinitialize+0xe>
    f892:	6803      	ldr	r3, [r0, #0]
    f894:	4a07      	ldr	r2, [pc, #28]	; (f8b4 <am_hal_uart_deinitialize+0x24>)
    f896:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f89a:	4293      	cmp	r3, r2
    f89c:	d001      	beq.n	f8a2 <am_hal_uart_deinitialize+0x12>
    f89e:	2002      	movs	r0, #2
    f8a0:	4770      	bx	lr
    f8a2:	78c2      	ldrb	r2, [r0, #3]
    f8a4:	2300      	movs	r3, #0
    f8a6:	f36f 0200 	bfc	r2, #0, #1
    f8aa:	70c2      	strb	r2, [r0, #3]
    f8ac:	6243      	str	r3, [r0, #36]	; 0x24
    f8ae:	7103      	strb	r3, [r0, #4]
    f8b0:	4618      	mov	r0, r3
    f8b2:	4770      	bx	lr
    f8b4:	01ea9e06 	.word	0x01ea9e06

0000f8b8 <am_hal_uart_power_control>:
    f8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8bc:	6804      	ldr	r4, [r0, #0]
    f8be:	4b36      	ldr	r3, [pc, #216]	; (f998 <am_hal_uart_power_control+0xe0>)
    f8c0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f8c4:	429c      	cmp	r4, r3
    f8c6:	b083      	sub	sp, #12
    f8c8:	d003      	beq.n	f8d2 <am_hal_uart_power_control+0x1a>
    f8ca:	2002      	movs	r0, #2
    f8cc:	b003      	add	sp, #12
    f8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f8d2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f8d4:	4605      	mov	r5, r0
    f8d6:	f107 0008 	add.w	r0, r7, #8
    f8da:	4691      	mov	r9, r2
    f8dc:	460e      	mov	r6, r1
    f8de:	fa5f f880 	uxtb.w	r8, r0
    f8e2:	b181      	cbz	r1, f906 <am_hal_uart_power_control+0x4e>
    f8e4:	2902      	cmp	r1, #2
    f8e6:	d80c      	bhi.n	f902 <am_hal_uart_power_control+0x4a>
    f8e8:	b992      	cbnz	r2, f910 <am_hal_uart_power_control+0x58>
    f8ea:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f8ee:	371c      	adds	r7, #28
    f8f0:	033f      	lsls	r7, r7, #12
    f8f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f8f6:	647b      	str	r3, [r7, #68]	; 0x44
    f8f8:	4640      	mov	r0, r8
    f8fa:	f7ff feb9 	bl	f670 <am_hal_pwrctrl_periph_disable>
    f8fe:	2000      	movs	r0, #0
    f900:	e7e4      	b.n	f8cc <am_hal_uart_power_control+0x14>
    f902:	2006      	movs	r0, #6
    f904:	e7e2      	b.n	f8cc <am_hal_uart_power_control+0x14>
    f906:	b322      	cbz	r2, f952 <am_hal_uart_power_control+0x9a>
    f908:	792b      	ldrb	r3, [r5, #4]
    f90a:	bb3b      	cbnz	r3, f95c <am_hal_uart_power_control+0xa4>
    f90c:	2007      	movs	r0, #7
    f90e:	e7dd      	b.n	f8cc <am_hal_uart_power_control+0x14>
    f910:	f7ff f886 	bl	ea20 <am_hal_interrupt_master_disable>
    f914:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f918:	331c      	adds	r3, #28
    f91a:	031b      	lsls	r3, r3, #12
    f91c:	9001      	str	r0, [sp, #4]
    f91e:	6a1a      	ldr	r2, [r3, #32]
    f920:	60aa      	str	r2, [r5, #8]
    f922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f924:	60ea      	str	r2, [r5, #12]
    f926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f928:	612a      	str	r2, [r5, #16]
    f92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f92c:	616a      	str	r2, [r5, #20]
    f92e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f930:	61aa      	str	r2, [r5, #24]
    f932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f934:	61ea      	str	r2, [r5, #28]
    f936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f938:	622b      	str	r3, [r5, #32]
    f93a:	2301      	movs	r3, #1
    f93c:	712b      	strb	r3, [r5, #4]
    f93e:	9801      	ldr	r0, [sp, #4]
    f940:	f7ff f872 	bl	ea28 <am_hal_interrupt_master_set>
    f944:	682b      	ldr	r3, [r5, #0]
    f946:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f94a:	42a3      	cmp	r3, r4
    f94c:	d1d4      	bne.n	f8f8 <am_hal_uart_power_control+0x40>
    f94e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f950:	e7cb      	b.n	f8ea <am_hal_uart_power_control+0x32>
    f952:	4640      	mov	r0, r8
    f954:	f7ff fe62 	bl	f61c <am_hal_pwrctrl_periph_enable>
    f958:	4648      	mov	r0, r9
    f95a:	e7b7      	b.n	f8cc <am_hal_uart_power_control+0x14>
    f95c:	4640      	mov	r0, r8
    f95e:	f7ff fe5d 	bl	f61c <am_hal_pwrctrl_periph_enable>
    f962:	f7ff f85d 	bl	ea20 <am_hal_interrupt_master_disable>
    f966:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f96a:	331c      	adds	r3, #28
    f96c:	031b      	lsls	r3, r3, #12
    f96e:	68aa      	ldr	r2, [r5, #8]
    f970:	9000      	str	r0, [sp, #0]
    f972:	621a      	str	r2, [r3, #32]
    f974:	68ea      	ldr	r2, [r5, #12]
    f976:	625a      	str	r2, [r3, #36]	; 0x24
    f978:	692a      	ldr	r2, [r5, #16]
    f97a:	629a      	str	r2, [r3, #40]	; 0x28
    f97c:	696a      	ldr	r2, [r5, #20]
    f97e:	62da      	str	r2, [r3, #44]	; 0x2c
    f980:	69aa      	ldr	r2, [r5, #24]
    f982:	631a      	str	r2, [r3, #48]	; 0x30
    f984:	69ea      	ldr	r2, [r5, #28]
    f986:	635a      	str	r2, [r3, #52]	; 0x34
    f988:	6a2a      	ldr	r2, [r5, #32]
    f98a:	639a      	str	r2, [r3, #56]	; 0x38
    f98c:	9800      	ldr	r0, [sp, #0]
    f98e:	712e      	strb	r6, [r5, #4]
    f990:	f7ff f84a 	bl	ea28 <am_hal_interrupt_master_set>
    f994:	4630      	mov	r0, r6
    f996:	e799      	b.n	f8cc <am_hal_uart_power_control+0x14>
    f998:	01ea9e06 	.word	0x01ea9e06

0000f99c <am_hal_uart_configure>:
    f99c:	6803      	ldr	r3, [r0, #0]
    f99e:	4a84      	ldr	r2, [pc, #528]	; (fbb0 <am_hal_uart_configure+0x214>)
    f9a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f9a4:	4293      	cmp	r3, r2
    f9a6:	d001      	beq.n	f9ac <am_hal_uart_configure+0x10>
    f9a8:	2002      	movs	r0, #2
    f9aa:	4770      	bx	lr
    f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f9b2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f9b6:	351c      	adds	r5, #28
    f9b8:	032d      	lsls	r5, r5, #12
    f9ba:	2700      	movs	r7, #0
    f9bc:	b084      	sub	sp, #16
    f9be:	632f      	str	r7, [r5, #48]	; 0x30
    f9c0:	460e      	mov	r6, r1
    f9c2:	4604      	mov	r4, r0
    f9c4:	f7ff f82c 	bl	ea20 <am_hal_interrupt_master_disable>
    f9c8:	9001      	str	r0, [sp, #4]
    f9ca:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9cc:	f043 0308 	orr.w	r3, r3, #8
    f9d0:	862b      	strh	r3, [r5, #48]	; 0x30
    f9d2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9d4:	2201      	movs	r2, #1
    f9d6:	f362 1306 	bfi	r3, r2, #4, #3
    f9da:	862b      	strh	r3, [r5, #48]	; 0x30
    f9dc:	9801      	ldr	r0, [sp, #4]
    f9de:	f7ff f823 	bl	ea28 <am_hal_interrupt_master_set>
    f9e2:	f7ff f81d 	bl	ea20 <am_hal_interrupt_master_disable>
    f9e6:	9002      	str	r0, [sp, #8]
    f9e8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9ea:	f367 0300 	bfi	r3, r7, #0, #1
    f9ee:	862b      	strh	r3, [r5, #48]	; 0x30
    f9f0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9f2:	f367 2349 	bfi	r3, r7, #9, #1
    f9f6:	862b      	strh	r3, [r5, #48]	; 0x30
    f9f8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9fa:	f367 2308 	bfi	r3, r7, #8, #1
    f9fe:	862b      	strh	r3, [r5, #48]	; 0x30
    fa00:	9802      	ldr	r0, [sp, #8]
    fa02:	f7ff f811 	bl	ea28 <am_hal_interrupt_master_set>
    fa06:	4a6b      	ldr	r2, [pc, #428]	; (fbb4 <am_hal_uart_configure+0x218>)
    fa08:	6833      	ldr	r3, [r6, #0]
    fa0a:	68d2      	ldr	r2, [r2, #12]
    fa0c:	b2d2      	uxtb	r2, r2
    fa0e:	2a12      	cmp	r2, #18
    fa10:	d00b      	beq.n	fa2a <am_hal_uart_configure+0x8e>
    fa12:	4a68      	ldr	r2, [pc, #416]	; (fbb4 <am_hal_uart_configure+0x218>)
    fa14:	68d2      	ldr	r2, [r2, #12]
    fa16:	b2d2      	uxtb	r2, r2
    fa18:	2a20      	cmp	r2, #32
    fa1a:	d90a      	bls.n	fa32 <am_hal_uart_configure+0x96>
    fa1c:	4a66      	ldr	r2, [pc, #408]	; (fbb8 <am_hal_uart_configure+0x21c>)
    fa1e:	4293      	cmp	r3, r2
    fa20:	d907      	bls.n	fa32 <am_hal_uart_configure+0x96>
    fa22:	4866      	ldr	r0, [pc, #408]	; (fbbc <am_hal_uart_configure+0x220>)
    fa24:	b004      	add	sp, #16
    fa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa2a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    fa2e:	d8f8      	bhi.n	fa22 <am_hal_uart_configure+0x86>
    fa30:	e7ef      	b.n	fa12 <am_hal_uart_configure+0x76>
    fa32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    fa34:	f3c2 1202 	ubfx	r2, r2, #4, #3
    fa38:	3a01      	subs	r2, #1
    fa3a:	2a03      	cmp	r2, #3
    fa3c:	d852      	bhi.n	fae4 <am_hal_uart_configure+0x148>
    fa3e:	e8df f002 	tbb	[pc, r2]
    fa42:	020f      	.short	0x020f
    fa44:	1215      	.short	0x1215
    fa46:	4a5e      	ldr	r2, [pc, #376]	; (fbc0 <am_hal_uart_configure+0x224>)
    fa48:	495e      	ldr	r1, [pc, #376]	; (fbc4 <am_hal_uart_configure+0x228>)
    fa4a:	011b      	lsls	r3, r3, #4
    fa4c:	fbb2 f2f3 	udiv	r2, r2, r3
    fa50:	fbb1 f3f3 	udiv	r3, r1, r3
    fa54:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    fa58:	b95b      	cbnz	r3, fa72 <am_hal_uart_configure+0xd6>
    fa5a:	6623      	str	r3, [r4, #96]	; 0x60
    fa5c:	4857      	ldr	r0, [pc, #348]	; (fbbc <am_hal_uart_configure+0x220>)
    fa5e:	e7e1      	b.n	fa24 <am_hal_uart_configure+0x88>
    fa60:	4a59      	ldr	r2, [pc, #356]	; (fbc8 <am_hal_uart_configure+0x22c>)
    fa62:	495a      	ldr	r1, [pc, #360]	; (fbcc <am_hal_uart_configure+0x230>)
    fa64:	e7f1      	b.n	fa4a <am_hal_uart_configure+0xae>
    fa66:	4a5a      	ldr	r2, [pc, #360]	; (fbd0 <am_hal_uart_configure+0x234>)
    fa68:	495a      	ldr	r1, [pc, #360]	; (fbd4 <am_hal_uart_configure+0x238>)
    fa6a:	e7ee      	b.n	fa4a <am_hal_uart_configure+0xae>
    fa6c:	4a5a      	ldr	r2, [pc, #360]	; (fbd8 <am_hal_uart_configure+0x23c>)
    fa6e:	495b      	ldr	r1, [pc, #364]	; (fbdc <am_hal_uart_configure+0x240>)
    fa70:	e7eb      	b.n	fa4a <am_hal_uart_configure+0xae>
    fa72:	0890      	lsrs	r0, r2, #2
    fa74:	626b      	str	r3, [r5, #36]	; 0x24
    fa76:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    fa7a:	626b      	str	r3, [r5, #36]	; 0x24
    fa7c:	fbb1 f1f0 	udiv	r1, r1, r0
    fa80:	62aa      	str	r2, [r5, #40]	; 0x28
    fa82:	6621      	str	r1, [r4, #96]	; 0x60
    fa84:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa86:	f36f 338e 	bfc	r3, #14, #1
    fa8a:	862b      	strh	r3, [r5, #48]	; 0x30
    fa8c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa8e:	f36f 33cf 	bfc	r3, #15, #1
    fa92:	862b      	strh	r3, [r5, #48]	; 0x30
    fa94:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    fa96:	6933      	ldr	r3, [r6, #16]
    fa98:	4313      	orrs	r3, r2
    fa9a:	632b      	str	r3, [r5, #48]	; 0x30
    fa9c:	6973      	ldr	r3, [r6, #20]
    fa9e:	636b      	str	r3, [r5, #52]	; 0x34
    faa0:	6871      	ldr	r1, [r6, #4]
    faa2:	68b3      	ldr	r3, [r6, #8]
    faa4:	68f2      	ldr	r2, [r6, #12]
    faa6:	430b      	orrs	r3, r1
    faa8:	f043 0310 	orr.w	r3, r3, #16
    faac:	4313      	orrs	r3, r2
    faae:	62eb      	str	r3, [r5, #44]	; 0x2c
    fab0:	f7fe ffb6 	bl	ea20 <am_hal_interrupt_master_disable>
    fab4:	9003      	str	r0, [sp, #12]
    fab6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fab8:	f043 0301 	orr.w	r3, r3, #1
    fabc:	862b      	strh	r3, [r5, #48]	; 0x30
    fabe:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fac4:	862b      	strh	r3, [r5, #48]	; 0x30
    fac6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    facc:	862b      	strh	r3, [r5, #48]	; 0x30
    face:	9803      	ldr	r0, [sp, #12]
    fad0:	f7fe ffaa 	bl	ea28 <am_hal_interrupt_master_set>
    fad4:	6825      	ldr	r5, [r4, #0]
    fad6:	4b36      	ldr	r3, [pc, #216]	; (fbb0 <am_hal_uart_configure+0x214>)
    fad8:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    fadc:	429d      	cmp	r5, r3
    fade:	d005      	beq.n	faec <am_hal_uart_configure+0x150>
    fae0:	2000      	movs	r0, #0
    fae2:	e79f      	b.n	fa24 <am_hal_uart_configure+0x88>
    fae4:	2300      	movs	r3, #0
    fae6:	6623      	str	r3, [r4, #96]	; 0x60
    fae8:	483d      	ldr	r0, [pc, #244]	; (fbe0 <am_hal_uart_configure+0x244>)
    faea:	e79b      	b.n	fa24 <am_hal_uart_configure+0x88>
    faec:	69b1      	ldr	r1, [r6, #24]
    faee:	6a37      	ldr	r7, [r6, #32]
    faf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    faf4:	b109      	cbz	r1, fafa <am_hal_uart_configure+0x15e>
    faf6:	69f3      	ldr	r3, [r6, #28]
    faf8:	bb3b      	cbnz	r3, fb4a <am_hal_uart_configure+0x1ae>
    fafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fafc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb00:	f103 021c 	add.w	r2, r3, #28
    fb04:	0312      	lsls	r2, r2, #12
    fb06:	2100      	movs	r1, #0
    fb08:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fb0c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fb0e:	f021 0120 	bic.w	r1, r1, #32
    fb12:	6391      	str	r1, [r2, #56]	; 0x38
    fb14:	b1b7      	cbz	r7, fb44 <am_hal_uart_configure+0x1a8>
    fb16:	f1b8 0f00 	cmp.w	r8, #0
    fb1a:	d12e      	bne.n	fb7a <am_hal_uart_configure+0x1de>
    fb1c:	6823      	ldr	r3, [r4, #0]
    fb1e:	4a24      	ldr	r2, [pc, #144]	; (fbb0 <am_hal_uart_configure+0x214>)
    fb20:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb24:	2100      	movs	r1, #0
    fb26:	4293      	cmp	r3, r2
    fb28:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fb2c:	d1d8      	bne.n	fae0 <am_hal_uart_configure+0x144>
    fb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb30:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb34:	331c      	adds	r3, #28
    fb36:	031b      	lsls	r3, r3, #12
    fb38:	2000      	movs	r0, #0
    fb3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fb3c:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fb40:	639a      	str	r2, [r3, #56]	; 0x38
    fb42:	e76f      	b.n	fa24 <am_hal_uart_configure+0x88>
    fb44:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    fb48:	e7f4      	b.n	fb34 <am_hal_uart_configure+0x198>
    fb4a:	2201      	movs	r2, #1
    fb4c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    fb50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fb54:	f000 fbe8 	bl	10328 <am_hal_queue_init>
    fb58:	6823      	ldr	r3, [r4, #0]
    fb5a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb5e:	42ab      	cmp	r3, r5
    fb60:	d1be      	bne.n	fae0 <am_hal_uart_configure+0x144>
    fb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb68:	331c      	adds	r3, #28
    fb6a:	031b      	lsls	r3, r3, #12
    fb6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fb6e:	f042 0220 	orr.w	r2, r2, #32
    fb72:	639a      	str	r2, [r3, #56]	; 0x38
    fb74:	2f00      	cmp	r7, #0
    fb76:	d1ce      	bne.n	fb16 <am_hal_uart_configure+0x17a>
    fb78:	e7d0      	b.n	fb1c <am_hal_uart_configure+0x180>
    fb7a:	2201      	movs	r2, #1
    fb7c:	4643      	mov	r3, r8
    fb7e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    fb82:	4639      	mov	r1, r7
    fb84:	f104 0048 	add.w	r0, r4, #72	; 0x48
    fb88:	f000 fbce 	bl	10328 <am_hal_queue_init>
    fb8c:	6823      	ldr	r3, [r4, #0]
    fb8e:	4a08      	ldr	r2, [pc, #32]	; (fbb0 <am_hal_uart_configure+0x214>)
    fb90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb94:	4293      	cmp	r3, r2
    fb96:	d1a3      	bne.n	fae0 <am_hal_uart_configure+0x144>
    fb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb9a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb9e:	331c      	adds	r3, #28
    fba0:	031b      	lsls	r3, r3, #12
    fba2:	2000      	movs	r0, #0
    fba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fba6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fbaa:	639a      	str	r2, [r3, #56]	; 0x38
    fbac:	e73a      	b.n	fa24 <am_hal_uart_configure+0x88>
    fbae:	bf00      	nop
    fbb0:	01ea9e06 	.word	0x01ea9e06
    fbb4:	40020000 	.word	0x40020000
    fbb8:	0016e360 	.word	0x0016e360
    fbbc:	08000003 	.word	0x08000003
    fbc0:	2dc6c000 	.word	0x2dc6c000
    fbc4:	00b71b00 	.word	0x00b71b00
    fbc8:	5b8d8000 	.word	0x5b8d8000
    fbcc:	016e3600 	.word	0x016e3600
    fbd0:	0b71b000 	.word	0x0b71b000
    fbd4:	002dc6c0 	.word	0x002dc6c0
    fbd8:	16e36000 	.word	0x16e36000
    fbdc:	005b8d80 	.word	0x005b8d80
    fbe0:	08000002 	.word	0x08000002

0000fbe4 <am_hal_uart_transfer>:
    fbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbe8:	680f      	ldr	r7, [r1, #0]
    fbea:	b091      	sub	sp, #68	; 0x44
    fbec:	4605      	mov	r5, r0
    fbee:	b13f      	cbz	r7, fc00 <am_hal_uart_transfer+0x1c>
    fbf0:	2f01      	cmp	r7, #1
    fbf2:	bf18      	it	ne
    fbf4:	2707      	movne	r7, #7
    fbf6:	d024      	beq.n	fc42 <am_hal_uart_transfer+0x5e>
    fbf8:	4638      	mov	r0, r7
    fbfa:	b011      	add	sp, #68	; 0x44
    fbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc00:	f8d1 900c 	ldr.w	r9, [r1, #12]
    fc04:	690b      	ldr	r3, [r1, #16]
    fc06:	f8d1 a004 	ldr.w	sl, [r1, #4]
    fc0a:	688e      	ldr	r6, [r1, #8]
    fc0c:	9300      	str	r3, [sp, #0]
    fc0e:	f1b9 0f00 	cmp.w	r9, #0
    fc12:	d031      	beq.n	fc78 <am_hal_uart_transfer+0x94>
    fc14:	2e00      	cmp	r6, #0
    fc16:	f000 819c 	beq.w	ff52 <am_hal_uart_transfer+0x36e>
    fc1a:	2800      	cmp	r0, #0
    fc1c:	f000 8097 	beq.w	fd4e <am_hal_uart_transfer+0x16a>
    fc20:	6803      	ldr	r3, [r0, #0]
    fc22:	4aa9      	ldr	r2, [pc, #676]	; (fec8 <am_hal_uart_transfer+0x2e4>)
    fc24:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc28:	4293      	cmp	r3, r2
    fc2a:	f000 8092 	beq.w	fd52 <am_hal_uart_transfer+0x16e>
    fc2e:	46b8      	mov	r8, r7
    fc30:	9b00      	ldr	r3, [sp, #0]
    fc32:	b10b      	cbz	r3, fc38 <am_hal_uart_transfer+0x54>
    fc34:	f8c3 8000 	str.w	r8, [r3]
    fc38:	2702      	movs	r7, #2
    fc3a:	4638      	mov	r0, r7
    fc3c:	b011      	add	sp, #68	; 0x44
    fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc42:	1d0b      	adds	r3, r1, #4
    fc44:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    fc48:	f1b9 0f00 	cmp.w	r9, #0
    fc4c:	d043      	beq.n	fcd6 <am_hal_uart_transfer+0xf2>
    fc4e:	2f00      	cmp	r7, #0
    fc50:	f000 8185 	beq.w	ff5e <am_hal_uart_transfer+0x37a>
    fc54:	2800      	cmp	r0, #0
    fc56:	f000 80eb 	beq.w	fe30 <am_hal_uart_transfer+0x24c>
    fc5a:	6802      	ldr	r2, [r0, #0]
    fc5c:	499a      	ldr	r1, [pc, #616]	; (fec8 <am_hal_uart_transfer+0x2e4>)
    fc5e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fc62:	428a      	cmp	r2, r1
    fc64:	f000 80e7 	beq.w	fe36 <am_hal_uart_transfer+0x252>
    fc68:	2600      	movs	r6, #0
    fc6a:	2702      	movs	r7, #2
    fc6c:	f1bb 0f00 	cmp.w	fp, #0
    fc70:	d0c2      	beq.n	fbf8 <am_hal_uart_transfer+0x14>
    fc72:	f8cb 6000 	str.w	r6, [fp]
    fc76:	e7bf      	b.n	fbf8 <am_hal_uart_transfer+0x14>
    fc78:	2800      	cmp	r0, #0
    fc7a:	d0dd      	beq.n	fc38 <am_hal_uart_transfer+0x54>
    fc7c:	6803      	ldr	r3, [r0, #0]
    fc7e:	4a92      	ldr	r2, [pc, #584]	; (fec8 <am_hal_uart_transfer+0x2e4>)
    fc80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc84:	4293      	cmp	r3, r2
    fc86:	d1d7      	bne.n	fc38 <am_hal_uart_transfer+0x54>
    fc88:	9b00      	ldr	r3, [sp, #0]
    fc8a:	b10b      	cbz	r3, fc90 <am_hal_uart_transfer+0xac>
    fc8c:	f8c3 9000 	str.w	r9, [r3]
    fc90:	b1fe      	cbz	r6, fcd2 <am_hal_uart_transfer+0xee>
    fc92:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    fc96:	2b00      	cmp	r3, #0
    fc98:	f040 8165 	bne.w	ff66 <am_hal_uart_transfer+0x382>
    fc9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fc9e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fca2:	311c      	adds	r1, #28
    fca4:	0309      	lsls	r1, r1, #12
    fca6:	698a      	ldr	r2, [r1, #24]
    fca8:	f3c2 1240 	ubfx	r2, r2, #5, #1
    fcac:	2a00      	cmp	r2, #0
    fcae:	f040 818d 	bne.w	ffcc <am_hal_uart_transfer+0x3e8>
    fcb2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fcb6:	e003      	b.n	fcc0 <am_hal_uart_transfer+0xdc>
    fcb8:	6988      	ldr	r0, [r1, #24]
    fcba:	0680      	lsls	r0, r0, #26
    fcbc:	f100 8151 	bmi.w	ff62 <am_hal_uart_transfer+0x37e>
    fcc0:	3201      	adds	r2, #1
    fcc2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fcc6:	6008      	str	r0, [r1, #0]
    fcc8:	4296      	cmp	r6, r2
    fcca:	d1f5      	bne.n	fcb8 <am_hal_uart_transfer+0xd4>
    fccc:	9b00      	ldr	r3, [sp, #0]
    fcce:	b103      	cbz	r3, fcd2 <am_hal_uart_transfer+0xee>
    fcd0:	601e      	str	r6, [r3, #0]
    fcd2:	2700      	movs	r7, #0
    fcd4:	e790      	b.n	fbf8 <am_hal_uart_transfer+0x14>
    fcd6:	2800      	cmp	r0, #0
    fcd8:	d0ae      	beq.n	fc38 <am_hal_uart_transfer+0x54>
    fcda:	6802      	ldr	r2, [r0, #0]
    fcdc:	497a      	ldr	r1, [pc, #488]	; (fec8 <am_hal_uart_transfer+0x2e4>)
    fcde:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fce2:	428a      	cmp	r2, r1
    fce4:	d1a8      	bne.n	fc38 <am_hal_uart_transfer+0x54>
    fce6:	f1bb 0f00 	cmp.w	fp, #0
    fcea:	d001      	beq.n	fcf0 <am_hal_uart_transfer+0x10c>
    fcec:	f8cb 9000 	str.w	r9, [fp]
    fcf0:	2f00      	cmp	r7, #0
    fcf2:	d0ee      	beq.n	fcd2 <am_hal_uart_transfer+0xee>
    fcf4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fcf8:	2c00      	cmp	r4, #0
    fcfa:	f040 816c 	bne.w	ffd6 <am_hal_uart_transfer+0x3f2>
    fcfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fd00:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fd04:	321c      	adds	r2, #28
    fd06:	0312      	lsls	r2, r2, #12
    fd08:	6990      	ldr	r0, [r2, #24]
    fd0a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fd0e:	2800      	cmp	r0, #0
    fd10:	f040 819d 	bne.w	1004e <am_hal_uart_transfer+0x46a>
    fd14:	6811      	ldr	r1, [r2, #0]
    fd16:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fd1a:	bf08      	it	eq
    fd1c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    fd20:	d008      	beq.n	fd34 <am_hal_uart_transfer+0x150>
    fd22:	e190      	b.n	10046 <am_hal_uart_transfer+0x462>
    fd24:	6991      	ldr	r1, [r2, #24]
    fd26:	06c8      	lsls	r0, r1, #27
    fd28:	d409      	bmi.n	fd3e <am_hal_uart_transfer+0x15a>
    fd2a:	6811      	ldr	r1, [r2, #0]
    fd2c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fd30:	f040 814e 	bne.w	ffd0 <am_hal_uart_transfer+0x3ec>
    fd34:	3401      	adds	r4, #1
    fd36:	42a7      	cmp	r7, r4
    fd38:	f803 1f01 	strb.w	r1, [r3, #1]!
    fd3c:	d1f2      	bne.n	fd24 <am_hal_uart_transfer+0x140>
    fd3e:	2700      	movs	r7, #0
    fd40:	f1bb 0f00 	cmp.w	fp, #0
    fd44:	f43f af58 	beq.w	fbf8 <am_hal_uart_transfer+0x14>
    fd48:	f8cb 4000 	str.w	r4, [fp]
    fd4c:	e754      	b.n	fbf8 <am_hal_uart_transfer+0x14>
    fd4e:	4680      	mov	r8, r0
    fd50:	e76e      	b.n	fc30 <am_hal_uart_transfer+0x4c>
    fd52:	9301      	str	r3, [sp, #4]
    fd54:	4651      	mov	r1, sl
    fd56:	46bb      	mov	fp, r7
    fd58:	46b8      	mov	r8, r7
    fd5a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fd5e:	b9f2      	cbnz	r2, fd9e <am_hal_uart_transfer+0x1ba>
    fd60:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fd62:	b19e      	cbz	r6, fd8c <am_hal_uart_transfer+0x1a8>
    fd64:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fd68:	321c      	adds	r2, #28
    fd6a:	0312      	lsls	r2, r2, #12
    fd6c:	3901      	subs	r1, #1
    fd6e:	6994      	ldr	r4, [r2, #24]
    fd70:	f3c4 1440 	ubfx	r4, r4, #5, #1
    fd74:	b11c      	cbz	r4, fd7e <am_hal_uart_transfer+0x19a>
    fd76:	e047      	b.n	fe08 <am_hal_uart_transfer+0x224>
    fd78:	6993      	ldr	r3, [r2, #24]
    fd7a:	069b      	lsls	r3, r3, #26
    fd7c:	d441      	bmi.n	fe02 <am_hal_uart_transfer+0x21e>
    fd7e:	3401      	adds	r4, #1
    fd80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fd84:	6013      	str	r3, [r2, #0]
    fd86:	42b4      	cmp	r4, r6
    fd88:	d1f6      	bne.n	fd78 <am_hal_uart_transfer+0x194>
    fd8a:	44a0      	add	r8, r4
    fd8c:	9b00      	ldr	r3, [sp, #0]
    fd8e:	2b00      	cmp	r3, #0
    fd90:	d09f      	beq.n	fcd2 <am_hal_uart_transfer+0xee>
    fd92:	4638      	mov	r0, r7
    fd94:	f8c3 8000 	str.w	r8, [r3]
    fd98:	b011      	add	sp, #68	; 0x44
    fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd9e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    fda0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    fda2:	1b14      	subs	r4, r2, r4
    fda4:	42b4      	cmp	r4, r6
    fda6:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fdaa:	bf28      	it	cs
    fdac:	4634      	movcs	r4, r6
    fdae:	4622      	mov	r2, r4
    fdb0:	4618      	mov	r0, r3
    fdb2:	9302      	str	r3, [sp, #8]
    fdb4:	f000 fac4 	bl	10340 <am_hal_queue_item_add>
    fdb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fdba:	9303      	str	r3, [sp, #12]
    fdbc:	f7fe fe30 	bl	ea20 <am_hal_interrupt_master_disable>
    fdc0:	9b03      	ldr	r3, [sp, #12]
    fdc2:	9008      	str	r0, [sp, #32]
    fdc4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fdc8:	331c      	adds	r3, #28
    fdca:	031b      	lsls	r3, r3, #12
    fdcc:	9303      	str	r3, [sp, #12]
    fdce:	e00d      	b.n	fdec <am_hal_uart_transfer+0x208>
    fdd0:	f000 faee 	bl	103b0 <am_hal_queue_item_get>
    fdd4:	b190      	cbz	r0, fdfc <am_hal_uart_transfer+0x218>
    fdd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fdd8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fddc:	331c      	adds	r3, #28
    fdde:	031b      	lsls	r3, r3, #12
    fde0:	699a      	ldr	r2, [r3, #24]
    fde2:	0692      	lsls	r2, r2, #26
    fde4:	bf5c      	itt	pl
    fde6:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    fdea:	601a      	strpl	r2, [r3, #0]
    fdec:	9b03      	ldr	r3, [sp, #12]
    fdee:	9802      	ldr	r0, [sp, #8]
    fdf0:	699b      	ldr	r3, [r3, #24]
    fdf2:	069b      	lsls	r3, r3, #26
    fdf4:	f04f 0201 	mov.w	r2, #1
    fdf8:	a907      	add	r1, sp, #28
    fdfa:	d5e9      	bpl.n	fdd0 <am_hal_uart_transfer+0x1ec>
    fdfc:	9808      	ldr	r0, [sp, #32]
    fdfe:	f7fe fe13 	bl	ea28 <am_hal_interrupt_master_set>
    fe02:	1b36      	subs	r6, r6, r4
    fe04:	44a0      	add	r8, r4
    fe06:	d0c1      	beq.n	fd8c <am_hal_uart_transfer+0x1a8>
    fe08:	2010      	movs	r0, #16
    fe0a:	f7fe fbff 	bl	e60c <am_hal_flash_delay>
    fe0e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fe12:	d001      	beq.n	fe18 <am_hal_uart_transfer+0x234>
    fe14:	f10b 0b01 	add.w	fp, fp, #1
    fe18:	45d9      	cmp	r9, fp
    fe1a:	d9b7      	bls.n	fd8c <am_hal_uart_transfer+0x1a8>
    fe1c:	682a      	ldr	r2, [r5, #0]
    fe1e:	9b01      	ldr	r3, [sp, #4]
    fe20:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe24:	429a      	cmp	r2, r3
    fe26:	eb0a 0108 	add.w	r1, sl, r8
    fe2a:	f47f af01 	bne.w	fc30 <am_hal_uart_transfer+0x4c>
    fe2e:	e794      	b.n	fd5a <am_hal_uart_transfer+0x176>
    fe30:	4606      	mov	r6, r0
    fe32:	2702      	movs	r7, #2
    fe34:	e71a      	b.n	fc6c <am_hal_uart_transfer+0x88>
    fe36:	9200      	str	r2, [sp, #0]
    fe38:	f100 0248 	add.w	r2, r0, #72	; 0x48
    fe3c:	f04f 0a00 	mov.w	sl, #0
    fe40:	9202      	str	r2, [sp, #8]
    fe42:	465a      	mov	r2, fp
    fe44:	4698      	mov	r8, r3
    fe46:	469b      	mov	fp, r3
    fe48:	4656      	mov	r6, sl
    fe4a:	4613      	mov	r3, r2
    fe4c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    fe50:	2a00      	cmp	r2, #0
    fe52:	d152      	bne.n	fefa <am_hal_uart_transfer+0x316>
    fe54:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe56:	b3a7      	cbz	r7, fec2 <am_hal_uart_transfer+0x2de>
    fe58:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fe5c:	311c      	adds	r1, #28
    fe5e:	0309      	lsls	r1, r1, #12
    fe60:	698a      	ldr	r2, [r1, #24]
    fe62:	06d0      	lsls	r0, r2, #27
    fe64:	d432      	bmi.n	fecc <am_hal_uart_transfer+0x2e8>
    fe66:	680a      	ldr	r2, [r1, #0]
    fe68:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    fe6c:	f040 80aa 	bne.w	ffc4 <am_hal_uart_transfer+0x3e0>
    fe70:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fe74:	e006      	b.n	fe84 <am_hal_uart_transfer+0x2a0>
    fe76:	698a      	ldr	r2, [r1, #24]
    fe78:	06d2      	lsls	r2, r2, #27
    fe7a:	d41f      	bmi.n	febc <am_hal_uart_transfer+0x2d8>
    fe7c:	680a      	ldr	r2, [r1, #0]
    fe7e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    fe82:	d161      	bne.n	ff48 <am_hal_uart_transfer+0x364>
    fe84:	3401      	adds	r4, #1
    fe86:	42bc      	cmp	r4, r7
    fe88:	f808 2f01 	strb.w	r2, [r8, #1]!
    fe8c:	d1f3      	bne.n	fe76 <am_hal_uart_transfer+0x292>
    fe8e:	469b      	mov	fp, r3
    fe90:	4426      	add	r6, r4
    fe92:	f1bb 0f00 	cmp.w	fp, #0
    fe96:	f43f af1c 	beq.w	fcd2 <am_hal_uart_transfer+0xee>
    fe9a:	f8cb 6000 	str.w	r6, [fp]
    fe9e:	2700      	movs	r7, #0
    fea0:	e6aa      	b.n	fbf8 <am_hal_uart_transfer+0x14>
    fea2:	9807      	ldr	r0, [sp, #28]
    fea4:	f7fe fdc0 	bl	ea28 <am_hal_interrupt_master_set>
    fea8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    feaa:	9802      	ldr	r0, [sp, #8]
    feac:	42bc      	cmp	r4, r7
    feae:	bf28      	it	cs
    feb0:	463c      	movcs	r4, r7
    feb2:	4641      	mov	r1, r8
    feb4:	4622      	mov	r2, r4
    feb6:	f000 fa7b 	bl	103b0 <am_hal_queue_item_get>
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	1b3f      	subs	r7, r7, r4
    febe:	4426      	add	r6, r4
    fec0:	d104      	bne.n	fecc <am_hal_uart_transfer+0x2e8>
    fec2:	469b      	mov	fp, r3
    fec4:	e7e5      	b.n	fe92 <am_hal_uart_transfer+0x2ae>
    fec6:	bf00      	nop
    fec8:	01ea9e06 	.word	0x01ea9e06
    fecc:	2010      	movs	r0, #16
    fece:	9301      	str	r3, [sp, #4]
    fed0:	f7fe fb9c 	bl	e60c <am_hal_flash_delay>
    fed4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fed8:	9b01      	ldr	r3, [sp, #4]
    feda:	d001      	beq.n	fee0 <am_hal_uart_transfer+0x2fc>
    fedc:	f10a 0a01 	add.w	sl, sl, #1
    fee0:	45d1      	cmp	r9, sl
    fee2:	d9ee      	bls.n	fec2 <am_hal_uart_transfer+0x2de>
    fee4:	682a      	ldr	r2, [r5, #0]
    fee6:	9900      	ldr	r1, [sp, #0]
    fee8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    feec:	428a      	cmp	r2, r1
    feee:	eb0b 0806 	add.w	r8, fp, r6
    fef2:	d0ab      	beq.n	fe4c <am_hal_uart_transfer+0x268>
    fef4:	469b      	mov	fp, r3
    fef6:	2702      	movs	r7, #2
    fef8:	e6b8      	b.n	fc6c <am_hal_uart_transfer+0x88>
    fefa:	9301      	str	r3, [sp, #4]
    fefc:	f7fe fd90 	bl	ea20 <am_hal_interrupt_master_disable>
    ff00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ff02:	9007      	str	r0, [sp, #28]
    ff04:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    ff08:	301c      	adds	r0, #28
    ff0a:	9b01      	ldr	r3, [sp, #4]
    ff0c:	0300      	lsls	r0, r0, #12
    ff0e:	ac08      	add	r4, sp, #32
    ff10:	2200      	movs	r2, #0
    ff12:	6981      	ldr	r1, [r0, #24]
    ff14:	06c9      	lsls	r1, r1, #27
    ff16:	d409      	bmi.n	ff2c <am_hal_uart_transfer+0x348>
    ff18:	6801      	ldr	r1, [r0, #0]
    ff1a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ff1e:	f102 0201 	add.w	r2, r2, #1
    ff22:	d118      	bne.n	ff56 <am_hal_uart_transfer+0x372>
    ff24:	2a20      	cmp	r2, #32
    ff26:	f804 1b01 	strb.w	r1, [r4], #1
    ff2a:	d1f2      	bne.n	ff12 <am_hal_uart_transfer+0x32e>
    ff2c:	a908      	add	r1, sp, #32
    ff2e:	9802      	ldr	r0, [sp, #8]
    ff30:	9301      	str	r3, [sp, #4]
    ff32:	f000 fa05 	bl	10340 <am_hal_queue_item_add>
    ff36:	9b01      	ldr	r3, [sp, #4]
    ff38:	2800      	cmp	r0, #0
    ff3a:	d1b2      	bne.n	fea2 <am_hal_uart_transfer+0x2be>
    ff3c:	4f45      	ldr	r7, [pc, #276]	; (10054 <am_hal_uart_transfer+0x470>)
    ff3e:	469b      	mov	fp, r3
    ff40:	9807      	ldr	r0, [sp, #28]
    ff42:	f7fe fd71 	bl	ea28 <am_hal_interrupt_master_set>
    ff46:	e691      	b.n	fc6c <am_hal_uart_transfer+0x88>
    ff48:	469b      	mov	fp, r3
    ff4a:	4426      	add	r6, r4
    ff4c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff50:	e68c      	b.n	fc6c <am_hal_uart_transfer+0x88>
    ff52:	46b8      	mov	r8, r7
    ff54:	e71a      	b.n	fd8c <am_hal_uart_transfer+0x1a8>
    ff56:	469b      	mov	fp, r3
    ff58:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff5c:	e7f0      	b.n	ff40 <am_hal_uart_transfer+0x35c>
    ff5e:	463e      	mov	r6, r7
    ff60:	e797      	b.n	fe92 <am_hal_uart_transfer+0x2ae>
    ff62:	4616      	mov	r6, r2
    ff64:	e6b2      	b.n	fccc <am_hal_uart_transfer+0xe8>
    ff66:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    ff68:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ff6a:	1a9b      	subs	r3, r3, r2
    ff6c:	429e      	cmp	r6, r3
    ff6e:	bf28      	it	cs
    ff70:	461e      	movcs	r6, r3
    ff72:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    ff76:	4651      	mov	r1, sl
    ff78:	4632      	mov	r2, r6
    ff7a:	4620      	mov	r0, r4
    ff7c:	f000 f9e0 	bl	10340 <am_hal_queue_item_add>
    ff80:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ff82:	f7fe fd4d 	bl	ea20 <am_hal_interrupt_master_disable>
    ff86:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ff8a:	371c      	adds	r7, #28
    ff8c:	033f      	lsls	r7, r7, #12
    ff8e:	9005      	str	r0, [sp, #20]
    ff90:	e00d      	b.n	ffae <am_hal_uart_transfer+0x3ca>
    ff92:	f000 fa0d 	bl	103b0 <am_hal_queue_item_get>
    ff96:	b188      	cbz	r0, ffbc <am_hal_uart_transfer+0x3d8>
    ff98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ff9a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ff9e:	331c      	adds	r3, #28
    ffa0:	031b      	lsls	r3, r3, #12
    ffa2:	699a      	ldr	r2, [r3, #24]
    ffa4:	0692      	lsls	r2, r2, #26
    ffa6:	bf5c      	itt	pl
    ffa8:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    ffac:	601a      	strpl	r2, [r3, #0]
    ffae:	69bb      	ldr	r3, [r7, #24]
    ffb0:	069b      	lsls	r3, r3, #26
    ffb2:	f04f 0201 	mov.w	r2, #1
    ffb6:	a908      	add	r1, sp, #32
    ffb8:	4620      	mov	r0, r4
    ffba:	d5ea      	bpl.n	ff92 <am_hal_uart_transfer+0x3ae>
    ffbc:	9805      	ldr	r0, [sp, #20]
    ffbe:	f7fe fd33 	bl	ea28 <am_hal_interrupt_master_set>
    ffc2:	e683      	b.n	fccc <am_hal_uart_transfer+0xe8>
    ffc4:	469b      	mov	fp, r3
    ffc6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ffca:	e64f      	b.n	fc6c <am_hal_uart_transfer+0x88>
    ffcc:	461e      	mov	r6, r3
    ffce:	e67d      	b.n	fccc <am_hal_uart_transfer+0xe8>
    ffd0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ffd4:	e6b4      	b.n	fd40 <am_hal_uart_transfer+0x15c>
    ffd6:	9300      	str	r3, [sp, #0]
    ffd8:	f7fe fd22 	bl	ea20 <am_hal_interrupt_master_disable>
    ffdc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ffde:	9006      	str	r0, [sp, #24]
    ffe0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ffe4:	321c      	adds	r2, #28
    ffe6:	0311      	lsls	r1, r2, #12
    ffe8:	a808      	add	r0, sp, #32
    ffea:	2200      	movs	r2, #0
    ffec:	9b00      	ldr	r3, [sp, #0]
    ffee:	e009      	b.n	10004 <am_hal_uart_transfer+0x420>
    fff0:	680c      	ldr	r4, [r1, #0]
    fff2:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    fff6:	f102 0201 	add.w	r2, r2, #1
    fffa:	d121      	bne.n	10040 <am_hal_uart_transfer+0x45c>
    fffc:	2a20      	cmp	r2, #32
    fffe:	f800 4b01 	strb.w	r4, [r0], #1
   10002:	d002      	beq.n	1000a <am_hal_uart_transfer+0x426>
   10004:	698c      	ldr	r4, [r1, #24]
   10006:	06e4      	lsls	r4, r4, #27
   10008:	d5f2      	bpl.n	fff0 <am_hal_uart_transfer+0x40c>
   1000a:	f105 0648 	add.w	r6, r5, #72	; 0x48
   1000e:	a908      	add	r1, sp, #32
   10010:	4630      	mov	r0, r6
   10012:	9300      	str	r3, [sp, #0]
   10014:	f000 f994 	bl	10340 <am_hal_queue_item_add>
   10018:	b920      	cbnz	r0, 10024 <am_hal_uart_transfer+0x440>
   1001a:	4f0e      	ldr	r7, [pc, #56]	; (10054 <am_hal_uart_transfer+0x470>)
   1001c:	9806      	ldr	r0, [sp, #24]
   1001e:	f7fe fd03 	bl	ea28 <am_hal_interrupt_master_set>
   10022:	e5e9      	b.n	fbf8 <am_hal_uart_transfer+0x14>
   10024:	9806      	ldr	r0, [sp, #24]
   10026:	f7fe fcff 	bl	ea28 <am_hal_interrupt_master_set>
   1002a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   1002c:	9b00      	ldr	r3, [sp, #0]
   1002e:	42bc      	cmp	r4, r7
   10030:	bf28      	it	cs
   10032:	463c      	movcs	r4, r7
   10034:	4619      	mov	r1, r3
   10036:	4630      	mov	r0, r6
   10038:	4622      	mov	r2, r4
   1003a:	f000 f9b9 	bl	103b0 <am_hal_queue_item_get>
   1003e:	e67e      	b.n	fd3e <am_hal_uart_transfer+0x15a>
   10040:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10044:	e7ea      	b.n	1001c <am_hal_uart_transfer+0x438>
   10046:	4604      	mov	r4, r0
   10048:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1004c:	e678      	b.n	fd40 <am_hal_uart_transfer+0x15c>
   1004e:	4627      	mov	r7, r4
   10050:	e676      	b.n	fd40 <am_hal_uart_transfer+0x15c>
   10052:	bf00      	nop
   10054:	08000001 	.word	0x08000001

00010058 <am_hal_uart_tx_flush>:
   10058:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1005c:	b570      	push	{r4, r5, r6, lr}
   1005e:	4604      	mov	r4, r0
   10060:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10062:	b15b      	cbz	r3, 1007c <am_hal_uart_tx_flush+0x24>
   10064:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10066:	b14b      	cbz	r3, 1007c <am_hal_uart_tx_flush+0x24>
   10068:	4e0e      	ldr	r6, [pc, #56]	; (100a4 <am_hal_uart_tx_flush+0x4c>)
   1006a:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1006c:	fbb6 f0f0 	udiv	r0, r6, r0
   10070:	0100      	lsls	r0, r0, #4
   10072:	f7fe facb 	bl	e60c <am_hal_flash_delay>
   10076:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10078:	2b00      	cmp	r3, #0
   1007a:	d1f6      	bne.n	1006a <am_hal_uart_tx_flush+0x12>
   1007c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   10080:	351c      	adds	r5, #28
   10082:	032d      	lsls	r5, r5, #12
   10084:	69ab      	ldr	r3, [r5, #24]
   10086:	071a      	lsls	r2, r3, #28
   10088:	d509      	bpl.n	1009e <am_hal_uart_tx_flush+0x46>
   1008a:	4e06      	ldr	r6, [pc, #24]	; (100a4 <am_hal_uart_tx_flush+0x4c>)
   1008c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1008e:	fbb6 f0f0 	udiv	r0, r6, r0
   10092:	0100      	lsls	r0, r0, #4
   10094:	f7fe faba 	bl	e60c <am_hal_flash_delay>
   10098:	69ab      	ldr	r3, [r5, #24]
   1009a:	071b      	lsls	r3, r3, #28
   1009c:	d4f6      	bmi.n	1008c <am_hal_uart_tx_flush+0x34>
   1009e:	2000      	movs	r0, #0
   100a0:	bd70      	pop	{r4, r5, r6, pc}
   100a2:	bf00      	nop
   100a4:	00b71b00 	.word	0x00b71b00

000100a8 <am_hal_uart_interrupt_service>:
   100a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100ac:	6803      	ldr	r3, [r0, #0]
   100ae:	4c43      	ldr	r4, [pc, #268]	; (101bc <am_hal_uart_interrupt_service+0x114>)
   100b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   100b4:	42a3      	cmp	r3, r4
   100b6:	b08a      	sub	sp, #40	; 0x28
   100b8:	d003      	beq.n	100c2 <am_hal_uart_interrupt_service+0x1a>
   100ba:	2002      	movs	r0, #2
   100bc:	b00a      	add	sp, #40	; 0x28
   100be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100c2:	f011 0f50 	tst.w	r1, #80	; 0x50
   100c6:	4615      	mov	r5, r2
   100c8:	460e      	mov	r6, r1
   100ca:	4604      	mov	r4, r0
   100cc:	6a47      	ldr	r7, [r0, #36]	; 0x24
   100ce:	d003      	beq.n	100d8 <am_hal_uart_interrupt_service+0x30>
   100d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   100d4:	2b00      	cmp	r3, #0
   100d6:	d146      	bne.n	10166 <am_hal_uart_interrupt_service+0xbe>
   100d8:	06b1      	lsls	r1, r6, #26
   100da:	d532      	bpl.n	10142 <am_hal_uart_interrupt_service+0x9a>
   100dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   100e0:	b95b      	cbnz	r3, 100fa <am_hal_uart_interrupt_service+0x52>
   100e2:	2d00      	cmp	r5, #0
   100e4:	d03d      	beq.n	10162 <am_hal_uart_interrupt_service+0xba>
   100e6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   100ea:	371c      	adds	r7, #28
   100ec:	033f      	lsls	r7, r7, #12
   100ee:	69bb      	ldr	r3, [r7, #24]
   100f0:	071b      	lsls	r3, r3, #28
   100f2:	d534      	bpl.n	1015e <am_hal_uart_interrupt_service+0xb6>
   100f4:	2000      	movs	r0, #0
   100f6:	6028      	str	r0, [r5, #0]
   100f8:	e7e0      	b.n	100bc <am_hal_uart_interrupt_service+0x14>
   100fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   100fc:	f7fe fc90 	bl	ea20 <am_hal_interrupt_master_disable>
   10100:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
   10104:	361c      	adds	r6, #28
   10106:	0336      	lsls	r6, r6, #12
   10108:	9002      	str	r0, [sp, #8]
   1010a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   1010e:	e00d      	b.n	1012c <am_hal_uart_interrupt_service+0x84>
   10110:	f000 f94e 	bl	103b0 <am_hal_queue_item_get>
   10114:	b190      	cbz	r0, 1013c <am_hal_uart_interrupt_service+0x94>
   10116:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10118:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1011c:	331c      	adds	r3, #28
   1011e:	031b      	lsls	r3, r3, #12
   10120:	699a      	ldr	r2, [r3, #24]
   10122:	0692      	lsls	r2, r2, #26
   10124:	bf5c      	itt	pl
   10126:	f89d 2003 	ldrbpl.w	r2, [sp, #3]
   1012a:	601a      	strpl	r2, [r3, #0]
   1012c:	69b3      	ldr	r3, [r6, #24]
   1012e:	069b      	lsls	r3, r3, #26
   10130:	f04f 0201 	mov.w	r2, #1
   10134:	f10d 0103 	add.w	r1, sp, #3
   10138:	4640      	mov	r0, r8
   1013a:	d5e9      	bpl.n	10110 <am_hal_uart_interrupt_service+0x68>
   1013c:	9802      	ldr	r0, [sp, #8]
   1013e:	f7fe fc73 	bl	ea28 <am_hal_interrupt_master_set>
   10142:	b175      	cbz	r5, 10162 <am_hal_uart_interrupt_service+0xba>
   10144:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10148:	2b00      	cmp	r3, #0
   1014a:	d0cc      	beq.n	100e6 <am_hal_uart_interrupt_service+0x3e>
   1014c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1014e:	b943      	cbnz	r3, 10162 <am_hal_uart_interrupt_service+0xba>
   10150:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   10154:	371c      	adds	r7, #28
   10156:	033f      	lsls	r7, r7, #12
   10158:	69bb      	ldr	r3, [r7, #24]
   1015a:	071a      	lsls	r2, r3, #28
   1015c:	d401      	bmi.n	10162 <am_hal_uart_interrupt_service+0xba>
   1015e:	2301      	movs	r3, #1
   10160:	602b      	str	r3, [r5, #0]
   10162:	2000      	movs	r0, #0
   10164:	e7aa      	b.n	100bc <am_hal_uart_interrupt_service+0x14>
   10166:	f7fe fc5b 	bl	ea20 <am_hal_interrupt_master_disable>
   1016a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1016c:	9001      	str	r0, [sp, #4]
   1016e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10172:	311c      	adds	r1, #28
   10174:	0309      	lsls	r1, r1, #12
   10176:	a802      	add	r0, sp, #8
   10178:	2200      	movs	r2, #0
   1017a:	698b      	ldr	r3, [r1, #24]
   1017c:	06db      	lsls	r3, r3, #27
   1017e:	d409      	bmi.n	10194 <am_hal_uart_interrupt_service+0xec>
   10180:	680b      	ldr	r3, [r1, #0]
   10182:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   10186:	f102 0201 	add.w	r2, r2, #1
   1018a:	d10f      	bne.n	101ac <am_hal_uart_interrupt_service+0x104>
   1018c:	2a20      	cmp	r2, #32
   1018e:	f800 3b01 	strb.w	r3, [r0], #1
   10192:	d1f2      	bne.n	1017a <am_hal_uart_interrupt_service+0xd2>
   10194:	a902      	add	r1, sp, #8
   10196:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1019a:	f000 f8d1 	bl	10340 <am_hal_queue_item_add>
   1019e:	b940      	cbnz	r0, 101b2 <am_hal_uart_interrupt_service+0x10a>
   101a0:	4c07      	ldr	r4, [pc, #28]	; (101c0 <am_hal_uart_interrupt_service+0x118>)
   101a2:	9801      	ldr	r0, [sp, #4]
   101a4:	f7fe fc40 	bl	ea28 <am_hal_interrupt_master_set>
   101a8:	4620      	mov	r0, r4
   101aa:	e787      	b.n	100bc <am_hal_uart_interrupt_service+0x14>
   101ac:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
   101b0:	e7f7      	b.n	101a2 <am_hal_uart_interrupt_service+0xfa>
   101b2:	9801      	ldr	r0, [sp, #4]
   101b4:	f7fe fc38 	bl	ea28 <am_hal_interrupt_master_set>
   101b8:	e78e      	b.n	100d8 <am_hal_uart_interrupt_service+0x30>
   101ba:	bf00      	nop
   101bc:	01ea9e06 	.word	0x01ea9e06
   101c0:	08000001 	.word	0x08000001

000101c4 <am_hal_uart_interrupt_clear>:
   101c4:	6803      	ldr	r3, [r0, #0]
   101c6:	4a07      	ldr	r2, [pc, #28]	; (101e4 <am_hal_uart_interrupt_clear+0x20>)
   101c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   101cc:	4293      	cmp	r3, r2
   101ce:	d001      	beq.n	101d4 <am_hal_uart_interrupt_clear+0x10>
   101d0:	2002      	movs	r0, #2
   101d2:	4770      	bx	lr
   101d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   101d6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   101da:	331c      	adds	r3, #28
   101dc:	031b      	lsls	r3, r3, #12
   101de:	2000      	movs	r0, #0
   101e0:	6459      	str	r1, [r3, #68]	; 0x44
   101e2:	4770      	bx	lr
   101e4:	01ea9e06 	.word	0x01ea9e06

000101e8 <am_hal_uart_interrupt_status_get>:
   101e8:	6803      	ldr	r3, [r0, #0]
   101ea:	b410      	push	{r4}
   101ec:	4c0b      	ldr	r4, [pc, #44]	; (1021c <am_hal_uart_interrupt_status_get+0x34>)
   101ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   101f2:	42a3      	cmp	r3, r4
   101f4:	d003      	beq.n	101fe <am_hal_uart_interrupt_status_get+0x16>
   101f6:	2002      	movs	r0, #2
   101f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   101fc:	4770      	bx	lr
   101fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10200:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   10204:	331c      	adds	r3, #28
   10206:	031b      	lsls	r3, r3, #12
   10208:	b12a      	cbz	r2, 10216 <am_hal_uart_interrupt_status_get+0x2e>
   1020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1020c:	600b      	str	r3, [r1, #0]
   1020e:	2000      	movs	r0, #0
   10210:	f85d 4b04 	ldr.w	r4, [sp], #4
   10214:	4770      	bx	lr
   10216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10218:	e7f8      	b.n	1020c <am_hal_uart_interrupt_status_get+0x24>
   1021a:	bf00      	nop
   1021c:	01ea9e06 	.word	0x01ea9e06

00010220 <am_hal_cmdq_init>:
   10220:	2807      	cmp	r0, #7
   10222:	d901      	bls.n	10228 <am_hal_cmdq_init+0x8>
   10224:	2005      	movs	r0, #5
   10226:	4770      	bx	lr
   10228:	b1c9      	cbz	r1, 1025e <am_hal_cmdq_init+0x3e>
   1022a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1022e:	684c      	ldr	r4, [r1, #4]
   10230:	b194      	cbz	r4, 10258 <am_hal_cmdq_init+0x38>
   10232:	b18a      	cbz	r2, 10258 <am_hal_cmdq_init+0x38>
   10234:	680e      	ldr	r6, [r1, #0]
   10236:	2e01      	cmp	r6, #1
   10238:	d90e      	bls.n	10258 <am_hal_cmdq_init+0x38>
   1023a:	272c      	movs	r7, #44	; 0x2c
   1023c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 102dc <am_hal_cmdq_init+0xbc>
   10240:	fb07 f700 	mul.w	r7, r7, r0
   10244:	eb0c 0507 	add.w	r5, ip, r7
   10248:	f895 e003 	ldrb.w	lr, [r5, #3]
   1024c:	f01e 0301 	ands.w	r3, lr, #1
   10250:	d007      	beq.n	10262 <am_hal_cmdq_init+0x42>
   10252:	2007      	movs	r0, #7
   10254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10258:	2006      	movs	r0, #6
   1025a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1025e:	2006      	movs	r0, #6
   10260:	4770      	bx	lr
   10262:	f04e 0e01 	orr.w	lr, lr, #1
   10266:	00f6      	lsls	r6, r6, #3
   10268:	f363 0e41 	bfi	lr, r3, #1, #1
   1026c:	f885 e003 	strb.w	lr, [r5, #3]
   10270:	eb06 0804 	add.w	r8, r6, r4
   10274:	f8df e068 	ldr.w	lr, [pc, #104]	; 102e0 <am_hal_cmdq_init+0xc0>
   10278:	f8c5 8008 	str.w	r8, [r5, #8]
   1027c:	606c      	str	r4, [r5, #4]
   1027e:	60ec      	str	r4, [r5, #12]
   10280:	616c      	str	r4, [r5, #20]
   10282:	612c      	str	r4, [r5, #16]
   10284:	61ae      	str	r6, [r5, #24]
   10286:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1028a:	f85c 6007 	ldr.w	r6, [ip, r7]
   1028e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 102e4 <am_hal_cmdq_init+0xc4>
   10292:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
   10296:	f368 0617 	bfi	r6, r8, #0, #24
   1029a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1029e:	f84c 6007 	str.w	r6, [ip, r7]
   102a2:	6268      	str	r0, [r5, #36]	; 0x24
   102a4:	61eb      	str	r3, [r5, #28]
   102a6:	622b      	str	r3, [r5, #32]
   102a8:	f8ce 3000 	str.w	r3, [lr]
   102ac:	6a68      	ldr	r0, [r5, #36]	; 0x24
   102ae:	7a09      	ldrb	r1, [r1, #8]
   102b0:	68c0      	ldr	r0, [r0, #12]
   102b2:	6003      	str	r3, [r0, #0]
   102b4:	6a68      	ldr	r0, [r5, #36]	; 0x24
   102b6:	6906      	ldr	r6, [r0, #16]
   102b8:	6940      	ldr	r0, [r0, #20]
   102ba:	6837      	ldr	r7, [r6, #0]
   102bc:	4338      	orrs	r0, r7
   102be:	6030      	str	r0, [r6, #0]
   102c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
   102c2:	6840      	ldr	r0, [r0, #4]
   102c4:	6004      	str	r4, [r0, #0]
   102c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   102c8:	0049      	lsls	r1, r1, #1
   102ca:	6804      	ldr	r4, [r0, #0]
   102cc:	f001 0102 	and.w	r1, r1, #2
   102d0:	6021      	str	r1, [r4, #0]
   102d2:	4618      	mov	r0, r3
   102d4:	6015      	str	r5, [r2, #0]
   102d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102da:	bf00      	nop
   102dc:	10001194 	.word	0x10001194
   102e0:	00010a38 	.word	0x00010a38
   102e4:	00cdcdcd 	.word	0x00cdcdcd

000102e8 <am_hal_cmdq_enable>:
   102e8:	4603      	mov	r3, r0
   102ea:	b128      	cbz	r0, 102f8 <am_hal_cmdq_enable+0x10>
   102ec:	6802      	ldr	r2, [r0, #0]
   102ee:	490d      	ldr	r1, [pc, #52]	; (10324 <am_hal_cmdq_enable+0x3c>)
   102f0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   102f4:	428a      	cmp	r2, r1
   102f6:	d001      	beq.n	102fc <am_hal_cmdq_enable+0x14>
   102f8:	2002      	movs	r0, #2
   102fa:	4770      	bx	lr
   102fc:	78c2      	ldrb	r2, [r0, #3]
   102fe:	f002 0202 	and.w	r2, r2, #2
   10302:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   10306:	b952      	cbnz	r2, 1031e <am_hal_cmdq_enable+0x36>
   10308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1030a:	6811      	ldr	r1, [r2, #0]
   1030c:	680a      	ldr	r2, [r1, #0]
   1030e:	f042 0201 	orr.w	r2, r2, #1
   10312:	600a      	str	r2, [r1, #0]
   10314:	78da      	ldrb	r2, [r3, #3]
   10316:	f042 0202 	orr.w	r2, r2, #2
   1031a:	70da      	strb	r2, [r3, #3]
   1031c:	4770      	bx	lr
   1031e:	2000      	movs	r0, #0
   10320:	4770      	bx	lr
   10322:	bf00      	nop
   10324:	01cdcdcd 	.word	0x01cdcdcd

00010328 <am_hal_queue_init>:
   10328:	b410      	push	{r4}
   1032a:	2400      	movs	r4, #0
   1032c:	6004      	str	r4, [r0, #0]
   1032e:	6044      	str	r4, [r0, #4]
   10330:	6084      	str	r4, [r0, #8]
   10332:	60c3      	str	r3, [r0, #12]
   10334:	6102      	str	r2, [r0, #16]
   10336:	6141      	str	r1, [r0, #20]
   10338:	f85d 4b04 	ldr.w	r4, [sp], #4
   1033c:	4770      	bx	lr
   1033e:	bf00      	nop

00010340 <am_hal_queue_item_add>:
   10340:	b5f0      	push	{r4, r5, r6, r7, lr}
   10342:	4604      	mov	r4, r0
   10344:	6906      	ldr	r6, [r0, #16]
   10346:	b083      	sub	sp, #12
   10348:	fb06 f602 	mul.w	r6, r6, r2
   1034c:	460d      	mov	r5, r1
   1034e:	f7fe fb67 	bl	ea20 <am_hal_interrupt_master_disable>
   10352:	68e7      	ldr	r7, [r4, #12]
   10354:	68a2      	ldr	r2, [r4, #8]
   10356:	9001      	str	r0, [sp, #4]
   10358:	1abb      	subs	r3, r7, r2
   1035a:	429e      	cmp	r6, r3
   1035c:	d826      	bhi.n	103ac <am_hal_queue_item_add+0x6c>
   1035e:	b196      	cbz	r6, 10386 <am_hal_queue_item_add+0x46>
   10360:	6823      	ldr	r3, [r4, #0]
   10362:	4629      	mov	r1, r5
   10364:	b1c5      	cbz	r5, 10398 <am_hal_queue_item_add+0x58>
   10366:	19af      	adds	r7, r5, r6
   10368:	6962      	ldr	r2, [r4, #20]
   1036a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1036e:	54d0      	strb	r0, [r2, r3]
   10370:	6823      	ldr	r3, [r4, #0]
   10372:	68e5      	ldr	r5, [r4, #12]
   10374:	3301      	adds	r3, #1
   10376:	42b9      	cmp	r1, r7
   10378:	fbb3 f0f5 	udiv	r0, r3, r5
   1037c:	fb05 3310 	mls	r3, r5, r0, r3
   10380:	6023      	str	r3, [r4, #0]
   10382:	d1f1      	bne.n	10368 <am_hal_queue_item_add+0x28>
   10384:	68a2      	ldr	r2, [r4, #8]
   10386:	4432      	add	r2, r6
   10388:	60a2      	str	r2, [r4, #8]
   1038a:	2401      	movs	r4, #1
   1038c:	9801      	ldr	r0, [sp, #4]
   1038e:	f7fe fb4b 	bl	ea28 <am_hal_interrupt_master_set>
   10392:	4620      	mov	r0, r4
   10394:	b003      	add	sp, #12
   10396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10398:	3101      	adds	r1, #1
   1039a:	3301      	adds	r3, #1
   1039c:	428e      	cmp	r6, r1
   1039e:	fbb3 f0f7 	udiv	r0, r3, r7
   103a2:	fb07 3310 	mls	r3, r7, r0, r3
   103a6:	d1f7      	bne.n	10398 <am_hal_queue_item_add+0x58>
   103a8:	6023      	str	r3, [r4, #0]
   103aa:	e7ec      	b.n	10386 <am_hal_queue_item_add+0x46>
   103ac:	2400      	movs	r4, #0
   103ae:	e7ed      	b.n	1038c <am_hal_queue_item_add+0x4c>

000103b0 <am_hal_queue_item_get>:
   103b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   103b2:	4604      	mov	r4, r0
   103b4:	6906      	ldr	r6, [r0, #16]
   103b6:	b083      	sub	sp, #12
   103b8:	fb06 f602 	mul.w	r6, r6, r2
   103bc:	460d      	mov	r5, r1
   103be:	f7fe fb2f 	bl	ea20 <am_hal_interrupt_master_disable>
   103c2:	68a2      	ldr	r2, [r4, #8]
   103c4:	9001      	str	r0, [sp, #4]
   103c6:	4296      	cmp	r6, r2
   103c8:	d81c      	bhi.n	10404 <am_hal_queue_item_get+0x54>
   103ca:	b196      	cbz	r6, 103f2 <am_hal_queue_item_get+0x42>
   103cc:	6863      	ldr	r3, [r4, #4]
   103ce:	b1dd      	cbz	r5, 10408 <am_hal_queue_item_get+0x58>
   103d0:	4629      	mov	r1, r5
   103d2:	19af      	adds	r7, r5, r6
   103d4:	6962      	ldr	r2, [r4, #20]
   103d6:	5cd3      	ldrb	r3, [r2, r3]
   103d8:	f801 3b01 	strb.w	r3, [r1], #1
   103dc:	6863      	ldr	r3, [r4, #4]
   103de:	68e5      	ldr	r5, [r4, #12]
   103e0:	3301      	adds	r3, #1
   103e2:	428f      	cmp	r7, r1
   103e4:	fbb3 f0f5 	udiv	r0, r3, r5
   103e8:	fb05 3310 	mls	r3, r5, r0, r3
   103ec:	6063      	str	r3, [r4, #4]
   103ee:	d1f1      	bne.n	103d4 <am_hal_queue_item_get+0x24>
   103f0:	68a2      	ldr	r2, [r4, #8]
   103f2:	1b92      	subs	r2, r2, r6
   103f4:	60a2      	str	r2, [r4, #8]
   103f6:	2401      	movs	r4, #1
   103f8:	9801      	ldr	r0, [sp, #4]
   103fa:	f7fe fb15 	bl	ea28 <am_hal_interrupt_master_set>
   103fe:	4620      	mov	r0, r4
   10400:	b003      	add	sp, #12
   10402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10404:	2400      	movs	r4, #0
   10406:	e7f7      	b.n	103f8 <am_hal_queue_item_get+0x48>
   10408:	68e0      	ldr	r0, [r4, #12]
   1040a:	4629      	mov	r1, r5
   1040c:	3101      	adds	r1, #1
   1040e:	3301      	adds	r3, #1
   10410:	428e      	cmp	r6, r1
   10412:	fbb3 f5f0 	udiv	r5, r3, r0
   10416:	fb00 3315 	mls	r3, r0, r5, r3
   1041a:	d1f7      	bne.n	1040c <am_hal_queue_item_get+0x5c>
   1041c:	6063      	str	r3, [r4, #4]
   1041e:	e7e8      	b.n	103f2 <am_hal_queue_item_get+0x42>
   10420:	6c6c6548 	.word	0x6c6c6548
   10424:	6f57206f 	.word	0x6f57206f
   10428:	21646c72 	.word	0x21646c72
   1042c:	00000a0a 	.word	0x00000a0a
   10430:	72617053 	.word	0x72617053
   10434:	6e75466b 	.word	0x6e75466b
   10438:	67644520 	.word	0x67644520
   1043c:	6f422065 	.word	0x6f422065
   10440:	20647261 	.word	0x20647261
   10444:	74736554 	.word	0x74736554
   10448:	00000a0a 	.word	0x00000a0a
   1044c:	74696e49 	.word	0x74696e49
   10450:	696c6169 	.word	0x696c6169
   10454:	676e697a 	.word	0x676e697a
   10458:	63636120 	.word	0x63636120
   1045c:	72656c65 	.word	0x72656c65
   10460:	74656d6f 	.word	0x74656d6f
   10464:	2e2e7265 	.word	0x2e2e7265
   10468:	0a0d202e 	.word	0x0a0d202e
   1046c:	00000000 	.word	0x00000000
   10470:	65636341 	.word	0x65636341
   10474:	6f72656c 	.word	0x6f72656c
   10478:	6574656d 	.word	0x6574656d
   1047c:	6e692072 	.word	0x6e692072
   10480:	72207469 	.word	0x72207469
   10484:	72757465 	.word	0x72757465
   10488:	2064656e 	.word	0x2064656e
   1048c:	0d783825 	.word	0x0d783825
   10490:	00000a0a 	.word	0x00000a0a
   10494:	65746e49 	.word	0x65746e49
   10498:	6c617672 	.word	0x6c617672
   1049c:	74656220 	.word	0x74656220
   104a0:	6e656577 	.word	0x6e656577
   104a4:	61657220 	.word	0x61657220
   104a8:	676e6964 	.word	0x676e6964
   104ac:	7e203a73 	.word	0x7e203a73
   104b0:	00006425 	.word	0x00006425
   104b4:	0a0d736d 	.word	0x0a0d736d
   104b8:	0000000a 	.word	0x0000000a
   104bc:	58636341 	.word	0x58636341
   104c0:	676d5b20 	.word	0x676d5b20
   104c4:	41202c5d 	.word	0x41202c5d
   104c8:	20596363 	.word	0x20596363
   104cc:	5d676d5b 	.word	0x5d676d5b
   104d0:	6341202c 	.word	0x6341202c
   104d4:	5b205a63 	.word	0x5b205a63
   104d8:	0d5d676d 	.word	0x0d5d676d
   104dc:	0000000a 	.word	0x0000000a
   104e0:	2e343025 	.word	0x2e343025
   104e4:	2c206632 	.word	0x2c206632
   104e8:	2e343025 	.word	0x2e343025
   104ec:	2c206632 	.word	0x2c206632
   104f0:	2e343025 	.word	0x2e343025
   104f4:	0d206632 	.word	0x0d206632
   104f8:	0000000a 	.word	0x0000000a

000104fc <g_sUartConfig>:
   104fc:	0001c200 00000060 00000000 00000000     ....`...........
   1050c:	00000000 00000012 10001314 00000100     ................
   1051c:	100012fc 00000002 0a0a0a0a 0a0a0a0a     ................
   1052c:	0a0a0a0a 0a0a0a0a 00000a0a 6f727245     ............Erro
   1053c:	202d2072 65736572 74617672 206e6f69     r - reservation 
   1054c:	7420666f 41206568 69204344 6174736e     of the ADC insta
   1055c:	2065636e 6c696166 0a2e6465 00000000     nce failed......
   1056c:	6f727245 202d2072 20434441 65776f70     Error - ADC powe
   1057c:	6e6f2072 69616620 2e64656c 0000000a     r on failed.....
   1058c:	6f727245 202d2072 666e6f63 72756769     Error - configur
   1059c:	20676e69 20434441 6c696166 0a2e6465     ing ADC failed..
   105ac:	00000000 6f727245 202d2072 666e6f63     ....Error - conf
   105bc:	72756769 20676e69 20434441 746f6c53     iguring ADC Slot
   105cc:	66203020 656c6961 000a2e64 6f727245      0 failed...Erro
   105dc:	202d2072 62616e65 676e696c 43444120     r - enabling ADC
   105ec:	69616620 2e64656c 0000000a 6f727245      failed.....Erro
   105fc:	65722072 6e696461 44412067 6e692043     r reading ADC in
   1060c:	72726574 20747075 74617473 000a7375     terrupt status..
   1061c:	6f727245 6c632072 69726165 4120676e     Error clearing A
   1062c:	69204344 7265746e 74707572 61747320     DC interrupt sta
   1063c:	0a737574 00000000 6f727245 202d2072     tus.....Error - 
   1064c:	20434441 706d6173 7220656c 20646165     ADC sample read 
   1065c:	6d6f7266 46494620 6166204f 64656c69     from FIFO failed
   1066c:	00000a2e 6f727245 202d2072 61736964     ....Error - disa
   1067c:	20656c62 20434441 6c696166 0a2e6465     ble ADC failed..
   1068c:	00000000 6f727245 202d2072 61736964     ....Error - disa
   1069c:	6e696c62 68742067 44412065 6f702043     bling the ADC po
   106ac:	20726577 616d6f64 66206e69 656c6961     wer domain faile
   106bc:	000a2e64 6f727245 202d2072 75746572     d...Error - retu
   106cc:	6f206e72 68742066 44412065 6e692043     rn of the ADC in
   106dc:	6e617473 66206563 656c6961 000a2e64     stance failed...

000106ec <g_AM_PIN_11_ADCSE2>:
   106ec:	00000000 52206f4e 75622058 72656666     ....No RX buffer
   106fc:	6f727020 65646976 00000a64 646e6553      provided...Send
   1070c:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   1071c:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   1072c:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   1073c:	65646976 00000a64 646e6553 72726520     vided...Send err
   1074c:	68702820 20657361 203a2931 000a6425      (phase 1): %d..
   1075c:	616f6857 2820696d 756f6873 6220646c     Whoami (should b
   1076c:	78302065 3a293333 25783020 000a7832     e 0x33): 0x%2x..

0001077c <g_AM_BSP_GPIO_COM_UART_RX>:
   1077c:	00000000                                ....

00010780 <g_AM_BSP_GPIO_COM_UART_TX>:
   10780:	00000000                                ....

00010784 <g_AM_BSP_GPIO_IOM4_SCL>:
   10784:	00040b44                                D...

00010788 <g_AM_BSP_GPIO_IOM4_SDA>:
   10788:	00040b44                                D...

0001078c <am_hal_cachectrl_defaults>:
   1078c:	00000308                                ....

00010790 <g_AM_HAL_GPIO_INPUT>:
   10790:	00001003                                ....

00010794 <g_ui8Bit76Capabilities>:
   10794:	02800101 80010180 80800101 80808080     ................
   107a4:	80808080 80808008 01800180 80808080     ................
   107b4:	80808080 01800402 01010401 80808080     ................
   107c4:	00000101                                ....

000107c8 <g_ui8NCEtable>:
   107c8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   107d8:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   107e8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   107f8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10808:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10818:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10828:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10838:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10848:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10858:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10868:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10878:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10888:	32221202 43231303                       .."2..#C

00010890 <g_ui8Inpen>:
   10890:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   108a0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   108b0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   108c0:	00003130                                01..

000108c4 <g_AM_HAL_GPIO_DISABLE>:
   108c4:	00000003                                ....

000108c8 <g_AM_HAL_GPIO_OUTPUT>:
   108c8:	00000403                                ....

000108cc <g_ui8nCEpins>:
   108cc:	02070707 00080802 01020202 01010101     ................
   108dc:	01010101 01010101 01010101 01010101     ................
   108ec:	01010101 08010101 01010008 01010101     ................
   108fc:	00000101                                ....

00010900 <g_AM_HAL_GPIO_OUTPUT_12>:
   10900:	00000703                                ....

00010904 <g_am_hal_mcuctrl_flash_size>:
   10904:	00004000 00008000 00010000 00020000     .@..............
   10914:	00040000 00080000 00100000 00200000     .............. .
   10924:	00180000 00000000 00000000 00000000     ................
	...

00010944 <g_am_hal_mcuctrl_sram_size>:
   10944:	00004000 00008000 00010000 00020000     .@..............
   10954:	00040000 00080000 00100000 00060000     ................
   10964:	000c0000 00000000 00000000 00000000     ................
	...

00010984 <am_hal_pwrctrl_peripheral_control>:
	...
   10990:	00000001 00000004 00000004 00000002     ................
   109a0:	00000008 00000008 00000004 00000008     ................
   109b0:	00000008 00000008 00000008 00000008     ................
   109c0:	00000010 00000010 00000010 00000020     ............ ...
   109d0:	00000010 00000010 00000040 00000010     ........@.......
   109e0:	00000010 00000080 00000004 00000004     ................
   109f0:	00000100 00000004 00000004 00000200     ................
   10a00:	00000020 00000020 00000400 00000004      ... ...........
   10a10:	00000004 00000800 00000040 00000040     ........@...@...
   10a20:	00001000 00000080 00000080 00002000     ............. ..
   10a30:	00000100 00000100                       ........

00010a38 <gAmHalCmdQReg>:
   10a38:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   10a48:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10a58:	00000004 00000002 50005294 50005298     .........R.P.R.P
   10a68:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   10a78:	5000529c 00000001 00000004 00000002     .R.P............
   10a88:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   10a98:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   10aa8:	00000004 00000002 50007294 50007298     .........r.P.r.P
   10ab8:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10ac8:	5000729c 00000001 00000004 00000002     .r.P............
   10ad8:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10ae8:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10af8:	00000004 00000002 50009294 50009298     ...........P...P
   10b08:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10b18:	5000929c 00000001 00000004 00000002     ...P............
   10b28:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   10b38:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   10b48:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10b58:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   10b68:	5000c250 00000001 00000004 00000002     P..P............
