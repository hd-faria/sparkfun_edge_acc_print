
bin/example1_edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 05 d3 00 00 fd d2 00 00 45 c7 00 00     ............E...
    c010:	45 c7 00 00 45 c7 00 00 45 c7 00 00 00 00 00 00     E...E...E.......
	...
    c02c:	01 d3 00 00 01 d3 00 00 00 00 00 00 01 d3 00 00     ................
    c03c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c04c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c05c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c06c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 6d d3 00 00     ............m...
    c07c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 29 d4 00 00     ............)...
    c08c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c09c:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c0ac:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c0bc:	01 d3 00 00 01 d3 00 00 01 d3 00 00 01 d3 00 00     ................
    c0cc:	01 d3 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c51c:	2100      	movs	r1, #0
{
    c51e:	b08b      	sub	sp, #44	; 0x2c
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c520:	4608      	mov	r0, r1
    c522:	f001 fea7 	bl	e274 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c526:	486c      	ldr	r0, [pc, #432]	; (c6d8 <main+0x1c0>)

    // Set up Pin 1 as output
    am_hal_gpio_pinconfig(AM_BSP_GPIO_1, g_AM_HAL_GPIO_OUTPUT_12);

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c528:	4f6c      	ldr	r7, [pc, #432]	; (c6dc <main+0x1c4>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);

    am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c52a:	f8df b1ec 	ldr.w	fp, [pc, #492]	; c718 <main+0x200>
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c52e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; c714 <main+0x1fc>
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c532:	f001 fcfd 	bl	df30 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c536:	f001 fd21 	bl	df7c <am_hal_cachectrl_enable>
    am_bsp_low_power_init();
    c53a:	f001 fa35 	bl	d9a8 <am_bsp_low_power_init>
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c53e:	f001 fa9b 	bl	da78 <am_bsp_uart_printf_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c542:	4b67      	ldr	r3, [pc, #412]	; (c6e0 <main+0x1c8>)
    c544:	681c      	ldr	r4, [r3, #0]
    c546:	202e      	movs	r0, #46	; 0x2e
    c548:	4621      	mov	r1, r4
    c54a:	f002 f875 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c54e:	4621      	mov	r1, r4
    c550:	2025      	movs	r0, #37	; 0x25
    c552:	f002 f871 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c556:	4621      	mov	r1, r4
    c558:	202c      	movs	r0, #44	; 0x2c
    c55a:	f002 f86d 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c55e:	4621      	mov	r1, r4
    c560:	202f      	movs	r0, #47	; 0x2f
    c562:	f002 f869 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c566:	4b5f      	ldr	r3, [pc, #380]	; (c6e4 <main+0x1cc>)
    c568:	200e      	movs	r0, #14
    c56a:	6819      	ldr	r1, [r3, #0]
    c56c:	f002 f864 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_1, g_AM_HAL_GPIO_OUTPUT_12);
    c570:	4621      	mov	r1, r4
    c572:	2001      	movs	r0, #1
    c574:	f002 f860 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c578:	2620      	movs	r6, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c57e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c582:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c586:	f04f 0902 	mov.w	r9, #2
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c58a:	f8c7 8000 	str.w	r8, [r7]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c58e:	603e      	str	r6, [r7, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c590:	603b      	str	r3, [r7, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c592:	603d      	str	r5, [r7, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c594:	f8cb 9000 	str.w	r9, [fp]
    am_util_stdio_terminal_clear();
    c598:	f000 feaa 	bl	d2f0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n\n");
    c59c:	4852      	ldr	r0, [pc, #328]	; (c6e8 <main+0x1d0>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c59e:	4c53      	ldr	r4, [pc, #332]	; (c6ec <main+0x1d4>)
    am_util_stdio_printf("SparkFun Edge Board Test\n\n");
    c5a0:	f000 fe8c 	bl	d2bc <am_util_stdio_printf>
    am_util_stdio_printf("Initializing accelerometer... \r\n");
    c5a4:	4852      	ldr	r0, [pc, #328]	; (c6f0 <main+0x1d8>)
    c5a6:	f000 fe89 	bl	d2bc <am_util_stdio_printf>
    int accInitRes = initAccelerometer();
    c5aa:	f001 f88f 	bl	d6cc <initAccelerometer>
    c5ae:	4601      	mov	r1, r0
    am_util_stdio_printf("Accelerometer init returned %8x\r\n\n", accInitRes);
    c5b0:	4850      	ldr	r0, [pc, #320]	; (c6f4 <main+0x1dc>)
    c5b2:	f000 fe83 	bl	d2bc <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
}

static int testADC(void)
{
    initADC();
    c5b6:	f000 ff9d 	bl	d4f4 <initADC>
    enableAdcInterrupts();
    c5ba:	f000 ffbb 	bl	d534 <enableAdcInterrupts>
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c5be:	f8ca 9000 	str.w	r9, [sl]
    am_util_stdio_printf("Interval between readings: ~%d", TIME_DELAY_MILISECONDS);
    c5c2:	f241 3188 	movw	r1, #5000	; 0x1388
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c5c6:	f8c4 8000 	str.w	r8, [r4]
    am_util_stdio_printf("Interval between readings: ~%d", TIME_DELAY_MILISECONDS);
    c5ca:	484b      	ldr	r0, [pc, #300]	; (c6f8 <main+0x1e0>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c5cc:	6026      	str	r6, [r4, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c5ce:	6025      	str	r5, [r4, #0]
    am_util_stdio_printf("Interval between readings: ~%d", TIME_DELAY_MILISECONDS);
    c5d0:	f000 fe74 	bl	d2bc <am_util_stdio_printf>
    am_util_stdio_printf("ms\r\n\n");
    c5d4:	4849      	ldr	r0, [pc, #292]	; (c6fc <main+0x1e4>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5d6:	4e4a      	ldr	r6, [pc, #296]	; (c700 <main+0x1e8>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c5d8:	4d4a      	ldr	r5, [pc, #296]	; (c704 <main+0x1ec>)
    am_util_stdio_printf("ms\r\n\n");
    c5da:	f000 fe6f 	bl	d2bc <am_util_stdio_printf>
    am_util_stdio_printf("AccX [mg], AccY [mg], AccZ [mg]\r\n");
    c5de:	484a      	ldr	r0, [pc, #296]	; (c708 <main+0x1f0>)
    c5e0:	f000 fe6c 	bl	d2bc <am_util_stdio_printf>
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c5e4:	e9cd b406 	strd	fp, r4, [sp, #24]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5e8:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c5ea:	f04f 0801 	mov.w	r8, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5ee:	aa09      	add	r2, sp, #36	; 0x24
    c5f0:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c5f2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5f6:	f002 f95b 	bl	e8b0 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c5fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5fc:	a908      	add	r1, sp, #32
    c5fe:	4630      	mov	r0, r6
        if( pin14Val == 0 ){ break; }
    c600:	2c00      	cmp	r4, #0
    c602:	d051      	beq.n	c6a8 <main+0x190>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c604:	f001 f988 	bl	d918 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c608:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c60c:	2b00      	cmp	r3, #0
    c60e:	d0eb      	beq.n	c5e8 <main+0xd0>
            am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c610:	9b06      	ldr	r3, [sp, #24]
            acceleration_mg[0] =
    c612:	4c3e      	ldr	r4, [pc, #248]	; (c70c <main+0x1f4>)
            am_hal_gpio_output_set(AM_BSP_GPIO_1);
    c614:	f04f 0b02 	mov.w	fp, #2
    c618:	f8c3 b000 	str.w	fp, [r3]
            am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c61c:	2320      	movs	r3, #32
    c61e:	603b      	str	r3, [r7, #0]
            am_util_delay_ms(TIME_DELAY_COMM_SET_UP);
    c620:	2019      	movs	r0, #25
    c622:	f000 f87b 	bl	c71c <am_util_delay_ms>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c626:	2300      	movs	r3, #0
    c628:	602b      	str	r3, [r5, #0]
    c62a:	80ab      	strh	r3, [r5, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c62c:	4935      	ldr	r1, [pc, #212]	; (c704 <main+0x1ec>)
    c62e:	4630      	mov	r0, r6
    c630:	f001 f982 	bl	d938 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c634:	f9b5 0000 	ldrsh.w	r0, [r5]
    c638:	f001 f8b4 	bl	d7a4 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c63c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
            acceleration_mg[0] =
    c640:	ed84 0a00 	vstr	s0, [r4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c644:	f001 f8ae 	bl	d7a4 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c648:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
            acceleration_mg[1] =
    c64c:	ed84 0a01 	vstr	s0, [r4, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c650:	f001 f8a8 	bl	d7a4 <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("%04.2f ,%04.2f ,%04.2f \r\n",
    c654:	6820      	ldr	r0, [r4, #0]
            acceleration_mg[2] =
    c656:	ed84 0a02 	vstr	s0, [r4, #8]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c65a:	ee10 8a10 	vmov	r8, s0
            am_util_stdio_printf("%04.2f ,%04.2f ,%04.2f \r\n",
    c65e:	f7ff feb3 	bl	c3c8 <__aeabi_f2d>
    c662:	4602      	mov	r2, r0
    c664:	460b      	mov	r3, r1
    c666:	4640      	mov	r0, r8
    c668:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c66c:	f7ff feac 	bl	c3c8 <__aeabi_f2d>
    c670:	4680      	mov	r8, r0
    c672:	4689      	mov	r9, r1
    c674:	6860      	ldr	r0, [r4, #4]
    c676:	e9cd 8902 	strd	r8, r9, [sp, #8]
    c67a:	f7ff fea5 	bl	c3c8 <__aeabi_f2d>
    c67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c682:	e9cd 0100 	strd	r0, r1, [sp]
    c686:	4822      	ldr	r0, [pc, #136]	; (c710 <main+0x1f8>)
    c688:	f000 fe18 	bl	d2bc <am_util_stdio_printf>
            am_util_delay_ms(TIME_DELAY_COMM_SET_UP);
    c68c:	2019      	movs	r0, #25
    c68e:	f000 f845 	bl	c71c <am_util_delay_ms>
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c692:	9b07      	ldr	r3, [sp, #28]
            am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c694:	f8ca b000 	str.w	fp, [sl]
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c698:	461a      	mov	r2, r3
    c69a:	2320      	movs	r3, #32
            am_util_delay_ms(TIME_DELAY_MILISECONDS - (2*TIME_DELAY_COMM_SET_UP));
    c69c:	f241 3056 	movw	r0, #4950	; 0x1356
            am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c6a0:	6013      	str	r3, [r2, #0]
            am_util_delay_ms(TIME_DELAY_MILISECONDS - (2*TIME_DELAY_COMM_SET_UP));
    c6a2:	f000 f83b 	bl	c71c <am_util_delay_ms>
    {
    c6a6:	e79f      	b.n	c5e8 <main+0xd0>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c6a8:	4b10      	ldr	r3, [pc, #64]	; (c6ec <main+0x1d4>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c6aa:	4a1a      	ldr	r2, [pc, #104]	; (c714 <main+0x1fc>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c6ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    c6b0:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c6b2:	2020      	movs	r0, #32
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c6b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c6b8:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c6ba:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c6bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c6c0:	2102      	movs	r1, #2
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c6c2:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_1);
    c6c4:	6011      	str	r1, [r2, #0]
    am_bsp_debug_printf_disable();
    c6c6:	f001 f9a1 	bl	da0c <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c6ca:	4640      	mov	r0, r8
    c6cc:	f003 f842 	bl	f754 <am_hal_sysctrl_sleep>
}
    c6d0:	4620      	mov	r0, r4
    c6d2:	b00b      	add	sp, #44	; 0x2c
    c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6d8:	00010588 	.word	0x00010588
    c6dc:	40010094 	.word	0x40010094
    c6e0:	000106fc 	.word	0x000106fc
    c6e4:	0001058c 	.word	0x0001058c
    c6e8:	0001022c 	.word	0x0001022c
    c6ec:	4001009c 	.word	0x4001009c
    c6f0:	00010248 	.word	0x00010248
    c6f4:	0001026c 	.word	0x0001026c
    c6f8:	00010290 	.word	0x00010290
    c6fc:	000102b0 	.word	0x000102b0
    c700:	1000130c 	.word	0x1000130c
    c704:	100012f4 	.word	0x100012f4
    c708:	000102b8 	.word	0x000102b8
    c70c:	100012fc 	.word	0x100012fc
    c710:	000102dc 	.word	0x000102dc
    c714:	40010098 	.word	0x40010098
    c718:	40010090 	.word	0x40010090

0000c71c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c71c:	b510      	push	{r4, lr}
    c71e:	b084      	sub	sp, #16
    c720:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c722:	a801      	add	r0, sp, #4
    c724:	f001 fe32 	bl	e38c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c728:	9b01      	ldr	r3, [sp, #4]
    c72a:	4805      	ldr	r0, [pc, #20]	; (c740 <am_util_delay_ms+0x24>)
    c72c:	fba0 2303 	umull	r2, r3, r0, r3
    c730:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c732:	fb04 f003 	mul.w	r0, r4, r3
    c736:	f001 ff2b 	bl	e590 <am_hal_flash_delay>
}
    c73a:	b004      	add	sp, #16
    c73c:	bd10      	pop	{r4, pc}
    c73e:	bf00      	nop
    c740:	057619f1 	.word	0x057619f1

0000c744 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c744:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c746:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c74a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c74c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c750:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c754:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c758:	f000 f806 	bl	c768 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c75c:	bd01      	pop	{r0, pc}
    c75e:	bf00      	nop

0000c760 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c760:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c762:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c764:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c766:	4770      	bx	lr

0000c768 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c768:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c76a:	2300      	movs	r3, #0
{
    c76c:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c76e:	e9cd 3300 	strd	r3, r3, [sp]
    c772:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c776:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c77a:	4a2b      	ldr	r2, [pc, #172]	; (c828 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c77c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c77e:	6813      	ldr	r3, [r2, #0]
    c780:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c782:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c784:	b2db      	uxtb	r3, r3
    c786:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c78a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c78c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c790:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c794:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c796:	0c1b      	lsrs	r3, r3, #16
    c798:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c79c:	6913      	ldr	r3, [r2, #16]
    c79e:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7a0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    c7a4:	079b      	lsls	r3, r3, #30
{
    c7a6:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7a8:	d437      	bmi.n	c81a <am_util_faultisr_collect_data+0xb2>
    c7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c7ae:	4621      	mov	r1, r4
    c7b0:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7b2:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c7b4:	f7ff ffd4 	bl	c760 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c7b8:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c7ba:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c7bc:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c7be:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c7c0:	f7ff ffce 	bl	c760 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c7c4:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c7c6:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c7c8:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c7ca:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c7cc:	f7ff ffc8 	bl	c760 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c7d0:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c7d2:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c7d4:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c7d6:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c7d8:	f7ff ffc2 	bl	c760 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7dc:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c7de:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7e0:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c7e2:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7e4:	f7ff ffbc 	bl	c760 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7e8:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7ea:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7ec:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7ee:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7f0:	f7ff ffb6 	bl	c760 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7f4:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7f6:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7f8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7fa:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7fc:	f7ff ffb0 	bl	c760 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c800:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c802:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c804:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c806:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c808:	f7ff ffaa 	bl	c760 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c80c:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c80e:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c810:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c812:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c814:	f002 fe2e 	bl	f474 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c818:	e7fe      	b.n	c818 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c81a:	4601      	mov	r1, r0
    c81c:	2006      	movs	r0, #6
    c81e:	f7ff ff9f 	bl	c760 <getStackedReg>
    c822:	4603      	mov	r3, r0
    c824:	e7c3      	b.n	c7ae <am_util_faultisr_collect_data+0x46>
    c826:	bf00      	nop
    c828:	e000ed28 	.word	0xe000ed28

0000c82c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c82c:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c82e:	460e      	mov	r6, r1
    c830:	2700      	movs	r7, #0
    c832:	ea56 0307 	orrs.w	r3, r6, r7
    c836:	d045      	beq.n	c8c4 <divu64_10+0x98>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c838:	0844      	lsrs	r4, r0, #1
    c83a:	0883      	lsrs	r3, r0, #2
    c83c:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c840:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
    c844:	18e4      	adds	r4, r4, r3
    c846:	ea4f 0251 	mov.w	r2, r1, lsr #1
    c84a:	ea4f 0391 	mov.w	r3, r1, lsr #2
    c84e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 4);
    c852:	0923      	lsrs	r3, r4, #4
    c854:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c858:	18e4      	adds	r4, r4, r3
    c85a:	ea4f 1312 	mov.w	r3, r2, lsr #4
    c85e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 8);
    c862:	0a23      	lsrs	r3, r4, #8
    c864:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    c868:	18e4      	adds	r4, r4, r3
    c86a:	ea4f 2312 	mov.w	r3, r2, lsr #8
    c86e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 16);
    c872:	0c23      	lsrs	r3, r4, #16
    c874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c878:	18e4      	adds	r4, r4, r3
    c87a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c87e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 32);
    c882:	18a4      	adds	r4, r4, r2
    c884:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c888:	08e3      	lsrs	r3, r4, #3
    c88a:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c88e:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c890:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c892:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c896:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c89a:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c89c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c8a0:	18e4      	adds	r4, r4, r3
    c8a2:	eb42 0505 	adc.w	r5, r2, r5
    c8a6:	1924      	adds	r4, r4, r4
    c8a8:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c8aa:	1b00      	subs	r0, r0, r4
    c8ac:	eb61 0105 	sbc.w	r1, r1, r5
    c8b0:	0900      	lsrs	r0, r0, #4
    c8b2:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c8b6:	18c0      	adds	r0, r0, r3
    c8b8:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c8bc:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c8c0:	bcf0      	pop	{r4, r5, r6, r7}
    c8c2:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c8c4:	0882      	lsrs	r2, r0, #2
    c8c6:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c8ca:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c8ce:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c8d2:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c8d6:	08d2      	lsrs	r2, r2, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c8d8:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c8da:	eb02 0382 	add.w	r3, r2, r2, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c8de:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
    c8e2:	eb02 1010 	add.w	r0, r2, r0, lsr #4
    c8e6:	2100      	movs	r1, #0
}
    c8e8:	bcf0      	pop	{r4, r5, r6, r7}
    c8ea:	4770      	bx	lr

0000c8ec <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8f0:	b08b      	sub	sp, #44	; 0x2c
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c8f2:	f10d 0e0c 	add.w	lr, sp, #12
{
    c8f6:	9201      	str	r2, [sp, #4]
        tbuf[ix++] = uMod + '0';
    c8f8:	f04f 0800 	mov.w	r8, #0
    c8fc:	e049      	b.n	c992 <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c8fe:	eb16 0309 	adds.w	r3, r6, r9
    c902:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 4);
    c906:	091c      	lsrs	r4, r3, #4
    c908:	ea44 7407 	orr.w	r4, r4, r7, lsl #28
    c90c:	191b      	adds	r3, r3, r4
    c90e:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    c912:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 8);
    c916:	0a1c      	lsrs	r4, r3, #8
    c918:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
    c91c:	191b      	adds	r3, r3, r4
    c91e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
    c922:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 16);
    c926:	0c1c      	lsrs	r4, r3, #16
    c928:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    c92c:	191b      	adds	r3, r3, r4
    c92e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c932:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 32);
    c936:	19db      	adds	r3, r3, r7
    c938:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c93c:	08db      	lsrs	r3, r3, #3
    c93e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c942:	08d2      	lsrs	r2, r2, #3
        return q64 + ((r64 + 6) >> 4);
    c944:	1d84      	adds	r4, r0, #6
        r64 = ui64Val - q64*10;
    c946:	ea4f 0583 	mov.w	r5, r3, lsl #2
    c94a:	ea4f 0682 	mov.w	r6, r2, lsl #2
    c94e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
        return q64 + ((r64 + 6) >> 4);
    c952:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c956:	18ed      	adds	r5, r5, r3
    c958:	eb42 0606 	adc.w	r6, r2, r6
    c95c:	196d      	adds	r5, r5, r5
    c95e:	4176      	adcs	r6, r6
        return q64 + ((r64 + 6) >> 4);
    c960:	1b64      	subs	r4, r4, r5
    c962:	eb61 0106 	sbc.w	r1, r1, r6
    c966:	0924      	lsrs	r4, r4, #4
    c968:	ea44 7401 	orr.w	r4, r4, r1, lsl #28
    c96c:	18e3      	adds	r3, r4, r3
        uMod = ui64Val - (u64Tmp * 10);
    c96e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    c972:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
        tbuf[ix++] = uMod + '0';
    c976:	f100 0030 	add.w	r0, r0, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c97a:	ea4f 1111 	mov.w	r1, r1, lsr #4
        tbuf[ix++] = uMod + '0';
    c97e:	f88e 0000 	strb.w	r0, [lr]
        return q64 + ((r64 + 6) >> 4);
    c982:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c986:	f108 0401 	add.w	r4, r8, #1
    c98a:	4618      	mov	r0, r3
    c98c:	46a0      	mov	r8, r4
    c98e:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c992:	0882      	lsrs	r2, r0, #2
    c994:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c998:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c99c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c9a0:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c9a4:	08d3      	lsrs	r3, r2, #3
        r32 = ui32Val - q32*10;
    c9a6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9aa:	1d82      	adds	r2, r0, #6
    c9ac:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
    c9b0:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    c9b4:	2500      	movs	r5, #0
    c9b6:	460c      	mov	r4, r1
        uMod = ui64Val - (u64Tmp * 10);
    c9b8:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c9bc:	0846      	lsrs	r6, r0, #1
    c9be:	ea4f 0990 	mov.w	r9, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c9c2:	eba0 0a4b 	sub.w	sl, r0, fp, lsl #1
    if ( ui64Val >> 32 )
    c9c6:	432c      	orrs	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c9c8:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
    c9cc:	ea49 7981 	orr.w	r9, r9, r1, lsl #30
    c9d0:	ea4f 0751 	mov.w	r7, r1, lsr #1
    c9d4:	ea4f 0c91 	mov.w	ip, r1, lsr #2
        q64 += (q64 >> 32);
    c9d8:	462a      	mov	r2, r5
        tbuf[ix++] = uMod + '0';
    c9da:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
    if ( ui64Val >> 32 )
    c9de:	d18e      	bne.n	c8fe <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c9e0:	f88e a000 	strb.w	sl, [lr]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9e4:	4618      	mov	r0, r3
    c9e6:	2100      	movs	r1, #0
        tbuf[ix++] = uMod + '0';
    c9e8:	f108 0401 	add.w	r4, r8, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d1cd      	bne.n	c98c <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c9f0:	9a01      	ldr	r2, [sp, #4]
    c9f2:	b17a      	cbz	r2, ca14 <uint64_to_str+0x128>
    c9f4:	ab03      	add	r3, sp, #12
    c9f6:	4423      	add	r3, r4
    c9f8:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c9fa:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c9fe:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    ca02:	a903      	add	r1, sp, #12
    ca04:	4299      	cmp	r1, r3
    ca06:	d1f8      	bne.n	c9fa <uint64_to_str+0x10e>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca08:	9b01      	ldr	r3, [sp, #4]
    ca0a:	4443      	add	r3, r8
    ca0c:	4698      	mov	r8, r3
    ca0e:	2300      	movs	r3, #0
    ca10:	f888 3001 	strb.w	r3, [r8, #1]
    }

    return iNumDig;
}
    ca14:	4620      	mov	r0, r4
    ca16:	b00b      	add	sp, #44	; 0x2c
    ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ca1c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    ca1c:	4b01      	ldr	r3, [pc, #4]	; (ca24 <am_util_stdio_printf_init+0x8>)
    ca1e:	6018      	str	r0, [r3, #0]
}
    ca20:	4770      	bx	lr
    ca22:	bf00      	nop
    ca24:	10001308 	.word	0x10001308

0000ca28 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    ca2c:	780b      	ldrb	r3, [r1, #0]
{
    ca2e:	b089      	sub	sp, #36	; 0x24
    ca30:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    ca32:	2b00      	cmp	r3, #0
    ca34:	f000 8092 	beq.w	cb5c <am_util_stdio_vsprintf+0x134>
    ca38:	4693      	mov	fp, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ca3a:	f04f 0a00 	mov.w	sl, #0
    ca3e:	e00b      	b.n	ca58 <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ca40:	b11d      	cbz	r5, ca4a <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ca42:	2b0a      	cmp	r3, #10
    ca44:	d07e      	beq.n	cb44 <am_util_stdio_vsprintf+0x11c>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    ca46:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    ca4a:	3101      	adds	r1, #1
            ++ui32CharCnt;
    ca4c:	f10a 0a01 	add.w	sl, sl, #1
    while ( *pcFmt != 0x0 )
    ca50:	780b      	ldrb	r3, [r1, #0]
    ca52:	2b00      	cmp	r3, #0
    ca54:	f000 8083 	beq.w	cb5e <am_util_stdio_vsprintf+0x136>
        if ( *pcFmt != '%' )
    ca58:	2b25      	cmp	r3, #37	; 0x25
    ca5a:	d1f1      	bne.n	ca40 <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    ca5c:	784b      	ldrb	r3, [r1, #1]
    ca5e:	2b30      	cmp	r3, #48	; 0x30
    ca60:	f000 8090 	beq.w	cb84 <am_util_stdio_vsprintf+0x15c>
        ++pcFmt;
    ca64:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    ca66:	f04f 0820 	mov.w	r8, #32
    if ( *pcStr == '-')
    ca6a:	2b2d      	cmp	r3, #45	; 0x2d
    ca6c:	d07e      	beq.n	cb6c <am_util_stdio_vsprintf+0x144>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    ca72:	2000      	movs	r0, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca74:	2a09      	cmp	r2, #9
    bool bNeg = false;
    ca76:	4607      	mov	r7, r0
    ca78:	4634      	mov	r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca7a:	f200 8081 	bhi.w	cb80 <am_util_stdio_vsprintf+0x158>
    ca7e:	3001      	adds	r0, #1
    ca80:	1b00      	subs	r0, r0, r4
    ca82:	2100      	movs	r1, #0
        ui32Val *= 10;
    ca84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    ca88:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    ca8c:	eb04 0c00 	add.w	ip, r4, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ca94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ca98:	2a09      	cmp	r2, #9
        ui32Val += (*pcStr - '0');
    ca9a:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca9e:	d9f1      	bls.n	ca84 <am_util_stdio_vsprintf+0x5c>
    caa0:	f816 300c 	ldrb.w	r3, [r6, ip]
    caa4:	eb06 040c 	add.w	r4, r6, ip
    return bNeg ? -ui32Val : ui32Val;
    caa8:	b107      	cbz	r7, caac <am_util_stdio_vsprintf+0x84>
    caaa:	4249      	negs	r1, r1
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    caac:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    caae:	460a      	mov	r2, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cab0:	f000 8146 	beq.w	cd40 <am_util_stdio_vsprintf+0x318>
    cab4:	ea81 79e1 	eor.w	r9, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cab8:	2b2e      	cmp	r3, #46	; 0x2e
    caba:	eba9 79e1 	sub.w	r9, r9, r1, asr #31
    cabe:	f000 8116 	beq.w	ccee <am_util_stdio_vsprintf+0x2c6>
        iPrecision = 6;             // printf() default precision for %f is 6
    cac2:	2606      	movs	r6, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cac4:	2b6c      	cmp	r3, #108	; 0x6c
    cac6:	d104      	bne.n	cad2 <am_util_stdio_vsprintf+0xaa>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cac8:	7863      	ldrb	r3, [r4, #1]
    caca:	2b6c      	cmp	r3, #108	; 0x6c
    cacc:	f000 8186 	beq.w	cddc <am_util_stdio_vsprintf+0x3b4>
            pcFmt++;
    cad0:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    cad2:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    cad6:	2a32      	cmp	r2, #50	; 0x32
    cad8:	d858      	bhi.n	cb8c <am_util_stdio_vsprintf+0x164>
    cada:	e8df f012 	tbh	[pc, r2, lsl #1]
    cade:	005e      	.short	0x005e
    cae0:	00570057 	.word	0x00570057
    cae4:	00570057 	.word	0x00570057
    cae8:	00570057 	.word	0x00570057
    caec:	00570057 	.word	0x00570057
    caf0:	00570057 	.word	0x00570057
    caf4:	00570057 	.word	0x00570057
    caf8:	00570057 	.word	0x00570057
    cafc:	00570057 	.word	0x00570057
    cb00:	01fe0057 	.word	0x01fe0057
    cb04:	00570057 	.word	0x00570057
    cb08:	00570057 	.word	0x00570057
    cb0c:	00570057 	.word	0x00570057
    cb10:	00570057 	.word	0x00570057
    cb14:	00570057 	.word	0x00570057
    cb18:	009700e9 	.word	0x009700e9
    cb1c:	005e0057 	.word	0x005e0057
    cb20:	00570057 	.word	0x00570057
    cb24:	00570097 	.word	0x00570097
    cb28:	00570057 	.word	0x00570057
    cb2c:	00570057 	.word	0x00570057
    cb30:	00570057 	.word	0x00570057
    cb34:	00570057 	.word	0x00570057
    cb38:	00570130 	.word	0x00570130
    cb3c:	005700f5 	.word	0x005700f5
    cb40:	03330057 	.word	0x03330057
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb44:	4aa4      	ldr	r2, [pc, #656]	; (cdd8 <am_util_stdio_vsprintf+0x3b0>)
    cb46:	7812      	ldrb	r2, [r2, #0]
    cb48:	2a00      	cmp	r2, #0
    cb4a:	f43f af7c 	beq.w	ca46 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    cb4e:	230d      	movs	r3, #13
    cb50:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    cb54:	f10a 0a01 	add.w	sl, sl, #1
    cb58:	780b      	ldrb	r3, [r1, #0]
    cb5a:	e774      	b.n	ca46 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb5c:	469a      	mov	sl, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    cb5e:	b10d      	cbz	r5, cb64 <am_util_stdio_vsprintf+0x13c>
    {
        *pcBuf = 0x0;
    cb60:	2300      	movs	r3, #0
    cb62:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    cb64:	4650      	mov	r0, sl
    cb66:	b009      	add	sp, #36	; 0x24
    cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pcStr++;
    cb6c:	7873      	ldrb	r3, [r6, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        uCnt++;
    cb72:	2001      	movs	r0, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb74:	2a09      	cmp	r2, #9
        bNeg = true;
    cb76:	4607      	mov	r7, r0
        pcStr++;
    cb78:	eb06 0400 	add.w	r4, r6, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb7c:	f67f af7f 	bls.w	ca7e <am_util_stdio_vsprintf+0x56>
    cb80:	2100      	movs	r1, #0
    cb82:	e791      	b.n	caa8 <am_util_stdio_vsprintf+0x80>
            ui8PadChar = '0';
    cb84:	4698      	mov	r8, r3
            ++pcFmt;
    cb86:	1c8e      	adds	r6, r1, #2
    cb88:	788b      	ldrb	r3, [r1, #2]
    cb8a:	e76e      	b.n	ca6a <am_util_stdio_vsprintf+0x42>
                if ( pcBuf )
    cb8c:	b10d      	cbz	r5, cb92 <am_util_stdio_vsprintf+0x16a>
                    *pcBuf++ = *pcFmt;
    cb8e:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    cb92:	f10a 0a01 	add.w	sl, sl, #1
        ++pcFmt;
    cb96:	1c61      	adds	r1, r4, #1
    cb98:	e75a      	b.n	ca50 <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
    cb9a:	2d00      	cmp	r5, #0
    cb9c:	d0fb      	beq.n	cb96 <am_util_stdio_vsprintf+0x16e>
                    float fValue = va_arg(pArgs, double);
    cb9e:	f10b 0b07 	add.w	fp, fp, #7
    cba2:	f02b 0b07 	bic.w	fp, fp, #7
    cba6:	e8fb 0102 	ldrd	r0, r1, [fp], #8
    cbaa:	f7ff fc65 	bl	c478 <__aeabi_d2f>
    cbae:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    cbb2:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    cbb6:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    cbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    cbbc:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    cbbe:	f000 833d 	beq.w	d23c <am_util_stdio_vsprintf+0x814>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cbc2:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    cbc6:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    cbca:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    cbcc:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbce:	f3c0 0016 	ubfx	r0, r0, #0, #23
    cbd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    cbd6:	f300 8353 	bgt.w	d280 <am_util_stdio_vsprintf+0x858>
    else if (iExp2 < -23)
    cbda:	f112 0f17 	cmn.w	r2, #23
    cbde:	f2c0 834b 	blt.w	d278 <am_util_stdio_vsprintf+0x850>
    else if (iExp2 >= 23)
    cbe2:	2a16      	cmp	r2, #22
    cbe4:	f340 8262 	ble.w	d0ac <am_util_stdio_vsprintf+0x684>
        i32IntPart = i32Significand << (iExp2 - 23);
    cbe8:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    cbea:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    cbec:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    cbf0:	f2c0 82bc 	blt.w	d16c <am_util_stdio_vsprintf+0x744>
    cbf4:	462b      	mov	r3, r5
    i32FracPart = 0;
    cbf6:	2700      	movs	r7, #0
    if (i32IntPart == 0)
    cbf8:	2800      	cmp	r0, #0
    cbfa:	f000 82b2 	beq.w	d162 <am_util_stdio_vsprintf+0x73a>
            *pcBuf++ = '-';
    cbfe:	4698      	mov	r8, r3
    cc00:	bfde      	ittt	le
    cc02:	232d      	movle	r3, #45	; 0x2d
    cc04:	f808 3b01 	strble.w	r3, [r8], #1
            uint64_to_str(-i32IntPart, pcBuf);
    cc08:	4240      	negle	r0, r0
    cc0a:	e25e      	b.n	d0ca <am_util_stdio_vsprintf+0x6a2>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc0c:	f85b 6b04 	ldr.w	r6, [fp], #4
    cc10:	17f7      	asrs	r7, r6, #31
                if ( i64Val < 0 )
    cc12:	2e00      	cmp	r6, #0
    cc14:	f177 0300 	sbcs.w	r3, r7, #0
    cc18:	f2c0 8150 	blt.w	cebc <am_util_stdio_vsprintf+0x494>
                    ui64Val = i64Val;
    cc1c:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    cc20:	2900      	cmp	r1, #0
    cc22:	d05a      	beq.n	ccda <am_util_stdio_vsprintf+0x2b2>
    int iNDigits = ui64Val ? 0 : 1;
    cc24:	4633      	mov	r3, r6
    cc26:	4630      	mov	r0, r6
    cc28:	433b      	orrs	r3, r7
    cc2a:	4639      	mov	r1, r7
    cc2c:	bf0c      	ite	eq
    cc2e:	2601      	moveq	r6, #1
    cc30:	2600      	movne	r6, #0
    while ( ui64Val )
    cc32:	ea50 0301 	orrs.w	r3, r0, r1
    cc36:	f000 8336 	beq.w	d2a6 <am_util_stdio_vsprintf+0x87e>
                    bNeg = false;
    cc3a:	2300      	movs	r3, #0
    cc3c:	461f      	mov	r7, r3
    cc3e:	e9dd 0100 	ldrd	r0, r1, [sp]
        ui64Val = divu64_10(ui64Val);
    cc42:	f7ff fdf3 	bl	c82c <divu64_10>
    while ( ui64Val )
    cc46:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cc4a:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cc4e:	d1f8      	bne.n	cc42 <am_util_stdio_vsprintf+0x21a>
                    iWidth -= ndigits_in_i64(ui64Val);
    cc50:	eba9 0906 	sub.w	r9, r9, r6
                    if ( bNeg )
    cc54:	b12f      	cbz	r7, cc62 <am_util_stdio_vsprintf+0x23a>
                        if ( ui8PadChar == '0' )
    cc56:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    cc5a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                        if ( ui8PadChar == '0' )
    cc5e:	f000 8314 	beq.w	d28a <am_util_stdio_vsprintf+0x862>
    if ( i32NumChars <= 0 )
    cc62:	f1b9 0f00 	cmp.w	r9, #0
    cc66:	f340 8305 	ble.w	d274 <am_util_stdio_vsprintf+0x84c>
    while ( i32NumChars-- )
    cc6a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    int32_t i32Cnt = 0;
    cc6e:	2100      	movs	r1, #0
    cc70:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    cc72:	4632      	mov	r2, r6
        if ( pcBuf )
    cc74:	2e00      	cmp	r6, #0
    cc76:	f000 829a 	beq.w	d1ae <am_util_stdio_vsprintf+0x786>
            *pcBuf++ = cPadChar;
    cc7a:	f802 8b01 	strb.w	r8, [r2], #1
    cc7e:	4618      	mov	r0, r3
    cc80:	4616      	mov	r6, r2
        i32Cnt++;
    cc82:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cc84:	1e43      	subs	r3, r0, #1
    cc86:	2800      	cmp	r0, #0
    cc88:	d1f3      	bne.n	cc72 <am_util_stdio_vsprintf+0x24a>
    cc8a:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    cc8c:	2d00      	cmp	r5, #0
    cc8e:	f000 82dd 	beq.w	d24c <am_util_stdio_vsprintf+0x824>
    cc92:	440d      	add	r5, r1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cc94:	b11f      	cbz	r7, cc9e <am_util_stdio_vsprintf+0x276>
    cc96:	f1b8 0f20 	cmp.w	r8, #32
    cc9a:	f000 8118 	beq.w	cece <am_util_stdio_vsprintf+0x4a6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc9e:	e9dd 0100 	ldrd	r0, r1, [sp]
    cca2:	462a      	mov	r2, r5
    cca4:	f7ff fe22 	bl	c8ec <uint64_to_str>
                    pcBuf += iVal;
    cca8:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    ccaa:	4482      	add	sl, r0
        ++pcFmt;
    ccac:	1c61      	adds	r1, r4, #1
    ccae:	e6cf      	b.n	ca50 <am_util_stdio_vsprintf+0x28>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ccb0:	f10b 0304 	add.w	r3, fp, #4
                if ( pcBuf )
    ccb4:	b11d      	cbz	r5, ccbe <am_util_stdio_vsprintf+0x296>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ccb6:	f8db 2000 	ldr.w	r2, [fp]
    ccba:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    ccbe:	f10a 0a01 	add.w	sl, sl, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ccc2:	469b      	mov	fp, r3
        ++pcFmt;
    ccc4:	1c61      	adds	r1, r4, #1
    ccc6:	e6c3      	b.n	ca50 <am_util_stdio_vsprintf+0x28>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ccc8:	f85b 6b04 	ldr.w	r6, [fp], #4
    cccc:	2300      	movs	r3, #0
    ccce:	4632      	mov	r2, r6
    ccd0:	e9cd 2300 	strd	r2, r3, [sp]
                if ( iWidth )
    ccd4:	2900      	cmp	r1, #0
    ccd6:	f040 81b4 	bne.w	d042 <am_util_stdio_vsprintf+0x61a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ccda:	e9dd 0100 	ldrd	r0, r1, [sp]
    ccde:	462a      	mov	r2, r5
    cce0:	f7ff fe04 	bl	c8ec <uint64_to_str>
                if ( pcBuf )
    cce4:	2d00      	cmp	r5, #0
    cce6:	d1df      	bne.n	cca8 <am_util_stdio_vsprintf+0x280>
                if ( pcBuf )
    cce8:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    ccea:	4482      	add	sl, r0
                break;
    ccec:	e7de      	b.n	ccac <am_util_stdio_vsprintf+0x284>
    if ( *pcStr == '-')
    ccee:	7862      	ldrb	r2, [r4, #1]
    ccf0:	2a2d      	cmp	r2, #45	; 0x2d
            ++pcFmt;
    ccf2:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    ccf6:	f000 8197 	beq.w	d028 <am_util_stdio_vsprintf+0x600>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    ccfe:	2b09      	cmp	r3, #9
    cd00:	f200 82af 	bhi.w	d262 <am_util_stdio_vsprintf+0x83a>
    uint32_t ui32Val = 0, uCnt = 0;
    cd04:	2300      	movs	r3, #0
    bool bNeg = false;
    cd06:	469e      	mov	lr, r3
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd08:	4664      	mov	r4, ip
    cd0a:	3301      	adds	r3, #1
    cd0c:	1b1e      	subs	r6, r3, r4
    bool bNeg = false;
    cd0e:	2300      	movs	r3, #0
        ui32Val *= 10;
    cd10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    cd14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    cd18:	19a7      	adds	r7, r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd1a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    cd1e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    cd22:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    cd24:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd28:	d9f2      	bls.n	cd10 <am_util_stdio_vsprintf+0x2e8>
    return bNeg ? -ui32Val : ui32Val;
    cd2a:	f1be 0f00 	cmp.w	lr, #0
    cd2e:	d000      	beq.n	cd32 <am_util_stdio_vsprintf+0x30a>
    cd30:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cd32:	461e      	mov	r6, r3
            pcFmt += ui32NumChars;
    cd34:	eb0c 0407 	add.w	r4, ip, r7
    cd38:	f81c 3007 	ldrb.w	r3, [ip, r7]
    cd3c:	e6c2      	b.n	cac4 <am_util_stdio_vsprintf+0x9c>
        switch ( *pcFmt )
    cd3e:	464a      	mov	r2, r9
                pcStr = va_arg(pArgs, char *);
    cd40:	f85b 3b04 	ldr.w	r3, [fp], #4
    if ( !pcBuf )
    cd44:	2b00      	cmp	r3, #0
    cd46:	f000 81e0 	beq.w	d10a <am_util_stdio_vsprintf+0x6e2>
    while ( *pcBuf++ )
    cd4a:	461e      	mov	r6, r3
    cd4c:	f816 1b01 	ldrb.w	r1, [r6], #1
    cd50:	2900      	cmp	r1, #0
    cd52:	f000 8289 	beq.w	d268 <am_util_stdio_vsprintf+0x840>
    uint32_t ui32RetVal = 0;
    cd56:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    cd58:	f816 0b01 	ldrb.w	r0, [r6], #1
        ui32RetVal++;
    cd5c:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    cd5e:	2800      	cmp	r0, #0
    cd60:	d1fa      	bne.n	cd58 <am_util_stdio_vsprintf+0x330>
                if ( iWidth > 0 )
    cd62:	2a00      	cmp	r2, #0
    cd64:	dd02      	ble.n	cd6c <am_util_stdio_vsprintf+0x344>
                    if ( ui32strlen < iWidth )
    cd66:	42ba      	cmp	r2, r7
    cd68:	f200 81ee 	bhi.w	d148 <am_util_stdio_vsprintf+0x720>
    cd6c:	f1c3 0c01 	rsb	ip, r3, #1
                while (*pcStr != 0x0)
    cd70:	46d6      	mov	lr, sl
    cd72:	4628      	mov	r0, r5
    cd74:	eb0c 060a 	add.w	r6, ip, sl
    cd78:	e000      	b.n	cd7c <am_util_stdio_vsprintf+0x354>
                        *pcBuf++ = *pcStr;
    cd7a:	4628      	mov	r0, r5
    cd7c:	eb06 0a03 	add.w	sl, r6, r3
                    if ( pcBuf )
    cd80:	2d00      	cmp	r5, #0
    cd82:	f000 8102 	beq.w	cf8a <am_util_stdio_vsprintf+0x562>
                        *pcBuf++ = *pcStr;
    cd86:	7001      	strb	r1, [r0, #0]
                while (*pcStr != 0x0)
    cd88:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    cd8c:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    cd8e:	2900      	cmp	r1, #0
    cd90:	d1f3      	bne.n	cd7a <am_util_stdio_vsprintf+0x352>
                if ( iWidth )
    cd92:	2a00      	cmp	r2, #0
    cd94:	f43f aeff 	beq.w	cb96 <am_util_stdio_vsprintf+0x16e>
                    iWidth = -iWidth;
    cd98:	f1c2 0900 	rsb	r9, r2, #0
                    if ( ui32strlen < iWidth )
    cd9c:	45b9      	cmp	r9, r7
    cd9e:	f67f aefa 	bls.w	cb96 <am_util_stdio_vsprintf+0x16e>
                        iWidth -= ui32strlen;
    cda2:	eba9 0307 	sub.w	r3, r9, r7
    if ( i32NumChars <= 0 )
    cda6:	2b00      	cmp	r3, #0
    cda8:	f340 8268 	ble.w	d27c <am_util_stdio_vsprintf+0x854>
    while ( i32NumChars-- )
    cdac:	3b01      	subs	r3, #1
    cdae:	462e      	mov	r6, r5
    int32_t i32Cnt = 0;
    cdb0:	2100      	movs	r1, #0
            *pcBuf++ = cPadChar;
    cdb2:	4632      	mov	r2, r6
        if ( pcBuf )
    cdb4:	2e00      	cmp	r6, #0
    cdb6:	f000 8130 	beq.w	d01a <am_util_stdio_vsprintf+0x5f2>
            *pcBuf++ = cPadChar;
    cdba:	f802 8b01 	strb.w	r8, [r2], #1
    cdbe:	4618      	mov	r0, r3
    cdc0:	4616      	mov	r6, r2
        i32Cnt++;
    cdc2:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cdc4:	1e43      	subs	r3, r0, #1
    cdc6:	2800      	cmp	r0, #0
    cdc8:	d1f3      	bne.n	cdb2 <am_util_stdio_vsprintf+0x38a>
    cdca:	448a      	add	sl, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cdcc:	2d00      	cmp	r5, #0
    cdce:	f43f aee2 	beq.w	cb96 <am_util_stdio_vsprintf+0x16e>
    cdd2:	440d      	add	r5, r1
                        iWidth = 0;
    cdd4:	e6df      	b.n	cb96 <am_util_stdio_vsprintf+0x16e>
    cdd6:	bf00      	nop
    cdd8:	10001064 	.word	0x10001064
        switch ( *pcFmt )
    cddc:	78a3      	ldrb	r3, [r4, #2]
    cdde:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
                pcFmt++;
    cde2:	3402      	adds	r4, #2
        switch ( *pcFmt )
    cde4:	2a32      	cmp	r2, #50	; 0x32
    cde6:	f63f aed1 	bhi.w	cb8c <am_util_stdio_vsprintf+0x164>
    cdea:	a001      	add	r0, pc, #4	; (adr r0, cdf0 <am_util_stdio_vsprintf+0x3c8>)
    cdec:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    cdf0:	0000cb9b 	.word	0x0000cb9b
    cdf4:	0000cb8d 	.word	0x0000cb8d
    cdf8:	0000cb8d 	.word	0x0000cb8d
    cdfc:	0000cb8d 	.word	0x0000cb8d
    ce00:	0000cb8d 	.word	0x0000cb8d
    ce04:	0000cb8d 	.word	0x0000cb8d
    ce08:	0000cb8d 	.word	0x0000cb8d
    ce0c:	0000cb8d 	.word	0x0000cb8d
    ce10:	0000cb8d 	.word	0x0000cb8d
    ce14:	0000cb8d 	.word	0x0000cb8d
    ce18:	0000cb8d 	.word	0x0000cb8d
    ce1c:	0000cb8d 	.word	0x0000cb8d
    ce20:	0000cb8d 	.word	0x0000cb8d
    ce24:	0000cb8d 	.word	0x0000cb8d
    ce28:	0000cb8d 	.word	0x0000cb8d
    ce2c:	0000cb8d 	.word	0x0000cb8d
    ce30:	0000cb8d 	.word	0x0000cb8d
    ce34:	0000cb8d 	.word	0x0000cb8d
    ce38:	0000d18d 	.word	0x0000d18d
    ce3c:	0000cb8d 	.word	0x0000cb8d
    ce40:	0000cb8d 	.word	0x0000cb8d
    ce44:	0000cb8d 	.word	0x0000cb8d
    ce48:	0000cb8d 	.word	0x0000cb8d
    ce4c:	0000cb8d 	.word	0x0000cb8d
    ce50:	0000cb8d 	.word	0x0000cb8d
    ce54:	0000cb8d 	.word	0x0000cb8d
    ce58:	0000cb8d 	.word	0x0000cb8d
    ce5c:	0000cb8d 	.word	0x0000cb8d
    ce60:	0000cb8d 	.word	0x0000cb8d
    ce64:	0000ccb1 	.word	0x0000ccb1
    ce68:	0000cf07 	.word	0x0000cf07
    ce6c:	0000cb8d 	.word	0x0000cb8d
    ce70:	0000cb9b 	.word	0x0000cb9b
    ce74:	0000cb8d 	.word	0x0000cb8d
    ce78:	0000cb8d 	.word	0x0000cb8d
    ce7c:	0000cf07 	.word	0x0000cf07
    ce80:	0000cb8d 	.word	0x0000cb8d
    ce84:	0000cb8d 	.word	0x0000cb8d
    ce88:	0000cb8d 	.word	0x0000cb8d
    ce8c:	0000cb8d 	.word	0x0000cb8d
    ce90:	0000cb8d 	.word	0x0000cb8d
    ce94:	0000cb8d 	.word	0x0000cb8d
    ce98:	0000cb8d 	.word	0x0000cb8d
    ce9c:	0000cb8d 	.word	0x0000cb8d
    cea0:	0000cb8d 	.word	0x0000cb8d
    cea4:	0000cd3f 	.word	0x0000cd3f
    cea8:	0000cb8d 	.word	0x0000cb8d
    ceac:	0000cf15 	.word	0x0000cf15
    ceb0:	0000cb8d 	.word	0x0000cb8d
    ceb4:	0000cb8d 	.word	0x0000cb8d
    ceb8:	0000d19d 	.word	0x0000d19d
                    ui64Val = -i64Val;          // Get absolute value
    cebc:	4276      	negs	r6, r6
    cebe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    cec2:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    cec6:	2900      	cmp	r1, #0
    cec8:	f040 81bc 	bne.w	d244 <am_util_stdio_vsprintf+0x81c>
                        if ( pcBuf )
    cecc:	b115      	cbz	r5, ced4 <am_util_stdio_vsprintf+0x4ac>
                            *pcBuf++ = '-';
    cece:	232d      	movs	r3, #45	; 0x2d
    ced0:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    ced4:	f10a 0a01 	add.w	sl, sl, #1
    ced8:	e6ff      	b.n	ccda <am_util_stdio_vsprintf+0x2b2>
        bLower = bLongLong = false;
    ceda:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cedc:	f85b 2b04 	ldr.w	r2, [fp], #4
    cee0:	2300      	movs	r3, #0
                if ( iWidth )
    cee2:	2900      	cmp	r1, #0
    cee4:	d15d      	bne.n	cfa2 <am_util_stdio_vsprintf+0x57a>
    if ( ui64Val == 0 )
    cee6:	ea52 0103 	orrs.w	r1, r2, r3
    ceea:	d120      	bne.n	cf2e <am_util_stdio_vsprintf+0x506>
    if (pcBuf)
    ceec:	2d00      	cmp	r5, #0
    ceee:	f000 80a6 	beq.w	d03e <am_util_stdio_vsprintf+0x616>
            *pcBuf++ = tbuf[ix];
    cef2:	462b      	mov	r3, r5
    cef4:	2230      	movs	r2, #48	; 0x30
    cef6:	f803 2b01 	strb.w	r2, [r3], #1
    cefa:	2001      	movs	r0, #1
    cefc:	461d      	mov	r5, r3
        *pcBuf = 0;
    cefe:	2200      	movs	r2, #0
    cf00:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    cf02:	4482      	add	sl, r0
                break;
    cf04:	e6d2      	b.n	ccac <am_util_stdio_vsprintf+0x284>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf06:	f10b 0b07 	add.w	fp, fp, #7
    cf0a:	f02b 0b07 	bic.w	fp, fp, #7
    cf0e:	e8fb 6702 	ldrd	r6, r7, [fp], #8
    cf12:	e67e      	b.n	cc12 <am_util_stdio_vsprintf+0x1ea>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf14:	f10b 0b07 	add.w	fp, fp, #7
    cf18:	f02b 0b07 	bic.w	fp, fp, #7
    cf1c:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    cf20:	e9cd 2300 	strd	r2, r3, [sp]
    cf24:	e6d6      	b.n	ccd4 <am_util_stdio_vsprintf+0x2ac>
    if ( ui64Val == 0 )
    cf26:	ea52 0103 	orrs.w	r1, r2, r3
    cf2a:	f000 8088 	beq.w	d03e <am_util_stdio_vsprintf+0x616>
    cf2e:	2f00      	cmp	r7, #0
    cf30:	f10d 0c0c 	add.w	ip, sp, #12
    cf34:	bf14      	ite	ne
    cf36:	f04f 0e27 	movne.w	lr, #39	; 0x27
    cf3a:	f04f 0e07 	moveq.w	lr, #7
    cf3e:	4667      	mov	r7, ip
    int iNumDig, ix = 0;
    cf40:	2000      	movs	r0, #0
        cCh = ui64Val & 0xf;
    cf42:	f002 010f 	and.w	r1, r2, #15
        if ( cCh > 9 )
    cf46:	2909      	cmp	r1, #9
        ui64Val >>= 4;
    cf48:	ea4f 1612 	mov.w	r6, r2, lsr #4
    cf4c:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
            cCh += bLower ? 0x27 : 0x7;
    cf50:	bf88      	it	hi
    cf52:	4471      	addhi	r1, lr
        ui64Val >>= 4;
    cf54:	ea4f 1813 	mov.w	r8, r3, lsr #4
        tbuf[ix++] = cCh + '0';
    cf58:	3130      	adds	r1, #48	; 0x30
        ui64Val >>= 4;
    cf5a:	4632      	mov	r2, r6
    cf5c:	4643      	mov	r3, r8
        tbuf[ix++] = cCh + '0';
    cf5e:	f807 1b01 	strb.w	r1, [r7], #1
    while ( ui64Val )
    cf62:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cf66:	f100 0001 	add.w	r0, r0, #1
    while ( ui64Val )
    cf6a:	d1ea      	bne.n	cf42 <am_util_stdio_vsprintf+0x51a>
    if (pcBuf)
    cf6c:	2d00      	cmp	r5, #0
    cf6e:	f43f aebb 	beq.w	cce8 <am_util_stdio_vsprintf+0x2c0>
    cf72:	eb0c 0300 	add.w	r3, ip, r0
    cf76:	1e6a      	subs	r2, r5, #1
            *pcBuf++ = tbuf[ix];
    cf78:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cf7c:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cf80:	4563      	cmp	r3, ip
    cf82:	d1f9      	bne.n	cf78 <am_util_stdio_vsprintf+0x550>
    cf84:	182b      	adds	r3, r5, r0
    cf86:	461d      	mov	r5, r3
    cf88:	e7b9      	b.n	cefe <am_util_stdio_vsprintf+0x4d6>
    cf8a:	eb0c 010e 	add.w	r1, ip, lr
                    ++ui32CharCnt;
    cf8e:	eb01 0a03 	add.w	sl, r1, r3
                while (*pcStr != 0x0)
    cf92:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    cf96:	2800      	cmp	r0, #0
    cf98:	d1f9      	bne.n	cf8e <am_util_stdio_vsprintf+0x566>
                if ( iWidth )
    cf9a:	2a00      	cmp	r2, #0
    cf9c:	f43f adfb 	beq.w	cb96 <am_util_stdio_vsprintf+0x16e>
    cfa0:	e6fa      	b.n	cd98 <am_util_stdio_vsprintf+0x370>
    int iDigits = ui64Val ? 0 : 1;
    cfa2:	ea52 0103 	orrs.w	r1, r2, r3
    cfa6:	bf0c      	ite	eq
    cfa8:	2601      	moveq	r6, #1
    cfaa:	2600      	movne	r6, #0
    while ( ui64Val )
    cfac:	ea52 0103 	orrs.w	r1, r2, r3
    cfb0:	d00e      	beq.n	cfd0 <am_util_stdio_vsprintf+0x5a8>
    cfb2:	4610      	mov	r0, r2
    cfb4:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cfb6:	ea4f 1c10 	mov.w	ip, r0, lsr #4
    cfba:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
    cfbe:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cfc2:	4660      	mov	r0, ip
    cfc4:	4671      	mov	r1, lr
    while ( ui64Val )
    cfc6:	ea50 0c01 	orrs.w	ip, r0, r1
        ++iDigits;
    cfca:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cfce:	d1f2      	bne.n	cfb6 <am_util_stdio_vsprintf+0x58e>
                    iWidth -= ndigits_in_hex(ui64Val);
    cfd0:	eba9 0106 	sub.w	r1, r9, r6
    if ( i32NumChars <= 0 )
    cfd4:	2900      	cmp	r1, #0
    cfd6:	f340 812f 	ble.w	d238 <am_util_stdio_vsprintf+0x810>
    while ( i32NumChars-- )
    cfda:	3901      	subs	r1, #1
    cfdc:	46ae      	mov	lr, r5
    int32_t i32Cnt = 0;
    cfde:	46a4      	mov	ip, r4
    cfe0:	2600      	movs	r6, #0
    cfe2:	462c      	mov	r4, r5
    cfe4:	460d      	mov	r5, r1
            *pcBuf++ = cPadChar;
    cfe6:	4620      	mov	r0, r4
        if ( pcBuf )
    cfe8:	b194      	cbz	r4, d010 <am_util_stdio_vsprintf+0x5e8>
            *pcBuf++ = cPadChar;
    cfea:	f800 8b01 	strb.w	r8, [r0], #1
    cfee:	4629      	mov	r1, r5
    cff0:	4604      	mov	r4, r0
        i32Cnt++;
    cff2:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cff4:	1e4d      	subs	r5, r1, #1
    cff6:	2900      	cmp	r1, #0
    cff8:	d1f5      	bne.n	cfe6 <am_util_stdio_vsprintf+0x5be>
    cffa:	4664      	mov	r4, ip
    cffc:	4675      	mov	r5, lr
    cffe:	44b2      	add	sl, r6
                    pcBuf += pcBuf ? iWidth : 0;
    d000:	2d00      	cmp	r5, #0
    d002:	d090      	beq.n	cf26 <am_util_stdio_vsprintf+0x4fe>
    if ( ui64Val == 0 )
    d004:	ea52 0103 	orrs.w	r1, r2, r3
    d008:	4435      	add	r5, r6
    d00a:	f43f af72 	beq.w	cef2 <am_util_stdio_vsprintf+0x4ca>
    d00e:	e78e      	b.n	cf2e <am_util_stdio_vsprintf+0x506>
        i32Cnt++;
    d010:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    d012:	1e69      	subs	r1, r5, #1
    d014:	2d00      	cmp	r5, #0
    d016:	d1ec      	bne.n	cff2 <am_util_stdio_vsprintf+0x5ca>
    d018:	e7ef      	b.n	cffa <am_util_stdio_vsprintf+0x5d2>
        i32Cnt++;
    d01a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d01c:	1e58      	subs	r0, r3, #1
    d01e:	2b00      	cmp	r3, #0
    d020:	f47f aecf 	bne.w	cdc2 <am_util_stdio_vsprintf+0x39a>
    d024:	448a      	add	sl, r1
    d026:	e6d1      	b.n	cdcc <am_util_stdio_vsprintf+0x3a4>
        pcStr++;
    d028:	78a2      	ldrb	r2, [r4, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d02a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    d02e:	2b09      	cmp	r3, #9
        pcStr++;
    d030:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d034:	f200 8126 	bhi.w	d284 <am_util_stdio_vsprintf+0x85c>
        uCnt++;
    d038:	2301      	movs	r3, #1
        bNeg = true;
    d03a:	469e      	mov	lr, r3
    d03c:	e665      	b.n	cd0a <am_util_stdio_vsprintf+0x2e2>
    if ( ui64Val == 0 )
    d03e:	2001      	movs	r0, #1
    d040:	e652      	b.n	cce8 <am_util_stdio_vsprintf+0x2c0>
    int iNDigits = ui64Val ? 0 : 1;
    d042:	e9dd 0100 	ldrd	r0, r1, [sp]
    d046:	4603      	mov	r3, r0
    d048:	430b      	orrs	r3, r1
    d04a:	bf0c      	ite	eq
    d04c:	2601      	moveq	r6, #1
    d04e:	2600      	movne	r6, #0
    while ( ui64Val )
    d050:	ea50 0301 	orrs.w	r3, r0, r1
    d054:	d006      	beq.n	d064 <am_util_stdio_vsprintf+0x63c>
        ui64Val = divu64_10(ui64Val);
    d056:	f7ff fbe9 	bl	c82c <divu64_10>
    while ( ui64Val )
    d05a:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    d05e:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    d062:	d1f8      	bne.n	d056 <am_util_stdio_vsprintf+0x62e>
                    iWidth -= ndigits_in_u64(ui64Val);
    d064:	eba9 0306 	sub.w	r3, r9, r6
    if ( i32NumChars <= 0 )
    d068:	2b00      	cmp	r3, #0
    d06a:	f340 8101 	ble.w	d270 <am_util_stdio_vsprintf+0x848>
    while ( i32NumChars-- )
    d06e:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d070:	2100      	movs	r1, #0
    d072:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    d074:	4632      	mov	r2, r6
        if ( pcBuf )
    d076:	b19e      	cbz	r6, d0a0 <am_util_stdio_vsprintf+0x678>
            *pcBuf++ = cPadChar;
    d078:	f802 8b01 	strb.w	r8, [r2], #1
    d07c:	4618      	mov	r0, r3
    d07e:	4616      	mov	r6, r2
        i32Cnt++;
    d080:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d082:	1e43      	subs	r3, r0, #1
    d084:	2800      	cmp	r0, #0
    d086:	d1f5      	bne.n	d074 <am_util_stdio_vsprintf+0x64c>
    d088:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    d08a:	2d00      	cmp	r5, #0
    d08c:	f000 80e3 	beq.w	d256 <am_util_stdio_vsprintf+0x82e>
    d090:	440d      	add	r5, r1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d092:	462a      	mov	r2, r5
    d094:	e9dd 0100 	ldrd	r0, r1, [sp]
    d098:	f7ff fc28 	bl	c8ec <uint64_to_str>
                    pcBuf += iVal;
    d09c:	4405      	add	r5, r0
    d09e:	e604      	b.n	ccaa <am_util_stdio_vsprintf+0x282>
        i32Cnt++;
    d0a0:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d0a2:	1e58      	subs	r0, r3, #1
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d1eb      	bne.n	d080 <am_util_stdio_vsprintf+0x658>
    d0a8:	448a      	add	sl, r1
    d0aa:	e7ee      	b.n	d08a <am_util_stdio_vsprintf+0x662>
    else if (iExp2 >= 0)
    d0ac:	2a00      	cmp	r2, #0
    d0ae:	db4f      	blt.n	d150 <am_util_stdio_vsprintf+0x728>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d0b0:	f1a1 077e 	sub.w	r7, r1, #126	; 0x7e
    d0b4:	fa00 f707 	lsl.w	r7, r0, r7
        i32IntPart = i32Significand >> (23 - iExp2);
    d0b8:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d0bc:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d0be:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d0c2:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d0c6:	db52      	blt.n	d16e <am_util_stdio_vsprintf+0x746>
    d0c8:	46a8      	mov	r8, r5
            uint64_to_str(-i32IntPart, pcBuf);
    d0ca:	4642      	mov	r2, r8
    d0cc:	17c1      	asrs	r1, r0, #31
    d0ce:	f7ff fc0d 	bl	c8ec <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d0d2:	f898 3000 	ldrb.w	r3, [r8]
    d0d6:	b11b      	cbz	r3, d0e0 <am_util_stdio_vsprintf+0x6b8>
    d0d8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d1fb      	bne.n	d0d8 <am_util_stdio_vsprintf+0x6b0>
    *pcBuf++ = '.';
    d0e0:	232e      	movs	r3, #46	; 0x2e
    d0e2:	f888 3000 	strb.w	r3, [r8]
    if (i32FracPart == 0)
    d0e6:	2f00      	cmp	r7, #0
    d0e8:	d168      	bne.n	d1bc <am_util_stdio_vsprintf+0x794>
        *pcBuf++ = '0';
    d0ea:	f108 0102 	add.w	r1, r8, #2
    d0ee:	2330      	movs	r3, #48	; 0x30
    d0f0:	1b4a      	subs	r2, r1, r5
    d0f2:	f888 3001 	strb.w	r3, [r8, #1]
    *pcBuf = 0x00;
    d0f6:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    d0f8:	429a      	cmp	r2, r3
    *pcBuf = 0x00;
    d0fa:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    d0fc:	f2c0 8094 	blt.w	d228 <am_util_stdio_vsprintf+0x800>
    d100:	4613      	mov	r3, r2
                    ui32CharCnt += iVal;
    d102:	449a      	add	sl, r3
                    pcBuf += iVal;
    d104:	441d      	add	r5, r3
        ++pcFmt;
    d106:	1c61      	adds	r1, r4, #1
    d108:	e4a2      	b.n	ca50 <am_util_stdio_vsprintf+0x28>
                if ( iWidth > 0 )
    d10a:	2a00      	cmp	r2, #0
    d10c:	dd34      	ble.n	d178 <am_util_stdio_vsprintf+0x750>
        return ui32RetVal;
    d10e:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    d110:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    int32_t i32Cnt = 0;
    d114:	2100      	movs	r1, #0
    while ( i32NumChars-- )
    d116:	462a      	mov	r2, r5
            *pcBuf++ = cPadChar;
    d118:	4610      	mov	r0, r2
        if ( pcBuf )
    d11a:	2a00      	cmp	r2, #0
    d11c:	d040      	beq.n	d1a0 <am_util_stdio_vsprintf+0x778>
            *pcBuf++ = cPadChar;
    d11e:	f800 8b01 	strb.w	r8, [r0], #1
    d122:	464e      	mov	r6, r9
    d124:	4602      	mov	r2, r0
        i32Cnt++;
    d126:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d128:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    d12c:	2e00      	cmp	r6, #0
    d12e:	d1f3      	bne.n	d118 <am_util_stdio_vsprintf+0x6f0>
    d130:	4608      	mov	r0, r1
    d132:	448a      	add	sl, r1
    d134:	7819      	ldrb	r1, [r3, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    d136:	b105      	cbz	r5, d13a <am_util_stdio_vsprintf+0x712>
    d138:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    d13a:	2900      	cmp	r1, #0
    d13c:	f43f ad2b 	beq.w	cb96 <am_util_stdio_vsprintf+0x16e>
                        iWidth = 0;
    d140:	2200      	movs	r2, #0
    d142:	e613      	b.n	cd6c <am_util_stdio_vsprintf+0x344>
        bLower = bLongLong = false;
    d144:	2701      	movs	r7, #1
    d146:	e6c9      	b.n	cedc <am_util_stdio_vsprintf+0x4b4>
    d148:	1bd2      	subs	r2, r2, r7
    if ( i32NumChars <= 0 )
    d14a:	2a00      	cmp	r2, #0
    d14c:	ddf3      	ble.n	d136 <am_util_stdio_vsprintf+0x70e>
    d14e:	e7df      	b.n	d110 <am_util_stdio_vsprintf+0x6e8>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d150:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d152:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d154:	fa40 f702 	asr.w	r7, r0, r2
        *pcBuf++ = '-';
    d158:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    d15a:	da02      	bge.n	d162 <am_util_stdio_vsprintf+0x73a>
        *pcBuf++ = '-';
    d15c:	222d      	movs	r2, #45	; 0x2d
    d15e:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    d162:	4698      	mov	r8, r3
    d164:	2330      	movs	r3, #48	; 0x30
    d166:	f808 3b01 	strb.w	r3, [r8], #1
    d16a:	e7b9      	b.n	d0e0 <am_util_stdio_vsprintf+0x6b8>
    i32FracPart = 0;
    d16c:	2700      	movs	r7, #0
        *pcBuf++ = '-';
    d16e:	462b      	mov	r3, r5
    d170:	222d      	movs	r2, #45	; 0x2d
    d172:	f803 2b01 	strb.w	r2, [r3], #1
    d176:	e53f      	b.n	cbf8 <am_util_stdio_vsprintf+0x1d0>
    d178:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    d17a:	461f      	mov	r7, r3
    d17c:	2900      	cmp	r1, #0
    d17e:	f47f adf5 	bne.w	cd6c <am_util_stdio_vsprintf+0x344>
    d182:	460f      	mov	r7, r1
                if ( iWidth )
    d184:	2a00      	cmp	r2, #0
    d186:	f43f ad06 	beq.w	cb96 <am_util_stdio_vsprintf+0x16e>
    d18a:	e605      	b.n	cd98 <am_util_stdio_vsprintf+0x370>
        bLower = bLongLong = false;
    d18c:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d18e:	f10b 0b07 	add.w	fp, fp, #7
    d192:	f02b 0b07 	bic.w	fp, fp, #7
    d196:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    d19a:	e6a2      	b.n	cee2 <am_util_stdio_vsprintf+0x4ba>
        switch ( *pcFmt )
    d19c:	2701      	movs	r7, #1
    d19e:	e7f6      	b.n	d18e <am_util_stdio_vsprintf+0x766>
        i32Cnt++;
    d1a0:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d1a2:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
    d1a6:	f1b9 0f00 	cmp.w	r9, #0
    d1aa:	d1bc      	bne.n	d126 <am_util_stdio_vsprintf+0x6fe>
    d1ac:	e7c0      	b.n	d130 <am_util_stdio_vsprintf+0x708>
        i32Cnt++;
    d1ae:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d1b0:	1e58      	subs	r0, r3, #1
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	f47f ad65 	bne.w	cc82 <am_util_stdio_vsprintf+0x25a>
    d1b8:	448a      	add	sl, r1
    d1ba:	e567      	b.n	cc8c <am_util_stdio_vsprintf+0x264>
    *pcBuf++ = '.';
    d1bc:	f108 0101 	add.w	r1, r8, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d1c0:	1b4a      	subs	r2, r1, r5
    d1c2:	f1c2 0313 	rsb	r3, r2, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d1c6:	42b3      	cmp	r3, r6
    d1c8:	bfa8      	it	ge
    d1ca:	4633      	movge	r3, r6
        for (jx = 0; jx < iMax; jx++)
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	dd10      	ble.n	d1f2 <am_util_stdio_vsprintf+0x7ca>
    d1d0:	1c5e      	adds	r6, r3, #1
    d1d2:	4446      	add	r6, r8
    *pcBuf++ = '.';
    d1d4:	4608      	mov	r0, r1
            i32FracPart *= 10;
    d1d6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d1da:	15fa      	asrs	r2, r7, #23
    d1dc:	3230      	adds	r2, #48	; 0x30
    d1de:	f800 2b01 	strb.w	r2, [r0], #1
            i32FracPart *= 10;
    d1e2:	007f      	lsls	r7, r7, #1
        for (jx = 0; jx < iMax; jx++)
    d1e4:	4286      	cmp	r6, r0
            i32FracPart &= 0x00FFFFFF;
    d1e6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d1ea:	d1f4      	bne.n	d1d6 <am_util_stdio_vsprintf+0x7ae>
    d1ec:	4419      	add	r1, r3
    d1ee:	4498      	add	r8, r3
    d1f0:	1b4a      	subs	r2, r1, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d1f2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d1f6:	f347 53c7 	sbfx	r3, r7, #23, #8
    d1fa:	2b04      	cmp	r3, #4
    d1fc:	f77f af7b 	ble.w	d0f6 <am_util_stdio_vsprintf+0x6ce>
            while ( pcBuftmp >= pcBufInitial )
    d200:	45a8      	cmp	r8, r5
    d202:	f4ff af78 	bcc.w	d0f6 <am_util_stdio_vsprintf+0x6ce>
    d206:	4643      	mov	r3, r8
                    *pcBuftmp = '0';
    d208:	2730      	movs	r7, #48	; 0x30
    d20a:	e003      	b.n	d214 <am_util_stdio_vsprintf+0x7ec>
    d20c:	705f      	strb	r7, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d20e:	429d      	cmp	r5, r3
    d210:	f63f af71 	bhi.w	d0f6 <am_util_stdio_vsprintf+0x6ce>
                    *pcBuftmp = '0';
    d214:	461e      	mov	r6, r3
                if ( *pcBuftmp == '.' )
    d216:	f813 0901 	ldrb.w	r0, [r3], #-1
    d21a:	282e      	cmp	r0, #46	; 0x2e
    d21c:	d0f7      	beq.n	d20e <am_util_stdio_vsprintf+0x7e6>
                else if ( *pcBuftmp == '9' )
    d21e:	2839      	cmp	r0, #57	; 0x39
    d220:	d0f4      	beq.n	d20c <am_util_stdio_vsprintf+0x7e4>
                    *pcBuftmp += 1;
    d222:	3001      	adds	r0, #1
    d224:	7030      	strb	r0, [r6, #0]
                    break;
    d226:	e766      	b.n	d0f6 <am_util_stdio_vsprintf+0x6ce>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d228:	1c53      	adds	r3, r2, #1
    d22a:	d025      	beq.n	d278 <am_util_stdio_vsprintf+0x850>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d22c:	3202      	adds	r2, #2
    d22e:	d027      	beq.n	d280 <am_util_stdio_vsprintf+0x858>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d230:	4b1f      	ldr	r3, [pc, #124]	; (d2b0 <am_util_stdio_vsprintf+0x888>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d232:	602b      	str	r3, [r5, #0]
    d234:	2303      	movs	r3, #3
    d236:	e764      	b.n	d102 <am_util_stdio_vsprintf+0x6da>
    d238:	2600      	movs	r6, #0
    d23a:	e6e1      	b.n	d000 <am_util_stdio_vsprintf+0x5d8>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d23c:	4b1d      	ldr	r3, [pc, #116]	; (d2b4 <am_util_stdio_vsprintf+0x88c>)
    d23e:	602b      	str	r3, [r5, #0]
    d240:	2303      	movs	r3, #3
    d242:	e75e      	b.n	d102 <am_util_stdio_vsprintf+0x6da>
                    bNeg = true;
    d244:	2301      	movs	r3, #1
    d246:	461f      	mov	r7, r3
    int iNDigits = ui64Val ? 0 : 1;
    d248:	2600      	movs	r6, #0
    d24a:	e4f8      	b.n	cc3e <am_util_stdio_vsprintf+0x216>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d24c:	b327      	cbz	r7, d298 <am_util_stdio_vsprintf+0x870>
    d24e:	f1b8 0f20 	cmp.w	r8, #32
    d252:	f43f ae3f 	beq.w	ced4 <am_util_stdio_vsprintf+0x4ac>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d256:	e9dd 0100 	ldrd	r0, r1, [sp]
    d25a:	462a      	mov	r2, r5
    d25c:	f7ff fb46 	bl	c8ec <uint64_to_str>
                if ( pcBuf )
    d260:	e542      	b.n	cce8 <am_util_stdio_vsprintf+0x2c0>
    uint32_t ui32Val = 0, uCnt = 0;
    d262:	2700      	movs	r7, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d264:	463b      	mov	r3, r7
    d266:	e564      	b.n	cd32 <am_util_stdio_vsprintf+0x30a>
                if ( iWidth > 0 )
    d268:	2a00      	cmp	r2, #0
    d26a:	dd8a      	ble.n	d182 <am_util_stdio_vsprintf+0x75a>
    uint32_t ui32RetVal = 0;
    d26c:	460f      	mov	r7, r1
    d26e:	e74f      	b.n	d110 <am_util_stdio_vsprintf+0x6e8>
    d270:	2100      	movs	r1, #0
    d272:	e70a      	b.n	d08a <am_util_stdio_vsprintf+0x662>
    d274:	2100      	movs	r1, #0
    d276:	e509      	b.n	cc8c <am_util_stdio_vsprintf+0x264>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d278:	4b0e      	ldr	r3, [pc, #56]	; (d2b4 <am_util_stdio_vsprintf+0x88c>)
    d27a:	e7da      	b.n	d232 <am_util_stdio_vsprintf+0x80a>
    d27c:	2100      	movs	r1, #0
    d27e:	e5a5      	b.n	cdcc <am_util_stdio_vsprintf+0x3a4>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d280:	4b0d      	ldr	r3, [pc, #52]	; (d2b8 <am_util_stdio_vsprintf+0x890>)
    d282:	e7d6      	b.n	d232 <am_util_stdio_vsprintf+0x80a>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d284:	2300      	movs	r3, #0
        uCnt++;
    d286:	2701      	movs	r7, #1
    d288:	e552      	b.n	cd30 <am_util_stdio_vsprintf+0x308>
                            if ( pcBuf )
    d28a:	b115      	cbz	r5, d292 <am_util_stdio_vsprintf+0x86a>
                                *pcBuf++ = '-';
    d28c:	232d      	movs	r3, #45	; 0x2d
    d28e:	f805 3b01 	strb.w	r3, [r5], #1
                            ++ui32CharCnt;
    d292:	f10a 0a01 	add.w	sl, sl, #1
    d296:	e4e4      	b.n	cc62 <am_util_stdio_vsprintf+0x23a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d298:	e9dd 0100 	ldrd	r0, r1, [sp]
    d29c:	462a      	mov	r2, r5
    d29e:	f7ff fb25 	bl	c8ec <uint64_to_str>
                ui32CharCnt += iVal;
    d2a2:	4482      	add	sl, r0
                break;
    d2a4:	e502      	b.n	ccac <am_util_stdio_vsprintf+0x284>
                    bNeg = false;
    d2a6:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    d2a8:	eba9 0906 	sub.w	r9, r9, r6
                    bNeg = false;
    d2ac:	461f      	mov	r7, r3
    d2ae:	e4d8      	b.n	cc62 <am_util_stdio_vsprintf+0x23a>
    d2b0:	003f2e3f 	.word	0x003f2e3f
    d2b4:	00302e30 	.word	0x00302e30
    d2b8:	00232e23 	.word	0x00232e23

0000d2bc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2bc:	b40f      	push	{r0, r1, r2, r3}
    d2be:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d2c0:	4d09      	ldr	r5, [pc, #36]	; (d2e8 <am_util_stdio_printf+0x2c>)
    d2c2:	682c      	ldr	r4, [r5, #0]
{
    d2c4:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d2c6:	b14c      	cbz	r4, d2dc <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2c8:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2ca:	9906      	ldr	r1, [sp, #24]
    d2cc:	4807      	ldr	r0, [pc, #28]	; (d2ec <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    d2ce:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2d0:	f7ff fbaa 	bl	ca28 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d2d4:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d2d6:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d2d8:	4804      	ldr	r0, [pc, #16]	; (d2ec <am_util_stdio_printf+0x30>)
    d2da:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d2dc:	4620      	mov	r0, r4
    d2de:	b003      	add	sp, #12
    d2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d2e4:	b004      	add	sp, #16
    d2e6:	4770      	bx	lr
    d2e8:	10001308 	.word	0x10001308
    d2ec:	10001068 	.word	0x10001068

0000d2f0 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d2f0:	4801      	ldr	r0, [pc, #4]	; (d2f8 <am_util_stdio_terminal_clear+0x8>)
    d2f2:	f7ff bfe3 	b.w	d2bc <am_util_stdio_printf>
    d2f6:	bf00      	nop
    d2f8:	000102f8 	.word	0x000102f8

0000d2fc <NMI_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2fc:	e7fe      	b.n	d2fc <NMI_Handler>
    d2fe:	bf00      	nop

0000d300 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d300:	e7fe      	b.n	d300 <DebugMon_Handler>
    d302:	bf00      	nop

0000d304 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d304:	4811      	ldr	r0, [pc, #68]	; (d34c <zero_loop+0x12>)
    d306:	4912      	ldr	r1, [pc, #72]	; (d350 <zero_loop+0x16>)
    d308:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d30a:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d30e:	4811      	ldr	r0, [pc, #68]	; (d354 <zero_loop+0x1a>)
    d310:	6801      	ldr	r1, [r0, #0]
    d312:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d316:	6001      	str	r1, [r0, #0]
    d318:	f3bf 8f4f 	dsb	sy
    d31c:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d320:	480d      	ldr	r0, [pc, #52]	; (d358 <zero_loop+0x1e>)
    d322:	490e      	ldr	r1, [pc, #56]	; (d35c <zero_loop+0x22>)
    d324:	4a0e      	ldr	r2, [pc, #56]	; (d360 <zero_loop+0x26>)

0000d326 <copy_loop>:
    d326:	f850 3b04 	ldr.w	r3, [r0], #4
    d32a:	f841 3b04 	str.w	r3, [r1], #4
    d32e:	4291      	cmp	r1, r2
    d330:	dbf9      	blt.n	d326 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d332:	480c      	ldr	r0, [pc, #48]	; (d364 <zero_loop+0x2a>)
    d334:	490c      	ldr	r1, [pc, #48]	; (d368 <zero_loop+0x2e>)
    d336:	f04f 0200 	mov.w	r2, #0

0000d33a <zero_loop>:
    d33a:	4288      	cmp	r0, r1
    d33c:	bfb8      	it	lt
    d33e:	f840 2b04 	strlt.w	r2, [r0], #4
    d342:	dbfa      	blt.n	d33a <zero_loop>
    main();
    d344:	f7ff f8e8 	bl	c518 <main>
    __asm("    bkpt     ");
    d348:	be00      	bkpt	0x0000
}
    d34a:	0000      	.short	0x0000
    d34c:	e000ed08 	.word	0xe000ed08
    d350:	0000c000 	.word	0x0000c000
    d354:	e000ed88 	.word	0xe000ed88
    d358:	00010974 	.word	0x00010974
    d35c:	10001000 	.word	0x10001000
    d360:	10001064 	.word	0x10001064
    d364:	10001064 	.word	0x10001064
    d368:	10004bd0 	.word	0x10004bd0

0000d36c <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d36c:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d36e:	2001      	movs	r0, #1
{
    d370:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d372:	f001 f8fd 	bl	e570 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d376:	4925      	ldr	r1, [pc, #148]	; (d40c <am_ctimer_isr+0xa0>)
    d378:	2000      	movs	r0, #0
    d37a:	f000 fbab 	bl	dad4 <am_hal_adc_initialize>
    d37e:	bb68      	cbnz	r0, d3dc <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d380:	4c22      	ldr	r4, [pc, #136]	; (d40c <am_ctimer_isr+0xa0>)
    d382:	2200      	movs	r2, #0
    d384:	6820      	ldr	r0, [r4, #0]
    d386:	4611      	mov	r1, r2
    d388:	f000 fd6e 	bl	de68 <am_hal_adc_power_control>
    d38c:	2800      	cmp	r0, #0
    d38e:	d139      	bne.n	d404 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d390:	4b1f      	ldr	r3, [pc, #124]	; (d410 <am_ctimer_isr+0xa4>)
    d392:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d394:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d396:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d398:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d39a:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d39e:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d3a0:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d3a4:	f000 fc06 	bl	dbb4 <am_hal_adc_configure>
    d3a8:	bb40      	cbnz	r0, d3fc <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d3aa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d3ae:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d3b0:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d3b2:	9500      	str	r5, [sp, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d3b4:	466a      	mov	r2, sp
    d3b6:	2100      	movs	r1, #0
    ADCSlotConfig.bEnabled        = true;
    d3b8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d3bc:	f000 fc32 	bl	dc24 <am_hal_adc_configure_slot>
    d3c0:	b9c0      	cbnz	r0, d3f4 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d3c2:	6820      	ldr	r0, [r4, #0]
    d3c4:	2101      	movs	r1, #1
    d3c6:	f000 fc9b 	bl	dd00 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d3ca:	6820      	ldr	r0, [r4, #0]
    d3cc:	f000 fc60 	bl	dc90 <am_hal_adc_enable>
    d3d0:	b940      	cbnz	r0, d3e4 <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d3d2:	6820      	ldr	r0, [r4, #0]
    d3d4:	f000 fd36 	bl	de44 <am_hal_adc_sw_trigger>
}
    d3d8:	b005      	add	sp, #20
    d3da:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d3dc:	480d      	ldr	r0, [pc, #52]	; (d414 <am_ctimer_isr+0xa8>)
    d3de:	f7ff ff6d 	bl	d2bc <am_util_stdio_printf>
    d3e2:	e7cd      	b.n	d380 <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d3e4:	480c      	ldr	r0, [pc, #48]	; (d418 <am_ctimer_isr+0xac>)
    d3e6:	f7ff ff69 	bl	d2bc <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d3ea:	6820      	ldr	r0, [r4, #0]
    d3ec:	f000 fd2a 	bl	de44 <am_hal_adc_sw_trigger>
}
    d3f0:	b005      	add	sp, #20
    d3f2:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d3f4:	4809      	ldr	r0, [pc, #36]	; (d41c <am_ctimer_isr+0xb0>)
    d3f6:	f7ff ff61 	bl	d2bc <am_util_stdio_printf>
    d3fa:	e7e2      	b.n	d3c2 <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d3fc:	4808      	ldr	r0, [pc, #32]	; (d420 <am_ctimer_isr+0xb4>)
    d3fe:	f7ff ff5d 	bl	d2bc <am_util_stdio_printf>
    d402:	e7d2      	b.n	d3aa <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d404:	4807      	ldr	r0, [pc, #28]	; (d424 <am_ctimer_isr+0xb8>)
    d406:	f7ff ff59 	bl	d2bc <am_util_stdio_printf>
    d40a:	e7c1      	b.n	d390 <am_ctimer_isr+0x24>
    d40c:	1000116c 	.word	0x1000116c
    d410:	00070001 	.word	0x00070001
    d414:	0001030c 	.word	0x0001030c
    d418:	000103ac 	.word	0x000103ac
    d41c:	00010384 	.word	0x00010384
    d420:	00010360 	.word	0x00010360
    d424:	00010340 	.word	0x00010340

0000d428 <am_adc_isr>:
{
    d428:	b510      	push	{r4, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d42a:	4c2a      	ldr	r4, [pc, #168]	; (d4d4 <am_adc_isr+0xac>)
{
    d42c:	b086      	sub	sp, #24
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d42e:	6820      	ldr	r0, [r4, #0]
    d430:	2200      	movs	r2, #0
    d432:	a902      	add	r1, sp, #8
    d434:	f000 fc7a 	bl	dd2c <am_hal_adc_interrupt_status>
    d438:	b9e8      	cbnz	r0, d476 <am_adc_isr+0x4e>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d43a:	9902      	ldr	r1, [sp, #8]
    d43c:	6820      	ldr	r0, [r4, #0]
    d43e:	f000 fc93 	bl	dd68 <am_hal_adc_interrupt_clear>
    d442:	bb08      	cbnz	r0, d488 <am_adc_isr+0x60>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d444:	9b02      	ldr	r3, [sp, #8]
    d446:	07db      	lsls	r3, r3, #31
    d448:	d424      	bmi.n	d494 <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d44a:	4b23      	ldr	r3, [pc, #140]	; (d4d8 <am_adc_isr+0xb0>)
    d44c:	9a04      	ldr	r2, [sp, #16]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d44e:	6820      	ldr	r0, [r4, #0]
    audioSample = Sample.ui32Sample;
    d450:	601a      	str	r2, [r3, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d452:	f000 fc3d 	bl	dcd0 <am_hal_adc_disable>
    d456:	2800      	cmp	r0, #0
    d458:	d137      	bne.n	d4ca <am_adc_isr+0xa2>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d45a:	200a      	movs	r0, #10
    d45c:	f002 f8ca 	bl	f5f4 <am_hal_pwrctrl_periph_disable>
    d460:	2800      	cmp	r0, #0
    d462:	d12e      	bne.n	d4c2 <am_adc_isr+0x9a>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d464:	6820      	ldr	r0, [r4, #0]
    d466:	f000 fb85 	bl	db74 <am_hal_adc_deinitialize>
    d46a:	bb10      	cbnz	r0, d4b2 <am_adc_isr+0x8a>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d46c:	6820      	ldr	r0, [r4, #0]
    d46e:	f000 fce9 	bl	de44 <am_hal_adc_sw_trigger>
}
    d472:	b006      	add	sp, #24
    d474:	bd10      	pop	{r4, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d476:	4819      	ldr	r0, [pc, #100]	; (d4dc <am_adc_isr+0xb4>)
    d478:	f7ff ff20 	bl	d2bc <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d47c:	9902      	ldr	r1, [sp, #8]
    d47e:	6820      	ldr	r0, [r4, #0]
    d480:	f000 fc72 	bl	dd68 <am_hal_adc_interrupt_clear>
    d484:	2800      	cmp	r0, #0
    d486:	d0dd      	beq.n	d444 <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d488:	4815      	ldr	r0, [pc, #84]	; (d4e0 <am_adc_isr+0xb8>)
    d48a:	f7ff ff17 	bl	d2bc <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d48e:	9b02      	ldr	r3, [sp, #8]
    d490:	07db      	lsls	r3, r3, #31
    d492:	d5da      	bpl.n	d44a <am_adc_isr+0x22>
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d494:	ab04      	add	r3, sp, #16
        uint32_t    ui32NumSamples = 1;
    d496:	2101      	movs	r1, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d498:	9300      	str	r3, [sp, #0]
    d49a:	6820      	ldr	r0, [r4, #0]
        uint32_t    ui32NumSamples = 1;
    d49c:	9103      	str	r1, [sp, #12]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d49e:	ab03      	add	r3, sp, #12
    d4a0:	2200      	movs	r2, #0
    d4a2:	f000 fc73 	bl	dd8c <am_hal_adc_samples_read>
    d4a6:	2800      	cmp	r0, #0
    d4a8:	d0cf      	beq.n	d44a <am_adc_isr+0x22>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d4aa:	480e      	ldr	r0, [pc, #56]	; (d4e4 <am_adc_isr+0xbc>)
    d4ac:	f7ff ff06 	bl	d2bc <am_util_stdio_printf>
    d4b0:	e7cb      	b.n	d44a <am_adc_isr+0x22>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d4b2:	480d      	ldr	r0, [pc, #52]	; (d4e8 <am_adc_isr+0xc0>)
    d4b4:	f7ff ff02 	bl	d2bc <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d4b8:	6820      	ldr	r0, [r4, #0]
    d4ba:	f000 fcc3 	bl	de44 <am_hal_adc_sw_trigger>
}
    d4be:	b006      	add	sp, #24
    d4c0:	bd10      	pop	{r4, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d4c2:	480a      	ldr	r0, [pc, #40]	; (d4ec <am_adc_isr+0xc4>)
    d4c4:	f7ff fefa 	bl	d2bc <am_util_stdio_printf>
    d4c8:	e7cc      	b.n	d464 <am_adc_isr+0x3c>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d4ca:	4809      	ldr	r0, [pc, #36]	; (d4f0 <am_adc_isr+0xc8>)
    d4cc:	f7ff fef6 	bl	d2bc <am_util_stdio_printf>
    d4d0:	e7c3      	b.n	d45a <am_adc_isr+0x32>
    d4d2:	bf00      	nop
    d4d4:	1000116c 	.word	0x1000116c
    d4d8:	10001168 	.word	0x10001168
    d4dc:	000103cc 	.word	0x000103cc
    d4e0:	000103f0 	.word	0x000103f0
    d4e4:	00010418 	.word	0x00010418
    d4e8:	00010494 	.word	0x00010494
    d4ec:	00010464 	.word	0x00010464
    d4f0:	00010444 	.word	0x00010444

0000d4f4 <initADC>:
{
    d4f4:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d4f6:	4b0e      	ldr	r3, [pc, #56]	; (d530 <initADC+0x3c>)
    d4f8:	200b      	movs	r0, #11
    d4fa:	6819      	ldr	r1, [r3, #0]
    d4fc:	f001 f89c 	bl	e638 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d500:	f44f 7215 	mov.w	r2, #596	; 0x254
    d504:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d508:	2000      	movs	r0, #0
    d50a:	f000 ff5d 	bl	e3c8 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d50e:	2001      	movs	r0, #1
    d510:	f001 f81a 	bl	e548 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d514:	2300      	movs	r3, #0
    d516:	4618      	mov	r0, r3
    d518:	2201      	movs	r2, #1
    d51a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d51e:	f000 ffbd 	bl	e49c <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d522:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d526:	2000      	movs	r0, #0
    d528:	f000 ff8e 	bl	e448 <am_hal_ctimer_start>
}
    d52c:	2000      	movs	r0, #0
    d52e:	bd08      	pop	{r3, pc}
    d530:	000104c0 	.word	0x000104c0

0000d534 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d534:	4b04      	ldr	r3, [pc, #16]	; (d548 <enableAdcInterrupts+0x14>)
    d536:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d53a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d53e:	6019      	str	r1, [r3, #0]
    d540:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d542:	f001 ba2b 	b.w	e99c <am_hal_interrupt_master_enable>
    d546:	bf00      	nop
    d548:	e000e100 	.word	0xe000e100

0000d54c <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d54c:	2b80      	cmp	r3, #128	; 0x80
    d54e:	d840      	bhi.n	d5d2 <platform_read+0x86>
{
    d550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d554:	4690      	mov	r8, r2
    d556:	b08a      	sub	sp, #40	; 0x28
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d558:	2a00      	cmp	r2, #0
    d55a:	d044      	beq.n	d5e6 <platform_read+0x9a>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d55c:	4d28      	ldr	r5, [pc, #160]	; (d600 <platform_read+0xb4>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d55e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d610 <platform_read+0xc4>
    d562:	460e      	mov	r6, r1
    d564:	461f      	mov	r7, r3
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d568:	466c      	mov	r4, sp
    d56a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d56c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d56e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d570:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d574:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d576:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d57a:	f04f 0a01 	mov.w	sl, #1
    iomTransfer.ui32PauseCondition = 0;     // ?
    d57e:	2400      	movs	r4, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d580:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d584:	f8cd a004 	str.w	sl, [sp, #4]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d588:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d58c:	4669      	mov	r1, sp
    iomTransfer.ui32PauseCondition = 0;     // ?
    d58e:	2500      	movs	r5, #0
    d590:	e9cd 4508 	strd	r4, r5, [sp, #32]
    iomTransfer.pui32RxBuffer = NULL;
    d594:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d598:	9602      	str	r6, [sp, #8]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d59a:	f8ad a01c 	strh.w	sl, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d59e:	f88d a01e 	strb.w	sl, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d5a2:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d5a4:	f88d 3010 	strb.w	r3, [sp, #16]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5a8:	f001 fd52 	bl	f050 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d5ac:	4604      	mov	r4, r0
    d5ae:	b990      	cbnz	r0, d5d6 <platform_read+0x8a>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5b0:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d5b4:	f88d 401c 	strb.w	r4, [sp, #28]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5b8:	4669      	mov	r1, sp
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d5ba:	f88d a010 	strb.w	sl, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d5be:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d5c2:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d5c4:	f001 fd44 	bl	f050 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d5c8:	4604      	mov	r4, r0
    d5ca:	b998      	cbnz	r0, d5f4 <platform_read+0xa8>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d5cc:	b00a      	add	sp, #40	; 0x28
    d5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d5d2:	2001      	movs	r0, #1
}
    d5d4:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d5d6:	4601      	mov	r1, r0
    d5d8:	480a      	ldr	r0, [pc, #40]	; (d604 <platform_read+0xb8>)
    d5da:	f7ff fe6f 	bl	d2bc <am_util_stdio_printf>
        return retVal32;
    d5de:	4620      	mov	r0, r4
}
    d5e0:	b00a      	add	sp, #40	; 0x28
    d5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d5e6:	4808      	ldr	r0, [pc, #32]	; (d608 <platform_read+0xbc>)
    d5e8:	f7ff fe68 	bl	d2bc <am_util_stdio_printf>
    d5ec:	2001      	movs	r0, #1
}
    d5ee:	b00a      	add	sp, #40	; 0x28
    d5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d5f4:	4601      	mov	r1, r0
    d5f6:	4805      	ldr	r0, [pc, #20]	; (d60c <platform_read+0xc0>)
    d5f8:	f7ff fe60 	bl	d2bc <am_util_stdio_printf>
        return retVal32;
    d5fc:	4620      	mov	r0, r4
    d5fe:	e7e5      	b.n	d5cc <platform_read+0x80>
    d600:	10001000 	.word	0x10001000
    d604:	000104dc 	.word	0x000104dc
    d608:	000104c4 	.word	0x000104c4
    d60c:	000104ec 	.word	0x000104ec
    d610:	10001518 	.word	0x10001518

0000d614 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d614:	2b80      	cmp	r3, #128	; 0x80
    d616:	d83e      	bhi.n	d696 <platform_write+0x82>
{
    d618:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d61a:	4e26      	ldr	r6, [pc, #152]	; (d6b4 <platform_write+0xa0>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d61c:	4f26      	ldr	r7, [pc, #152]	; (d6b8 <platform_write+0xa4>)
    d61e:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d620:	469c      	mov	ip, r3
    d622:	4614      	mov	r4, r2
    d624:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d626:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d628:	466d      	mov	r5, sp
    d62a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d62c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d62e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d630:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d634:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d638:	f8df e08c 	ldr.w	lr, [pc, #140]	; d6c8 <platform_write+0xb4>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d63c:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d640:	2601      	movs	r6, #1
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d642:	2200      	movs	r2, #0
    iomTransfer.ui32PauseCondition = 0;     // ?
    d644:	2000      	movs	r0, #0
    d646:	2100      	movs	r1, #0
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d648:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.pui32RxBuffer = i2cRX;
    d64c:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d650:	e9cd 0108 	strd	r0, r1, [sp, #32]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d654:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d656:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d65a:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d65e:	f8ad 201c 	strh.w	r2, [sp, #28]
    if(bufp == NULL){
    d662:	b30c      	cbz	r4, d6a8 <platform_write+0x94>
    while(len--){
    d664:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    d668:	b289      	uxth	r1, r1
    d66a:	f1bc 0f00 	cmp.w	ip, #0
    d66e:	d009      	beq.n	d684 <platform_write+0x70>
    d670:	1c4b      	adds	r3, r1, #1
    d672:	18e2      	adds	r2, r4, r3
    d674:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d678:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d67c:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d680:	42bb      	cmp	r3, r7
    d682:	d1f9      	bne.n	d678 <platform_write+0x64>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d684:	4b0d      	ldr	r3, [pc, #52]	; (d6bc <platform_write+0xa8>)
    d686:	4669      	mov	r1, sp
    d688:	6818      	ldr	r0, [r3, #0]
    d68a:	f001 fce1 	bl	f050 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d68e:	4606      	mov	r6, r0
    d690:	b918      	cbnz	r0, d69a <platform_write+0x86>
}
    d692:	b00b      	add	sp, #44	; 0x2c
    d694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d696:	2001      	movs	r0, #1
}
    d698:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d69a:	4601      	mov	r1, r0
    d69c:	4808      	ldr	r0, [pc, #32]	; (d6c0 <platform_write+0xac>)
    d69e:	f7ff fe0d 	bl	d2bc <am_util_stdio_printf>
        return retVal32;
    d6a2:	4630      	mov	r0, r6
}
    d6a4:	b00b      	add	sp, #44	; 0x2c
    d6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d6a8:	4806      	ldr	r0, [pc, #24]	; (d6c4 <platform_write+0xb0>)
    d6aa:	f7ff fe07 	bl	d2bc <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d6ae:	4630      	mov	r0, r6
    d6b0:	e7ef      	b.n	d692 <platform_write+0x7e>
    d6b2:	bf00      	nop
    d6b4:	10001000 	.word	0x10001000
    d6b8:	10001318 	.word	0x10001318
    d6bc:	10001518 	.word	0x10001518
    d6c0:	00010518 	.word	0x00010518
    d6c4:	00010500 	.word	0x00010500
    d6c8:	1000151c 	.word	0x1000151c

0000d6cc <initAccelerometer>:
{
    d6cc:	b530      	push	{r4, r5, lr}
    dev_ctx.write_reg = platform_write;
    d6ce:	4a2c      	ldr	r2, [pc, #176]	; (d780 <initAccelerometer+0xb4>)
    d6d0:	4b2c      	ldr	r3, [pc, #176]	; (d784 <initAccelerometer+0xb8>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d6d2:	4c2d      	ldr	r4, [pc, #180]	; (d788 <initAccelerometer+0xbc>)
    dev_ctx.write_reg = platform_write;
    d6d4:	6013      	str	r3, [r2, #0]
{
    d6d6:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d6d8:	2300      	movs	r3, #0
    d6da:	2001      	movs	r0, #1
    d6dc:	9301      	str	r3, [sp, #4]
    d6de:	e9cd 3303 	strd	r3, r3, [sp, #12]
    dev_ctx.read_reg = platform_read;
    d6e2:	4d2a      	ldr	r5, [pc, #168]	; (d78c <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d6e4:	9305      	str	r3, [sp, #20]
    d6e6:	f88d 0004 	strb.w	r0, [sp, #4]
    d6ea:	4b29      	ldr	r3, [pc, #164]	; (d790 <initAccelerometer+0xc4>)
    dev_ctx.read_reg = platform_read;
    d6ec:	6055      	str	r5, [r2, #4]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d6ee:	4621      	mov	r1, r4
    d6f0:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d6f2:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d6f4:	f001 f9d6 	bl	eaa4 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d6f8:	b140      	cbz	r0, d70c <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d6fa:	4c26      	ldr	r4, [pc, #152]	; (d794 <initAccelerometer+0xc8>)
    d6fc:	4820      	ldr	r0, [pc, #128]	; (d780 <initAccelerometer+0xb4>)
    d6fe:	4621      	mov	r1, r4
    d700:	f000 f924 	bl	d94c <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d704:	7821      	ldrb	r1, [r4, #0]
    d706:	2933      	cmp	r1, #51	; 0x33
    d708:	d01b      	beq.n	d742 <initAccelerometer+0x76>
        while(1)
    d70a:	e7fe      	b.n	d70a <initAccelerometer+0x3e>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d70c:	4602      	mov	r2, r0
    d70e:	4601      	mov	r1, r0
    d710:	6820      	ldr	r0, [r4, #0]
    d712:	f001 fa5f 	bl	ebd4 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d716:	2800      	cmp	r0, #0
    d718:	d1ef      	bne.n	d6fa <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d71a:	6820      	ldr	r0, [r4, #0]
    d71c:	a901      	add	r1, sp, #4
    d71e:	f001 fb69 	bl	edf4 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d722:	2800      	cmp	r0, #0
    d724:	d1e9      	bne.n	d6fa <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d726:	4b1c      	ldr	r3, [pc, #112]	; (d798 <initAccelerometer+0xcc>)
    d728:	202b      	movs	r0, #43	; 0x2b
    d72a:	6819      	ldr	r1, [r3, #0]
    d72c:	f000 ff84 	bl	e638 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d730:	4b1a      	ldr	r3, [pc, #104]	; (d79c <initAccelerometer+0xd0>)
    d732:	202a      	movs	r0, #42	; 0x2a
    d734:	6819      	ldr	r1, [r3, #0]
    d736:	f000 ff7f 	bl	e638 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d73a:	6820      	ldr	r0, [r4, #0]
    d73c:	f001 f9da 	bl	eaf4 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d740:	e7db      	b.n	d6fa <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d742:	4817      	ldr	r0, [pc, #92]	; (d7a0 <initAccelerometer+0xd4>)
    d744:	f7ff fdba 	bl	d2bc <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d748:	2101      	movs	r1, #1
    d74a:	480d      	ldr	r0, [pc, #52]	; (d780 <initAccelerometer+0xb4>)
    d74c:	f000 f8ca 	bl	d8e4 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d750:	2103      	movs	r1, #3
    d752:	480b      	ldr	r0, [pc, #44]	; (d780 <initAccelerometer+0xb4>)
    d754:	f000 f82c 	bl	d7b0 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d758:	2103      	movs	r1, #3
    d75a:	4809      	ldr	r0, [pc, #36]	; (d780 <initAccelerometer+0xb4>)
    d75c:	f000 f88e 	bl	d87c <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d760:	2100      	movs	r1, #0
    d762:	4807      	ldr	r0, [pc, #28]	; (d780 <initAccelerometer+0xb4>)
    d764:	f000 f8a4 	bl	d8b0 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d768:	2103      	movs	r1, #3
    d76a:	4805      	ldr	r0, [pc, #20]	; (d780 <initAccelerometer+0xb4>)
    d76c:	f000 f820 	bl	d7b0 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d770:	2100      	movs	r1, #0
    d772:	4803      	ldr	r0, [pc, #12]	; (d780 <initAccelerometer+0xb4>)
    d774:	f000 f836 	bl	d7e4 <lis2dh12_operating_mode_set>
}
    d778:	2000      	movs	r0, #0
    d77a:	b007      	add	sp, #28
    d77c:	bd30      	pop	{r4, r5, pc}
    d77e:	bf00      	nop
    d780:	1000130c 	.word	0x1000130c
    d784:	0000d615 	.word	0x0000d615
    d788:	10001518 	.word	0x10001518
    d78c:	0000d54d 	.word	0x0000d54d
    d790:	000186a0 	.word	0x000186a0
    d794:	10001170 	.word	0x10001170
    d798:	00010580 	.word	0x00010580
    d79c:	00010584 	.word	0x00010584
    d7a0:	00010530 	.word	0x00010530

0000d7a4 <lis2dh12_from_fs2_hr_to_mg>:
    d7a4:	ee00 0a10 	vmov	s0, r0
    d7a8:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d7ac:	4770      	bx	lr
    d7ae:	bf00      	nop

0000d7b0 <lis2dh12_temperature_meas_set>:
    d7b0:	b570      	push	{r4, r5, r6, lr}
    d7b2:	b082      	sub	sp, #8
    d7b4:	4604      	mov	r4, r0
    d7b6:	460d      	mov	r5, r1
    d7b8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d7bc:	aa01      	add	r2, sp, #4
    d7be:	2301      	movs	r3, #1
    d7c0:	211f      	movs	r1, #31
    d7c2:	47b0      	blx	r6
    d7c4:	b958      	cbnz	r0, d7de <lis2dh12_temperature_meas_set+0x2e>
    d7c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d7ca:	6826      	ldr	r6, [r4, #0]
    d7cc:	68a0      	ldr	r0, [r4, #8]
    d7ce:	f365 1387 	bfi	r3, r5, #6, #2
    d7d2:	f88d 3004 	strb.w	r3, [sp, #4]
    d7d6:	aa01      	add	r2, sp, #4
    d7d8:	2301      	movs	r3, #1
    d7da:	211f      	movs	r1, #31
    d7dc:	47b0      	blx	r6
    d7de:	b002      	add	sp, #8
    d7e0:	bd70      	pop	{r4, r5, r6, pc}
    d7e2:	bf00      	nop

0000d7e4 <lis2dh12_operating_mode_set>:
    d7e4:	b570      	push	{r4, r5, r6, lr}
    d7e6:	b082      	sub	sp, #8
    d7e8:	4604      	mov	r4, r0
    d7ea:	460d      	mov	r5, r1
    d7ec:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d7f0:	466a      	mov	r2, sp
    d7f2:	2301      	movs	r3, #1
    d7f4:	2120      	movs	r1, #32
    d7f6:	47b0      	blx	r6
    d7f8:	bb00      	cbnz	r0, d83c <lis2dh12_operating_mode_set+0x58>
    d7fa:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d7fe:	aa01      	add	r2, sp, #4
    d800:	2301      	movs	r3, #1
    d802:	2123      	movs	r1, #35	; 0x23
    d804:	47b0      	blx	r6
    d806:	b9c8      	cbnz	r0, d83c <lis2dh12_operating_mode_set+0x58>
    d808:	b9d5      	cbnz	r5, d840 <lis2dh12_operating_mode_set+0x5c>
    d80a:	f89d 2000 	ldrb.w	r2, [sp]
    d80e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d812:	f365 02c3 	bfi	r2, r5, #3, #1
    d816:	f043 0308 	orr.w	r3, r3, #8
    d81a:	f88d 2000 	strb.w	r2, [sp]
    d81e:	f88d 3004 	strb.w	r3, [sp, #4]
    d822:	6825      	ldr	r5, [r4, #0]
    d824:	68a0      	ldr	r0, [r4, #8]
    d826:	466a      	mov	r2, sp
    d828:	2301      	movs	r3, #1
    d82a:	2120      	movs	r1, #32
    d82c:	47a8      	blx	r5
    d82e:	b928      	cbnz	r0, d83c <lis2dh12_operating_mode_set+0x58>
    d830:	6825      	ldr	r5, [r4, #0]
    d832:	68a0      	ldr	r0, [r4, #8]
    d834:	aa01      	add	r2, sp, #4
    d836:	2301      	movs	r3, #1
    d838:	2123      	movs	r1, #35	; 0x23
    d83a:	47a8      	blx	r5
    d83c:	b002      	add	sp, #8
    d83e:	bd70      	pop	{r4, r5, r6, pc}
    d840:	2d01      	cmp	r5, #1
    d842:	d10c      	bne.n	d85e <lis2dh12_operating_mode_set+0x7a>
    d844:	f89d 2000 	ldrb.w	r2, [sp]
    d848:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d84c:	f360 02c3 	bfi	r2, r0, #3, #1
    d850:	f360 03c3 	bfi	r3, r0, #3, #1
    d854:	f88d 2000 	strb.w	r2, [sp]
    d858:	f88d 3004 	strb.w	r3, [sp, #4]
    d85c:	e7e1      	b.n	d822 <lis2dh12_operating_mode_set+0x3e>
    d85e:	2d02      	cmp	r5, #2
    d860:	d1df      	bne.n	d822 <lis2dh12_operating_mode_set+0x3e>
    d862:	f89d 3000 	ldrb.w	r3, [sp]
    d866:	f89d 2004 	ldrb.w	r2, [sp, #4]
    d86a:	f043 0308 	orr.w	r3, r3, #8
    d86e:	f360 02c3 	bfi	r2, r0, #3, #1
    d872:	f88d 3000 	strb.w	r3, [sp]
    d876:	f88d 2004 	strb.w	r2, [sp, #4]
    d87a:	e7d2      	b.n	d822 <lis2dh12_operating_mode_set+0x3e>

0000d87c <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d87c:	b570      	push	{r4, r5, r6, lr}
    d87e:	b082      	sub	sp, #8
    d880:	4604      	mov	r4, r0
    d882:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d884:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d888:	aa01      	add	r2, sp, #4
    d88a:	2301      	movs	r3, #1
    d88c:	2120      	movs	r1, #32
    d88e:	47b0      	blx	r6
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d890:	b958      	cbnz	r0, d8aa <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d892:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d896:	6826      	ldr	r6, [r4, #0]
    d898:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d89a:	f365 1307 	bfi	r3, r5, #4, #4
    d89e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8a2:	aa01      	add	r2, sp, #4
    d8a4:	2301      	movs	r3, #1
    d8a6:	2120      	movs	r1, #32
    d8a8:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d8aa:	b002      	add	sp, #8
    d8ac:	bd70      	pop	{r4, r5, r6, pc}
    d8ae:	bf00      	nop

0000d8b0 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d8b0:	b570      	push	{r4, r5, r6, lr}
    d8b2:	b082      	sub	sp, #8
    d8b4:	4604      	mov	r4, r0
    d8b6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8b8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d8bc:	aa01      	add	r2, sp, #4
    d8be:	2301      	movs	r3, #1
    d8c0:	2123      	movs	r1, #35	; 0x23
    d8c2:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d8c4:	b958      	cbnz	r0, d8de <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d8c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8ca:	6826      	ldr	r6, [r4, #0]
    d8cc:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d8ce:	f365 1305 	bfi	r3, r5, #4, #2
    d8d2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8d6:	aa01      	add	r2, sp, #4
    d8d8:	2301      	movs	r3, #1
    d8da:	2123      	movs	r1, #35	; 0x23
    d8dc:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d8de:	b002      	add	sp, #8
    d8e0:	bd70      	pop	{r4, r5, r6, pc}
    d8e2:	bf00      	nop

0000d8e4 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d8e4:	b570      	push	{r4, r5, r6, lr}
    d8e6:	b082      	sub	sp, #8
    d8e8:	4604      	mov	r4, r0
    d8ea:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8ec:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d8f0:	aa01      	add	r2, sp, #4
    d8f2:	2301      	movs	r3, #1
    d8f4:	2123      	movs	r1, #35	; 0x23
    d8f6:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d8f8:	b958      	cbnz	r0, d912 <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d8fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8fe:	6826      	ldr	r6, [r4, #0]
    d900:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d902:	f365 13c7 	bfi	r3, r5, #7, #1
    d906:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d90a:	aa01      	add	r2, sp, #4
    d90c:	2301      	movs	r3, #1
    d90e:	2123      	movs	r1, #35	; 0x23
    d910:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d912:	b002      	add	sp, #8
    d914:	bd70      	pop	{r4, r5, r6, pc}
    d916:	bf00      	nop

0000d918 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d918:	b530      	push	{r4, r5, lr}
    d91a:	b083      	sub	sp, #12
    d91c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d91e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d922:	2301      	movs	r3, #1
    d924:	aa01      	add	r2, sp, #4
    d926:	2127      	movs	r1, #39	; 0x27
    d928:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    d92a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d92e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d932:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d934:	b003      	add	sp, #12
    d936:	bd30      	pop	{r4, r5, pc}

0000d938 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d938:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d93a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d93e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d940:	46a4      	mov	ip, r4
    d942:	2306      	movs	r3, #6
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    d944:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d948:	2128      	movs	r1, #40	; 0x28
    d94a:	4760      	bx	ip

0000d94c <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d94c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d94e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d952:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d954:	46a4      	mov	ip, r4
    d956:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d958:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d95c:	210f      	movs	r1, #15
    d95e:	4760      	bx	ip

0000d960 <am_bsp_uart_string_print>:
    d960:	b510      	push	{r4, lr}
    d962:	b086      	sub	sp, #24
    d964:	7804      	ldrb	r4, [r0, #0]
    d966:	2300      	movs	r3, #0
    d968:	9300      	str	r3, [sp, #0]
    d96a:	b13c      	cbz	r4, d97c <am_bsp_uart_string_print+0x1c>
    d96c:	4603      	mov	r3, r0
    d96e:	f1c0 0201 	rsb	r2, r0, #1
    d972:	18d4      	adds	r4, r2, r3
    d974:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d978:	2900      	cmp	r1, #0
    d97a:	d1fa      	bne.n	d972 <am_bsp_uart_string_print+0x12>
    d97c:	4b09      	ldr	r3, [pc, #36]	; (d9a4 <am_bsp_uart_string_print+0x44>)
    d97e:	9002      	str	r0, [sp, #8]
    d980:	2200      	movs	r2, #0
    d982:	6818      	ldr	r0, [r3, #0]
    d984:	9403      	str	r4, [sp, #12]
    d986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d98a:	a901      	add	r1, sp, #4
    d98c:	9304      	str	r3, [sp, #16]
    d98e:	9201      	str	r2, [sp, #4]
    d990:	f8cd d014 	str.w	sp, [sp, #20]
    d994:	f002 f8e8 	bl	fb68 <am_hal_uart_transfer>
    d998:	9b00      	ldr	r3, [sp, #0]
    d99a:	42a3      	cmp	r3, r4
    d99c:	d000      	beq.n	d9a0 <am_bsp_uart_string_print+0x40>
    d99e:	e7fe      	b.n	d99e <am_bsp_uart_string_print+0x3e>
    d9a0:	b006      	add	sp, #24
    d9a2:	bd10      	pop	{r4, pc}
    d9a4:	10001174 	.word	0x10001174

0000d9a8 <am_bsp_low_power_init>:
    d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9aa:	f001 fd0d 	bl	f3c8 <am_hal_itm_disable>
    d9ae:	2000      	movs	r0, #0
    d9b0:	f7ff f834 	bl	ca1c <am_util_stdio_printf_init>
    d9b4:	4b12      	ldr	r3, [pc, #72]	; (da00 <am_bsp_low_power_init+0x58>)
    d9b6:	4f13      	ldr	r7, [pc, #76]	; (da04 <am_bsp_low_power_init+0x5c>)
    d9b8:	6819      	ldr	r1, [r3, #0]
    d9ba:	2021      	movs	r0, #33	; 0x21
    d9bc:	f000 fe3c 	bl	e638 <am_hal_gpio_pinconfig>
    d9c0:	f001 fe44 	bl	f64c <am_hal_pwrctrl_low_power_init>
    d9c4:	2000      	movs	r0, #0
    d9c6:	f001 feb3 	bl	f730 <am_hal_rtc_osc_select>
    d9ca:	2100      	movs	r1, #0
    d9cc:	2003      	movs	r0, #3
    d9ce:	f000 fc51 	bl	e274 <am_hal_clkgen_control>
    d9d2:	f001 feb5 	bl	f740 <am_hal_rtc_osc_disable>
    d9d6:	4b0c      	ldr	r3, [pc, #48]	; (da08 <am_bsp_low_power_init+0x60>)
    d9d8:	681e      	ldr	r6, [r3, #0]
    d9da:	2400      	movs	r4, #0
    d9dc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d9e0:	4631      	mov	r1, r6
    d9e2:	4628      	mov	r0, r5
    d9e4:	f000 fe28 	bl	e638 <am_hal_gpio_pinconfig>
    d9e8:	2103      	movs	r1, #3
    d9ea:	4628      	mov	r0, r5
    d9ec:	f000 ff92 	bl	e914 <am_hal_gpio_state_write>
    d9f0:	3401      	adds	r4, #1
    d9f2:	4628      	mov	r0, r5
    d9f4:	2100      	movs	r1, #0
    d9f6:	f000 ff8d 	bl	e914 <am_hal_gpio_state_write>
    d9fa:	2c04      	cmp	r4, #4
    d9fc:	d1ee      	bne.n	d9dc <am_bsp_low_power_init+0x34>
    d9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da00:	000106c0 	.word	0x000106c0
    da04:	10001028 	.word	0x10001028
    da08:	000106c4 	.word	0x000106c4

0000da0c <am_bsp_debug_printf_disable>:
    da0c:	b538      	push	{r3, r4, r5, lr}
    da0e:	4b17      	ldr	r3, [pc, #92]	; (da6c <am_bsp_debug_printf_disable+0x60>)
    da10:	681c      	ldr	r4, [r3, #0]
    da12:	2c01      	cmp	r4, #1
    da14:	d002      	beq.n	da1c <am_bsp_debug_printf_disable+0x10>
    da16:	2c02      	cmp	r4, #2
    da18:	d00c      	beq.n	da34 <am_bsp_debug_printf_disable+0x28>
    da1a:	bd38      	pop	{r3, r4, r5, pc}
    da1c:	f001 fcd4 	bl	f3c8 <am_hal_itm_disable>
    da20:	2000      	movs	r0, #0
    da22:	f7fe fffb 	bl	ca1c <am_util_stdio_printf_init>
    da26:	4b12      	ldr	r3, [pc, #72]	; (da70 <am_bsp_debug_printf_disable+0x64>)
    da28:	2021      	movs	r0, #33	; 0x21
    da2a:	6819      	ldr	r1, [r3, #0]
    da2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da30:	f000 be02 	b.w	e638 <am_hal_gpio_pinconfig>
    da34:	4d0f      	ldr	r5, [pc, #60]	; (da74 <am_bsp_debug_printf_disable+0x68>)
    da36:	6828      	ldr	r0, [r5, #0]
    da38:	f002 fad0 	bl	ffdc <am_hal_uart_tx_flush>
    da3c:	2000      	movs	r0, #0
    da3e:	f7fe ffed 	bl	ca1c <am_util_stdio_printf_init>
    da42:	4621      	mov	r1, r4
    da44:	2200      	movs	r2, #0
    da46:	6828      	ldr	r0, [r5, #0]
    da48:	f001 fef8 	bl	f83c <am_hal_uart_power_control>
    da4c:	6828      	ldr	r0, [r5, #0]
    da4e:	f001 fee1 	bl	f814 <am_hal_uart_deinitialize>
    da52:	4b07      	ldr	r3, [pc, #28]	; (da70 <am_bsp_debug_printf_disable+0x64>)
    da54:	681c      	ldr	r4, [r3, #0]
    da56:	2030      	movs	r0, #48	; 0x30
    da58:	4621      	mov	r1, r4
    da5a:	f000 fded 	bl	e638 <am_hal_gpio_pinconfig>
    da5e:	4621      	mov	r1, r4
    da60:	2031      	movs	r0, #49	; 0x31
    da62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da66:	f000 bde7 	b.w	e638 <am_hal_gpio_pinconfig>
    da6a:	bf00      	nop
    da6c:	10001178 	.word	0x10001178
    da70:	000106c0 	.word	0x000106c0
    da74:	10001174 	.word	0x10001174

0000da78 <am_bsp_uart_printf_enable>:
    da78:	b510      	push	{r4, lr}
    da7a:	4c10      	ldr	r4, [pc, #64]	; (dabc <am_bsp_uart_printf_enable+0x44>)
    da7c:	4b10      	ldr	r3, [pc, #64]	; (dac0 <am_bsp_uart_printf_enable+0x48>)
    da7e:	4621      	mov	r1, r4
    da80:	2202      	movs	r2, #2
    da82:	2000      	movs	r0, #0
    da84:	601a      	str	r2, [r3, #0]
    da86:	f001 fe9d 	bl	f7c4 <am_hal_uart_initialize>
    da8a:	2200      	movs	r2, #0
    da8c:	4611      	mov	r1, r2
    da8e:	6820      	ldr	r0, [r4, #0]
    da90:	f001 fed4 	bl	f83c <am_hal_uart_power_control>
    da94:	6820      	ldr	r0, [r4, #0]
    da96:	490b      	ldr	r1, [pc, #44]	; (dac4 <am_bsp_uart_printf_enable+0x4c>)
    da98:	f001 ff42 	bl	f920 <am_hal_uart_configure>
    da9c:	4b0a      	ldr	r3, [pc, #40]	; (dac8 <am_bsp_uart_printf_enable+0x50>)
    da9e:	2030      	movs	r0, #48	; 0x30
    daa0:	6819      	ldr	r1, [r3, #0]
    daa2:	f000 fdc9 	bl	e638 <am_hal_gpio_pinconfig>
    daa6:	4b09      	ldr	r3, [pc, #36]	; (dacc <am_bsp_uart_printf_enable+0x54>)
    daa8:	2031      	movs	r0, #49	; 0x31
    daaa:	6819      	ldr	r1, [r3, #0]
    daac:	f000 fdc4 	bl	e638 <am_hal_gpio_pinconfig>
    dab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dab4:	4806      	ldr	r0, [pc, #24]	; (dad0 <am_bsp_uart_printf_enable+0x58>)
    dab6:	f7fe bfb1 	b.w	ca1c <am_util_stdio_printf_init>
    daba:	bf00      	nop
    dabc:	10001174 	.word	0x10001174
    dac0:	10001178 	.word	0x10001178
    dac4:	00010550 	.word	0x00010550
    dac8:	0001057c 	.word	0x0001057c
    dacc:	00010578 	.word	0x00010578
    dad0:	0000d961 	.word	0x0000d961

0000dad4 <am_hal_adc_initialize>:
    dad4:	b108      	cbz	r0, dada <am_hal_adc_initialize+0x6>
    dad6:	2005      	movs	r0, #5
    dad8:	4770      	bx	lr
    dada:	b139      	cbz	r1, daec <am_hal_adc_initialize+0x18>
    dadc:	4a1b      	ldr	r2, [pc, #108]	; (db4c <am_hal_adc_initialize+0x78>)
    dade:	b538      	push	{r3, r4, r5, lr}
    dae0:	78d3      	ldrb	r3, [r2, #3]
    dae2:	f013 0401 	ands.w	r4, r3, #1
    dae6:	d003      	beq.n	daf0 <am_hal_adc_initialize+0x1c>
    dae8:	2007      	movs	r0, #7
    daea:	bd38      	pop	{r3, r4, r5, pc}
    daec:	2006      	movs	r0, #6
    daee:	4770      	bx	lr
    daf0:	f043 0301 	orr.w	r3, r3, #1
    daf4:	70d3      	strb	r3, [r2, #3]
    daf6:	6813      	ldr	r3, [r2, #0]
    daf8:	4d15      	ldr	r5, [pc, #84]	; (db50 <am_hal_adc_initialize+0x7c>)
    dafa:	4816      	ldr	r0, [pc, #88]	; (db54 <am_hal_adc_initialize+0x80>)
    dafc:	6054      	str	r4, [r2, #4]
    dafe:	f365 0317 	bfi	r3, r5, #0, #24
    db02:	6013      	str	r3, [r2, #0]
    db04:	6004      	str	r4, [r0, #0]
    db06:	600a      	str	r2, [r1, #0]
    db08:	4813      	ldr	r0, [pc, #76]	; (db58 <am_hal_adc_initialize+0x84>)
    db0a:	4d14      	ldr	r5, [pc, #80]	; (db5c <am_hal_adc_initialize+0x88>)
    db0c:	f000 fd8a 	bl	e624 <am_hal_flash_load_ui32>
    db10:	6028      	str	r0, [r5, #0]
    db12:	4813      	ldr	r0, [pc, #76]	; (db60 <am_hal_adc_initialize+0x8c>)
    db14:	f000 fd86 	bl	e624 <am_hal_flash_load_ui32>
    db18:	6068      	str	r0, [r5, #4]
    db1a:	4812      	ldr	r0, [pc, #72]	; (db64 <am_hal_adc_initialize+0x90>)
    db1c:	f000 fd82 	bl	e624 <am_hal_flash_load_ui32>
    db20:	682b      	ldr	r3, [r5, #0]
    db22:	60a8      	str	r0, [r5, #8]
    db24:	3301      	adds	r3, #1
    db26:	d008      	beq.n	db3a <am_hal_adc_initialize+0x66>
    db28:	686b      	ldr	r3, [r5, #4]
    db2a:	3301      	adds	r3, #1
    db2c:	d005      	beq.n	db3a <am_hal_adc_initialize+0x66>
    db2e:	3001      	adds	r0, #1
    db30:	d003      	beq.n	db3a <am_hal_adc_initialize+0x66>
    db32:	2301      	movs	r3, #1
    db34:	732b      	strb	r3, [r5, #12]
    db36:	4620      	mov	r0, r4
    db38:	bd38      	pop	{r3, r4, r5, pc}
    db3a:	490b      	ldr	r1, [pc, #44]	; (db68 <am_hal_adc_initialize+0x94>)
    db3c:	4a0b      	ldr	r2, [pc, #44]	; (db6c <am_hal_adc_initialize+0x98>)
    db3e:	4b0c      	ldr	r3, [pc, #48]	; (db70 <am_hal_adc_initialize+0x9c>)
    db40:	6029      	str	r1, [r5, #0]
    db42:	2000      	movs	r0, #0
    db44:	606a      	str	r2, [r5, #4]
    db46:	60ab      	str	r3, [r5, #8]
    db48:	7328      	strb	r0, [r5, #12]
    db4a:	bd38      	pop	{r3, r4, r5, pc}
    db4c:	10001720 	.word	0x10001720
    db50:	00afafaf 	.word	0x00afafaf
    db54:	1000171c 	.word	0x1000171c
    db58:	50023840 	.word	0x50023840
    db5c:	1000117c 	.word	0x1000117c
    db60:	50023844 	.word	0x50023844
    db64:	50023848 	.word	0x50023848
    db68:	4395c000 	.word	0x4395c000
    db6c:	3f839874 	.word	0x3f839874
    db70:	bb8c47a1 	.word	0xbb8c47a1

0000db74 <am_hal_adc_deinitialize>:
    db74:	b128      	cbz	r0, db82 <am_hal_adc_deinitialize+0xe>
    db76:	6803      	ldr	r3, [r0, #0]
    db78:	4a0c      	ldr	r2, [pc, #48]	; (dbac <am_hal_adc_deinitialize+0x38>)
    db7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db7e:	4293      	cmp	r3, r2
    db80:	d001      	beq.n	db86 <am_hal_adc_deinitialize+0x12>
    db82:	2002      	movs	r0, #2
    db84:	4770      	bx	lr
    db86:	78c3      	ldrb	r3, [r0, #3]
    db88:	079b      	lsls	r3, r3, #30
    db8a:	d508      	bpl.n	db9e <am_hal_adc_deinitialize+0x2a>
    db8c:	4b08      	ldr	r3, [pc, #32]	; (dbb0 <am_hal_adc_deinitialize+0x3c>)
    db8e:	681a      	ldr	r2, [r3, #0]
    db90:	f36f 0200 	bfc	r2, #0, #1
    db94:	601a      	str	r2, [r3, #0]
    db96:	78c3      	ldrb	r3, [r0, #3]
    db98:	f36f 0341 	bfc	r3, #1, #1
    db9c:	70c3      	strb	r3, [r0, #3]
    db9e:	78c3      	ldrb	r3, [r0, #3]
    dba0:	f36f 0300 	bfc	r3, #0, #1
    dba4:	70c3      	strb	r3, [r0, #3]
    dba6:	2000      	movs	r0, #0
    dba8:	4770      	bx	lr
    dbaa:	bf00      	nop
    dbac:	01afafaf 	.word	0x01afafaf
    dbb0:	50010000 	.word	0x50010000

0000dbb4 <am_hal_adc_configure>:
    dbb4:	b128      	cbz	r0, dbc2 <am_hal_adc_configure+0xe>
    dbb6:	6803      	ldr	r3, [r0, #0]
    dbb8:	4a18      	ldr	r2, [pc, #96]	; (dc1c <am_hal_adc_configure+0x68>)
    dbba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dbbe:	4293      	cmp	r3, r2
    dbc0:	d001      	beq.n	dbc6 <am_hal_adc_configure+0x12>
    dbc2:	2002      	movs	r0, #2
    dbc4:	4770      	bx	lr
    dbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbc8:	7808      	ldrb	r0, [r1, #0]
    dbca:	784d      	ldrb	r5, [r1, #1]
    dbcc:	788c      	ldrb	r4, [r1, #2]
    dbce:	f891 e003 	ldrb.w	lr, [r1, #3]
    dbd2:	790f      	ldrb	r7, [r1, #4]
    dbd4:	794a      	ldrb	r2, [r1, #5]
    dbd6:	798b      	ldrb	r3, [r1, #6]
    dbd8:	4e11      	ldr	r6, [pc, #68]	; (dc20 <am_hal_adc_configure+0x6c>)
    dbda:	0600      	lsls	r0, r0, #24
    dbdc:	04ed      	lsls	r5, r5, #19
    dbde:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    dbe2:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    dbe6:	4328      	orrs	r0, r5
    dbe8:	0424      	lsls	r4, r4, #16
    dbea:	ea4f 210e 	mov.w	r1, lr, lsl #8
    dbee:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dbf2:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    dbf6:	4304      	orrs	r4, r0
    dbf8:	f401 7040 	and.w	r0, r1, #768	; 0x300
    dbfc:	0139      	lsls	r1, r7, #4
    dbfe:	4320      	orrs	r0, r4
    dc00:	f001 0110 	and.w	r1, r1, #16
    dc04:	00d2      	lsls	r2, r2, #3
    dc06:	4301      	orrs	r1, r0
    dc08:	f002 0208 	and.w	r2, r2, #8
    dc0c:	009b      	lsls	r3, r3, #2
    dc0e:	430a      	orrs	r2, r1
    dc10:	f003 0304 	and.w	r3, r3, #4
    dc14:	4313      	orrs	r3, r2
    dc16:	6033      	str	r3, [r6, #0]
    dc18:	2000      	movs	r0, #0
    dc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc1c:	01afafaf 	.word	0x01afafaf
    dc20:	50010000 	.word	0x50010000

0000dc24 <am_hal_adc_configure_slot>:
    dc24:	b128      	cbz	r0, dc32 <am_hal_adc_configure_slot+0xe>
    dc26:	6803      	ldr	r3, [r0, #0]
    dc28:	4816      	ldr	r0, [pc, #88]	; (dc84 <am_hal_adc_configure_slot+0x60>)
    dc2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc2e:	4283      	cmp	r3, r0
    dc30:	d001      	beq.n	dc36 <am_hal_adc_configure_slot+0x12>
    dc32:	2002      	movs	r0, #2
    dc34:	4770      	bx	lr
    dc36:	2907      	cmp	r1, #7
    dc38:	d901      	bls.n	dc3e <am_hal_adc_configure_slot+0x1a>
    dc3a:	2005      	movs	r0, #5
    dc3c:	4770      	bx	lr
    dc3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc40:	7813      	ldrb	r3, [r2, #0]
    dc42:	7854      	ldrb	r4, [r2, #1]
    dc44:	7890      	ldrb	r0, [r2, #2]
    dc46:	78d7      	ldrb	r7, [r2, #3]
    dc48:	f892 e004 	ldrb.w	lr, [r2, #4]
    dc4c:	4d0e      	ldr	r5, [pc, #56]	; (dc88 <am_hal_adc_configure_slot+0x64>)
    dc4e:	4e0f      	ldr	r6, [pc, #60]	; (dc8c <am_hal_adc_configure_slot+0x68>)
    dc50:	061b      	lsls	r3, r3, #24
    dc52:	0424      	lsls	r4, r4, #16
    dc54:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    dc58:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    dc5c:	4323      	orrs	r3, r4
    dc5e:	0202      	lsls	r2, r0, #8
    dc60:	ea43 0e0e 	orr.w	lr, r3, lr
    dc64:	440d      	add	r5, r1
    dc66:	007b      	lsls	r3, r7, #1
    dc68:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    dc6c:	ea4e 0202 	orr.w	r2, lr, r2
    dc70:	00ad      	lsls	r5, r5, #2
    dc72:	f003 0302 	and.w	r3, r3, #2
    dc76:	4313      	orrs	r3, r2
    dc78:	602b      	str	r3, [r5, #0]
    dc7a:	6833      	ldr	r3, [r6, #0]
    dc7c:	3301      	adds	r3, #1
    dc7e:	6033      	str	r3, [r6, #0]
    dc80:	2000      	movs	r0, #0
    dc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc84:	01afafaf 	.word	0x01afafaf
    dc88:	14004003 	.word	0x14004003
    dc8c:	1000171c 	.word	0x1000171c

0000dc90 <am_hal_adc_enable>:
    dc90:	4603      	mov	r3, r0
    dc92:	b128      	cbz	r0, dca0 <am_hal_adc_enable+0x10>
    dc94:	6802      	ldr	r2, [r0, #0]
    dc96:	490c      	ldr	r1, [pc, #48]	; (dcc8 <am_hal_adc_enable+0x38>)
    dc98:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dc9c:	428a      	cmp	r2, r1
    dc9e:	d001      	beq.n	dca4 <am_hal_adc_enable+0x14>
    dca0:	2002      	movs	r0, #2
    dca2:	4770      	bx	lr
    dca4:	78c2      	ldrb	r2, [r0, #3]
    dca6:	f002 0202 	and.w	r2, r2, #2
    dcaa:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    dcae:	b94a      	cbnz	r2, dcc4 <am_hal_adc_enable+0x34>
    dcb0:	4906      	ldr	r1, [pc, #24]	; (dccc <am_hal_adc_enable+0x3c>)
    dcb2:	680a      	ldr	r2, [r1, #0]
    dcb4:	f042 0201 	orr.w	r2, r2, #1
    dcb8:	600a      	str	r2, [r1, #0]
    dcba:	78da      	ldrb	r2, [r3, #3]
    dcbc:	f042 0202 	orr.w	r2, r2, #2
    dcc0:	70da      	strb	r2, [r3, #3]
    dcc2:	4770      	bx	lr
    dcc4:	2000      	movs	r0, #0
    dcc6:	4770      	bx	lr
    dcc8:	01afafaf 	.word	0x01afafaf
    dccc:	50010000 	.word	0x50010000

0000dcd0 <am_hal_adc_disable>:
    dcd0:	b128      	cbz	r0, dcde <am_hal_adc_disable+0xe>
    dcd2:	6803      	ldr	r3, [r0, #0]
    dcd4:	4a08      	ldr	r2, [pc, #32]	; (dcf8 <am_hal_adc_disable+0x28>)
    dcd6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcda:	4293      	cmp	r3, r2
    dcdc:	d001      	beq.n	dce2 <am_hal_adc_disable+0x12>
    dcde:	2002      	movs	r0, #2
    dce0:	4770      	bx	lr
    dce2:	4b06      	ldr	r3, [pc, #24]	; (dcfc <am_hal_adc_disable+0x2c>)
    dce4:	681a      	ldr	r2, [r3, #0]
    dce6:	f36f 0200 	bfc	r2, #0, #1
    dcea:	601a      	str	r2, [r3, #0]
    dcec:	78c3      	ldrb	r3, [r0, #3]
    dcee:	f36f 0341 	bfc	r3, #1, #1
    dcf2:	70c3      	strb	r3, [r0, #3]
    dcf4:	2000      	movs	r0, #0
    dcf6:	4770      	bx	lr
    dcf8:	01afafaf 	.word	0x01afafaf
    dcfc:	50010000 	.word	0x50010000

0000dd00 <am_hal_adc_interrupt_enable>:
    dd00:	b128      	cbz	r0, dd0e <am_hal_adc_interrupt_enable+0xe>
    dd02:	6803      	ldr	r3, [r0, #0]
    dd04:	4a07      	ldr	r2, [pc, #28]	; (dd24 <am_hal_adc_interrupt_enable+0x24>)
    dd06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd0a:	4293      	cmp	r3, r2
    dd0c:	d001      	beq.n	dd12 <am_hal_adc_interrupt_enable+0x12>
    dd0e:	2002      	movs	r0, #2
    dd10:	4770      	bx	lr
    dd12:	4b05      	ldr	r3, [pc, #20]	; (dd28 <am_hal_adc_interrupt_enable+0x28>)
    dd14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd18:	4311      	orrs	r1, r2
    dd1a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dd1e:	2000      	movs	r0, #0
    dd20:	4770      	bx	lr
    dd22:	bf00      	nop
    dd24:	01afafaf 	.word	0x01afafaf
    dd28:	50010000 	.word	0x50010000

0000dd2c <am_hal_adc_interrupt_status>:
    dd2c:	b128      	cbz	r0, dd3a <am_hal_adc_interrupt_status+0xe>
    dd2e:	6803      	ldr	r3, [r0, #0]
    dd30:	480b      	ldr	r0, [pc, #44]	; (dd60 <am_hal_adc_interrupt_status+0x34>)
    dd32:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd36:	4283      	cmp	r3, r0
    dd38:	d001      	beq.n	dd3e <am_hal_adc_interrupt_status+0x12>
    dd3a:	2002      	movs	r0, #2
    dd3c:	4770      	bx	lr
    dd3e:	b92a      	cbnz	r2, dd4c <am_hal_adc_interrupt_status+0x20>
    dd40:	4b08      	ldr	r3, [pc, #32]	; (dd64 <am_hal_adc_interrupt_status+0x38>)
    dd42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    dd46:	600b      	str	r3, [r1, #0]
    dd48:	4610      	mov	r0, r2
    dd4a:	4770      	bx	lr
    dd4c:	4a05      	ldr	r2, [pc, #20]	; (dd64 <am_hal_adc_interrupt_status+0x38>)
    dd4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    dd52:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dd56:	4003      	ands	r3, r0
    dd58:	600b      	str	r3, [r1, #0]
    dd5a:	2000      	movs	r0, #0
    dd5c:	4770      	bx	lr
    dd5e:	bf00      	nop
    dd60:	01afafaf 	.word	0x01afafaf
    dd64:	50010000 	.word	0x50010000

0000dd68 <am_hal_adc_interrupt_clear>:
    dd68:	b128      	cbz	r0, dd76 <am_hal_adc_interrupt_clear+0xe>
    dd6a:	6803      	ldr	r3, [r0, #0]
    dd6c:	4a05      	ldr	r2, [pc, #20]	; (dd84 <am_hal_adc_interrupt_clear+0x1c>)
    dd6e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd72:	4293      	cmp	r3, r2
    dd74:	d001      	beq.n	dd7a <am_hal_adc_interrupt_clear+0x12>
    dd76:	2002      	movs	r0, #2
    dd78:	4770      	bx	lr
    dd7a:	4b03      	ldr	r3, [pc, #12]	; (dd88 <am_hal_adc_interrupt_clear+0x20>)
    dd7c:	2000      	movs	r0, #0
    dd7e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    dd82:	4770      	bx	lr
    dd84:	01afafaf 	.word	0x01afafaf
    dd88:	50010000 	.word	0x50010000

0000dd8c <am_hal_adc_samples_read>:
    dd8c:	b148      	cbz	r0, dda2 <am_hal_adc_samples_read+0x16>
    dd8e:	6800      	ldr	r0, [r0, #0]
    dd90:	b470      	push	{r4, r5, r6}
    dd92:	4c2a      	ldr	r4, [pc, #168]	; (de3c <am_hal_adc_samples_read+0xb0>)
    dd94:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    dd98:	42a0      	cmp	r0, r4
    dd9a:	d004      	beq.n	dda6 <am_hal_adc_samples_read+0x1a>
    dd9c:	2002      	movs	r0, #2
    dd9e:	bc70      	pop	{r4, r5, r6}
    dda0:	4770      	bx	lr
    dda2:	2002      	movs	r0, #2
    dda4:	4770      	bx	lr
    dda6:	9803      	ldr	r0, [sp, #12]
    dda8:	b1e0      	cbz	r0, dde4 <am_hal_adc_samples_read+0x58>
    ddaa:	2000      	movs	r0, #0
    ddac:	681c      	ldr	r4, [r3, #0]
    ddae:	6018      	str	r0, [r3, #0]
    ddb0:	b1d2      	cbz	r2, dde8 <am_hal_adc_samples_read+0x5c>
    ddb2:	9903      	ldr	r1, [sp, #12]
    ddb4:	4d22      	ldr	r5, [pc, #136]	; (de40 <am_hal_adc_samples_read+0xb4>)
    ddb6:	3a04      	subs	r2, #4
    ddb8:	3108      	adds	r1, #8
    ddba:	f852 0f04 	ldr.w	r0, [r2, #4]!
    ddbe:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    ddc0:	f3c0 7002 	ubfx	r0, r0, #28, #3
    ddc4:	f841 0c04 	str.w	r0, [r1, #-4]
    ddc8:	6810      	ldr	r0, [r2, #0]
    ddca:	f3c0 108d 	ubfx	r0, r0, #6, #14
    ddce:	f841 0c08 	str.w	r0, [r1, #-8]
    ddd2:	6818      	ldr	r0, [r3, #0]
    ddd4:	3001      	adds	r0, #1
    ddd6:	4284      	cmp	r4, r0
    ddd8:	f101 0108 	add.w	r1, r1, #8
    dddc:	6018      	str	r0, [r3, #0]
    ddde:	d8ec      	bhi.n	ddba <am_hal_adc_samples_read+0x2e>
    dde0:	2000      	movs	r0, #0
    dde2:	e7dc      	b.n	dd9e <am_hal_adc_samples_read+0x12>
    dde4:	2006      	movs	r0, #6
    dde6:	e7da      	b.n	dd9e <am_hal_adc_samples_read+0x12>
    dde8:	9a03      	ldr	r2, [sp, #12]
    ddea:	4e15      	ldr	r6, [pc, #84]	; (de40 <am_hal_adc_samples_read+0xb4>)
    ddec:	f102 0008 	add.w	r0, r2, #8
    ddf0:	b9a1      	cbnz	r1, de1c <am_hal_adc_samples_read+0x90>
    ddf2:	e001      	b.n	ddf8 <am_hal_adc_samples_read+0x6c>
    ddf4:	428c      	cmp	r4, r1
    ddf6:	d9f3      	bls.n	dde0 <am_hal_adc_samples_read+0x54>
    ddf8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    ddfa:	f3c2 118d 	ubfx	r1, r2, #6, #14
    ddfe:	f3c2 7502 	ubfx	r5, r2, #28, #3
    de02:	e900 0022 	stmdb	r0, {r1, r5}
    de06:	6819      	ldr	r1, [r3, #0]
    de08:	f3c2 5207 	ubfx	r2, r2, #20, #8
    de0c:	3101      	adds	r1, #1
    de0e:	3008      	adds	r0, #8
    de10:	6019      	str	r1, [r3, #0]
    de12:	2a00      	cmp	r2, #0
    de14:	d1ee      	bne.n	ddf4 <am_hal_adc_samples_read+0x68>
    de16:	e7e3      	b.n	dde0 <am_hal_adc_samples_read+0x54>
    de18:	428c      	cmp	r4, r1
    de1a:	d9e1      	bls.n	dde0 <am_hal_adc_samples_read+0x54>
    de1c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    de1e:	f3c2 0113 	ubfx	r1, r2, #0, #20
    de22:	f3c2 7502 	ubfx	r5, r2, #28, #3
    de26:	e900 0022 	stmdb	r0, {r1, r5}
    de2a:	6819      	ldr	r1, [r3, #0]
    de2c:	f3c2 5207 	ubfx	r2, r2, #20, #8
    de30:	3101      	adds	r1, #1
    de32:	3008      	adds	r0, #8
    de34:	6019      	str	r1, [r3, #0]
    de36:	2a00      	cmp	r2, #0
    de38:	d1ee      	bne.n	de18 <am_hal_adc_samples_read+0x8c>
    de3a:	e7d1      	b.n	dde0 <am_hal_adc_samples_read+0x54>
    de3c:	01afafaf 	.word	0x01afafaf
    de40:	50010000 	.word	0x50010000

0000de44 <am_hal_adc_sw_trigger>:
    de44:	b128      	cbz	r0, de52 <am_hal_adc_sw_trigger+0xe>
    de46:	6803      	ldr	r3, [r0, #0]
    de48:	4a05      	ldr	r2, [pc, #20]	; (de60 <am_hal_adc_sw_trigger+0x1c>)
    de4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de4e:	4293      	cmp	r3, r2
    de50:	d001      	beq.n	de56 <am_hal_adc_sw_trigger+0x12>
    de52:	2002      	movs	r0, #2
    de54:	4770      	bx	lr
    de56:	4b03      	ldr	r3, [pc, #12]	; (de64 <am_hal_adc_sw_trigger+0x20>)
    de58:	2237      	movs	r2, #55	; 0x37
    de5a:	609a      	str	r2, [r3, #8]
    de5c:	2000      	movs	r0, #0
    de5e:	4770      	bx	lr
    de60:	01afafaf 	.word	0x01afafaf
    de64:	50010000 	.word	0x50010000

0000de68 <am_hal_adc_power_control>:
    de68:	b140      	cbz	r0, de7c <am_hal_adc_power_control+0x14>
    de6a:	6803      	ldr	r3, [r0, #0]
    de6c:	b570      	push	{r4, r5, r6, lr}
    de6e:	4c2e      	ldr	r4, [pc, #184]	; (df28 <am_hal_adc_power_control+0xc0>)
    de70:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de74:	42a3      	cmp	r3, r4
    de76:	d003      	beq.n	de80 <am_hal_adc_power_control+0x18>
    de78:	2002      	movs	r0, #2
    de7a:	bd70      	pop	{r4, r5, r6, pc}
    de7c:	2002      	movs	r0, #2
    de7e:	4770      	bx	lr
    de80:	4604      	mov	r4, r0
    de82:	4615      	mov	r5, r2
    de84:	460e      	mov	r6, r1
    de86:	b329      	cbz	r1, ded4 <am_hal_adc_power_control+0x6c>
    de88:	2902      	cmp	r1, #2
    de8a:	d821      	bhi.n	ded0 <am_hal_adc_power_control+0x68>
    de8c:	b1da      	cbz	r2, dec6 <am_hal_adc_power_control+0x5e>
    de8e:	4b27      	ldr	r3, [pc, #156]	; (df2c <am_hal_adc_power_control+0xc4>)
    de90:	68da      	ldr	r2, [r3, #12]
    de92:	6142      	str	r2, [r0, #20]
    de94:	691a      	ldr	r2, [r3, #16]
    de96:	6182      	str	r2, [r0, #24]
    de98:	695a      	ldr	r2, [r3, #20]
    de9a:	61c2      	str	r2, [r0, #28]
    de9c:	699a      	ldr	r2, [r3, #24]
    de9e:	6202      	str	r2, [r0, #32]
    dea0:	69da      	ldr	r2, [r3, #28]
    dea2:	6242      	str	r2, [r0, #36]	; 0x24
    dea4:	6a1a      	ldr	r2, [r3, #32]
    dea6:	6282      	str	r2, [r0, #40]	; 0x28
    dea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    deaa:	62c2      	str	r2, [r0, #44]	; 0x2c
    deac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    deae:	6302      	str	r2, [r0, #48]	; 0x30
    deb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    deb2:	6342      	str	r2, [r0, #52]	; 0x34
    deb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    deb6:	6382      	str	r2, [r0, #56]	; 0x38
    deb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    debc:	63c2      	str	r2, [r0, #60]	; 0x3c
    debe:	681b      	ldr	r3, [r3, #0]
    dec0:	6103      	str	r3, [r0, #16]
    dec2:	2301      	movs	r3, #1
    dec4:	7303      	strb	r3, [r0, #12]
    dec6:	200a      	movs	r0, #10
    dec8:	f001 fb94 	bl	f5f4 <am_hal_pwrctrl_periph_disable>
    decc:	2000      	movs	r0, #0
    dece:	bd70      	pop	{r4, r5, r6, pc}
    ded0:	2006      	movs	r0, #6
    ded2:	bd70      	pop	{r4, r5, r6, pc}
    ded4:	b11a      	cbz	r2, dede <am_hal_adc_power_control+0x76>
    ded6:	7b03      	ldrb	r3, [r0, #12]
    ded8:	b933      	cbnz	r3, dee8 <am_hal_adc_power_control+0x80>
    deda:	2007      	movs	r0, #7
    dedc:	bd70      	pop	{r4, r5, r6, pc}
    dede:	200a      	movs	r0, #10
    dee0:	f001 fb5e 	bl	f5a0 <am_hal_pwrctrl_periph_enable>
    dee4:	4628      	mov	r0, r5
    dee6:	bd70      	pop	{r4, r5, r6, pc}
    dee8:	200a      	movs	r0, #10
    deea:	f001 fb59 	bl	f5a0 <am_hal_pwrctrl_periph_enable>
    deee:	4b0f      	ldr	r3, [pc, #60]	; (df2c <am_hal_adc_power_control+0xc4>)
    def0:	6962      	ldr	r2, [r4, #20]
    def2:	60da      	str	r2, [r3, #12]
    def4:	69a2      	ldr	r2, [r4, #24]
    def6:	611a      	str	r2, [r3, #16]
    def8:	69e2      	ldr	r2, [r4, #28]
    defa:	615a      	str	r2, [r3, #20]
    defc:	6a22      	ldr	r2, [r4, #32]
    defe:	619a      	str	r2, [r3, #24]
    df00:	6a62      	ldr	r2, [r4, #36]	; 0x24
    df02:	61da      	str	r2, [r3, #28]
    df04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    df06:	621a      	str	r2, [r3, #32]
    df08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    df0a:	625a      	str	r2, [r3, #36]	; 0x24
    df0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    df0e:	629a      	str	r2, [r3, #40]	; 0x28
    df10:	6b62      	ldr	r2, [r4, #52]	; 0x34
    df12:	62da      	str	r2, [r3, #44]	; 0x2c
    df14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df16:	631a      	str	r2, [r3, #48]	; 0x30
    df18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    df1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    df1e:	6922      	ldr	r2, [r4, #16]
    df20:	601a      	str	r2, [r3, #0]
    df22:	4630      	mov	r0, r6
    df24:	7326      	strb	r6, [r4, #12]
    df26:	bd70      	pop	{r4, r5, r6, pc}
    df28:	01afafaf 	.word	0x01afafaf
    df2c:	50010000 	.word	0x50010000

0000df30 <am_hal_cachectrl_config>:
    df30:	b530      	push	{r4, r5, lr}
    df32:	b083      	sub	sp, #12
    df34:	4605      	mov	r5, r0
    df36:	f000 fd35 	bl	e9a4 <am_hal_interrupt_master_disable>
    df3a:	4c0f      	ldr	r4, [pc, #60]	; (df78 <am_hal_cachectrl_config+0x48>)
    df3c:	9001      	str	r0, [sp, #4]
    df3e:	6823      	ldr	r3, [r4, #0]
    df40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    df44:	6023      	str	r3, [r4, #0]
    df46:	9801      	ldr	r0, [sp, #4]
    df48:	f000 fd30 	bl	e9ac <am_hal_interrupt_master_set>
    df4c:	78ab      	ldrb	r3, [r5, #2]
    df4e:	782a      	ldrb	r2, [r5, #0]
    df50:	7869      	ldrb	r1, [r5, #1]
    df52:	005b      	lsls	r3, r3, #1
    df54:	0112      	lsls	r2, r2, #4
    df56:	b2d2      	uxtb	r2, r2
    df58:	f003 0302 	and.w	r3, r3, #2
    df5c:	4313      	orrs	r3, r2
    df5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    df62:	020a      	lsls	r2, r1, #8
    df64:	f402 7240 	and.w	r2, r2, #768	; 0x300
    df68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    df6c:	4313      	orrs	r3, r2
    df6e:	2000      	movs	r0, #0
    df70:	6023      	str	r3, [r4, #0]
    df72:	b003      	add	sp, #12
    df74:	bd30      	pop	{r4, r5, pc}
    df76:	bf00      	nop
    df78:	40018000 	.word	0x40018000

0000df7c <am_hal_cachectrl_enable>:
    df7c:	4a03      	ldr	r2, [pc, #12]	; (df8c <am_hal_cachectrl_enable+0x10>)
    df7e:	6813      	ldr	r3, [r2, #0]
    df80:	f043 0301 	orr.w	r3, r3, #1
    df84:	6013      	str	r3, [r2, #0]
    df86:	2000      	movs	r0, #0
    df88:	4770      	bx	lr
    df8a:	bf00      	nop
    df8c:	40018000 	.word	0x40018000

0000df90 <am_hal_cachectrl_control>:
    df90:	b510      	push	{r4, lr}
    df92:	3801      	subs	r0, #1
    df94:	b08e      	sub	sp, #56	; 0x38
    df96:	2810      	cmp	r0, #16
    df98:	f200 8143 	bhi.w	e222 <am_hal_cachectrl_control+0x292>
    df9c:	e8df f010 	tbh	[pc, r0, lsl #1]
    dfa0:	01380136 	.word	0x01380136
    dfa4:	0011013e 	.word	0x0011013e
    dfa8:	001a0018 	.word	0x001a0018
    dfac:	001f001c 	.word	0x001f001c
    dfb0:	00300022 	.word	0x00300022
    dfb4:	0074003c 	.word	0x0074003c
    dfb8:	00e400ac 	.word	0x00e400ac
    dfbc:	011a00ff 	.word	0x011a00ff
    dfc0:	0120      	.short	0x0120
    dfc2:	f44f 7208 	mov.w	r2, #544	; 0x220
    dfc6:	4ba8      	ldr	r3, [pc, #672]	; (e268 <am_hal_cachectrl_control+0x2d8>)
    dfc8:	2000      	movs	r0, #0
    dfca:	609a      	str	r2, [r3, #8]
    dfcc:	b00e      	add	sp, #56	; 0x38
    dfce:	bd10      	pop	{r4, pc}
    dfd0:	2240      	movs	r2, #64	; 0x40
    dfd2:	e7f8      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    dfd4:	2220      	movs	r2, #32
    dfd6:	e7f6      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    dfd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dfdc:	e7f3      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    dfde:	f44f 7200 	mov.w	r2, #512	; 0x200
    dfe2:	e7f0      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    dfe4:	f000 fcde 	bl	e9a4 <am_hal_interrupt_master_disable>
    dfe8:	4a9f      	ldr	r2, [pc, #636]	; (e268 <am_hal_cachectrl_control+0x2d8>)
    dfea:	9000      	str	r0, [sp, #0]
    dfec:	6813      	ldr	r3, [r2, #0]
    dfee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dff2:	6013      	str	r3, [r2, #0]
    dff4:	9800      	ldr	r0, [sp, #0]
    dff6:	f000 fcd9 	bl	e9ac <am_hal_interrupt_master_set>
    dffa:	2000      	movs	r0, #0
    dffc:	b00e      	add	sp, #56	; 0x38
    dffe:	bd10      	pop	{r4, pc}
    e000:	f000 fcd0 	bl	e9a4 <am_hal_interrupt_master_disable>
    e004:	4a98      	ldr	r2, [pc, #608]	; (e268 <am_hal_cachectrl_control+0x2d8>)
    e006:	9001      	str	r0, [sp, #4]
    e008:	6813      	ldr	r3, [r2, #0]
    e00a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e00e:	6013      	str	r3, [r2, #0]
    e010:	9801      	ldr	r0, [sp, #4]
    e012:	f000 fccb 	bl	e9ac <am_hal_interrupt_master_set>
    e016:	e7f0      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e018:	f000 fcc4 	bl	e9a4 <am_hal_interrupt_master_disable>
    e01c:	4603      	mov	r3, r0
    e01e:	4893      	ldr	r0, [pc, #588]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e020:	9302      	str	r3, [sp, #8]
    e022:	f000 faff 	bl	e624 <am_hal_flash_load_ui32>
    e026:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e02a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e02e:	488f      	ldr	r0, [pc, #572]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e030:	f000 fafc 	bl	e62c <am_hal_flash_store_ui32>
    e034:	9802      	ldr	r0, [sp, #8]
    e036:	f000 fcb9 	bl	e9ac <am_hal_interrupt_master_set>
    e03a:	f000 fcb3 	bl	e9a4 <am_hal_interrupt_master_disable>
    e03e:	4603      	mov	r3, r0
    e040:	488a      	ldr	r0, [pc, #552]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e042:	9303      	str	r3, [sp, #12]
    e044:	f000 faee 	bl	e624 <am_hal_flash_load_ui32>
    e048:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e04c:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    e050:	4886      	ldr	r0, [pc, #536]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e052:	f000 faeb 	bl	e62c <am_hal_flash_store_ui32>
    e056:	9803      	ldr	r0, [sp, #12]
    e058:	f000 fca8 	bl	e9ac <am_hal_interrupt_master_set>
    e05c:	f000 fca2 	bl	e9a4 <am_hal_interrupt_master_disable>
    e060:	4603      	mov	r3, r0
    e062:	4882      	ldr	r0, [pc, #520]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e064:	9304      	str	r3, [sp, #16]
    e066:	f000 fadd 	bl	e624 <am_hal_flash_load_ui32>
    e06a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e06e:	f021 010f 	bic.w	r1, r1, #15
    e072:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e076:	f041 0103 	orr.w	r1, r1, #3
    e07a:	487c      	ldr	r0, [pc, #496]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e07c:	f000 fad6 	bl	e62c <am_hal_flash_store_ui32>
    e080:	9804      	ldr	r0, [sp, #16]
    e082:	f000 fc93 	bl	e9ac <am_hal_interrupt_master_set>
    e086:	e7b8      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e088:	f000 fc8c 	bl	e9a4 <am_hal_interrupt_master_disable>
    e08c:	4603      	mov	r3, r0
    e08e:	4877      	ldr	r0, [pc, #476]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e090:	9305      	str	r3, [sp, #20]
    e092:	f000 fac7 	bl	e624 <am_hal_flash_load_ui32>
    e096:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e09a:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e09e:	4873      	ldr	r0, [pc, #460]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e0a0:	f000 fac4 	bl	e62c <am_hal_flash_store_ui32>
    e0a4:	9805      	ldr	r0, [sp, #20]
    e0a6:	f000 fc81 	bl	e9ac <am_hal_interrupt_master_set>
    e0aa:	f000 fc7b 	bl	e9a4 <am_hal_interrupt_master_disable>
    e0ae:	4603      	mov	r3, r0
    e0b0:	486e      	ldr	r0, [pc, #440]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e0b2:	9306      	str	r3, [sp, #24]
    e0b4:	f000 fab6 	bl	e624 <am_hal_flash_load_ui32>
    e0b8:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e0bc:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    e0c0:	486a      	ldr	r0, [pc, #424]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e0c2:	f000 fab3 	bl	e62c <am_hal_flash_store_ui32>
    e0c6:	9806      	ldr	r0, [sp, #24]
    e0c8:	f000 fc70 	bl	e9ac <am_hal_interrupt_master_set>
    e0cc:	f000 fc6a 	bl	e9a4 <am_hal_interrupt_master_disable>
    e0d0:	4603      	mov	r3, r0
    e0d2:	4866      	ldr	r0, [pc, #408]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e0d4:	9307      	str	r3, [sp, #28]
    e0d6:	f000 faa5 	bl	e624 <am_hal_flash_load_ui32>
    e0da:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e0de:	f021 010f 	bic.w	r1, r1, #15
    e0e2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e0e6:	f041 0101 	orr.w	r1, r1, #1
    e0ea:	4860      	ldr	r0, [pc, #384]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e0ec:	f000 fa9e 	bl	e62c <am_hal_flash_store_ui32>
    e0f0:	9807      	ldr	r0, [sp, #28]
    e0f2:	f000 fc5b 	bl	e9ac <am_hal_interrupt_master_set>
    e0f6:	e780      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e0f8:	f000 fc54 	bl	e9a4 <am_hal_interrupt_master_disable>
    e0fc:	4603      	mov	r3, r0
    e0fe:	485b      	ldr	r0, [pc, #364]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e100:	9308      	str	r3, [sp, #32]
    e102:	f000 fa8f 	bl	e624 <am_hal_flash_load_ui32>
    e106:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e10a:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e10e:	4857      	ldr	r0, [pc, #348]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e110:	f000 fa8c 	bl	e62c <am_hal_flash_store_ui32>
    e114:	9808      	ldr	r0, [sp, #32]
    e116:	f000 fc49 	bl	e9ac <am_hal_interrupt_master_set>
    e11a:	f000 fc43 	bl	e9a4 <am_hal_interrupt_master_disable>
    e11e:	4603      	mov	r3, r0
    e120:	4852      	ldr	r0, [pc, #328]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e122:	9309      	str	r3, [sp, #36]	; 0x24
    e124:	f000 fa7e 	bl	e624 <am_hal_flash_load_ui32>
    e128:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e12c:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    e130:	484e      	ldr	r0, [pc, #312]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e132:	f000 fa7b 	bl	e62c <am_hal_flash_store_ui32>
    e136:	9809      	ldr	r0, [sp, #36]	; 0x24
    e138:	f000 fc38 	bl	e9ac <am_hal_interrupt_master_set>
    e13c:	f000 fc32 	bl	e9a4 <am_hal_interrupt_master_disable>
    e140:	4603      	mov	r3, r0
    e142:	484a      	ldr	r0, [pc, #296]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e144:	930a      	str	r3, [sp, #40]	; 0x28
    e146:	f000 fa6d 	bl	e624 <am_hal_flash_load_ui32>
    e14a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e14e:	f021 010f 	bic.w	r1, r1, #15
    e152:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e156:	f041 0101 	orr.w	r1, r1, #1
    e15a:	4844      	ldr	r0, [pc, #272]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e15c:	f000 fa66 	bl	e62c <am_hal_flash_store_ui32>
    e160:	980a      	ldr	r0, [sp, #40]	; 0x28
    e162:	f000 fc23 	bl	e9ac <am_hal_interrupt_master_set>
    e166:	e748      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e168:	2900      	cmp	r1, #0
    e16a:	d05a      	beq.n	e222 <am_hal_cachectrl_control+0x292>
    e16c:	680c      	ldr	r4, [r1, #0]
    e16e:	2c03      	cmp	r4, #3
    e170:	d834      	bhi.n	e1dc <am_hal_cachectrl_control+0x24c>
    e172:	f000 fc17 	bl	e9a4 <am_hal_interrupt_master_disable>
    e176:	4603      	mov	r3, r0
    e178:	483c      	ldr	r0, [pc, #240]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e17a:	930b      	str	r3, [sp, #44]	; 0x2c
    e17c:	f000 fa52 	bl	e624 <am_hal_flash_load_ui32>
    e180:	0323      	lsls	r3, r4, #12
    e182:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    e186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e18a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e18e:	4319      	orrs	r1, r3
    e190:	4836      	ldr	r0, [pc, #216]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e192:	f000 fa4b 	bl	e62c <am_hal_flash_store_ui32>
    e196:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e198:	f000 fc08 	bl	e9ac <am_hal_interrupt_master_set>
    e19c:	e72d      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e19e:	2900      	cmp	r1, #0
    e1a0:	d03f      	beq.n	e222 <am_hal_cachectrl_control+0x292>
    e1a2:	680c      	ldr	r4, [r1, #0]
    e1a4:	2c07      	cmp	r4, #7
    e1a6:	d819      	bhi.n	e1dc <am_hal_cachectrl_control+0x24c>
    e1a8:	f000 fbfc 	bl	e9a4 <am_hal_interrupt_master_disable>
    e1ac:	4603      	mov	r3, r0
    e1ae:	482f      	ldr	r0, [pc, #188]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e1b0:	930c      	str	r3, [sp, #48]	; 0x30
    e1b2:	f000 fa37 	bl	e624 <am_hal_flash_load_ui32>
    e1b6:	0123      	lsls	r3, r4, #4
    e1b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e1bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e1c0:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e1c4:	4319      	orrs	r1, r3
    e1c6:	4829      	ldr	r0, [pc, #164]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e1c8:	f000 fa30 	bl	e62c <am_hal_flash_store_ui32>
    e1cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    e1ce:	f000 fbed 	bl	e9ac <am_hal_interrupt_master_set>
    e1d2:	e712      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e1d4:	b329      	cbz	r1, e222 <am_hal_cachectrl_control+0x292>
    e1d6:	680c      	ldr	r4, [r1, #0]
    e1d8:	2c0f      	cmp	r4, #15
    e1da:	d926      	bls.n	e22a <am_hal_cachectrl_control+0x29a>
    e1dc:	2001      	movs	r0, #1
    e1de:	e6f5      	b.n	dfcc <am_hal_cachectrl_control+0x3c>
    e1e0:	b1f9      	cbz	r1, e222 <am_hal_cachectrl_control+0x292>
    e1e2:	684a      	ldr	r2, [r1, #4]
    e1e4:	4b22      	ldr	r3, [pc, #136]	; (e270 <am_hal_cachectrl_control+0x2e0>)
    e1e6:	4013      	ands	r3, r2
    e1e8:	b9db      	cbnz	r3, e222 <am_hal_cachectrl_control+0x292>
    e1ea:	688b      	ldr	r3, [r1, #8]
    e1ec:	4820      	ldr	r0, [pc, #128]	; (e270 <am_hal_cachectrl_control+0x2e0>)
    e1ee:	4018      	ands	r0, r3
    e1f0:	b9b8      	cbnz	r0, e222 <am_hal_cachectrl_control+0x292>
    e1f2:	780c      	ldrb	r4, [r1, #0]
    e1f4:	b374      	cbz	r4, e254 <am_hal_cachectrl_control+0x2c4>
    e1f6:	2c01      	cmp	r4, #1
    e1f8:	d113      	bne.n	e222 <am_hal_cachectrl_control+0x292>
    e1fa:	4c1b      	ldr	r4, [pc, #108]	; (e268 <am_hal_cachectrl_control+0x2d8>)
    e1fc:	61a2      	str	r2, [r4, #24]
    e1fe:	61e3      	str	r3, [r4, #28]
    e200:	784a      	ldrb	r2, [r1, #1]
    e202:	6823      	ldr	r3, [r4, #0]
    e204:	f362 03c3 	bfi	r3, r2, #3, #1
    e208:	6023      	str	r3, [r4, #0]
    e20a:	e6df      	b.n	dfcc <am_hal_cachectrl_control+0x3c>
    e20c:	2201      	movs	r2, #1
    e20e:	e6da      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    e210:	4b15      	ldr	r3, [pc, #84]	; (e268 <am_hal_cachectrl_control+0x2d8>)
    e212:	681b      	ldr	r3, [r3, #0]
    e214:	01db      	lsls	r3, r3, #7
    e216:	d406      	bmi.n	e226 <am_hal_cachectrl_control+0x296>
    e218:	2007      	movs	r0, #7
    e21a:	e6d7      	b.n	dfcc <am_hal_cachectrl_control+0x3c>
    e21c:	f44f 6288 	mov.w	r2, #1088	; 0x440
    e220:	e6d1      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    e222:	2006      	movs	r0, #6
    e224:	e6d2      	b.n	dfcc <am_hal_cachectrl_control+0x3c>
    e226:	2202      	movs	r2, #2
    e228:	e6cd      	b.n	dfc6 <am_hal_cachectrl_control+0x36>
    e22a:	f000 fbbb 	bl	e9a4 <am_hal_interrupt_master_disable>
    e22e:	4603      	mov	r3, r0
    e230:	480e      	ldr	r0, [pc, #56]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e232:	930d      	str	r3, [sp, #52]	; 0x34
    e234:	f000 f9f6 	bl	e624 <am_hal_flash_load_ui32>
    e238:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e23c:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    e240:	f021 010f 	bic.w	r1, r1, #15
    e244:	4321      	orrs	r1, r4
    e246:	4809      	ldr	r0, [pc, #36]	; (e26c <am_hal_cachectrl_control+0x2dc>)
    e248:	f000 f9f0 	bl	e62c <am_hal_flash_store_ui32>
    e24c:	980d      	ldr	r0, [sp, #52]	; 0x34
    e24e:	f000 fbad 	bl	e9ac <am_hal_interrupt_master_set>
    e252:	e6d2      	b.n	dffa <am_hal_cachectrl_control+0x6a>
    e254:	4c04      	ldr	r4, [pc, #16]	; (e268 <am_hal_cachectrl_control+0x2d8>)
    e256:	6122      	str	r2, [r4, #16]
    e258:	6163      	str	r3, [r4, #20]
    e25a:	784a      	ldrb	r2, [r1, #1]
    e25c:	6823      	ldr	r3, [r4, #0]
    e25e:	f362 0382 	bfi	r3, r2, #2, #1
    e262:	6023      	str	r3, [r4, #0]
    e264:	e6b2      	b.n	dfcc <am_hal_cachectrl_control+0x3c>
    e266:	bf00      	nop
    e268:	40018000 	.word	0x40018000
    e26c:	40018004 	.word	0x40018004
    e270:	f800000f 	.word	0xf800000f

0000e274 <am_hal_clkgen_control>:
    e274:	4b41      	ldr	r3, [pc, #260]	; (e37c <am_hal_clkgen_control+0x108>)
    e276:	681a      	ldr	r2, [r3, #0]
    e278:	b912      	cbnz	r2, e280 <am_hal_clkgen_control+0xc>
    e27a:	4a41      	ldr	r2, [pc, #260]	; (e380 <am_hal_clkgen_control+0x10c>)
    e27c:	6812      	ldr	r2, [r2, #0]
    e27e:	601a      	str	r2, [r3, #0]
    e280:	2809      	cmp	r0, #9
    e282:	d878      	bhi.n	e376 <am_hal_clkgen_control+0x102>
    e284:	e8df f000 	tbb	[pc, r0]
    e288:	261e160d 	.word	0x261e160d
    e28c:	524c423a 	.word	0x524c423a
    e290:	055a      	.short	0x055a
    e292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e296:	2000      	movs	r0, #0
    e298:	6a1a      	ldr	r2, [r3, #32]
    e29a:	f36f 0200 	bfc	r2, #0, #1
    e29e:	621a      	str	r2, [r3, #32]
    e2a0:	4770      	bx	lr
    e2a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2a6:	2200      	movs	r2, #0
    e2a8:	2147      	movs	r1, #71	; 0x47
    e2aa:	6159      	str	r1, [r3, #20]
    e2ac:	4610      	mov	r0, r2
    e2ae:	619a      	str	r2, [r3, #24]
    e2b0:	615a      	str	r2, [r3, #20]
    e2b2:	4770      	bx	lr
    e2b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2b8:	2000      	movs	r0, #0
    e2ba:	68d3      	ldr	r3, [r2, #12]
    e2bc:	f023 0301 	bic.w	r3, r3, #1
    e2c0:	60d3      	str	r3, [r2, #12]
    e2c2:	4770      	bx	lr
    e2c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2c8:	2000      	movs	r0, #0
    e2ca:	68d3      	ldr	r3, [r2, #12]
    e2cc:	f023 0302 	bic.w	r3, r3, #2
    e2d0:	60d3      	str	r3, [r2, #12]
    e2d2:	4770      	bx	lr
    e2d4:	4a2b      	ldr	r2, [pc, #172]	; (e384 <am_hal_clkgen_control+0x110>)
    e2d6:	68d3      	ldr	r3, [r2, #12]
    e2d8:	b2db      	uxtb	r3, r3
    e2da:	2b21      	cmp	r3, #33	; 0x21
    e2dc:	d106      	bne.n	e2ec <am_hal_clkgen_control+0x78>
    e2de:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e2e2:	2101      	movs	r1, #1
    e2e4:	f361 2309 	bfi	r3, r1, #8, #2
    e2e8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e2ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2f0:	2000      	movs	r0, #0
    e2f2:	68d3      	ldr	r3, [r2, #12]
    e2f4:	f043 0301 	orr.w	r3, r3, #1
    e2f8:	60d3      	str	r3, [r2, #12]
    e2fa:	4770      	bx	lr
    e2fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e300:	2000      	movs	r0, #0
    e302:	68d3      	ldr	r3, [r2, #12]
    e304:	f043 0302 	orr.w	r3, r3, #2
    e308:	60d3      	str	r3, [r2, #12]
    e30a:	4770      	bx	lr
    e30c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e310:	2200      	movs	r2, #0
    e312:	2047      	movs	r0, #71	; 0x47
    e314:	2101      	movs	r1, #1
    e316:	6158      	str	r0, [r3, #20]
    e318:	6199      	str	r1, [r3, #24]
    e31a:	4610      	mov	r0, r2
    e31c:	615a      	str	r2, [r3, #20]
    e31e:	4770      	bx	lr
    e320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e324:	2000      	movs	r0, #0
    e326:	68da      	ldr	r2, [r3, #12]
    e328:	60da      	str	r2, [r3, #12]
    e32a:	4770      	bx	lr
    e32c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e330:	2000      	movs	r0, #0
    e332:	68d3      	ldr	r3, [r2, #12]
    e334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e338:	60d3      	str	r3, [r2, #12]
    e33a:	4770      	bx	lr
    e33c:	b510      	push	{r4, lr}
    e33e:	4a11      	ldr	r2, [pc, #68]	; (e384 <am_hal_clkgen_control+0x110>)
    e340:	68d3      	ldr	r3, [r2, #12]
    e342:	b2db      	uxtb	r3, r3
    e344:	2b21      	cmp	r3, #33	; 0x21
    e346:	460c      	mov	r4, r1
    e348:	d008      	beq.n	e35c <am_hal_clkgen_control+0xe8>
    e34a:	b194      	cbz	r4, e372 <am_hal_clkgen_control+0xfe>
    e34c:	6823      	ldr	r3, [r4, #0]
    e34e:	f043 0301 	orr.w	r3, r3, #1
    e352:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e356:	2000      	movs	r0, #0
    e358:	6213      	str	r3, [r2, #32]
    e35a:	bd10      	pop	{r4, pc}
    e35c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e360:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e364:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e368:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e36c:	f000 f910 	bl	e590 <am_hal_flash_delay>
    e370:	e7eb      	b.n	e34a <am_hal_clkgen_control+0xd6>
    e372:	4b05      	ldr	r3, [pc, #20]	; (e388 <am_hal_clkgen_control+0x114>)
    e374:	e7ed      	b.n	e352 <am_hal_clkgen_control+0xde>
    e376:	2006      	movs	r0, #6
    e378:	4770      	bx	lr
    e37a:	bf00      	nop
    e37c:	1000118c 	.word	0x1000118c
    e380:	4ffff000 	.word	0x4ffff000
    e384:	40020000 	.word	0x40020000
    e388:	0025b801 	.word	0x0025b801

0000e38c <am_hal_clkgen_status_get>:
    e38c:	b1a8      	cbz	r0, e3ba <am_hal_clkgen_status_get+0x2e>
    e38e:	b410      	push	{r4}
    e390:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e394:	490a      	ldr	r1, [pc, #40]	; (e3c0 <am_hal_clkgen_status_get+0x34>)
    e396:	6994      	ldr	r4, [r2, #24]
    e398:	4b0a      	ldr	r3, [pc, #40]	; (e3c4 <am_hal_clkgen_status_get+0x38>)
    e39a:	f014 0f01 	tst.w	r4, #1
    e39e:	bf08      	it	eq
    e3a0:	460b      	moveq	r3, r1
    e3a2:	6003      	str	r3, [r0, #0]
    e3a4:	69d3      	ldr	r3, [r2, #28]
    e3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e3aa:	f003 0201 	and.w	r2, r3, #1
    e3ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e3b2:	6042      	str	r2, [r0, #4]
    e3b4:	7203      	strb	r3, [r0, #8]
    e3b6:	2000      	movs	r0, #0
    e3b8:	4770      	bx	lr
    e3ba:	2006      	movs	r0, #6
    e3bc:	4770      	bx	lr
    e3be:	bf00      	nop
    e3c0:	02dc6c00 	.word	0x02dc6c00
    e3c4:	016e3600 	.word	0x016e3600

0000e3c8 <am_hal_ctimer_config_single>:
    e3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3ca:	b083      	sub	sp, #12
    e3cc:	460e      	mov	r6, r1
    e3ce:	4614      	mov	r4, r2
    e3d0:	0147      	lsls	r7, r0, #5
    e3d2:	4605      	mov	r5, r0
    e3d4:	f000 fae6 	bl	e9a4 <am_hal_interrupt_master_disable>
    e3d8:	4a19      	ldr	r2, [pc, #100]	; (e440 <am_hal_ctimer_config_single+0x78>)
    e3da:	9001      	str	r0, [sp, #4]
    e3dc:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e3e0:	58bb      	ldr	r3, [r7, r2]
    e3e2:	d021      	beq.n	e428 <am_hal_ctimer_config_single+0x60>
    e3e4:	ea23 0306 	bic.w	r3, r3, r6
    e3e8:	1c71      	adds	r1, r6, #1
    e3ea:	ea43 0304 	orr.w	r3, r3, r4
    e3ee:	d00c      	beq.n	e40a <am_hal_ctimer_config_single+0x42>
    e3f0:	50bb      	str	r3, [r7, r2]
    e3f2:	9801      	ldr	r0, [sp, #4]
    e3f4:	f000 fada 	bl	e9ac <am_hal_interrupt_master_set>
    e3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e3fc:	429e      	cmp	r6, r3
    e3fe:	d01c      	beq.n	e43a <am_hal_ctimer_config_single+0x72>
    e400:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e404:	d017      	beq.n	e436 <am_hal_ctimer_config_single+0x6e>
    e406:	b003      	add	sp, #12
    e408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e40a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e40e:	50bb      	str	r3, [r7, r2]
    e410:	9801      	ldr	r0, [sp, #4]
    e412:	f000 facb 	bl	e9ac <am_hal_interrupt_master_set>
    e416:	2200      	movs	r2, #0
    e418:	4b0a      	ldr	r3, [pc, #40]	; (e444 <am_hal_ctimer_config_single+0x7c>)
    e41a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e41e:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e422:	54ac      	strb	r4, [r5, r2]
    e424:	b003      	add	sp, #12
    e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e428:	0424      	lsls	r4, r4, #16
    e42a:	b29b      	uxth	r3, r3
    e42c:	4323      	orrs	r3, r4
    e42e:	50bb      	str	r3, [r7, r2]
    e430:	9801      	ldr	r0, [sp, #4]
    e432:	f000 fabb 	bl	e9ac <am_hal_interrupt_master_set>
    e436:	2201      	movs	r2, #1
    e438:	e7ee      	b.n	e418 <am_hal_ctimer_config_single+0x50>
    e43a:	2200      	movs	r2, #0
    e43c:	e7ec      	b.n	e418 <am_hal_ctimer_config_single+0x50>
    e43e:	bf00      	nop
    e440:	4000800c 	.word	0x4000800c
    e444:	10001048 	.word	0x10001048

0000e448 <am_hal_ctimer_start>:
    e448:	b570      	push	{r4, r5, r6, lr}
    e44a:	b082      	sub	sp, #8
    e44c:	460c      	mov	r4, r1
    e44e:	0146      	lsls	r6, r0, #5
    e450:	4605      	mov	r5, r0
    e452:	f000 faa7 	bl	e9a4 <am_hal_interrupt_master_disable>
    e456:	4a0f      	ldr	r2, [pc, #60]	; (e494 <am_hal_ctimer_start+0x4c>)
    e458:	9001      	str	r0, [sp, #4]
    e45a:	58b3      	ldr	r3, [r6, r2]
    e45c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e460:	ea23 0301 	bic.w	r3, r3, r1
    e464:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e468:	430b      	orrs	r3, r1
    e46a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e46e:	bf0c      	ite	eq
    e470:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e474:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e478:	50b3      	str	r3, [r6, r2]
    e47a:	4b07      	ldr	r3, [pc, #28]	; (e498 <am_hal_ctimer_start+0x50>)
    e47c:	9801      	ldr	r0, [sp, #4]
    e47e:	bf0c      	ite	eq
    e480:	2101      	moveq	r1, #1
    e482:	2100      	movne	r1, #0
    e484:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e488:	545c      	strb	r4, [r3, r1]
    e48a:	f000 fa8f 	bl	e9ac <am_hal_interrupt_master_set>
    e48e:	b002      	add	sp, #8
    e490:	bd70      	pop	{r4, r5, r6, pc}
    e492:	bf00      	nop
    e494:	4000800c 	.word	0x4000800c
    e498:	10001048 	.word	0x10001048

0000e49c <am_hal_ctimer_period_set>:
    e49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4a0:	b082      	sub	sp, #8
    e4a2:	4689      	mov	r9, r1
    e4a4:	4698      	mov	r8, r3
    e4a6:	0147      	lsls	r7, r0, #5
    e4a8:	4614      	mov	r4, r2
    e4aa:	f000 fa7b 	bl	e9a4 <am_hal_interrupt_master_disable>
    e4ae:	f8df a094 	ldr.w	sl, [pc, #148]	; e544 <am_hal_ctimer_period_set+0xa8>
    e4b2:	9001      	str	r0, [sp, #4]
    e4b4:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e4b8:	4d20      	ldr	r5, [pc, #128]	; (e53c <am_hal_ctimer_period_set+0xa0>)
    e4ba:	4e21      	ldr	r6, [pc, #132]	; (e540 <am_hal_ctimer_period_set+0xa4>)
    e4bc:	f857 300a 	ldr.w	r3, [r7, sl]
    e4c0:	d01a      	beq.n	e4f8 <am_hal_ctimer_period_set+0x5c>
    e4c2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e4c6:	2b80      	cmp	r3, #128	; 0x80
    e4c8:	d01b      	beq.n	e502 <am_hal_ctimer_period_set+0x66>
    e4ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4ce:	2000      	movs	r0, #0
    e4d0:	4591      	cmp	r9, r2
    e4d2:	4603      	mov	r3, r0
    e4d4:	d01e      	beq.n	e514 <am_hal_ctimer_period_set+0x78>
    e4d6:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e4da:	d025      	beq.n	e528 <am_hal_ctimer_period_set+0x8c>
    e4dc:	0c1b      	lsrs	r3, r3, #16
    e4de:	b2a2      	uxth	r2, r4
    e4e0:	041b      	lsls	r3, r3, #16
    e4e2:	4310      	orrs	r0, r2
    e4e4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e4e8:	5178      	str	r0, [r7, r5]
    e4ea:	51bb      	str	r3, [r7, r6]
    e4ec:	9801      	ldr	r0, [sp, #4]
    e4ee:	f000 fa5d 	bl	e9ac <am_hal_interrupt_master_set>
    e4f2:	b002      	add	sp, #8
    e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4f8:	0c1b      	lsrs	r3, r3, #16
    e4fa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e4fe:	2b80      	cmp	r3, #128	; 0x80
    e500:	d111      	bne.n	e526 <am_hal_ctimer_period_set+0x8a>
    e502:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e506:	4591      	cmp	r9, r2
    e508:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e50c:	4623      	mov	r3, r4
    e50e:	ebc8 0404 	rsb	r4, r8, r4
    e512:	d1e0      	bne.n	e4d6 <am_hal_ctimer_period_set+0x3a>
    e514:	b2a3      	uxth	r3, r4
    e516:	4318      	orrs	r0, r3
    e518:	5178      	str	r0, [r7, r5]
    e51a:	9801      	ldr	r0, [sp, #4]
    e51c:	f000 fa46 	bl	e9ac <am_hal_interrupt_master_set>
    e520:	b002      	add	sp, #8
    e522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e526:	2000      	movs	r0, #0
    e528:	b2a3      	uxth	r3, r4
    e52a:	4318      	orrs	r0, r3
    e52c:	51b8      	str	r0, [r7, r6]
    e52e:	9801      	ldr	r0, [sp, #4]
    e530:	f000 fa3c 	bl	e9ac <am_hal_interrupt_master_set>
    e534:	b002      	add	sp, #8
    e536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e53a:	bf00      	nop
    e53c:	40008004 	.word	0x40008004
    e540:	40008008 	.word	0x40008008
    e544:	4000800c 	.word	0x4000800c

0000e548 <am_hal_ctimer_int_enable>:
    e548:	b510      	push	{r4, lr}
    e54a:	b082      	sub	sp, #8
    e54c:	4604      	mov	r4, r0
    e54e:	f000 fa29 	bl	e9a4 <am_hal_interrupt_master_disable>
    e552:	4b06      	ldr	r3, [pc, #24]	; (e56c <am_hal_ctimer_int_enable+0x24>)
    e554:	9001      	str	r0, [sp, #4]
    e556:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e55a:	4314      	orrs	r4, r2
    e55c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e560:	9801      	ldr	r0, [sp, #4]
    e562:	f000 fa23 	bl	e9ac <am_hal_interrupt_master_set>
    e566:	b002      	add	sp, #8
    e568:	bd10      	pop	{r4, pc}
    e56a:	bf00      	nop
    e56c:	40008000 	.word	0x40008000

0000e570 <am_hal_ctimer_int_clear>:
    e570:	b510      	push	{r4, lr}
    e572:	b082      	sub	sp, #8
    e574:	4604      	mov	r4, r0
    e576:	f000 fa15 	bl	e9a4 <am_hal_interrupt_master_disable>
    e57a:	4b04      	ldr	r3, [pc, #16]	; (e58c <am_hal_ctimer_int_clear+0x1c>)
    e57c:	9001      	str	r0, [sp, #4]
    e57e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e582:	9801      	ldr	r0, [sp, #4]
    e584:	f000 fa12 	bl	e9ac <am_hal_interrupt_master_set>
    e588:	b002      	add	sp, #8
    e58a:	bd10      	pop	{r4, pc}
    e58c:	40008000 	.word	0x40008000

0000e590 <am_hal_flash_delay>:
    e590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e596:	075b      	lsls	r3, r3, #29
    e598:	bf46      	itte	mi
    e59a:	0040      	lslmi	r0, r0, #1
    e59c:	230e      	movmi	r3, #14
    e59e:	230b      	movpl	r3, #11
    e5a0:	4298      	cmp	r0, r3
    e5a2:	d800      	bhi.n	e5a6 <am_hal_flash_delay+0x16>
    e5a4:	4770      	bx	lr
    e5a6:	1ac0      	subs	r0, r0, r3
    e5a8:	4b00      	ldr	r3, [pc, #0]	; (e5ac <am_hal_flash_delay+0x1c>)
    e5aa:	4718      	bx	r3
    e5ac:	0800009d 	.word	0x0800009d

0000e5b0 <am_hal_flash_delay_status_check>:
    e5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e5b4:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e5b8:	460d      	mov	r5, r1
    e5ba:	4616      	mov	r6, r2
    e5bc:	461f      	mov	r7, r3
    e5be:	b1b4      	cbz	r4, e5ee <am_hal_flash_delay_status_check+0x3e>
    e5c0:	4604      	mov	r4, r0
    e5c2:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e5c6:	f8df 8058 	ldr.w	r8, [pc, #88]	; e620 <am_hal_flash_delay_status_check+0x70>
    e5ca:	e009      	b.n	e5e0 <am_hal_flash_delay_status_check+0x30>
    e5cc:	b324      	cbz	r4, e618 <am_hal_flash_delay_status_check+0x68>
    e5ce:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e5d2:	f013 0f04 	tst.w	r3, #4
    e5d6:	bf14      	ite	ne
    e5d8:	2012      	movne	r0, #18
    e5da:	2005      	moveq	r0, #5
    e5dc:	3c01      	subs	r4, #1
    e5de:	47c0      	blx	r8
    e5e0:	682b      	ldr	r3, [r5, #0]
    e5e2:	4033      	ands	r3, r6
    e5e4:	429f      	cmp	r7, r3
    e5e6:	d1f1      	bne.n	e5cc <am_hal_flash_delay_status_check+0x1c>
    e5e8:	2000      	movs	r0, #0
    e5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e5ee:	f8df 8030 	ldr.w	r8, [pc, #48]	; e620 <am_hal_flash_delay_status_check+0x70>
    e5f2:	4604      	mov	r4, r0
    e5f4:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e5f8:	e009      	b.n	e60e <am_hal_flash_delay_status_check+0x5e>
    e5fa:	b16c      	cbz	r4, e618 <am_hal_flash_delay_status_check+0x68>
    e5fc:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e600:	f013 0f04 	tst.w	r3, #4
    e604:	bf14      	ite	ne
    e606:	2012      	movne	r0, #18
    e608:	2005      	moveq	r0, #5
    e60a:	3c01      	subs	r4, #1
    e60c:	47c0      	blx	r8
    e60e:	682b      	ldr	r3, [r5, #0]
    e610:	4033      	ands	r3, r6
    e612:	429f      	cmp	r7, r3
    e614:	d0f1      	beq.n	e5fa <am_hal_flash_delay_status_check+0x4a>
    e616:	e7e7      	b.n	e5e8 <am_hal_flash_delay_status_check+0x38>
    e618:	2004      	movs	r0, #4
    e61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e61e:	bf00      	nop
    e620:	0800009d 	.word	0x0800009d

0000e624 <am_hal_flash_load_ui32>:
    e624:	4b00      	ldr	r3, [pc, #0]	; (e628 <am_hal_flash_load_ui32+0x4>)
    e626:	4718      	bx	r3
    e628:	08000075 	.word	0x08000075

0000e62c <am_hal_flash_store_ui32>:
    e62c:	4b01      	ldr	r3, [pc, #4]	; (e634 <am_hal_flash_store_ui32+0x8>)
    e62e:	f043 0301 	orr.w	r3, r3, #1
    e632:	4718      	bx	r3
    e634:	10001058 	.word	0x10001058

0000e638 <am_hal_gpio_pinconfig>:
    e638:	2831      	cmp	r0, #49	; 0x31
    e63a:	d901      	bls.n	e640 <am_hal_gpio_pinconfig+0x8>
    e63c:	2006      	movs	r0, #6
    e63e:	4770      	bx	lr
    e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e644:	f001 0307 	and.w	r3, r1, #7
    e648:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    e64c:	b085      	sub	sp, #20
    e64e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e652:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e656:	d014      	beq.n	e682 <am_hal_gpio_pinconfig+0x4a>
    e658:	f3c1 1742 	ubfx	r7, r1, #5, #3
    e65c:	1dbd      	adds	r5, r7, #6
    e65e:	f005 0507 	and.w	r5, r5, #7
    e662:	2d03      	cmp	r5, #3
    e664:	f042 0201 	orr.w	r2, r2, #1
    e668:	f200 80a7 	bhi.w	e7ba <am_hal_gpio_pinconfig+0x182>
    e66c:	4d82      	ldr	r5, [pc, #520]	; (e878 <am_hal_gpio_pinconfig+0x240>)
    e66e:	5c2d      	ldrb	r5, [r5, r0]
    e670:	07ee      	lsls	r6, r5, #31
    e672:	d403      	bmi.n	e67c <am_hal_gpio_pinconfig+0x44>
    e674:	4881      	ldr	r0, [pc, #516]	; (e87c <am_hal_gpio_pinconfig+0x244>)
    e676:	b005      	add	sp, #20
    e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e67c:	3f02      	subs	r7, #2
    e67e:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    e682:	2c00      	cmp	r4, #0
    e684:	f040 8091 	bne.w	e7aa <am_hal_gpio_pinconfig+0x172>
    e688:	4c7d      	ldr	r4, [pc, #500]	; (e880 <am_hal_gpio_pinconfig+0x248>)
    e68a:	4d7e      	ldr	r5, [pc, #504]	; (e884 <am_hal_gpio_pinconfig+0x24c>)
    e68c:	5c24      	ldrb	r4, [r4, r0]
    e68e:	5c2d      	ldrb	r5, [r5, r0]
    e690:	411c      	asrs	r4, r3
    e692:	f014 0f01 	tst.w	r4, #1
    e696:	bf0c      	ite	eq
    e698:	2400      	moveq	r4, #0
    e69a:	2402      	movne	r4, #2
    e69c:	42ab      	cmp	r3, r5
    e69e:	ea42 0204 	orr.w	r2, r2, r4
    e6a2:	f000 8096 	beq.w	e7d2 <am_hal_gpio_pinconfig+0x19a>
    e6a6:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e6aa:	105d      	asrs	r5, r3, #1
    e6ac:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e6b0:	00db      	lsls	r3, r3, #3
    e6b2:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    e6b6:	f003 0408 	and.w	r4, r3, #8
    e6ba:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e6be:	f00e 060c 	and.w	r6, lr, #12
    e6c2:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e6c6:	2e04      	cmp	r6, #4
    e6c8:	ea43 0304 	orr.w	r3, r3, r4
    e6cc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e6d0:	462c      	mov	r4, r5
    e6d2:	f000 808b 	beq.w	e7ec <am_hal_gpio_pinconfig+0x1b4>
    e6d6:	4c6c      	ldr	r4, [pc, #432]	; (e888 <am_hal_gpio_pinconfig+0x250>)
    e6d8:	6827      	ldr	r7, [r4, #0]
    e6da:	1bcf      	subs	r7, r1, r7
    e6dc:	fab7 f787 	clz	r7, r7
    e6e0:	097f      	lsrs	r7, r7, #5
    e6e2:	f01e 0f60 	tst.w	lr, #96	; 0x60
    e6e6:	bf04      	itt	eq
    e6e8:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e6ec:	f364 0300 	bfieq	r3, r4, #0, #1
    e6f0:	0084      	lsls	r4, r0, #2
    e6f2:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e6f6:	2902      	cmp	r1, #2
    e6f8:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e6fc:	d078      	beq.n	e7f0 <am_hal_gpio_pinconfig+0x1b8>
    e6fe:	d87f      	bhi.n	e800 <am_hal_gpio_pinconfig+0x1c8>
    e700:	2901      	cmp	r1, #1
    e702:	f04f 0100 	mov.w	r1, #0
    e706:	bf08      	it	eq
    e708:	f042 0204 	orreq.w	r2, r2, #4
    e70c:	f005 0518 	and.w	r5, r5, #24
    e710:	9101      	str	r1, [sp, #4]
    e712:	f004 041c 	and.w	r4, r4, #28
    e716:	f020 0a03 	bic.w	sl, r0, #3
    e71a:	f04f 090f 	mov.w	r9, #15
    e71e:	fa09 f904 	lsl.w	r9, r9, r4
    e722:	0841      	lsrs	r1, r0, #1
    e724:	26ff      	movs	r6, #255	; 0xff
    e726:	fa03 f404 	lsl.w	r4, r3, r4
    e72a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e72e:	40ae      	lsls	r6, r5
    e730:	9300      	str	r3, [sp, #0]
    e732:	fa02 f505 	lsl.w	r5, r2, r5
    e736:	4683      	mov	fp, r0
    e738:	f021 0803 	bic.w	r8, r1, #3
    e73c:	f000 f932 	bl	e9a4 <am_hal_interrupt_master_disable>
    e740:	9b00      	ldr	r3, [sp, #0]
    e742:	9003      	str	r0, [sp, #12]
    e744:	ea6f 0909 	mvn.w	r9, r9
    e748:	43f6      	mvns	r6, r6
    e74a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e74e:	f8df e15c 	ldr.w	lr, [pc, #348]	; e8ac <am_hal_gpio_pinconfig+0x274>
    e752:	4a4e      	ldr	r2, [pc, #312]	; (e88c <am_hal_gpio_pinconfig+0x254>)
    e754:	b15f      	cbz	r7, e76e <am_hal_gpio_pinconfig+0x136>
    e756:	ea4f 07db 	mov.w	r7, fp, lsr #3
    e75a:	f00b 001f 	and.w	r0, fp, #31
    e75e:	f007 0704 	and.w	r7, r7, #4
    e762:	f04f 0b01 	mov.w	fp, #1
    e766:	494a      	ldr	r1, [pc, #296]	; (e890 <am_hal_gpio_pinconfig+0x258>)
    e768:	fa0b f000 	lsl.w	r0, fp, r0
    e76c:	5078      	str	r0, [r7, r1]
    e76e:	4849      	ldr	r0, [pc, #292]	; (e894 <am_hal_gpio_pinconfig+0x25c>)
    e770:	2773      	movs	r7, #115	; 0x73
    e772:	6607      	str	r7, [r0, #96]	; 0x60
    e774:	681f      	ldr	r7, [r3, #0]
    e776:	4037      	ands	r7, r6
    e778:	433d      	orrs	r5, r7
    e77a:	601d      	str	r5, [r3, #0]
    e77c:	f858 300e 	ldr.w	r3, [r8, lr]
    e780:	ea09 0303 	and.w	r3, r9, r3
    e784:	4323      	orrs	r3, r4
    e786:	f848 300e 	str.w	r3, [r8, lr]
    e78a:	f85a 3002 	ldr.w	r3, [sl, r2]
    e78e:	401e      	ands	r6, r3
    e790:	9b01      	ldr	r3, [sp, #4]
    e792:	2400      	movs	r4, #0
    e794:	431e      	orrs	r6, r3
    e796:	f84a 6002 	str.w	r6, [sl, r2]
    e79a:	6604      	str	r4, [r0, #96]	; 0x60
    e79c:	9803      	ldr	r0, [sp, #12]
    e79e:	f000 f905 	bl	e9ac <am_hal_interrupt_master_set>
    e7a2:	4620      	mov	r0, r4
    e7a4:	b005      	add	sp, #20
    e7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7aa:	2c01      	cmp	r4, #1
    e7ac:	d017      	beq.n	e7de <am_hal_gpio_pinconfig+0x1a6>
    e7ae:	2c02      	cmp	r4, #2
    e7b0:	d035      	beq.n	e81e <am_hal_gpio_pinconfig+0x1e6>
    e7b2:	4839      	ldr	r0, [pc, #228]	; (e898 <am_hal_gpio_pinconfig+0x260>)
    e7b4:	b005      	add	sp, #20
    e7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7ba:	2ec0      	cmp	r6, #192	; 0xc0
    e7bc:	d02a      	beq.n	e814 <am_hal_gpio_pinconfig+0x1dc>
    e7be:	2e20      	cmp	r6, #32
    e7c0:	f47f af5f 	bne.w	e682 <am_hal_gpio_pinconfig+0x4a>
    e7c4:	2814      	cmp	r0, #20
    e7c6:	f43f af55 	beq.w	e674 <am_hal_gpio_pinconfig+0x3c>
    e7ca:	2c00      	cmp	r4, #0
    e7cc:	f43f af5c 	beq.w	e688 <am_hal_gpio_pinconfig+0x50>
    e7d0:	e7eb      	b.n	e7aa <am_hal_gpio_pinconfig+0x172>
    e7d2:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e7d6:	2c07      	cmp	r4, #7
    e7d8:	d128      	bne.n	e82c <am_hal_gpio_pinconfig+0x1f4>
    e7da:	4830      	ldr	r0, [pc, #192]	; (e89c <am_hal_gpio_pinconfig+0x264>)
    e7dc:	e74b      	b.n	e676 <am_hal_gpio_pinconfig+0x3e>
    e7de:	4c26      	ldr	r4, [pc, #152]	; (e878 <am_hal_gpio_pinconfig+0x240>)
    e7e0:	5c24      	ldrb	r4, [r4, r0]
    e7e2:	07a5      	lsls	r5, r4, #30
    e7e4:	d5e5      	bpl.n	e7b2 <am_hal_gpio_pinconfig+0x17a>
    e7e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e7ea:	e74d      	b.n	e688 <am_hal_gpio_pinconfig+0x50>
    e7ec:	2701      	movs	r7, #1
    e7ee:	e778      	b.n	e6e2 <am_hal_gpio_pinconfig+0xaa>
    e7f0:	f005 0518 	and.w	r5, r5, #24
    e7f4:	f04f 0801 	mov.w	r8, #1
    e7f8:	fa08 f105 	lsl.w	r1, r8, r5
    e7fc:	9101      	str	r1, [sp, #4]
    e7fe:	e788      	b.n	e712 <am_hal_gpio_pinconfig+0xda>
    e800:	f005 0518 	and.w	r5, r5, #24
    e804:	f04f 0801 	mov.w	r8, #1
    e808:	fa08 f105 	lsl.w	r1, r8, r5
    e80c:	f042 0204 	orr.w	r2, r2, #4
    e810:	9101      	str	r1, [sp, #4]
    e812:	e77e      	b.n	e712 <am_hal_gpio_pinconfig+0xda>
    e814:	2814      	cmp	r0, #20
    e816:	f43f af34 	beq.w	e682 <am_hal_gpio_pinconfig+0x4a>
    e81a:	4821      	ldr	r0, [pc, #132]	; (e8a0 <am_hal_gpio_pinconfig+0x268>)
    e81c:	e72b      	b.n	e676 <am_hal_gpio_pinconfig+0x3e>
    e81e:	4c16      	ldr	r4, [pc, #88]	; (e878 <am_hal_gpio_pinconfig+0x240>)
    e820:	5c24      	ldrb	r4, [r4, r0]
    e822:	0764      	lsls	r4, r4, #29
    e824:	d5c5      	bpl.n	e7b2 <am_hal_gpio_pinconfig+0x17a>
    e826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e82a:	e72d      	b.n	e688 <am_hal_gpio_pinconfig+0x50>
    e82c:	4d1d      	ldr	r5, [pc, #116]	; (e8a4 <am_hal_gpio_pinconfig+0x26c>)
    e82e:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e832:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e836:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e83a:	429e      	cmp	r6, r3
    e83c:	d00c      	beq.n	e858 <am_hal_gpio_pinconfig+0x220>
    e83e:	0084      	lsls	r4, r0, #2
    e840:	4425      	add	r5, r4
    e842:	786e      	ldrb	r6, [r5, #1]
    e844:	429e      	cmp	r6, r3
    e846:	d012      	beq.n	e86e <am_hal_gpio_pinconfig+0x236>
    e848:	78ae      	ldrb	r6, [r5, #2]
    e84a:	429e      	cmp	r6, r3
    e84c:	d00d      	beq.n	e86a <am_hal_gpio_pinconfig+0x232>
    e84e:	78ed      	ldrb	r5, [r5, #3]
    e850:	429d      	cmp	r5, r3
    e852:	d00e      	beq.n	e872 <am_hal_gpio_pinconfig+0x23a>
    e854:	4814      	ldr	r0, [pc, #80]	; (e8a8 <am_hal_gpio_pinconfig+0x270>)
    e856:	e70e      	b.n	e676 <am_hal_gpio_pinconfig+0x3e>
    e858:	2300      	movs	r3, #0
    e85a:	0084      	lsls	r4, r0, #2
    e85c:	005b      	lsls	r3, r3, #1
    e85e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e862:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e866:	2700      	movs	r7, #0
    e868:	e743      	b.n	e6f2 <am_hal_gpio_pinconfig+0xba>
    e86a:	2302      	movs	r3, #2
    e86c:	e7f6      	b.n	e85c <am_hal_gpio_pinconfig+0x224>
    e86e:	2301      	movs	r3, #1
    e870:	e7f4      	b.n	e85c <am_hal_gpio_pinconfig+0x224>
    e872:	2303      	movs	r3, #3
    e874:	e7f2      	b.n	e85c <am_hal_gpio_pinconfig+0x224>
    e876:	bf00      	nop
    e878:	00010590 	.word	0x00010590
    e87c:	08000100 	.word	0x08000100
    e880:	0001068c 	.word	0x0001068c
    e884:	000106c8 	.word	0x000106c8
    e888:	000106c0 	.word	0x000106c0
    e88c:	400100e0 	.word	0x400100e0
    e890:	400100b4 	.word	0x400100b4
    e894:	40010000 	.word	0x40010000
    e898:	08000102 	.word	0x08000102
    e89c:	08000103 	.word	0x08000103
    e8a0:	08000101 	.word	0x08000101
    e8a4:	000105c4 	.word	0x000105c4
    e8a8:	08000104 	.word	0x08000104
    e8ac:	40010040 	.word	0x40010040

0000e8b0 <am_hal_gpio_state_read>:
    e8b0:	b1ca      	cbz	r2, e8e6 <am_hal_gpio_state_read+0x36>
    e8b2:	2831      	cmp	r0, #49	; 0x31
    e8b4:	d904      	bls.n	e8c0 <am_hal_gpio_state_read+0x10>
    e8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e8ba:	6013      	str	r3, [r2, #0]
    e8bc:	2005      	movs	r0, #5
    e8be:	4770      	bx	lr
    e8c0:	08c3      	lsrs	r3, r0, #3
    e8c2:	2901      	cmp	r1, #1
    e8c4:	f003 0304 	and.w	r3, r3, #4
    e8c8:	f000 001f 	and.w	r0, r0, #31
    e8cc:	d00d      	beq.n	e8ea <am_hal_gpio_state_read+0x3a>
    e8ce:	d313      	bcc.n	e8f8 <am_hal_gpio_state_read+0x48>
    e8d0:	2902      	cmp	r1, #2
    e8d2:	d108      	bne.n	e8e6 <am_hal_gpio_state_read+0x36>
    e8d4:	490c      	ldr	r1, [pc, #48]	; (e908 <am_hal_gpio_state_read+0x58>)
    e8d6:	585b      	ldr	r3, [r3, r1]
    e8d8:	fa23 f000 	lsr.w	r0, r3, r0
    e8dc:	f000 0001 	and.w	r0, r0, #1
    e8e0:	6010      	str	r0, [r2, #0]
    e8e2:	2000      	movs	r0, #0
    e8e4:	4770      	bx	lr
    e8e6:	2006      	movs	r0, #6
    e8e8:	4770      	bx	lr
    e8ea:	4908      	ldr	r1, [pc, #32]	; (e90c <am_hal_gpio_state_read+0x5c>)
    e8ec:	585b      	ldr	r3, [r3, r1]
    e8ee:	fa23 f000 	lsr.w	r0, r3, r0
    e8f2:	f000 0001 	and.w	r0, r0, #1
    e8f6:	e7f3      	b.n	e8e0 <am_hal_gpio_state_read+0x30>
    e8f8:	4905      	ldr	r1, [pc, #20]	; (e910 <am_hal_gpio_state_read+0x60>)
    e8fa:	585b      	ldr	r3, [r3, r1]
    e8fc:	fa23 f000 	lsr.w	r0, r3, r0
    e900:	f000 0001 	and.w	r0, r0, #1
    e904:	e7ec      	b.n	e8e0 <am_hal_gpio_state_read+0x30>
    e906:	bf00      	nop
    e908:	400100a0 	.word	0x400100a0
    e90c:	40010088 	.word	0x40010088
    e910:	40010080 	.word	0x40010080

0000e914 <am_hal_gpio_state_write>:
    e914:	2831      	cmp	r0, #49	; 0x31
    e916:	d901      	bls.n	e91c <am_hal_gpio_state_write+0x8>
    e918:	2005      	movs	r0, #5
    e91a:	4770      	bx	lr
    e91c:	2905      	cmp	r1, #5
    e91e:	d901      	bls.n	e924 <am_hal_gpio_state_write+0x10>
    e920:	2006      	movs	r0, #6
    e922:	4770      	bx	lr
    e924:	b570      	push	{r4, r5, r6, lr}
    e926:	f000 031f 	and.w	r3, r0, #31
    e92a:	b082      	sub	sp, #8
    e92c:	08c0      	lsrs	r0, r0, #3
    e92e:	2201      	movs	r2, #1
    e930:	460d      	mov	r5, r1
    e932:	f000 0404 	and.w	r4, r0, #4
    e936:	fa02 f603 	lsl.w	r6, r2, r3
    e93a:	f000 f833 	bl	e9a4 <am_hal_interrupt_master_disable>
    e93e:	1e69      	subs	r1, r5, #1
    e940:	9001      	str	r0, [sp, #4]
    e942:	2904      	cmp	r1, #4
    e944:	d817      	bhi.n	e976 <am_hal_gpio_state_write+0x62>
    e946:	e8df f001 	tbb	[pc, r1]
    e94a:	0e13      	.short	0x0e13
    e94c:	030b      	.short	0x030b
    e94e:	19          	.byte	0x19
    e94f:	00          	.byte	0x00
    e950:	4b0d      	ldr	r3, [pc, #52]	; (e988 <am_hal_gpio_state_write+0x74>)
    e952:	50e6      	str	r6, [r4, r3]
    e954:	9801      	ldr	r0, [sp, #4]
    e956:	f000 f829 	bl	e9ac <am_hal_interrupt_master_set>
    e95a:	2000      	movs	r0, #0
    e95c:	b002      	add	sp, #8
    e95e:	bd70      	pop	{r4, r5, r6, pc}
    e960:	4b0a      	ldr	r3, [pc, #40]	; (e98c <am_hal_gpio_state_write+0x78>)
    e962:	50e6      	str	r6, [r4, r3]
    e964:	e7f6      	b.n	e954 <am_hal_gpio_state_write+0x40>
    e966:	4a0a      	ldr	r2, [pc, #40]	; (e990 <am_hal_gpio_state_write+0x7c>)
    e968:	58a3      	ldr	r3, [r4, r2]
    e96a:	4073      	eors	r3, r6
    e96c:	50a3      	str	r3, [r4, r2]
    e96e:	e7f1      	b.n	e954 <am_hal_gpio_state_write+0x40>
    e970:	4b08      	ldr	r3, [pc, #32]	; (e994 <am_hal_gpio_state_write+0x80>)
    e972:	50e6      	str	r6, [r4, r3]
    e974:	e7ee      	b.n	e954 <am_hal_gpio_state_write+0x40>
    e976:	4b08      	ldr	r3, [pc, #32]	; (e998 <am_hal_gpio_state_write+0x84>)
    e978:	50e6      	str	r6, [r4, r3]
    e97a:	e7eb      	b.n	e954 <am_hal_gpio_state_write+0x40>
    e97c:	4a03      	ldr	r2, [pc, #12]	; (e98c <am_hal_gpio_state_write+0x78>)
    e97e:	58a3      	ldr	r3, [r4, r2]
    e980:	4073      	eors	r3, r6
    e982:	50a3      	str	r3, [r4, r2]
    e984:	e7e6      	b.n	e954 <am_hal_gpio_state_write+0x40>
    e986:	bf00      	nop
    e988:	400100a8 	.word	0x400100a8
    e98c:	400100b4 	.word	0x400100b4
    e990:	40010088 	.word	0x40010088
    e994:	40010090 	.word	0x40010090
    e998:	40010098 	.word	0x40010098

0000e99c <am_hal_interrupt_master_enable>:
    e99c:	f3ef 8010 	mrs	r0, PRIMASK
    e9a0:	b662      	cpsie	i
    e9a2:	4770      	bx	lr

0000e9a4 <am_hal_interrupt_master_disable>:
    e9a4:	f3ef 8010 	mrs	r0, PRIMASK
    e9a8:	b672      	cpsid	i
    e9aa:	4770      	bx	lr

0000e9ac <am_hal_interrupt_master_set>:
    e9ac:	f380 8810 	msr	PRIMASK, r0
    e9b0:	4770      	bx	lr
    e9b2:	bf00      	nop

0000e9b4 <internal_iom_reset_on_error>:
    e9b4:	b570      	push	{r4, r5, r6, lr}
    e9b6:	6844      	ldr	r4, [r0, #4]
    e9b8:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e9bc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e9c0:	3404      	adds	r4, #4
    e9c2:	0324      	lsls	r4, r4, #12
    e9c4:	2300      	movs	r3, #0
    e9c6:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e9ca:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e9ce:	050b      	lsls	r3, r1, #20
    e9d0:	d52a      	bpl.n	ea28 <internal_iom_reset_on_error+0x74>
    e9d2:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e9d6:	079e      	lsls	r6, r3, #30
    e9d8:	d450      	bmi.n	ea7c <internal_iom_reset_on_error+0xc8>
    e9da:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9de:	079a      	lsls	r2, r3, #30
    e9e0:	d508      	bpl.n	e9f4 <internal_iom_reset_on_error+0x40>
    e9e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e9e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e9ea:	2b03      	cmp	r3, #3
    e9ec:	d9f5      	bls.n	e9da <internal_iom_reset_on_error+0x26>
    e9ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9f2:	e7f6      	b.n	e9e2 <internal_iom_reset_on_error+0x2e>
    e9f4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9f8:	f003 0306 	and.w	r3, r3, #6
    e9fc:	2b04      	cmp	r3, #4
    e9fe:	d1f9      	bne.n	e9f4 <internal_iom_reset_on_error+0x40>
    ea00:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea04:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ea08:	b173      	cbz	r3, ea28 <internal_iom_reset_on_error+0x74>
    ea0a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea0e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ea12:	2b03      	cmp	r3, #3
    ea14:	d9f4      	bls.n	ea00 <internal_iom_reset_on_error+0x4c>
    ea16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ea1a:	e7f6      	b.n	ea0a <internal_iom_reset_on_error+0x56>
    ea1c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ea20:	f003 0306 	and.w	r3, r3, #6
    ea24:	2b04      	cmp	r3, #4
    ea26:	d1f9      	bne.n	ea1c <internal_iom_reset_on_error+0x68>
    ea28:	06cb      	lsls	r3, r1, #27
    ea2a:	d520      	bpl.n	ea6e <internal_iom_reset_on_error+0xba>
    ea2c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ea30:	f003 0306 	and.w	r3, r3, #6
    ea34:	2b04      	cmp	r3, #4
    ea36:	d1f9      	bne.n	ea2c <internal_iom_reset_on_error+0x78>
    ea38:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ea3c:	f36f 1304 	bfc	r3, #4, #1
    ea40:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ea44:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    ea48:	f36f 0341 	bfc	r3, #1, #1
    ea4c:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    ea50:	0040      	lsls	r0, r0, #1
    ea52:	f7ff fd9d 	bl	e590 <am_hal_flash_delay>
    ea56:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    ea5a:	f043 0302 	orr.w	r3, r3, #2
    ea5e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    ea62:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ea66:	f043 0310 	orr.w	r3, r3, #16
    ea6a:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ea6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea72:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ea76:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    ea7a:	bd70      	pop	{r4, r5, r6, pc}
    ea7c:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    ea80:	4e07      	ldr	r6, [pc, #28]	; (eaa0 <internal_iom_reset_on_error+0xec>)
    ea82:	2a00      	cmp	r2, #0
    ea84:	d0ca      	beq.n	ea1c <internal_iom_reset_on_error+0x68>
    ea86:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ea8e:	2b03      	cmp	r3, #3
    ea90:	d9f9      	bls.n	ea86 <internal_iom_reset_on_error+0xd2>
    ea92:	2a04      	cmp	r2, #4
    ea94:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    ea98:	d9c0      	bls.n	ea1c <internal_iom_reset_on_error+0x68>
    ea9a:	3a04      	subs	r2, #4
    ea9c:	e7f1      	b.n	ea82 <internal_iom_reset_on_error+0xce>
    ea9e:	bf00      	nop
    eaa0:	deadbeef 	.word	0xdeadbeef

0000eaa4 <am_hal_iom_initialize>:
    eaa4:	2805      	cmp	r0, #5
    eaa6:	d901      	bls.n	eaac <am_hal_iom_initialize+0x8>
    eaa8:	2005      	movs	r0, #5
    eaaa:	4770      	bx	lr
    eaac:	b1e1      	cbz	r1, eae8 <am_hal_iom_initialize+0x44>
    eaae:	b4f0      	push	{r4, r5, r6, r7}
    eab0:	f640 049c 	movw	r4, #2204	; 0x89c
    eab4:	4e0d      	ldr	r6, [pc, #52]	; (eaec <am_hal_iom_initialize+0x48>)
    eab6:	fb04 f400 	mul.w	r4, r4, r0
    eaba:	1935      	adds	r5, r6, r4
    eabc:	4602      	mov	r2, r0
    eabe:	78e8      	ldrb	r0, [r5, #3]
    eac0:	f010 0301 	ands.w	r3, r0, #1
    eac4:	d002      	beq.n	eacc <am_hal_iom_initialize+0x28>
    eac6:	2007      	movs	r0, #7
    eac8:	bcf0      	pop	{r4, r5, r6, r7}
    eaca:	4770      	bx	lr
    eacc:	f040 0001 	orr.w	r0, r0, #1
    ead0:	f363 0041 	bfi	r0, r3, #1, #1
    ead4:	70e8      	strb	r0, [r5, #3]
    ead6:	5937      	ldr	r7, [r6, r4]
    ead8:	4805      	ldr	r0, [pc, #20]	; (eaf0 <am_hal_iom_initialize+0x4c>)
    eada:	f360 0717 	bfi	r7, r0, #0, #24
    eade:	5137      	str	r7, [r6, r4]
    eae0:	4618      	mov	r0, r3
    eae2:	606a      	str	r2, [r5, #4]
    eae4:	600d      	str	r5, [r1, #0]
    eae6:	e7ef      	b.n	eac8 <am_hal_iom_initialize+0x24>
    eae8:	2006      	movs	r0, #6
    eaea:	4770      	bx	lr
    eaec:	10001760 	.word	0x10001760
    eaf0:	00123456 	.word	0x00123456

0000eaf4 <am_hal_iom_enable>:
    eaf4:	b128      	cbz	r0, eb02 <am_hal_iom_enable+0xe>
    eaf6:	6803      	ldr	r3, [r0, #0]
    eaf8:	4a34      	ldr	r2, [pc, #208]	; (ebcc <am_hal_iom_enable+0xd8>)
    eafa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eafe:	4293      	cmp	r3, r2
    eb00:	d001      	beq.n	eb06 <am_hal_iom_enable+0x12>
    eb02:	2002      	movs	r0, #2
    eb04:	4770      	bx	lr
    eb06:	78c3      	ldrb	r3, [r0, #3]
    eb08:	079b      	lsls	r3, r3, #30
    eb0a:	d45d      	bmi.n	ebc8 <am_hal_iom_enable+0xd4>
    eb0c:	6843      	ldr	r3, [r0, #4]
    eb0e:	7a01      	ldrb	r1, [r0, #8]
    eb10:	b570      	push	{r4, r5, r6, lr}
    eb12:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb16:	3304      	adds	r3, #4
    eb18:	031b      	lsls	r3, r3, #12
    eb1a:	3100      	adds	r1, #0
    eb1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    eb20:	bf18      	it	ne
    eb22:	2101      	movne	r1, #1
    eb24:	f3c2 0242 	ubfx	r2, r2, #1, #3
    eb28:	4291      	cmp	r1, r2
    eb2a:	bf0c      	ite	eq
    eb2c:	2201      	moveq	r2, #1
    eb2e:	2210      	movne	r2, #16
    eb30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    eb34:	68c3      	ldr	r3, [r0, #12]
    eb36:	b084      	sub	sp, #16
    eb38:	4604      	mov	r4, r0
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d039      	beq.n	ebb2 <am_hal_iom_enable+0xbe>
    eb3e:	6843      	ldr	r3, [r0, #4]
    eb40:	4923      	ldr	r1, [pc, #140]	; (ebd0 <am_hal_iom_enable+0xdc>)
    eb42:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb46:	3304      	adds	r3, #4
    eb48:	031a      	lsls	r2, r3, #12
    eb4a:	2300      	movs	r3, #0
    eb4c:	6243      	str	r3, [r0, #36]	; 0x24
    eb4e:	61c3      	str	r3, [r0, #28]
    eb50:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    eb54:	6902      	ldr	r2, [r0, #16]
    eb56:	6840      	ldr	r0, [r0, #4]
    eb58:	68e6      	ldr	r6, [r4, #12]
    eb5a:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    eb5e:	2501      	movs	r5, #1
    eb60:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    eb64:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    eb68:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    eb6c:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    eb70:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    eb74:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    eb78:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    eb7c:	6223      	str	r3, [r4, #32]
    eb7e:	b2c0      	uxtb	r0, r0
    eb80:	fa22 f305 	lsr.w	r3, r2, r5
    eb84:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    eb88:	f604 0228 	addw	r2, r4, #2088	; 0x828
    eb8c:	a901      	add	r1, sp, #4
    eb8e:	9301      	str	r3, [sp, #4]
    eb90:	9602      	str	r6, [sp, #8]
    eb92:	f88d 500c 	strb.w	r5, [sp, #12]
    eb96:	f001 fa49 	bl	1002c <am_hal_cmdq_init>
    eb9a:	6863      	ldr	r3, [r4, #4]
    eb9c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eba0:	3304      	adds	r3, #4
    eba2:	031b      	lsls	r3, r3, #12
    eba4:	b960      	cbnz	r0, ebc0 <am_hal_iom_enable+0xcc>
    eba6:	f44f 7180 	mov.w	r1, #256	; 0x100
    ebaa:	2202      	movs	r2, #2
    ebac:	6221      	str	r1, [r4, #32]
    ebae:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ebb2:	78e3      	ldrb	r3, [r4, #3]
    ebb4:	f043 0302 	orr.w	r3, r3, #2
    ebb8:	70e3      	strb	r3, [r4, #3]
    ebba:	2000      	movs	r0, #0
    ebbc:	b004      	add	sp, #16
    ebbe:	bd70      	pop	{r4, r5, r6, pc}
    ebc0:	2202      	movs	r2, #2
    ebc2:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ebc6:	e7f9      	b.n	ebbc <am_hal_iom_enable+0xc8>
    ebc8:	2000      	movs	r0, #0
    ebca:	4770      	bx	lr
    ebcc:	01123456 	.word	0x01123456
    ebd0:	00800040 	.word	0x00800040

0000ebd4 <am_hal_iom_power_ctrl>:
    ebd4:	b140      	cbz	r0, ebe8 <am_hal_iom_power_ctrl+0x14>
    ebd6:	b538      	push	{r3, r4, r5, lr}
    ebd8:	6803      	ldr	r3, [r0, #0]
    ebda:	4c85      	ldr	r4, [pc, #532]	; (edf0 <am_hal_iom_power_ctrl+0x21c>)
    ebdc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ebe0:	42a3      	cmp	r3, r4
    ebe2:	d003      	beq.n	ebec <am_hal_iom_power_ctrl+0x18>
    ebe4:	2002      	movs	r0, #2
    ebe6:	bd38      	pop	{r3, r4, r5, pc}
    ebe8:	2002      	movs	r0, #2
    ebea:	4770      	bx	lr
    ebec:	4604      	mov	r4, r0
    ebee:	4615      	mov	r5, r2
    ebf0:	b199      	cbz	r1, ec1a <am_hal_iom_power_ctrl+0x46>
    ebf2:	2902      	cmp	r1, #2
    ebf4:	d80f      	bhi.n	ec16 <am_hal_iom_power_ctrl+0x42>
    ebf6:	78c3      	ldrb	r3, [r0, #3]
    ebf8:	6840      	ldr	r0, [r0, #4]
    ebfa:	079a      	lsls	r2, r3, #30
    ebfc:	d519      	bpl.n	ec32 <am_hal_iom_power_ctrl+0x5e>
    ebfe:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ec02:	3304      	adds	r3, #4
    ec04:	031b      	lsls	r3, r3, #12
    ec06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    ec0a:	f003 0306 	and.w	r3, r3, #6
    ec0e:	2b04      	cmp	r3, #4
    ec10:	d00c      	beq.n	ec2c <am_hal_iom_power_ctrl+0x58>
    ec12:	2003      	movs	r0, #3
    ec14:	bd38      	pop	{r3, r4, r5, pc}
    ec16:	2006      	movs	r0, #6
    ec18:	bd38      	pop	{r3, r4, r5, pc}
    ec1a:	2a00      	cmp	r2, #0
    ec1c:	f000 80cf 	beq.w	edbe <am_hal_iom_power_ctrl+0x1ea>
    ec20:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    ec24:	2b00      	cmp	r3, #0
    ec26:	d146      	bne.n	ecb6 <am_hal_iom_power_ctrl+0xe2>
    ec28:	2007      	movs	r0, #7
    ec2a:	bd38      	pop	{r3, r4, r5, pc}
    ec2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d1ef      	bne.n	ec12 <am_hal_iom_power_ctrl+0x3e>
    ec32:	b3d5      	cbz	r5, ecaa <am_hal_iom_power_ctrl+0xd6>
    ec34:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ec38:	3304      	adds	r3, #4
    ec3a:	031b      	lsls	r3, r3, #12
    ec3c:	2201      	movs	r2, #1
    ec3e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    ec42:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    ec46:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ec4a:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    ec4e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    ec52:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    ec56:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    ec5a:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    ec5e:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    ec62:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    ec66:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    ec6a:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    ec6e:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    ec72:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    ec76:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    ec7a:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    ec7e:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    ec82:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    ec86:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    ec8a:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    ec8e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    ec92:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    ec96:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    ec9a:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    ec9e:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    eca2:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    eca6:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    ecaa:	3002      	adds	r0, #2
    ecac:	b2c0      	uxtb	r0, r0
    ecae:	f000 fca1 	bl	f5f4 <am_hal_pwrctrl_periph_disable>
    ecb2:	2000      	movs	r0, #0
    ecb4:	bd38      	pop	{r3, r4, r5, pc}
    ecb6:	6843      	ldr	r3, [r0, #4]
    ecb8:	1c98      	adds	r0, r3, #2
    ecba:	b2c0      	uxtb	r0, r0
    ecbc:	f000 fc70 	bl	f5a0 <am_hal_pwrctrl_periph_enable>
    ecc0:	6863      	ldr	r3, [r4, #4]
    ecc2:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    ecc6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecca:	3304      	adds	r3, #4
    eccc:	031b      	lsls	r3, r3, #12
    ecce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ecd2:	6863      	ldr	r3, [r4, #4]
    ecd4:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    ecd8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecdc:	3304      	adds	r3, #4
    ecde:	031b      	lsls	r3, r3, #12
    ece0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ece4:	6863      	ldr	r3, [r4, #4]
    ece6:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    ecea:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecee:	3304      	adds	r3, #4
    ecf0:	031b      	lsls	r3, r3, #12
    ecf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ecf6:	6863      	ldr	r3, [r4, #4]
    ecf8:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    ecfc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed00:	3304      	adds	r3, #4
    ed02:	031b      	lsls	r3, r3, #12
    ed04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    ed08:	6863      	ldr	r3, [r4, #4]
    ed0a:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    ed0e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed12:	3304      	adds	r3, #4
    ed14:	031b      	lsls	r3, r3, #12
    ed16:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    ed1a:	6863      	ldr	r3, [r4, #4]
    ed1c:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    ed20:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed24:	3304      	adds	r3, #4
    ed26:	031b      	lsls	r3, r3, #12
    ed28:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    ed2c:	6863      	ldr	r3, [r4, #4]
    ed2e:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    ed32:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed36:	3304      	adds	r3, #4
    ed38:	031b      	lsls	r3, r3, #12
    ed3a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    ed3e:	6863      	ldr	r3, [r4, #4]
    ed40:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    ed44:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed48:	3304      	adds	r3, #4
    ed4a:	031b      	lsls	r3, r3, #12
    ed4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    ed50:	6863      	ldr	r3, [r4, #4]
    ed52:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    ed56:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed5a:	3304      	adds	r3, #4
    ed5c:	031b      	lsls	r3, r3, #12
    ed5e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ed62:	6863      	ldr	r3, [r4, #4]
    ed64:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    ed68:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed6c:	3304      	adds	r3, #4
    ed6e:	031b      	lsls	r3, r3, #12
    ed70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ed74:	6863      	ldr	r3, [r4, #4]
    ed76:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    ed7a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed7e:	3304      	adds	r3, #4
    ed80:	031b      	lsls	r3, r3, #12
    ed82:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ed86:	6863      	ldr	r3, [r4, #4]
    ed88:	f894 287c 	ldrb.w	r2, [r4, #2172]	; 0x87c
    ed8c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed90:	3304      	adds	r3, #4
    ed92:	031b      	lsls	r3, r3, #12
    ed94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    ed98:	6863      	ldr	r3, [r4, #4]
    ed9a:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    ed9e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eda2:	3304      	adds	r3, #4
    eda4:	031b      	lsls	r3, r3, #12
    eda6:	f022 0201 	bic.w	r2, r2, #1
    edaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    edae:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    edb2:	07db      	lsls	r3, r3, #31
    edb4:	d40a      	bmi.n	edcc <am_hal_iom_power_ctrl+0x1f8>
    edb6:	2000      	movs	r0, #0
    edb8:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    edbc:	bd38      	pop	{r3, r4, r5, pc}
    edbe:	6840      	ldr	r0, [r0, #4]
    edc0:	3002      	adds	r0, #2
    edc2:	b2c0      	uxtb	r0, r0
    edc4:	f000 fbec 	bl	f5a0 <am_hal_pwrctrl_periph_enable>
    edc8:	4628      	mov	r0, r5
    edca:	bd38      	pop	{r3, r4, r5, pc}
    edcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    edce:	b953      	cbnz	r3, ede6 <am_hal_iom_power_ctrl+0x212>
    edd0:	6863      	ldr	r3, [r4, #4]
    edd2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edd6:	3304      	adds	r3, #4
    edd8:	031b      	lsls	r3, r3, #12
    edda:	f503 7226 	add.w	r2, r3, #664	; 0x298
    edde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    ede2:	e883 000c 	stmia.w	r3, {r2, r3}
    ede6:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    edea:	f001 f983 	bl	100f4 <am_hal_cmdq_enable>
    edee:	e7e2      	b.n	edb6 <am_hal_iom_power_ctrl+0x1e2>
    edf0:	01123456 	.word	0x01123456

0000edf4 <am_hal_iom_configure>:
    edf4:	b128      	cbz	r0, ee02 <am_hal_iom_configure+0xe>
    edf6:	6803      	ldr	r3, [r0, #0]
    edf8:	4a88      	ldr	r2, [pc, #544]	; (f01c <am_hal_iom_configure+0x228>)
    edfa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    edfe:	4293      	cmp	r3, r2
    ee00:	d001      	beq.n	ee06 <am_hal_iom_configure+0x12>
    ee02:	2002      	movs	r0, #2
    ee04:	4770      	bx	lr
    ee06:	b111      	cbz	r1, ee0e <am_hal_iom_configure+0x1a>
    ee08:	6843      	ldr	r3, [r0, #4]
    ee0a:	2b05      	cmp	r3, #5
    ee0c:	d901      	bls.n	ee12 <am_hal_iom_configure+0x1e>
    ee0e:	2006      	movs	r0, #6
    ee10:	4770      	bx	lr
    ee12:	78c2      	ldrb	r2, [r0, #3]
    ee14:	0792      	lsls	r2, r2, #30
    ee16:	d501      	bpl.n	ee1c <am_hal_iom_configure+0x28>
    ee18:	2007      	movs	r0, #7
    ee1a:	4770      	bx	lr
    ee1c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ee20:	3304      	adds	r3, #4
    ee22:	780a      	ldrb	r2, [r1, #0]
    ee24:	031b      	lsls	r3, r3, #12
    ee26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee2a:	f241 0410 	movw	r4, #4112	; 0x1010
    ee2e:	7202      	strb	r2, [r0, #8]
    ee30:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    ee34:	b92a      	cbnz	r2, ee42 <am_hal_iom_configure+0x4e>
    ee36:	7a0e      	ldrb	r6, [r1, #8]
    ee38:	2e03      	cmp	r6, #3
    ee3a:	d907      	bls.n	ee4c <am_hal_iom_configure+0x58>
    ee3c:	2006      	movs	r0, #6
    ee3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee42:	2a01      	cmp	r2, #1
    ee44:	d06a      	beq.n	ef1c <am_hal_iom_configure+0x128>
    ee46:	2005      	movs	r0, #5
    ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee4c:	f8d1 a004 	ldr.w	sl, [r1, #4]
    ee50:	4a73      	ldr	r2, [pc, #460]	; (f020 <am_hal_iom_configure+0x22c>)
    ee52:	4592      	cmp	sl, r2
    ee54:	d8f2      	bhi.n	ee3c <am_hal_iom_configure+0x48>
    ee56:	f1ba 0f00 	cmp.w	sl, #0
    ee5a:	d03e      	beq.n	eeda <am_hal_iom_configure+0xe6>
    ee5c:	fbb2 f2fa 	udiv	r2, r2, sl
    ee60:	fb0a f402 	mul.w	r4, sl, r2
    ee64:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    ee68:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    ee6c:	2c00      	cmp	r4, #0
    ee6e:	bf0c      	ite	eq
    ee70:	4614      	moveq	r4, r2
    ee72:	1c54      	addne	r4, r2, #1
    ee74:	4262      	negs	r2, r4
    ee76:	4022      	ands	r2, r4
    ee78:	fab2 f282 	clz	r2, r2
    ee7c:	f1c2 021f 	rsb	r2, r2, #31
    ee80:	2a06      	cmp	r2, #6
    ee82:	bfa8      	it	ge
    ee84:	2206      	movge	r2, #6
    ee86:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    ee8a:	f240 80c0 	bls.w	f00e <am_hal_iom_configure+0x21a>
    ee8e:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    ee92:	4f64      	ldr	r7, [pc, #400]	; (f024 <am_hal_iom_configure+0x230>)
    ee94:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    ee98:	42bd      	cmp	r5, r7
    ee9a:	bf8c      	ite	hi
    ee9c:	f04f 0800 	movhi.w	r8, #0
    eea0:	f04f 0801 	movls.w	r8, #1
    eea4:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    eea8:	f10e 0e01 	add.w	lr, lr, #1
    eeac:	fa0e f702 	lsl.w	r7, lr, r2
    eeb0:	fbb4 f5f7 	udiv	r5, r4, r7
    eeb4:	fb07 4715 	mls	r7, r7, r5, r4
    eeb8:	2f00      	cmp	r7, #0
    eeba:	bf18      	it	ne
    eebc:	3501      	addne	r5, #1
    eebe:	fab5 f785 	clz	r7, r5
    eec2:	f1c7 071f 	rsb	r7, r7, #31
    eec6:	2f07      	cmp	r7, #7
    eec8:	f240 809e 	bls.w	f008 <am_hal_iom_configure+0x214>
    eecc:	3a07      	subs	r2, #7
    eece:	443a      	add	r2, r7
    eed0:	f102 0901 	add.w	r9, r2, #1
    eed4:	f1b9 0f07 	cmp.w	r9, #7
    eed8:	d934      	bls.n	ef44 <am_hal_iom_configure+0x150>
    eeda:	2400      	movs	r4, #0
    eedc:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    eee0:	f044 0401 	orr.w	r4, r4, #1
    eee4:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    eee8:	68cb      	ldr	r3, [r1, #12]
    eeea:	684d      	ldr	r5, [r1, #4]
    eeec:	690c      	ldr	r4, [r1, #16]
    eeee:	60c3      	str	r3, [r0, #12]
    eef0:	2300      	movs	r3, #0
    eef2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eef6:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    eefa:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    eefe:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    ef02:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    ef06:	6104      	str	r4, [r0, #16]
    ef08:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    ef0c:	4a44      	ldr	r2, [pc, #272]	; (f020 <am_hal_iom_configure+0x22c>)
    ef0e:	fbb2 f2f5 	udiv	r2, r2, r5
    ef12:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    ef16:	4618      	mov	r0, r3
    ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef1c:	684a      	ldr	r2, [r1, #4]
    ef1e:	4c42      	ldr	r4, [pc, #264]	; (f028 <am_hal_iom_configure+0x234>)
    ef20:	42a2      	cmp	r2, r4
    ef22:	d06c      	beq.n	effe <am_hal_iom_configure+0x20a>
    ef24:	4c41      	ldr	r4, [pc, #260]	; (f02c <am_hal_iom_configure+0x238>)
    ef26:	42a2      	cmp	r2, r4
    ef28:	d064      	beq.n	eff4 <am_hal_iom_configure+0x200>
    ef2a:	4c41      	ldr	r4, [pc, #260]	; (f030 <am_hal_iom_configure+0x23c>)
    ef2c:	42a2      	cmp	r2, r4
    ef2e:	d185      	bne.n	ee3c <am_hal_iom_configure+0x48>
    ef30:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    ef34:	4a3f      	ldr	r2, [pc, #252]	; (f034 <am_hal_iom_configure+0x240>)
    ef36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ef3a:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    ef3e:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    ef42:	e7cd      	b.n	eee0 <am_hal_iom_configure+0xec>
    ef44:	3f07      	subs	r7, #7
    ef46:	f04f 0c01 	mov.w	ip, #1
    ef4a:	fa0c fc07 	lsl.w	ip, ip, r7
    ef4e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    ef52:	ea0c 0c05 	and.w	ip, ip, r5
    ef56:	40fd      	lsrs	r5, r7
    ef58:	f1bc 0f00 	cmp.w	ip, #0
    ef5c:	bf18      	it	ne
    ef5e:	3501      	addne	r5, #1
    ef60:	4f35      	ldr	r7, [pc, #212]	; (f038 <am_hal_iom_configure+0x244>)
    ef62:	45ba      	cmp	sl, r7
    ef64:	d843      	bhi.n	efee <am_hal_iom_configure+0x1fa>
    ef66:	f04f 0c01 	mov.w	ip, #1
    ef6a:	fa0c fc02 	lsl.w	ip, ip, r2
    ef6e:	ebbc 0c04 	subs.w	ip, ip, r4
    ef72:	bf18      	it	ne
    ef74:	f04f 0c01 	movne.w	ip, #1
    ef78:	1074      	asrs	r4, r6, #1
    ef7a:	2c01      	cmp	r4, #1
    ef7c:	d04a      	beq.n	f014 <am_hal_iom_configure+0x220>
    ef7e:	3d01      	subs	r5, #1
    ef80:	086f      	lsrs	r7, r5, #1
    ef82:	fa0e f402 	lsl.w	r4, lr, r2
    ef86:	fb05 fe0c 	mul.w	lr, r5, ip
    ef8a:	fb0e 4404 	mla	r4, lr, r4, r4
    ef8e:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    ef92:	f8df 908c 	ldr.w	r9, [pc, #140]	; f020 <am_hal_iom_configure+0x22c>
    ef96:	fbb9 fbf4 	udiv	fp, r9, r4
    ef9a:	fb04 fa0b 	mul.w	sl, r4, fp
    ef9e:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    efa2:	0864      	lsrs	r4, r4, #1
    efa4:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    efa8:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    efac:	4554      	cmp	r4, sl
    efae:	bf2c      	ite	cs
    efb0:	46da      	movcs	sl, fp
    efb2:	f10b 0a01 	addcc.w	sl, fp, #1
    efb6:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    efba:	f8df b090 	ldr.w	fp, [pc, #144]	; f04c <am_hal_iom_configure+0x258>
    efbe:	fbba f4fb 	udiv	r4, sl, fp
    efc2:	043f      	lsls	r7, r7, #16
    efc4:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    efc8:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    efcc:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    efd0:	fb0b ab14 	mls	fp, fp, r4, sl
    efd4:	432f      	orrs	r7, r5
    efd6:	f1bb 0f00 	cmp.w	fp, #0
    efda:	d105      	bne.n	efe8 <am_hal_iom_configure+0x1f4>
    efdc:	b124      	cbz	r4, efe8 <am_hal_iom_configure+0x1f4>
    efde:	1e65      	subs	r5, r4, #1
    efe0:	4225      	tst	r5, r4
    efe2:	d101      	bne.n	efe8 <am_hal_iom_configure+0x1f4>
    efe4:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    efe8:	2400      	movs	r4, #0
    efea:	433c      	orrs	r4, r7
    efec:	e776      	b.n	eedc <am_hal_iom_configure+0xe8>
    efee:	f04f 0c00 	mov.w	ip, #0
    eff2:	e7c1      	b.n	ef78 <am_hal_iom_configure+0x184>
    eff4:	4a11      	ldr	r2, [pc, #68]	; (f03c <am_hal_iom_configure+0x248>)
    eff6:	4c12      	ldr	r4, [pc, #72]	; (f040 <am_hal_iom_configure+0x24c>)
    eff8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    effc:	e770      	b.n	eee0 <am_hal_iom_configure+0xec>
    effe:	4a11      	ldr	r2, [pc, #68]	; (f044 <am_hal_iom_configure+0x250>)
    f000:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f004:	4c10      	ldr	r4, [pc, #64]	; (f048 <am_hal_iom_configure+0x254>)
    f006:	e76b      	b.n	eee0 <am_hal_iom_configure+0xec>
    f008:	f102 0901 	add.w	r9, r2, #1
    f00c:	e7a8      	b.n	ef60 <am_hal_iom_configure+0x16c>
    f00e:	f04f 0801 	mov.w	r8, #1
    f012:	e747      	b.n	eea4 <am_hal_iom_configure+0xb0>
    f014:	1eaf      	subs	r7, r5, #2
    f016:	087f      	lsrs	r7, r7, #1
    f018:	3d01      	subs	r5, #1
    f01a:	e7b2      	b.n	ef82 <am_hal_iom_configure+0x18e>
    f01c:	01123456 	.word	0x01123456
    f020:	02dc6c00 	.word	0x02dc6c00
    f024:	007a11ff 	.word	0x007a11ff
    f028:	00061a80 	.word	0x00061a80
    f02c:	000f4240 	.word	0x000f4240
    f030:	000186a0 	.word	0x000186a0
    f034:	0003f070 	.word	0x0003f070
    f038:	00b71aff 	.word	0x00b71aff
    f03c:	00213040 	.word	0x00213040
    f040:	06031301 	.word	0x06031301
    f044:	0003f270 	.word	0x0003f270
    f048:	1d0e1201 	.word	0x1d0e1201
    f04c:	0003d090 	.word	0x0003d090

0000f050 <am_hal_iom_blocking_transfer>:
    f050:	b128      	cbz	r0, f05e <am_hal_iom_blocking_transfer+0xe>
    f052:	6803      	ldr	r3, [r0, #0]
    f054:	4ac8      	ldr	r2, [pc, #800]	; (f378 <am_hal_iom_blocking_transfer+0x328>)
    f056:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f05a:	4293      	cmp	r3, r2
    f05c:	d001      	beq.n	f062 <am_hal_iom_blocking_transfer+0x12>
    f05e:	2002      	movs	r0, #2
    f060:	4770      	bx	lr
    f062:	b159      	cbz	r1, f07c <am_hal_iom_blocking_transfer+0x2c>
    f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f068:	f891 8010 	ldrb.w	r8, [r1, #16]
    f06c:	f1b8 0f01 	cmp.w	r8, #1
    f070:	b087      	sub	sp, #28
    f072:	d905      	bls.n	f080 <am_hal_iom_blocking_transfer+0x30>
    f074:	2007      	movs	r0, #7
    f076:	b007      	add	sp, #28
    f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f07c:	2006      	movs	r0, #6
    f07e:	4770      	bx	lr
    f080:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    f084:	f1ba 0f00 	cmp.w	sl, #0
    f088:	d102      	bne.n	f090 <am_hal_iom_blocking_transfer+0x40>
    f08a:	f881 a010 	strb.w	sl, [r1, #16]
    f08e:	46d0      	mov	r8, sl
    f090:	f8d1 9004 	ldr.w	r9, [r1, #4]
    f094:	f1b9 0f03 	cmp.w	r9, #3
    f098:	d901      	bls.n	f09e <am_hal_iom_blocking_transfer+0x4e>
    f09a:	2006      	movs	r0, #6
    f09c:	e7eb      	b.n	f076 <am_hal_iom_blocking_transfer+0x26>
    f09e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    f0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f0a6:	f8d1 b008 	ldr.w	fp, [r1, #8]
    f0aa:	4093      	lsls	r3, r2
    f0ac:	ea13 0f0b 	tst.w	r3, fp
    f0b0:	d1f3      	bne.n	f09a <am_hal_iom_blocking_transfer+0x4a>
    f0b2:	f1ba 0f00 	cmp.w	sl, #0
    f0b6:	f000 80c5 	beq.w	f244 <am_hal_iom_blocking_transfer+0x1f4>
    f0ba:	f1b8 0f00 	cmp.w	r8, #0
    f0be:	f000 80d3 	beq.w	f268 <am_hal_iom_blocking_transfer+0x218>
    f0c2:	698b      	ldr	r3, [r1, #24]
    f0c4:	2b00      	cmp	r3, #0
    f0c6:	d0e8      	beq.n	f09a <am_hal_iom_blocking_transfer+0x4a>
    f0c8:	7a03      	ldrb	r3, [r0, #8]
    f0ca:	2b01      	cmp	r3, #1
    f0cc:	f040 80be 	bne.w	f24c <am_hal_iom_blocking_transfer+0x1fc>
    f0d0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f0d4:	d8e1      	bhi.n	f09a <am_hal_iom_blocking_transfer+0x4a>
    f0d6:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    f0da:	2b02      	cmp	r3, #2
    f0dc:	d0ca      	beq.n	f074 <am_hal_iom_blocking_transfer+0x24>
    f0de:	7f0b      	ldrb	r3, [r1, #28]
    f0e0:	694f      	ldr	r7, [r1, #20]
    f0e2:	f8d1 e018 	ldr.w	lr, [r1, #24]
    f0e6:	9303      	str	r3, [sp, #12]
    f0e8:	4604      	mov	r4, r0
    f0ea:	2301      	movs	r3, #1
    f0ec:	460d      	mov	r5, r1
    f0ee:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    f0f2:	6866      	ldr	r6, [r4, #4]
    f0f4:	9300      	str	r3, [sp, #0]
    f0f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f0fa:	2300      	movs	r3, #0
    f0fc:	f104 0124 	add.w	r1, r4, #36	; 0x24
    f100:	4598      	cmp	r8, r3
    f102:	bf18      	it	ne
    f104:	4677      	movne	r7, lr
    f106:	f7ff fa53 	bl	e5b0 <am_hal_flash_delay_status_check>
    f10a:	2800      	cmp	r0, #0
    f10c:	d1b3      	bne.n	f076 <am_hal_iom_blocking_transfer+0x26>
    f10e:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    f112:	3604      	adds	r6, #4
    f114:	2301      	movs	r3, #1
    f116:	0336      	lsls	r6, r6, #12
    f118:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    f11c:	9300      	str	r3, [sp, #0]
    f11e:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    f122:	9304      	str	r3, [sp, #16]
    f124:	4619      	mov	r1, r3
    f126:	2206      	movs	r2, #6
    f128:	2304      	movs	r3, #4
    f12a:	f7ff fa41 	bl	e5b0 <am_hal_flash_delay_status_check>
    f12e:	2800      	cmp	r0, #0
    f130:	d1a1      	bne.n	f076 <am_hal_iom_blocking_transfer+0x26>
    f132:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    f136:	9305      	str	r3, [sp, #20]
    f138:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f13c:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    f140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f144:	f360 0300 	bfi	r3, r0, #0, #1
    f148:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    f14c:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    f150:	682b      	ldr	r3, [r5, #0]
    f152:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    f156:	7a23      	ldrb	r3, [r4, #8]
    f158:	b91b      	cbnz	r3, f162 <am_hal_iom_blocking_transfer+0x112>
    f15a:	682b      	ldr	r3, [r5, #0]
    f15c:	4423      	add	r3, r4
    f15e:	f893 0898 	ldrb.w	r0, [r3, #2200]	; 0x898
    f162:	f8c6 021c 	str.w	r0, [r6, #540]	; 0x21c
    f166:	7a23      	ldrb	r3, [r4, #8]
    f168:	2b00      	cmp	r3, #0
    f16a:	d17b      	bne.n	f264 <am_hal_iom_blocking_transfer+0x214>
    f16c:	682b      	ldr	r3, [r5, #0]
    f16e:	4a83      	ldr	r2, [pc, #524]	; (f37c <am_hal_iom_blocking_transfer+0x32c>)
    f170:	051b      	lsls	r3, r3, #20
    f172:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    f176:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    f17a:	ea0a 0202 	and.w	r2, sl, r2
    f17e:	f1b8 0f01 	cmp.w	r8, #1
    f182:	ea42 0203 	orr.w	r2, r2, r3
    f186:	d074      	beq.n	f272 <am_hal_iom_blocking_transfer+0x222>
    f188:	f3cb 230f 	ubfx	r3, fp, #8, #16
    f18c:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    f190:	ea4f 1149 	mov.w	r1, r9, lsl #5
    f194:	ea4f 600b 	mov.w	r0, fp, lsl #24
    f198:	f040 0001 	orr.w	r0, r0, #1
    f19c:	f001 0160 	and.w	r1, r1, #96	; 0x60
    f1a0:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f1a4:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f1a8:	4301      	orrs	r1, r0
    f1aa:	9803      	ldr	r0, [sp, #12]
    f1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f1b0:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    f1b4:	2b03      	cmp	r3, #3
    f1b6:	ea42 0201 	orr.w	r2, r2, r1
    f1ba:	f240 80b8 	bls.w	f32e <am_hal_iom_blocking_transfer+0x2de>
    f1be:	f1b8 0f00 	cmp.w	r8, #0
    f1c2:	d00a      	beq.n	f1da <am_hal_iom_blocking_transfer+0x18a>
    f1c4:	4641      	mov	r1, r8
    f1c6:	f857 0b04 	ldr.w	r0, [r7], #4
    f1ca:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    f1ce:	2903      	cmp	r1, #3
    f1d0:	f1a3 0304 	sub.w	r3, r3, #4
    f1d4:	f1a1 0104 	sub.w	r1, r1, #4
    f1d8:	d82f      	bhi.n	f23a <am_hal_iom_blocking_transfer+0x1ea>
    f1da:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f1de:	f04f 0800 	mov.w	r8, #0
    f1e2:	2701      	movs	r7, #1
    f1e4:	9904      	ldr	r1, [sp, #16]
    f1e6:	9700      	str	r7, [sp, #0]
    f1e8:	2304      	movs	r3, #4
    f1ea:	2206      	movs	r2, #6
    f1ec:	4864      	ldr	r0, [pc, #400]	; (f380 <am_hal_iom_blocking_transfer+0x330>)
    f1ee:	f7ff f9df 	bl	e5b0 <am_hal_flash_delay_status_check>
    f1f2:	4605      	mov	r5, r0
    f1f4:	b978      	cbnz	r0, f216 <am_hal_iom_blocking_transfer+0x1c6>
    f1f6:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f1fa:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    f1fe:	f040 8090 	bne.w	f322 <am_hal_iom_blocking_transfer+0x2d2>
    f202:	0599      	lsls	r1, r3, #22
    f204:	f100 8090 	bmi.w	f328 <am_hal_iom_blocking_transfer+0x2d8>
    f208:	06da      	lsls	r2, r3, #27
    f20a:	f100 80d2 	bmi.w	f3b2 <am_hal_iom_blocking_transfer+0x362>
    f20e:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    f212:	d00e      	beq.n	f232 <am_hal_iom_blocking_transfer+0x1e2>
    f214:	463d      	mov	r5, r7
    f216:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    f21a:	4620      	mov	r0, r4
    f21c:	f7ff fbca 	bl	e9b4 <internal_iom_reset_on_error>
    f220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f224:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    f228:	9b05      	ldr	r3, [sp, #20]
    f22a:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    f22e:	4628      	mov	r0, r5
    f230:	e721      	b.n	f076 <am_hal_iom_blocking_transfer+0x26>
    f232:	f1b8 0f00 	cmp.w	r8, #0
    f236:	d0f3      	beq.n	f220 <am_hal_iom_blocking_transfer+0x1d0>
    f238:	e7ec      	b.n	f214 <am_hal_iom_blocking_transfer+0x1c4>
    f23a:	2b03      	cmp	r3, #3
    f23c:	d976      	bls.n	f32c <am_hal_iom_blocking_transfer+0x2dc>
    f23e:	2900      	cmp	r1, #0
    f240:	d1c1      	bne.n	f1c6 <am_hal_iom_blocking_transfer+0x176>
    f242:	e7ca      	b.n	f1da <am_hal_iom_blocking_transfer+0x18a>
    f244:	7a03      	ldrb	r3, [r0, #8]
    f246:	2b01      	cmp	r3, #1
    f248:	f43f af45 	beq.w	f0d6 <am_hal_iom_blocking_transfer+0x86>
    f24c:	2b00      	cmp	r3, #0
    f24e:	f47f af42 	bne.w	f0d6 <am_hal_iom_blocking_transfer+0x86>
    f252:	680b      	ldr	r3, [r1, #0]
    f254:	2b03      	cmp	r3, #3
    f256:	f63f af20 	bhi.w	f09a <am_hal_iom_blocking_transfer+0x4a>
    f25a:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    f25e:	f4bf af1c 	bcs.w	f09a <am_hal_iom_blocking_transfer+0x4a>
    f262:	e738      	b.n	f0d6 <am_hal_iom_blocking_transfer+0x86>
    f264:	2300      	movs	r3, #0
    f266:	e782      	b.n	f16e <am_hal_iom_blocking_transfer+0x11e>
    f268:	694b      	ldr	r3, [r1, #20]
    f26a:	2b00      	cmp	r3, #0
    f26c:	f47f af2c 	bne.w	f0c8 <am_hal_iom_blocking_transfer+0x78>
    f270:	e713      	b.n	f09a <am_hal_iom_blocking_transfer+0x4a>
    f272:	ea4f 1349 	mov.w	r3, r9, lsl #5
    f276:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    f27a:	ea4f 610b 	mov.w	r1, fp, lsl #24
    f27e:	9b03      	ldr	r3, [sp, #12]
    f280:	f041 0102 	orr.w	r1, r1, #2
    f284:	f3cb 200f 	ubfx	r0, fp, #8, #16
    f288:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    f28c:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f290:	ea4e 0301 	orr.w	r3, lr, r1
    f294:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f298:	431a      	orrs	r2, r3
    f29a:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f29e:	2200      	movs	r2, #0
    f2a0:	f1b8 0f00 	cmp.w	r8, #0
    f2a4:	d09b      	beq.n	f1de <am_hal_iom_blocking_transfer+0x18e>
    f2a6:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f2aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f2ae:	2b03      	cmp	r3, #3
    f2b0:	d81e      	bhi.n	f2f0 <am_hal_iom_blocking_transfer+0x2a0>
    f2b2:	4d33      	ldr	r5, [pc, #204]	; (f380 <am_hal_iom_blocking_transfer+0x330>)
    f2b4:	e001      	b.n	f2ba <am_hal_iom_blocking_transfer+0x26a>
    f2b6:	3d01      	subs	r5, #1
    f2b8:	d093      	beq.n	f1e2 <am_hal_iom_blocking_transfer+0x192>
    f2ba:	2010      	movs	r0, #16
    f2bc:	b10a      	cbz	r2, f2c2 <am_hal_iom_blocking_transfer+0x272>
    f2be:	4598      	cmp	r8, r3
    f2c0:	d88f      	bhi.n	f1e2 <am_hal_iom_blocking_transfer+0x192>
    f2c2:	f7ff f965 	bl	e590 <am_hal_flash_delay>
    f2c6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    f2ca:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f2ce:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f2d2:	2b03      	cmp	r3, #3
    f2d4:	f002 0201 	and.w	r2, r2, #1
    f2d8:	d9ed      	bls.n	f2b6 <am_hal_iom_blocking_transfer+0x266>
    f2da:	e009      	b.n	f2f0 <am_hal_iom_blocking_transfer+0x2a0>
    f2dc:	2b03      	cmp	r3, #3
    f2de:	6039      	str	r1, [r7, #0]
    f2e0:	f1a8 0804 	sub.w	r8, r8, #4
    f2e4:	d967      	bls.n	f3b6 <am_hal_iom_blocking_transfer+0x366>
    f2e6:	f1b8 0f00 	cmp.w	r8, #0
    f2ea:	f43f af78 	beq.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f2ee:	4607      	mov	r7, r0
    f2f0:	f1b8 0f03 	cmp.w	r8, #3
    f2f4:	f1a3 0304 	sub.w	r3, r3, #4
    f2f8:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    f2fc:	f107 0004 	add.w	r0, r7, #4
    f300:	d8ec      	bhi.n	f2dc <am_hal_iom_blocking_transfer+0x28c>
    f302:	f1b8 0f01 	cmp.w	r8, #1
    f306:	7039      	strb	r1, [r7, #0]
    f308:	ea4f 2311 	mov.w	r3, r1, lsr #8
    f30c:	f43f af67 	beq.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f310:	f1b8 0f02 	cmp.w	r8, #2
    f314:	707b      	strb	r3, [r7, #1]
    f316:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f31a:	f43f af60 	beq.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f31e:	70b9      	strb	r1, [r7, #2]
    f320:	e75d      	b.n	f1de <am_hal_iom_blocking_transfer+0x18e>
    f322:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f326:	e776      	b.n	f216 <am_hal_iom_blocking_transfer+0x1c6>
    f328:	4d16      	ldr	r5, [pc, #88]	; (f384 <am_hal_iom_blocking_transfer+0x334>)
    f32a:	e774      	b.n	f216 <am_hal_iom_blocking_transfer+0x1c6>
    f32c:	4688      	mov	r8, r1
    f32e:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f332:	f1b8 0f00 	cmp.w	r8, #0
    f336:	f43f af52 	beq.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f33a:	463b      	mov	r3, r7
    f33c:	4647      	mov	r7, r8
    f33e:	4698      	mov	r8, r3
    f340:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f344:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f348:	2b03      	cmp	r3, #3
    f34a:	d820      	bhi.n	f38e <am_hal_iom_blocking_transfer+0x33e>
    f34c:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f350:	07d8      	lsls	r0, r3, #31
    f352:	d42c      	bmi.n	f3ae <am_hal_iom_blocking_transfer+0x35e>
    f354:	4d0a      	ldr	r5, [pc, #40]	; (f380 <am_hal_iom_blocking_transfer+0x330>)
    f356:	e005      	b.n	f364 <am_hal_iom_blocking_transfer+0x314>
    f358:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f35c:	07db      	lsls	r3, r3, #31
    f35e:	d426      	bmi.n	f3ae <am_hal_iom_blocking_transfer+0x35e>
    f360:	3d01      	subs	r5, #1
    f362:	d024      	beq.n	f3ae <am_hal_iom_blocking_transfer+0x35e>
    f364:	2010      	movs	r0, #16
    f366:	f7ff f913 	bl	e590 <am_hal_flash_delay>
    f36a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f36e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f372:	2b03      	cmp	r3, #3
    f374:	d9f0      	bls.n	f358 <am_hal_iom_blocking_transfer+0x308>
    f376:	e00a      	b.n	f38e <am_hal_iom_blocking_transfer+0x33e>
    f378:	01123456 	.word	0x01123456
    f37c:	000fff00 	.word	0x000fff00
    f380:	0007a120 	.word	0x0007a120
    f384:	08000001 	.word	0x08000001
    f388:	2f00      	cmp	r7, #0
    f38a:	f43f af28 	beq.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f38e:	f858 2b04 	ldr.w	r2, [r8], #4
    f392:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f396:	2f03      	cmp	r7, #3
    f398:	f1a3 0304 	sub.w	r3, r3, #4
    f39c:	f1a7 0704 	sub.w	r7, r7, #4
    f3a0:	f67f af1d 	bls.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f3a4:	2b03      	cmp	r3, #3
    f3a6:	d8ef      	bhi.n	f388 <am_hal_iom_blocking_transfer+0x338>
    f3a8:	2f00      	cmp	r7, #0
    f3aa:	d1c9      	bne.n	f340 <am_hal_iom_blocking_transfer+0x2f0>
    f3ac:	e717      	b.n	f1de <am_hal_iom_blocking_transfer+0x18e>
    f3ae:	46b8      	mov	r8, r7
    f3b0:	e717      	b.n	f1e2 <am_hal_iom_blocking_transfer+0x192>
    f3b2:	4d04      	ldr	r5, [pc, #16]	; (f3c4 <am_hal_iom_blocking_transfer+0x374>)
    f3b4:	e72f      	b.n	f216 <am_hal_iom_blocking_transfer+0x1c6>
    f3b6:	f1b8 0f00 	cmp.w	r8, #0
    f3ba:	f43f af10 	beq.w	f1de <am_hal_iom_blocking_transfer+0x18e>
    f3be:	4607      	mov	r7, r0
    f3c0:	e771      	b.n	f2a6 <am_hal_iom_blocking_transfer+0x256>
    f3c2:	bf00      	nop
    f3c4:	08000002 	.word	0x08000002

0000f3c8 <am_hal_itm_disable>:
    f3c8:	b510      	push	{r4, lr}
    f3ca:	4b25      	ldr	r3, [pc, #148]	; (f460 <am_hal_itm_disable+0x98>)
    f3cc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f3d0:	b9b3      	cbnz	r3, f400 <am_hal_itm_disable+0x38>
    f3d2:	4b24      	ldr	r3, [pc, #144]	; (f464 <am_hal_itm_disable+0x9c>)
    f3d4:	68da      	ldr	r2, [r3, #12]
    f3d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f3da:	60da      	str	r2, [r3, #12]
    f3dc:	68da      	ldr	r2, [r3, #12]
    f3de:	01d2      	lsls	r2, r2, #7
    f3e0:	d5fc      	bpl.n	f3dc <am_hal_itm_disable+0x14>
    f3e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f3e6:	4920      	ldr	r1, [pc, #128]	; (f468 <am_hal_itm_disable+0xa0>)
    f3e8:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f3ec:	4a1f      	ldr	r2, [pc, #124]	; (f46c <am_hal_itm_disable+0xa4>)
    f3ee:	200f      	movs	r0, #15
    f3f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f3f4:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f3f8:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f3fc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f400:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f404:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f408:	021b      	lsls	r3, r3, #8
    f40a:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f40e:	d4f9      	bmi.n	f404 <am_hal_itm_disable+0x3c>
    f410:	f44f 7048 	mov.w	r0, #800	; 0x320
    f414:	f7ff f8bc 	bl	e590 <am_hal_flash_delay>
    f418:	4b13      	ldr	r3, [pc, #76]	; (f468 <am_hal_itm_disable+0xa0>)
    f41a:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f41e:	4621      	mov	r1, r4
    f420:	2064      	movs	r0, #100	; 0x64
    f422:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f426:	f023 0301 	bic.w	r3, r3, #1
    f42a:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f42e:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f432:	4b0f      	ldr	r3, [pc, #60]	; (f470 <am_hal_itm_disable+0xa8>)
    f434:	4013      	ands	r3, r2
    f436:	2b00      	cmp	r3, #0
    f438:	d1f9      	bne.n	f42e <am_hal_itm_disable+0x66>
    f43a:	3801      	subs	r0, #1
    f43c:	d1f1      	bne.n	f422 <am_hal_itm_disable+0x5a>
    f43e:	4a09      	ldr	r2, [pc, #36]	; (f464 <am_hal_itm_disable+0x9c>)
    f440:	68d3      	ldr	r3, [r2, #12]
    f442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f446:	60d3      	str	r3, [r2, #12]
    f448:	68d3      	ldr	r3, [r2, #12]
    f44a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f44e:	d1fb      	bne.n	f448 <am_hal_itm_disable+0x80>
    f450:	4a03      	ldr	r2, [pc, #12]	; (f460 <am_hal_itm_disable+0x98>)
    f452:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f456:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f45a:	2b00      	cmp	r3, #0
    f45c:	d1fb      	bne.n	f456 <am_hal_itm_disable+0x8e>
    f45e:	bd10      	pop	{r4, pc}
    f460:	40020000 	.word	0x40020000
    f464:	e000edf0 	.word	0xe000edf0
    f468:	c5acce55 	.word	0xc5acce55
    f46c:	00150511 	.word	0x00150511
    f470:	00800001 	.word	0x00800001

0000f474 <am_hal_mcuctrl_info_get>:
    f474:	b4f0      	push	{r4, r5, r6, r7}
    f476:	b121      	cbz	r1, f482 <am_hal_mcuctrl_info_get+0xe>
    f478:	2801      	cmp	r0, #1
    f47a:	d038      	beq.n	f4ee <am_hal_mcuctrl_info_get+0x7a>
    f47c:	d320      	bcc.n	f4c0 <am_hal_mcuctrl_info_get+0x4c>
    f47e:	2802      	cmp	r0, #2
    f480:	d002      	beq.n	f488 <am_hal_mcuctrl_info_get+0x14>
    f482:	2006      	movs	r0, #6
    f484:	bcf0      	pop	{r4, r5, r6, r7}
    f486:	4770      	bx	lr
    f488:	4a41      	ldr	r2, [pc, #260]	; (f590 <am_hal_mcuctrl_info_get+0x11c>)
    f48a:	684d      	ldr	r5, [r1, #4]
    f48c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f490:	694c      	ldr	r4, [r1, #20]
    f492:	f003 0601 	and.w	r6, r3, #1
    f496:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f49a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f49e:	700e      	strb	r6, [r1, #0]
    f4a0:	7208      	strb	r0, [r1, #8]
    f4a2:	740b      	strb	r3, [r1, #16]
    f4a4:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f4a8:	60cb      	str	r3, [r1, #12]
    f4aa:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f4ae:	4328      	orrs	r0, r5
    f4b0:	6048      	str	r0, [r1, #4]
    f4b2:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f4b6:	4323      	orrs	r3, r4
    f4b8:	2000      	movs	r0, #0
    f4ba:	614b      	str	r3, [r1, #20]
    f4bc:	bcf0      	pop	{r4, r5, r6, r7}
    f4be:	4770      	bx	lr
    f4c0:	4a33      	ldr	r2, [pc, #204]	; (f590 <am_hal_mcuctrl_info_get+0x11c>)
    f4c2:	6993      	ldr	r3, [r2, #24]
    f4c4:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f4c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f4cc:	7008      	strb	r0, [r1, #0]
    f4ce:	704b      	strb	r3, [r1, #1]
    f4d0:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f4d4:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f4d8:	710b      	strb	r3, [r1, #4]
    f4da:	6953      	ldr	r3, [r2, #20]
    f4dc:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f4e0:	f003 0301 	and.w	r3, r3, #1
    f4e4:	2000      	movs	r0, #0
    f4e6:	708a      	strb	r2, [r1, #2]
    f4e8:	70cb      	strb	r3, [r1, #3]
    f4ea:	bcf0      	pop	{r4, r5, r6, r7}
    f4ec:	4770      	bx	lr
    f4ee:	4b28      	ldr	r3, [pc, #160]	; (f590 <am_hal_mcuctrl_info_get+0x11c>)
    f4f0:	4c28      	ldr	r4, [pc, #160]	; (f594 <am_hal_mcuctrl_info_get+0x120>)
    f4f2:	681a      	ldr	r2, [r3, #0]
    f4f4:	600a      	str	r2, [r1, #0]
    f4f6:	6858      	ldr	r0, [r3, #4]
    f4f8:	6048      	str	r0, [r1, #4]
    f4fa:	6898      	ldr	r0, [r3, #8]
    f4fc:	6088      	str	r0, [r1, #8]
    f4fe:	68d8      	ldr	r0, [r3, #12]
    f500:	60c8      	str	r0, [r1, #12]
    f502:	691d      	ldr	r5, [r3, #16]
    f504:	4824      	ldr	r0, [pc, #144]	; (f598 <am_hal_mcuctrl_info_get+0x124>)
    f506:	610d      	str	r5, [r1, #16]
    f508:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f50c:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f510:	695d      	ldr	r5, [r3, #20]
    f512:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f516:	4b21      	ldr	r3, [pc, #132]	; (f59c <am_hal_mcuctrl_info_get+0x128>)
    f518:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f51c:	6208      	str	r0, [r1, #32]
    f51e:	f002 0201 	and.w	r2, r2, #1
    f522:	614d      	str	r5, [r1, #20]
    f524:	61cc      	str	r4, [r1, #28]
    f526:	618a      	str	r2, [r1, #24]
    f528:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f52c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f530:	b2d0      	uxtb	r0, r2
    f532:	f004 020f 	and.w	r2, r4, #15
    f536:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f53a:	624a      	str	r2, [r1, #36]	; 0x24
    f53c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f540:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f544:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f548:	f004 020f 	and.w	r2, r4, #15
    f54c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f550:	628a      	str	r2, [r1, #40]	; 0x28
    f552:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f556:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f55a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f55e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f562:	4302      	orrs	r2, r0
    f564:	62ca      	str	r2, [r1, #44]	; 0x2c
    f566:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f56a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f56e:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f572:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f576:	b2c0      	uxtb	r0, r0
    f578:	0400      	lsls	r0, r0, #16
    f57a:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f57e:	b2d2      	uxtb	r2, r2
    f580:	431a      	orrs	r2, r3
    f582:	b2e3      	uxtb	r3, r4
    f584:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f588:	630b      	str	r3, [r1, #48]	; 0x30
    f58a:	2000      	movs	r0, #0
    f58c:	bcf0      	pop	{r4, r5, r6, r7}
    f58e:	4770      	bx	lr
    f590:	40020000 	.word	0x40020000
    f594:	00010700 	.word	0x00010700
    f598:	00010740 	.word	0x00010740
    f59c:	f0000f00 	.word	0xf0000f00

0000f5a0 <am_hal_pwrctrl_periph_enable>:
    f5a0:	b570      	push	{r4, r5, r6, lr}
    f5a2:	b082      	sub	sp, #8
    f5a4:	4604      	mov	r4, r0
    f5a6:	f7ff f9fd 	bl	e9a4 <am_hal_interrupt_master_disable>
    f5aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f5ae:	4d0f      	ldr	r5, [pc, #60]	; (f5ec <am_hal_pwrctrl_periph_enable+0x4c>)
    f5b0:	4e0f      	ldr	r6, [pc, #60]	; (f5f0 <am_hal_pwrctrl_periph_enable+0x50>)
    f5b2:	9001      	str	r0, [sp, #4]
    f5b4:	00a4      	lsls	r4, r4, #2
    f5b6:	68aa      	ldr	r2, [r5, #8]
    f5b8:	5933      	ldr	r3, [r6, r4]
    f5ba:	4313      	orrs	r3, r2
    f5bc:	60ab      	str	r3, [r5, #8]
    f5be:	9801      	ldr	r0, [sp, #4]
    f5c0:	4434      	add	r4, r6
    f5c2:	f7ff f9f3 	bl	e9ac <am_hal_interrupt_master_set>
    f5c6:	20a0      	movs	r0, #160	; 0xa0
    f5c8:	f7fe ffe2 	bl	e590 <am_hal_flash_delay>
    f5cc:	69ab      	ldr	r3, [r5, #24]
    f5ce:	6864      	ldr	r4, [r4, #4]
    f5d0:	4223      	tst	r3, r4
    f5d2:	d103      	bne.n	f5dc <am_hal_pwrctrl_periph_enable+0x3c>
    f5d4:	20a0      	movs	r0, #160	; 0xa0
    f5d6:	f7fe ffdb 	bl	e590 <am_hal_flash_delay>
    f5da:	69ab      	ldr	r3, [r5, #24]
    f5dc:	4b03      	ldr	r3, [pc, #12]	; (f5ec <am_hal_pwrctrl_periph_enable+0x4c>)
    f5de:	699b      	ldr	r3, [r3, #24]
    f5e0:	4223      	tst	r3, r4
    f5e2:	bf0c      	ite	eq
    f5e4:	2001      	moveq	r0, #1
    f5e6:	2000      	movne	r0, #0
    f5e8:	b002      	add	sp, #8
    f5ea:	bd70      	pop	{r4, r5, r6, pc}
    f5ec:	40021000 	.word	0x40021000
    f5f0:	00010780 	.word	0x00010780

0000f5f4 <am_hal_pwrctrl_periph_disable>:
    f5f4:	b570      	push	{r4, r5, r6, lr}
    f5f6:	b082      	sub	sp, #8
    f5f8:	4604      	mov	r4, r0
    f5fa:	f7ff f9d3 	bl	e9a4 <am_hal_interrupt_master_disable>
    f5fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f602:	4d10      	ldr	r5, [pc, #64]	; (f644 <am_hal_pwrctrl_periph_disable+0x50>)
    f604:	4e10      	ldr	r6, [pc, #64]	; (f648 <am_hal_pwrctrl_periph_disable+0x54>)
    f606:	9001      	str	r0, [sp, #4]
    f608:	00a4      	lsls	r4, r4, #2
    f60a:	68ab      	ldr	r3, [r5, #8]
    f60c:	5932      	ldr	r2, [r6, r4]
    f60e:	ea23 0302 	bic.w	r3, r3, r2
    f612:	60ab      	str	r3, [r5, #8]
    f614:	9801      	ldr	r0, [sp, #4]
    f616:	4434      	add	r4, r6
    f618:	f7ff f9c8 	bl	e9ac <am_hal_interrupt_master_set>
    f61c:	20a0      	movs	r0, #160	; 0xa0
    f61e:	f7fe ffb7 	bl	e590 <am_hal_flash_delay>
    f622:	69ab      	ldr	r3, [r5, #24]
    f624:	6864      	ldr	r4, [r4, #4]
    f626:	4223      	tst	r3, r4
    f628:	d003      	beq.n	f632 <am_hal_pwrctrl_periph_disable+0x3e>
    f62a:	20a0      	movs	r0, #160	; 0xa0
    f62c:	f7fe ffb0 	bl	e590 <am_hal_flash_delay>
    f630:	69ab      	ldr	r3, [r5, #24]
    f632:	4b04      	ldr	r3, [pc, #16]	; (f644 <am_hal_pwrctrl_periph_disable+0x50>)
    f634:	699b      	ldr	r3, [r3, #24]
    f636:	4223      	tst	r3, r4
    f638:	bf14      	ite	ne
    f63a:	2001      	movne	r0, #1
    f63c:	2000      	moveq	r0, #0
    f63e:	b002      	add	sp, #8
    f640:	bd70      	pop	{r4, r5, r6, pc}
    f642:	bf00      	nop
    f644:	40021000 	.word	0x40021000
    f648:	00010780 	.word	0x00010780

0000f64c <am_hal_pwrctrl_low_power_init>:
    f64c:	b530      	push	{r4, r5, lr}
    f64e:	4b33      	ldr	r3, [pc, #204]	; (f71c <am_hal_pwrctrl_low_power_init+0xd0>)
    f650:	681a      	ldr	r2, [r3, #0]
    f652:	b085      	sub	sp, #20
    f654:	b912      	cbnz	r2, f65c <am_hal_pwrctrl_low_power_init+0x10>
    f656:	4a32      	ldr	r2, [pc, #200]	; (f720 <am_hal_pwrctrl_low_power_init+0xd4>)
    f658:	6812      	ldr	r2, [r2, #0]
    f65a:	601a      	str	r2, [r3, #0]
    f65c:	4b31      	ldr	r3, [pc, #196]	; (f724 <am_hal_pwrctrl_low_power_init+0xd8>)
    f65e:	68db      	ldr	r3, [r3, #12]
    f660:	b2db      	uxtb	r3, r3
    f662:	2b12      	cmp	r3, #18
    f664:	d00a      	beq.n	f67c <am_hal_pwrctrl_low_power_init+0x30>
    f666:	4c30      	ldr	r4, [pc, #192]	; (f728 <am_hal_pwrctrl_low_power_init+0xdc>)
    f668:	2100      	movs	r1, #0
    f66a:	200c      	movs	r0, #12
    f66c:	f7fe fc90 	bl	df90 <am_hal_cachectrl_control>
    f670:	69a3      	ldr	r3, [r4, #24]
    f672:	05d8      	lsls	r0, r3, #23
    f674:	d520      	bpl.n	f6b8 <am_hal_pwrctrl_low_power_init+0x6c>
    f676:	2000      	movs	r0, #0
    f678:	b005      	add	sp, #20
    f67a:	bd30      	pop	{r4, r5, pc}
    f67c:	4c2a      	ldr	r4, [pc, #168]	; (f728 <am_hal_pwrctrl_low_power_init+0xdc>)
    f67e:	6863      	ldr	r3, [r4, #4]
    f680:	07d9      	lsls	r1, r3, #31
    f682:	d5f0      	bpl.n	f666 <am_hal_pwrctrl_low_power_init+0x1a>
    f684:	f7ff f98e 	bl	e9a4 <am_hal_interrupt_master_disable>
    f688:	9003      	str	r0, [sp, #12]
    f68a:	68a3      	ldr	r3, [r4, #8]
    f68c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f690:	60a3      	str	r3, [r4, #8]
    f692:	9803      	ldr	r0, [sp, #12]
    f694:	f7ff f98a 	bl	e9ac <am_hal_interrupt_master_set>
    f698:	20a0      	movs	r0, #160	; 0xa0
    f69a:	f7fe ff79 	bl	e590 <am_hal_flash_delay>
    f69e:	69a3      	ldr	r3, [r4, #24]
    f6a0:	061a      	lsls	r2, r3, #24
    f6a2:	d403      	bmi.n	f6ac <am_hal_pwrctrl_low_power_init+0x60>
    f6a4:	20a0      	movs	r0, #160	; 0xa0
    f6a6:	f7fe ff73 	bl	e590 <am_hal_flash_delay>
    f6aa:	69a3      	ldr	r3, [r4, #24]
    f6ac:	4b1e      	ldr	r3, [pc, #120]	; (f728 <am_hal_pwrctrl_low_power_init+0xdc>)
    f6ae:	699b      	ldr	r3, [r3, #24]
    f6b0:	061b      	lsls	r3, r3, #24
    f6b2:	d4d8      	bmi.n	f666 <am_hal_pwrctrl_low_power_init+0x1a>
    f6b4:	2001      	movs	r0, #1
    f6b6:	e7df      	b.n	f678 <am_hal_pwrctrl_low_power_init+0x2c>
    f6b8:	4d1a      	ldr	r5, [pc, #104]	; (f724 <am_hal_pwrctrl_low_power_init+0xd8>)
    f6ba:	491c      	ldr	r1, [pc, #112]	; (f72c <am_hal_pwrctrl_low_power_init+0xe0>)
    f6bc:	7e2a      	ldrb	r2, [r5, #24]
    f6be:	2001      	movs	r0, #1
    f6c0:	4302      	orrs	r2, r0
    f6c2:	2307      	movs	r3, #7
    f6c4:	762a      	strb	r2, [r5, #24]
    f6c6:	9000      	str	r0, [sp, #0]
    f6c8:	461a      	mov	r2, r3
    f6ca:	f242 7010 	movw	r0, #10000	; 0x2710
    f6ce:	f7fe ff6f 	bl	e5b0 <am_hal_flash_delay_status_check>
    f6d2:	b110      	cbz	r0, f6da <am_hal_pwrctrl_low_power_init+0x8e>
    f6d4:	2004      	movs	r0, #4
    f6d6:	b005      	add	sp, #20
    f6d8:	bd30      	pop	{r4, r5, pc}
    f6da:	6823      	ldr	r3, [r4, #0]
    f6dc:	f043 0301 	orr.w	r3, r3, #1
    f6e0:	6023      	str	r3, [r4, #0]
    f6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f6e8:	6263      	str	r3, [r4, #36]	; 0x24
    f6ea:	68eb      	ldr	r3, [r5, #12]
    f6ec:	b2db      	uxtb	r3, r3
    f6ee:	2b11      	cmp	r3, #17
    f6f0:	d1c1      	bne.n	f676 <am_hal_pwrctrl_low_power_init+0x2a>
    f6f2:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f6f6:	f360 5356 	bfi	r3, r0, #21, #2
    f6fa:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f6fe:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f702:	220f      	movs	r2, #15
    f704:	f362 138b 	bfi	r3, r2, #6, #6
    f708:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f70c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f710:	f362 0305 	bfi	r3, r2, #0, #6
    f714:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f718:	e7ae      	b.n	f678 <am_hal_pwrctrl_low_power_init+0x2c>
    f71a:	bf00      	nop
    f71c:	1000118c 	.word	0x1000118c
    f720:	4ffff000 	.word	0x4ffff000
    f724:	40020000 	.word	0x40020000
    f728:	40021000 	.word	0x40021000
    f72c:	40020018 	.word	0x40020018

0000f730 <am_hal_rtc_osc_select>:
    f730:	b928      	cbnz	r0, f73e <am_hal_rtc_osc_select+0xe>
    f732:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f736:	68d3      	ldr	r3, [r2, #12]
    f738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f73c:	60d3      	str	r3, [r2, #12]
    f73e:	4770      	bx	lr

0000f740 <am_hal_rtc_osc_disable>:
    f740:	4a03      	ldr	r2, [pc, #12]	; (f750 <am_hal_rtc_osc_disable+0x10>)
    f742:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f746:	f043 0310 	orr.w	r3, r3, #16
    f74a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f74e:	4770      	bx	lr
    f750:	40004200 	.word	0x40004200

0000f754 <am_hal_sysctrl_sleep>:
    f754:	b510      	push	{r4, lr}
    f756:	b082      	sub	sp, #8
    f758:	4604      	mov	r4, r0
    f75a:	f7ff f923 	bl	e9a4 <am_hal_interrupt_master_disable>
    f75e:	9001      	str	r0, [sp, #4]
    f760:	b124      	cbz	r4, f76c <am_hal_sysctrl_sleep+0x18>
    f762:	4b12      	ldr	r3, [pc, #72]	; (f7ac <am_hal_sysctrl_sleep+0x58>)
    f764:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f768:	07db      	lsls	r3, r3, #31
    f76a:	d512      	bpl.n	f792 <am_hal_sysctrl_sleep+0x3e>
    f76c:	4a10      	ldr	r2, [pc, #64]	; (f7b0 <am_hal_sysctrl_sleep+0x5c>)
    f76e:	6913      	ldr	r3, [r2, #16]
    f770:	f023 0304 	bic.w	r3, r3, #4
    f774:	6113      	str	r3, [r2, #16]
    f776:	f3bf 8f4f 	dsb	sy
    f77a:	4a0e      	ldr	r2, [pc, #56]	; (f7b4 <am_hal_sysctrl_sleep+0x60>)
    f77c:	4b0e      	ldr	r3, [pc, #56]	; (f7b8 <am_hal_sysctrl_sleep+0x64>)
    f77e:	6812      	ldr	r2, [r2, #0]
    f780:	601a      	str	r2, [r3, #0]
    f782:	bf30      	wfi
    f784:	f3bf 8f6f 	isb	sy
    f788:	9801      	ldr	r0, [sp, #4]
    f78a:	f7ff f90f 	bl	e9ac <am_hal_interrupt_master_set>
    f78e:	b002      	add	sp, #8
    f790:	bd10      	pop	{r4, pc}
    f792:	4b0a      	ldr	r3, [pc, #40]	; (f7bc <am_hal_sysctrl_sleep+0x68>)
    f794:	681a      	ldr	r2, [r3, #0]
    f796:	b912      	cbnz	r2, f79e <am_hal_sysctrl_sleep+0x4a>
    f798:	4a09      	ldr	r2, [pc, #36]	; (f7c0 <am_hal_sysctrl_sleep+0x6c>)
    f79a:	6812      	ldr	r2, [r2, #0]
    f79c:	601a      	str	r2, [r3, #0]
    f79e:	4a04      	ldr	r2, [pc, #16]	; (f7b0 <am_hal_sysctrl_sleep+0x5c>)
    f7a0:	6913      	ldr	r3, [r2, #16]
    f7a2:	f043 0304 	orr.w	r3, r3, #4
    f7a6:	6113      	str	r3, [r2, #16]
    f7a8:	e7e5      	b.n	f776 <am_hal_sysctrl_sleep+0x22>
    f7aa:	bf00      	nop
    f7ac:	40020000 	.word	0x40020000
    f7b0:	e000ed00 	.word	0xe000ed00
    f7b4:	5fff0000 	.word	0x5fff0000
    f7b8:	10001190 	.word	0x10001190
    f7bc:	1000118c 	.word	0x1000118c
    f7c0:	4ffff000 	.word	0x4ffff000

0000f7c4 <am_hal_uart_initialize>:
    f7c4:	2801      	cmp	r0, #1
    f7c6:	d901      	bls.n	f7cc <am_hal_uart_initialize+0x8>
    f7c8:	2005      	movs	r0, #5
    f7ca:	4770      	bx	lr
    f7cc:	b169      	cbz	r1, f7ea <am_hal_uart_initialize+0x26>
    f7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7d0:	2264      	movs	r2, #100	; 0x64
    f7d2:	4e0e      	ldr	r6, [pc, #56]	; (f80c <am_hal_uart_initialize+0x48>)
    f7d4:	fb02 f200 	mul.w	r2, r2, r0
    f7d8:	18b4      	adds	r4, r6, r2
    f7da:	4603      	mov	r3, r0
    f7dc:	78e0      	ldrb	r0, [r4, #3]
    f7de:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f7e2:	b2fd      	uxtb	r5, r7
    f7e4:	b11d      	cbz	r5, f7ee <am_hal_uart_initialize+0x2a>
    f7e6:	2007      	movs	r0, #7
    f7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7ea:	2006      	movs	r0, #6
    f7ec:	4770      	bx	lr
    f7ee:	f040 0001 	orr.w	r0, r0, #1
    f7f2:	70e0      	strb	r0, [r4, #3]
    f7f4:	58b0      	ldr	r0, [r6, r2]
    f7f6:	f8df e018 	ldr.w	lr, [pc, #24]	; f810 <am_hal_uart_initialize+0x4c>
    f7fa:	f36e 0017 	bfi	r0, lr, #0, #24
    f7fe:	50b0      	str	r0, [r6, r2]
    f800:	6263      	str	r3, [r4, #36]	; 0x24
    f802:	7127      	strb	r7, [r4, #4]
    f804:	6625      	str	r5, [r4, #96]	; 0x60
    f806:	4628      	mov	r0, r5
    f808:	600c      	str	r4, [r1, #0]
    f80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f80c:	10004b08 	.word	0x10004b08
    f810:	00ea9e06 	.word	0x00ea9e06

0000f814 <am_hal_uart_deinitialize>:
    f814:	b128      	cbz	r0, f822 <am_hal_uart_deinitialize+0xe>
    f816:	6803      	ldr	r3, [r0, #0]
    f818:	4a07      	ldr	r2, [pc, #28]	; (f838 <am_hal_uart_deinitialize+0x24>)
    f81a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f81e:	4293      	cmp	r3, r2
    f820:	d001      	beq.n	f826 <am_hal_uart_deinitialize+0x12>
    f822:	2002      	movs	r0, #2
    f824:	4770      	bx	lr
    f826:	78c2      	ldrb	r2, [r0, #3]
    f828:	2300      	movs	r3, #0
    f82a:	f36f 0200 	bfc	r2, #0, #1
    f82e:	70c2      	strb	r2, [r0, #3]
    f830:	6243      	str	r3, [r0, #36]	; 0x24
    f832:	7103      	strb	r3, [r0, #4]
    f834:	4618      	mov	r0, r3
    f836:	4770      	bx	lr
    f838:	01ea9e06 	.word	0x01ea9e06

0000f83c <am_hal_uart_power_control>:
    f83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f840:	6804      	ldr	r4, [r0, #0]
    f842:	4b36      	ldr	r3, [pc, #216]	; (f91c <am_hal_uart_power_control+0xe0>)
    f844:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f848:	429c      	cmp	r4, r3
    f84a:	b083      	sub	sp, #12
    f84c:	d003      	beq.n	f856 <am_hal_uart_power_control+0x1a>
    f84e:	2002      	movs	r0, #2
    f850:	b003      	add	sp, #12
    f852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f856:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f858:	4605      	mov	r5, r0
    f85a:	f107 0008 	add.w	r0, r7, #8
    f85e:	4691      	mov	r9, r2
    f860:	460e      	mov	r6, r1
    f862:	fa5f f880 	uxtb.w	r8, r0
    f866:	b181      	cbz	r1, f88a <am_hal_uart_power_control+0x4e>
    f868:	2902      	cmp	r1, #2
    f86a:	d80c      	bhi.n	f886 <am_hal_uart_power_control+0x4a>
    f86c:	b992      	cbnz	r2, f894 <am_hal_uart_power_control+0x58>
    f86e:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f872:	371c      	adds	r7, #28
    f874:	033f      	lsls	r7, r7, #12
    f876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f87a:	647b      	str	r3, [r7, #68]	; 0x44
    f87c:	4640      	mov	r0, r8
    f87e:	f7ff feb9 	bl	f5f4 <am_hal_pwrctrl_periph_disable>
    f882:	2000      	movs	r0, #0
    f884:	e7e4      	b.n	f850 <am_hal_uart_power_control+0x14>
    f886:	2006      	movs	r0, #6
    f888:	e7e2      	b.n	f850 <am_hal_uart_power_control+0x14>
    f88a:	b322      	cbz	r2, f8d6 <am_hal_uart_power_control+0x9a>
    f88c:	792b      	ldrb	r3, [r5, #4]
    f88e:	bb3b      	cbnz	r3, f8e0 <am_hal_uart_power_control+0xa4>
    f890:	2007      	movs	r0, #7
    f892:	e7dd      	b.n	f850 <am_hal_uart_power_control+0x14>
    f894:	f7ff f886 	bl	e9a4 <am_hal_interrupt_master_disable>
    f898:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f89c:	331c      	adds	r3, #28
    f89e:	031b      	lsls	r3, r3, #12
    f8a0:	9001      	str	r0, [sp, #4]
    f8a2:	6a1a      	ldr	r2, [r3, #32]
    f8a4:	60aa      	str	r2, [r5, #8]
    f8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f8a8:	60ea      	str	r2, [r5, #12]
    f8aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f8ac:	612a      	str	r2, [r5, #16]
    f8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f8b0:	616a      	str	r2, [r5, #20]
    f8b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f8b4:	61aa      	str	r2, [r5, #24]
    f8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f8b8:	61ea      	str	r2, [r5, #28]
    f8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f8bc:	622b      	str	r3, [r5, #32]
    f8be:	2301      	movs	r3, #1
    f8c0:	712b      	strb	r3, [r5, #4]
    f8c2:	9801      	ldr	r0, [sp, #4]
    f8c4:	f7ff f872 	bl	e9ac <am_hal_interrupt_master_set>
    f8c8:	682b      	ldr	r3, [r5, #0]
    f8ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f8ce:	42a3      	cmp	r3, r4
    f8d0:	d1d4      	bne.n	f87c <am_hal_uart_power_control+0x40>
    f8d2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f8d4:	e7cb      	b.n	f86e <am_hal_uart_power_control+0x32>
    f8d6:	4640      	mov	r0, r8
    f8d8:	f7ff fe62 	bl	f5a0 <am_hal_pwrctrl_periph_enable>
    f8dc:	4648      	mov	r0, r9
    f8de:	e7b7      	b.n	f850 <am_hal_uart_power_control+0x14>
    f8e0:	4640      	mov	r0, r8
    f8e2:	f7ff fe5d 	bl	f5a0 <am_hal_pwrctrl_periph_enable>
    f8e6:	f7ff f85d 	bl	e9a4 <am_hal_interrupt_master_disable>
    f8ea:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f8ee:	331c      	adds	r3, #28
    f8f0:	031b      	lsls	r3, r3, #12
    f8f2:	68aa      	ldr	r2, [r5, #8]
    f8f4:	9000      	str	r0, [sp, #0]
    f8f6:	621a      	str	r2, [r3, #32]
    f8f8:	68ea      	ldr	r2, [r5, #12]
    f8fa:	625a      	str	r2, [r3, #36]	; 0x24
    f8fc:	692a      	ldr	r2, [r5, #16]
    f8fe:	629a      	str	r2, [r3, #40]	; 0x28
    f900:	696a      	ldr	r2, [r5, #20]
    f902:	62da      	str	r2, [r3, #44]	; 0x2c
    f904:	69aa      	ldr	r2, [r5, #24]
    f906:	631a      	str	r2, [r3, #48]	; 0x30
    f908:	69ea      	ldr	r2, [r5, #28]
    f90a:	635a      	str	r2, [r3, #52]	; 0x34
    f90c:	6a2a      	ldr	r2, [r5, #32]
    f90e:	639a      	str	r2, [r3, #56]	; 0x38
    f910:	9800      	ldr	r0, [sp, #0]
    f912:	712e      	strb	r6, [r5, #4]
    f914:	f7ff f84a 	bl	e9ac <am_hal_interrupt_master_set>
    f918:	4630      	mov	r0, r6
    f91a:	e799      	b.n	f850 <am_hal_uart_power_control+0x14>
    f91c:	01ea9e06 	.word	0x01ea9e06

0000f920 <am_hal_uart_configure>:
    f920:	6803      	ldr	r3, [r0, #0]
    f922:	4a84      	ldr	r2, [pc, #528]	; (fb34 <am_hal_uart_configure+0x214>)
    f924:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f928:	4293      	cmp	r3, r2
    f92a:	d001      	beq.n	f930 <am_hal_uart_configure+0x10>
    f92c:	2002      	movs	r0, #2
    f92e:	4770      	bx	lr
    f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f934:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f936:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f93a:	351c      	adds	r5, #28
    f93c:	032d      	lsls	r5, r5, #12
    f93e:	2700      	movs	r7, #0
    f940:	b084      	sub	sp, #16
    f942:	632f      	str	r7, [r5, #48]	; 0x30
    f944:	460e      	mov	r6, r1
    f946:	4604      	mov	r4, r0
    f948:	f7ff f82c 	bl	e9a4 <am_hal_interrupt_master_disable>
    f94c:	9001      	str	r0, [sp, #4]
    f94e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f950:	f043 0308 	orr.w	r3, r3, #8
    f954:	862b      	strh	r3, [r5, #48]	; 0x30
    f956:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f958:	2201      	movs	r2, #1
    f95a:	f362 1306 	bfi	r3, r2, #4, #3
    f95e:	862b      	strh	r3, [r5, #48]	; 0x30
    f960:	9801      	ldr	r0, [sp, #4]
    f962:	f7ff f823 	bl	e9ac <am_hal_interrupt_master_set>
    f966:	f7ff f81d 	bl	e9a4 <am_hal_interrupt_master_disable>
    f96a:	9002      	str	r0, [sp, #8]
    f96c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f96e:	f367 0300 	bfi	r3, r7, #0, #1
    f972:	862b      	strh	r3, [r5, #48]	; 0x30
    f974:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f976:	f367 2349 	bfi	r3, r7, #9, #1
    f97a:	862b      	strh	r3, [r5, #48]	; 0x30
    f97c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f97e:	f367 2308 	bfi	r3, r7, #8, #1
    f982:	862b      	strh	r3, [r5, #48]	; 0x30
    f984:	9802      	ldr	r0, [sp, #8]
    f986:	f7ff f811 	bl	e9ac <am_hal_interrupt_master_set>
    f98a:	4a6b      	ldr	r2, [pc, #428]	; (fb38 <am_hal_uart_configure+0x218>)
    f98c:	6833      	ldr	r3, [r6, #0]
    f98e:	68d2      	ldr	r2, [r2, #12]
    f990:	b2d2      	uxtb	r2, r2
    f992:	2a12      	cmp	r2, #18
    f994:	d00b      	beq.n	f9ae <am_hal_uart_configure+0x8e>
    f996:	4a68      	ldr	r2, [pc, #416]	; (fb38 <am_hal_uart_configure+0x218>)
    f998:	68d2      	ldr	r2, [r2, #12]
    f99a:	b2d2      	uxtb	r2, r2
    f99c:	2a20      	cmp	r2, #32
    f99e:	d90a      	bls.n	f9b6 <am_hal_uart_configure+0x96>
    f9a0:	4a66      	ldr	r2, [pc, #408]	; (fb3c <am_hal_uart_configure+0x21c>)
    f9a2:	4293      	cmp	r3, r2
    f9a4:	d907      	bls.n	f9b6 <am_hal_uart_configure+0x96>
    f9a6:	4866      	ldr	r0, [pc, #408]	; (fb40 <am_hal_uart_configure+0x220>)
    f9a8:	b004      	add	sp, #16
    f9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9ae:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f9b2:	d8f8      	bhi.n	f9a6 <am_hal_uart_configure+0x86>
    f9b4:	e7ef      	b.n	f996 <am_hal_uart_configure+0x76>
    f9b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f9b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f9bc:	3a01      	subs	r2, #1
    f9be:	2a03      	cmp	r2, #3
    f9c0:	d852      	bhi.n	fa68 <am_hal_uart_configure+0x148>
    f9c2:	e8df f002 	tbb	[pc, r2]
    f9c6:	020f      	.short	0x020f
    f9c8:	1215      	.short	0x1215
    f9ca:	4a5e      	ldr	r2, [pc, #376]	; (fb44 <am_hal_uart_configure+0x224>)
    f9cc:	495e      	ldr	r1, [pc, #376]	; (fb48 <am_hal_uart_configure+0x228>)
    f9ce:	011b      	lsls	r3, r3, #4
    f9d0:	fbb2 f2f3 	udiv	r2, r2, r3
    f9d4:	fbb1 f3f3 	udiv	r3, r1, r3
    f9d8:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f9dc:	b95b      	cbnz	r3, f9f6 <am_hal_uart_configure+0xd6>
    f9de:	6623      	str	r3, [r4, #96]	; 0x60
    f9e0:	4857      	ldr	r0, [pc, #348]	; (fb40 <am_hal_uart_configure+0x220>)
    f9e2:	e7e1      	b.n	f9a8 <am_hal_uart_configure+0x88>
    f9e4:	4a59      	ldr	r2, [pc, #356]	; (fb4c <am_hal_uart_configure+0x22c>)
    f9e6:	495a      	ldr	r1, [pc, #360]	; (fb50 <am_hal_uart_configure+0x230>)
    f9e8:	e7f1      	b.n	f9ce <am_hal_uart_configure+0xae>
    f9ea:	4a5a      	ldr	r2, [pc, #360]	; (fb54 <am_hal_uart_configure+0x234>)
    f9ec:	495a      	ldr	r1, [pc, #360]	; (fb58 <am_hal_uart_configure+0x238>)
    f9ee:	e7ee      	b.n	f9ce <am_hal_uart_configure+0xae>
    f9f0:	4a5a      	ldr	r2, [pc, #360]	; (fb5c <am_hal_uart_configure+0x23c>)
    f9f2:	495b      	ldr	r1, [pc, #364]	; (fb60 <am_hal_uart_configure+0x240>)
    f9f4:	e7eb      	b.n	f9ce <am_hal_uart_configure+0xae>
    f9f6:	0890      	lsrs	r0, r2, #2
    f9f8:	626b      	str	r3, [r5, #36]	; 0x24
    f9fa:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    f9fe:	626b      	str	r3, [r5, #36]	; 0x24
    fa00:	fbb1 f1f0 	udiv	r1, r1, r0
    fa04:	62aa      	str	r2, [r5, #40]	; 0x28
    fa06:	6621      	str	r1, [r4, #96]	; 0x60
    fa08:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa0a:	f36f 338e 	bfc	r3, #14, #1
    fa0e:	862b      	strh	r3, [r5, #48]	; 0x30
    fa10:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa12:	f36f 33cf 	bfc	r3, #15, #1
    fa16:	862b      	strh	r3, [r5, #48]	; 0x30
    fa18:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    fa1a:	6933      	ldr	r3, [r6, #16]
    fa1c:	4313      	orrs	r3, r2
    fa1e:	632b      	str	r3, [r5, #48]	; 0x30
    fa20:	6973      	ldr	r3, [r6, #20]
    fa22:	636b      	str	r3, [r5, #52]	; 0x34
    fa24:	6871      	ldr	r1, [r6, #4]
    fa26:	68b3      	ldr	r3, [r6, #8]
    fa28:	68f2      	ldr	r2, [r6, #12]
    fa2a:	430b      	orrs	r3, r1
    fa2c:	f043 0310 	orr.w	r3, r3, #16
    fa30:	4313      	orrs	r3, r2
    fa32:	62eb      	str	r3, [r5, #44]	; 0x2c
    fa34:	f7fe ffb6 	bl	e9a4 <am_hal_interrupt_master_disable>
    fa38:	9003      	str	r0, [sp, #12]
    fa3a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa3c:	f043 0301 	orr.w	r3, r3, #1
    fa40:	862b      	strh	r3, [r5, #48]	; 0x30
    fa42:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fa48:	862b      	strh	r3, [r5, #48]	; 0x30
    fa4a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fa50:	862b      	strh	r3, [r5, #48]	; 0x30
    fa52:	9803      	ldr	r0, [sp, #12]
    fa54:	f7fe ffaa 	bl	e9ac <am_hal_interrupt_master_set>
    fa58:	6825      	ldr	r5, [r4, #0]
    fa5a:	4b36      	ldr	r3, [pc, #216]	; (fb34 <am_hal_uart_configure+0x214>)
    fa5c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    fa60:	429d      	cmp	r5, r3
    fa62:	d005      	beq.n	fa70 <am_hal_uart_configure+0x150>
    fa64:	2000      	movs	r0, #0
    fa66:	e79f      	b.n	f9a8 <am_hal_uart_configure+0x88>
    fa68:	2300      	movs	r3, #0
    fa6a:	6623      	str	r3, [r4, #96]	; 0x60
    fa6c:	483d      	ldr	r0, [pc, #244]	; (fb64 <am_hal_uart_configure+0x244>)
    fa6e:	e79b      	b.n	f9a8 <am_hal_uart_configure+0x88>
    fa70:	69b1      	ldr	r1, [r6, #24]
    fa72:	6a37      	ldr	r7, [r6, #32]
    fa74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    fa78:	b109      	cbz	r1, fa7e <am_hal_uart_configure+0x15e>
    fa7a:	69f3      	ldr	r3, [r6, #28]
    fa7c:	bb3b      	cbnz	r3, face <am_hal_uart_configure+0x1ae>
    fa7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa80:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fa84:	f103 021c 	add.w	r2, r3, #28
    fa88:	0312      	lsls	r2, r2, #12
    fa8a:	2100      	movs	r1, #0
    fa8c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fa90:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fa92:	f021 0120 	bic.w	r1, r1, #32
    fa96:	6391      	str	r1, [r2, #56]	; 0x38
    fa98:	b1b7      	cbz	r7, fac8 <am_hal_uart_configure+0x1a8>
    fa9a:	f1b8 0f00 	cmp.w	r8, #0
    fa9e:	d12e      	bne.n	fafe <am_hal_uart_configure+0x1de>
    faa0:	6823      	ldr	r3, [r4, #0]
    faa2:	4a24      	ldr	r2, [pc, #144]	; (fb34 <am_hal_uart_configure+0x214>)
    faa4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    faa8:	2100      	movs	r1, #0
    faaa:	4293      	cmp	r3, r2
    faac:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fab0:	d1d8      	bne.n	fa64 <am_hal_uart_configure+0x144>
    fab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fab4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fab8:	331c      	adds	r3, #28
    faba:	031b      	lsls	r3, r3, #12
    fabc:	2000      	movs	r0, #0
    fabe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fac0:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fac4:	639a      	str	r2, [r3, #56]	; 0x38
    fac6:	e76f      	b.n	f9a8 <am_hal_uart_configure+0x88>
    fac8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    facc:	e7f4      	b.n	fab8 <am_hal_uart_configure+0x198>
    face:	2201      	movs	r2, #1
    fad0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    fad4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fad8:	f000 fb2c 	bl	10134 <am_hal_queue_init>
    fadc:	6823      	ldr	r3, [r4, #0]
    fade:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fae2:	42ab      	cmp	r3, r5
    fae4:	d1be      	bne.n	fa64 <am_hal_uart_configure+0x144>
    fae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fae8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    faec:	331c      	adds	r3, #28
    faee:	031b      	lsls	r3, r3, #12
    faf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    faf2:	f042 0220 	orr.w	r2, r2, #32
    faf6:	639a      	str	r2, [r3, #56]	; 0x38
    faf8:	2f00      	cmp	r7, #0
    fafa:	d1ce      	bne.n	fa9a <am_hal_uart_configure+0x17a>
    fafc:	e7d0      	b.n	faa0 <am_hal_uart_configure+0x180>
    fafe:	2201      	movs	r2, #1
    fb00:	4643      	mov	r3, r8
    fb02:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    fb06:	4639      	mov	r1, r7
    fb08:	f104 0048 	add.w	r0, r4, #72	; 0x48
    fb0c:	f000 fb12 	bl	10134 <am_hal_queue_init>
    fb10:	6823      	ldr	r3, [r4, #0]
    fb12:	4a08      	ldr	r2, [pc, #32]	; (fb34 <am_hal_uart_configure+0x214>)
    fb14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb18:	4293      	cmp	r3, r2
    fb1a:	d1a3      	bne.n	fa64 <am_hal_uart_configure+0x144>
    fb1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb1e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fb22:	331c      	adds	r3, #28
    fb24:	031b      	lsls	r3, r3, #12
    fb26:	2000      	movs	r0, #0
    fb28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fb2a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fb2e:	639a      	str	r2, [r3, #56]	; 0x38
    fb30:	e73a      	b.n	f9a8 <am_hal_uart_configure+0x88>
    fb32:	bf00      	nop
    fb34:	01ea9e06 	.word	0x01ea9e06
    fb38:	40020000 	.word	0x40020000
    fb3c:	0016e360 	.word	0x0016e360
    fb40:	08000003 	.word	0x08000003
    fb44:	2dc6c000 	.word	0x2dc6c000
    fb48:	00b71b00 	.word	0x00b71b00
    fb4c:	5b8d8000 	.word	0x5b8d8000
    fb50:	016e3600 	.word	0x016e3600
    fb54:	0b71b000 	.word	0x0b71b000
    fb58:	002dc6c0 	.word	0x002dc6c0
    fb5c:	16e36000 	.word	0x16e36000
    fb60:	005b8d80 	.word	0x005b8d80
    fb64:	08000002 	.word	0x08000002

0000fb68 <am_hal_uart_transfer>:
    fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb6c:	680f      	ldr	r7, [r1, #0]
    fb6e:	b091      	sub	sp, #68	; 0x44
    fb70:	4605      	mov	r5, r0
    fb72:	b13f      	cbz	r7, fb84 <am_hal_uart_transfer+0x1c>
    fb74:	2f01      	cmp	r7, #1
    fb76:	bf18      	it	ne
    fb78:	2707      	movne	r7, #7
    fb7a:	d024      	beq.n	fbc6 <am_hal_uart_transfer+0x5e>
    fb7c:	4638      	mov	r0, r7
    fb7e:	b011      	add	sp, #68	; 0x44
    fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb84:	f8d1 900c 	ldr.w	r9, [r1, #12]
    fb88:	690b      	ldr	r3, [r1, #16]
    fb8a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    fb8e:	688e      	ldr	r6, [r1, #8]
    fb90:	9300      	str	r3, [sp, #0]
    fb92:	f1b9 0f00 	cmp.w	r9, #0
    fb96:	d031      	beq.n	fbfc <am_hal_uart_transfer+0x94>
    fb98:	2e00      	cmp	r6, #0
    fb9a:	f000 819c 	beq.w	fed6 <am_hal_uart_transfer+0x36e>
    fb9e:	2800      	cmp	r0, #0
    fba0:	f000 8097 	beq.w	fcd2 <am_hal_uart_transfer+0x16a>
    fba4:	6803      	ldr	r3, [r0, #0]
    fba6:	4aa9      	ldr	r2, [pc, #676]	; (fe4c <am_hal_uart_transfer+0x2e4>)
    fba8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fbac:	4293      	cmp	r3, r2
    fbae:	f000 8092 	beq.w	fcd6 <am_hal_uart_transfer+0x16e>
    fbb2:	46b8      	mov	r8, r7
    fbb4:	9b00      	ldr	r3, [sp, #0]
    fbb6:	b10b      	cbz	r3, fbbc <am_hal_uart_transfer+0x54>
    fbb8:	f8c3 8000 	str.w	r8, [r3]
    fbbc:	2702      	movs	r7, #2
    fbbe:	4638      	mov	r0, r7
    fbc0:	b011      	add	sp, #68	; 0x44
    fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbc6:	1d0b      	adds	r3, r1, #4
    fbc8:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    fbcc:	f1b9 0f00 	cmp.w	r9, #0
    fbd0:	d043      	beq.n	fc5a <am_hal_uart_transfer+0xf2>
    fbd2:	2f00      	cmp	r7, #0
    fbd4:	f000 8185 	beq.w	fee2 <am_hal_uart_transfer+0x37a>
    fbd8:	2800      	cmp	r0, #0
    fbda:	f000 80eb 	beq.w	fdb4 <am_hal_uart_transfer+0x24c>
    fbde:	6802      	ldr	r2, [r0, #0]
    fbe0:	499a      	ldr	r1, [pc, #616]	; (fe4c <am_hal_uart_transfer+0x2e4>)
    fbe2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fbe6:	428a      	cmp	r2, r1
    fbe8:	f000 80e7 	beq.w	fdba <am_hal_uart_transfer+0x252>
    fbec:	2600      	movs	r6, #0
    fbee:	2702      	movs	r7, #2
    fbf0:	f1bb 0f00 	cmp.w	fp, #0
    fbf4:	d0c2      	beq.n	fb7c <am_hal_uart_transfer+0x14>
    fbf6:	f8cb 6000 	str.w	r6, [fp]
    fbfa:	e7bf      	b.n	fb7c <am_hal_uart_transfer+0x14>
    fbfc:	2800      	cmp	r0, #0
    fbfe:	d0dd      	beq.n	fbbc <am_hal_uart_transfer+0x54>
    fc00:	6803      	ldr	r3, [r0, #0]
    fc02:	4a92      	ldr	r2, [pc, #584]	; (fe4c <am_hal_uart_transfer+0x2e4>)
    fc04:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fc08:	4293      	cmp	r3, r2
    fc0a:	d1d7      	bne.n	fbbc <am_hal_uart_transfer+0x54>
    fc0c:	9b00      	ldr	r3, [sp, #0]
    fc0e:	b10b      	cbz	r3, fc14 <am_hal_uart_transfer+0xac>
    fc10:	f8c3 9000 	str.w	r9, [r3]
    fc14:	b1fe      	cbz	r6, fc56 <am_hal_uart_transfer+0xee>
    fc16:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	f040 8165 	bne.w	feea <am_hal_uart_transfer+0x382>
    fc20:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fc22:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fc26:	311c      	adds	r1, #28
    fc28:	0309      	lsls	r1, r1, #12
    fc2a:	698a      	ldr	r2, [r1, #24]
    fc2c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    fc30:	2a00      	cmp	r2, #0
    fc32:	f040 818d 	bne.w	ff50 <am_hal_uart_transfer+0x3e8>
    fc36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fc3a:	e003      	b.n	fc44 <am_hal_uart_transfer+0xdc>
    fc3c:	6988      	ldr	r0, [r1, #24]
    fc3e:	0680      	lsls	r0, r0, #26
    fc40:	f100 8151 	bmi.w	fee6 <am_hal_uart_transfer+0x37e>
    fc44:	3201      	adds	r2, #1
    fc46:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fc4a:	6008      	str	r0, [r1, #0]
    fc4c:	4296      	cmp	r6, r2
    fc4e:	d1f5      	bne.n	fc3c <am_hal_uart_transfer+0xd4>
    fc50:	9b00      	ldr	r3, [sp, #0]
    fc52:	b103      	cbz	r3, fc56 <am_hal_uart_transfer+0xee>
    fc54:	601e      	str	r6, [r3, #0]
    fc56:	2700      	movs	r7, #0
    fc58:	e790      	b.n	fb7c <am_hal_uart_transfer+0x14>
    fc5a:	2800      	cmp	r0, #0
    fc5c:	d0ae      	beq.n	fbbc <am_hal_uart_transfer+0x54>
    fc5e:	6802      	ldr	r2, [r0, #0]
    fc60:	497a      	ldr	r1, [pc, #488]	; (fe4c <am_hal_uart_transfer+0x2e4>)
    fc62:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fc66:	428a      	cmp	r2, r1
    fc68:	d1a8      	bne.n	fbbc <am_hal_uart_transfer+0x54>
    fc6a:	f1bb 0f00 	cmp.w	fp, #0
    fc6e:	d001      	beq.n	fc74 <am_hal_uart_transfer+0x10c>
    fc70:	f8cb 9000 	str.w	r9, [fp]
    fc74:	2f00      	cmp	r7, #0
    fc76:	d0ee      	beq.n	fc56 <am_hal_uart_transfer+0xee>
    fc78:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fc7c:	2c00      	cmp	r4, #0
    fc7e:	f040 816c 	bne.w	ff5a <am_hal_uart_transfer+0x3f2>
    fc82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fc84:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fc88:	321c      	adds	r2, #28
    fc8a:	0312      	lsls	r2, r2, #12
    fc8c:	6990      	ldr	r0, [r2, #24]
    fc8e:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fc92:	2800      	cmp	r0, #0
    fc94:	f040 819d 	bne.w	ffd2 <am_hal_uart_transfer+0x46a>
    fc98:	6811      	ldr	r1, [r2, #0]
    fc9a:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fc9e:	bf08      	it	eq
    fca0:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    fca4:	d008      	beq.n	fcb8 <am_hal_uart_transfer+0x150>
    fca6:	e190      	b.n	ffca <am_hal_uart_transfer+0x462>
    fca8:	6991      	ldr	r1, [r2, #24]
    fcaa:	06c8      	lsls	r0, r1, #27
    fcac:	d409      	bmi.n	fcc2 <am_hal_uart_transfer+0x15a>
    fcae:	6811      	ldr	r1, [r2, #0]
    fcb0:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fcb4:	f040 814e 	bne.w	ff54 <am_hal_uart_transfer+0x3ec>
    fcb8:	3401      	adds	r4, #1
    fcba:	42a7      	cmp	r7, r4
    fcbc:	f803 1f01 	strb.w	r1, [r3, #1]!
    fcc0:	d1f2      	bne.n	fca8 <am_hal_uart_transfer+0x140>
    fcc2:	2700      	movs	r7, #0
    fcc4:	f1bb 0f00 	cmp.w	fp, #0
    fcc8:	f43f af58 	beq.w	fb7c <am_hal_uart_transfer+0x14>
    fccc:	f8cb 4000 	str.w	r4, [fp]
    fcd0:	e754      	b.n	fb7c <am_hal_uart_transfer+0x14>
    fcd2:	4680      	mov	r8, r0
    fcd4:	e76e      	b.n	fbb4 <am_hal_uart_transfer+0x4c>
    fcd6:	9301      	str	r3, [sp, #4]
    fcd8:	4651      	mov	r1, sl
    fcda:	46bb      	mov	fp, r7
    fcdc:	46b8      	mov	r8, r7
    fcde:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fce2:	b9f2      	cbnz	r2, fd22 <am_hal_uart_transfer+0x1ba>
    fce4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fce6:	b19e      	cbz	r6, fd10 <am_hal_uart_transfer+0x1a8>
    fce8:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fcec:	321c      	adds	r2, #28
    fcee:	0312      	lsls	r2, r2, #12
    fcf0:	3901      	subs	r1, #1
    fcf2:	6994      	ldr	r4, [r2, #24]
    fcf4:	f3c4 1440 	ubfx	r4, r4, #5, #1
    fcf8:	b11c      	cbz	r4, fd02 <am_hal_uart_transfer+0x19a>
    fcfa:	e047      	b.n	fd8c <am_hal_uart_transfer+0x224>
    fcfc:	6993      	ldr	r3, [r2, #24]
    fcfe:	069b      	lsls	r3, r3, #26
    fd00:	d441      	bmi.n	fd86 <am_hal_uart_transfer+0x21e>
    fd02:	3401      	adds	r4, #1
    fd04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fd08:	6013      	str	r3, [r2, #0]
    fd0a:	42b4      	cmp	r4, r6
    fd0c:	d1f6      	bne.n	fcfc <am_hal_uart_transfer+0x194>
    fd0e:	44a0      	add	r8, r4
    fd10:	9b00      	ldr	r3, [sp, #0]
    fd12:	2b00      	cmp	r3, #0
    fd14:	d09f      	beq.n	fc56 <am_hal_uart_transfer+0xee>
    fd16:	4638      	mov	r0, r7
    fd18:	f8c3 8000 	str.w	r8, [r3]
    fd1c:	b011      	add	sp, #68	; 0x44
    fd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd22:	6baa      	ldr	r2, [r5, #56]	; 0x38
    fd24:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    fd26:	1b14      	subs	r4, r2, r4
    fd28:	42b4      	cmp	r4, r6
    fd2a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fd2e:	bf28      	it	cs
    fd30:	4634      	movcs	r4, r6
    fd32:	4622      	mov	r2, r4
    fd34:	4618      	mov	r0, r3
    fd36:	9302      	str	r3, [sp, #8]
    fd38:	f000 fa08 	bl	1014c <am_hal_queue_item_add>
    fd3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd3e:	9303      	str	r3, [sp, #12]
    fd40:	f7fe fe30 	bl	e9a4 <am_hal_interrupt_master_disable>
    fd44:	9b03      	ldr	r3, [sp, #12]
    fd46:	9008      	str	r0, [sp, #32]
    fd48:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd4c:	331c      	adds	r3, #28
    fd4e:	031b      	lsls	r3, r3, #12
    fd50:	9303      	str	r3, [sp, #12]
    fd52:	e00d      	b.n	fd70 <am_hal_uart_transfer+0x208>
    fd54:	f000 fa32 	bl	101bc <am_hal_queue_item_get>
    fd58:	b190      	cbz	r0, fd80 <am_hal_uart_transfer+0x218>
    fd5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd5c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd60:	331c      	adds	r3, #28
    fd62:	031b      	lsls	r3, r3, #12
    fd64:	699a      	ldr	r2, [r3, #24]
    fd66:	0692      	lsls	r2, r2, #26
    fd68:	bf5c      	itt	pl
    fd6a:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    fd6e:	601a      	strpl	r2, [r3, #0]
    fd70:	9b03      	ldr	r3, [sp, #12]
    fd72:	9802      	ldr	r0, [sp, #8]
    fd74:	699b      	ldr	r3, [r3, #24]
    fd76:	069b      	lsls	r3, r3, #26
    fd78:	f04f 0201 	mov.w	r2, #1
    fd7c:	a907      	add	r1, sp, #28
    fd7e:	d5e9      	bpl.n	fd54 <am_hal_uart_transfer+0x1ec>
    fd80:	9808      	ldr	r0, [sp, #32]
    fd82:	f7fe fe13 	bl	e9ac <am_hal_interrupt_master_set>
    fd86:	1b36      	subs	r6, r6, r4
    fd88:	44a0      	add	r8, r4
    fd8a:	d0c1      	beq.n	fd10 <am_hal_uart_transfer+0x1a8>
    fd8c:	2010      	movs	r0, #16
    fd8e:	f7fe fbff 	bl	e590 <am_hal_flash_delay>
    fd92:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fd96:	d001      	beq.n	fd9c <am_hal_uart_transfer+0x234>
    fd98:	f10b 0b01 	add.w	fp, fp, #1
    fd9c:	45d9      	cmp	r9, fp
    fd9e:	d9b7      	bls.n	fd10 <am_hal_uart_transfer+0x1a8>
    fda0:	682a      	ldr	r2, [r5, #0]
    fda2:	9b01      	ldr	r3, [sp, #4]
    fda4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fda8:	429a      	cmp	r2, r3
    fdaa:	eb0a 0108 	add.w	r1, sl, r8
    fdae:	f47f af01 	bne.w	fbb4 <am_hal_uart_transfer+0x4c>
    fdb2:	e794      	b.n	fcde <am_hal_uart_transfer+0x176>
    fdb4:	4606      	mov	r6, r0
    fdb6:	2702      	movs	r7, #2
    fdb8:	e71a      	b.n	fbf0 <am_hal_uart_transfer+0x88>
    fdba:	9200      	str	r2, [sp, #0]
    fdbc:	f100 0248 	add.w	r2, r0, #72	; 0x48
    fdc0:	f04f 0a00 	mov.w	sl, #0
    fdc4:	9202      	str	r2, [sp, #8]
    fdc6:	465a      	mov	r2, fp
    fdc8:	4698      	mov	r8, r3
    fdca:	469b      	mov	fp, r3
    fdcc:	4656      	mov	r6, sl
    fdce:	4613      	mov	r3, r2
    fdd0:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    fdd4:	2a00      	cmp	r2, #0
    fdd6:	d152      	bne.n	fe7e <am_hal_uart_transfer+0x316>
    fdd8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fdda:	b3a7      	cbz	r7, fe46 <am_hal_uart_transfer+0x2de>
    fddc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fde0:	311c      	adds	r1, #28
    fde2:	0309      	lsls	r1, r1, #12
    fde4:	698a      	ldr	r2, [r1, #24]
    fde6:	06d0      	lsls	r0, r2, #27
    fde8:	d432      	bmi.n	fe50 <am_hal_uart_transfer+0x2e8>
    fdea:	680a      	ldr	r2, [r1, #0]
    fdec:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    fdf0:	f040 80aa 	bne.w	ff48 <am_hal_uart_transfer+0x3e0>
    fdf4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fdf8:	e006      	b.n	fe08 <am_hal_uart_transfer+0x2a0>
    fdfa:	698a      	ldr	r2, [r1, #24]
    fdfc:	06d2      	lsls	r2, r2, #27
    fdfe:	d41f      	bmi.n	fe40 <am_hal_uart_transfer+0x2d8>
    fe00:	680a      	ldr	r2, [r1, #0]
    fe02:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    fe06:	d161      	bne.n	fecc <am_hal_uart_transfer+0x364>
    fe08:	3401      	adds	r4, #1
    fe0a:	42bc      	cmp	r4, r7
    fe0c:	f808 2f01 	strb.w	r2, [r8, #1]!
    fe10:	d1f3      	bne.n	fdfa <am_hal_uart_transfer+0x292>
    fe12:	469b      	mov	fp, r3
    fe14:	4426      	add	r6, r4
    fe16:	f1bb 0f00 	cmp.w	fp, #0
    fe1a:	f43f af1c 	beq.w	fc56 <am_hal_uart_transfer+0xee>
    fe1e:	f8cb 6000 	str.w	r6, [fp]
    fe22:	2700      	movs	r7, #0
    fe24:	e6aa      	b.n	fb7c <am_hal_uart_transfer+0x14>
    fe26:	9807      	ldr	r0, [sp, #28]
    fe28:	f7fe fdc0 	bl	e9ac <am_hal_interrupt_master_set>
    fe2c:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fe2e:	9802      	ldr	r0, [sp, #8]
    fe30:	42bc      	cmp	r4, r7
    fe32:	bf28      	it	cs
    fe34:	463c      	movcs	r4, r7
    fe36:	4641      	mov	r1, r8
    fe38:	4622      	mov	r2, r4
    fe3a:	f000 f9bf 	bl	101bc <am_hal_queue_item_get>
    fe3e:	9b01      	ldr	r3, [sp, #4]
    fe40:	1b3f      	subs	r7, r7, r4
    fe42:	4426      	add	r6, r4
    fe44:	d104      	bne.n	fe50 <am_hal_uart_transfer+0x2e8>
    fe46:	469b      	mov	fp, r3
    fe48:	e7e5      	b.n	fe16 <am_hal_uart_transfer+0x2ae>
    fe4a:	bf00      	nop
    fe4c:	01ea9e06 	.word	0x01ea9e06
    fe50:	2010      	movs	r0, #16
    fe52:	9301      	str	r3, [sp, #4]
    fe54:	f7fe fb9c 	bl	e590 <am_hal_flash_delay>
    fe58:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fe5c:	9b01      	ldr	r3, [sp, #4]
    fe5e:	d001      	beq.n	fe64 <am_hal_uart_transfer+0x2fc>
    fe60:	f10a 0a01 	add.w	sl, sl, #1
    fe64:	45d1      	cmp	r9, sl
    fe66:	d9ee      	bls.n	fe46 <am_hal_uart_transfer+0x2de>
    fe68:	682a      	ldr	r2, [r5, #0]
    fe6a:	9900      	ldr	r1, [sp, #0]
    fe6c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe70:	428a      	cmp	r2, r1
    fe72:	eb0b 0806 	add.w	r8, fp, r6
    fe76:	d0ab      	beq.n	fdd0 <am_hal_uart_transfer+0x268>
    fe78:	469b      	mov	fp, r3
    fe7a:	2702      	movs	r7, #2
    fe7c:	e6b8      	b.n	fbf0 <am_hal_uart_transfer+0x88>
    fe7e:	9301      	str	r3, [sp, #4]
    fe80:	f7fe fd90 	bl	e9a4 <am_hal_interrupt_master_disable>
    fe84:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fe86:	9007      	str	r0, [sp, #28]
    fe88:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    fe8c:	301c      	adds	r0, #28
    fe8e:	9b01      	ldr	r3, [sp, #4]
    fe90:	0300      	lsls	r0, r0, #12
    fe92:	ac08      	add	r4, sp, #32
    fe94:	2200      	movs	r2, #0
    fe96:	6981      	ldr	r1, [r0, #24]
    fe98:	06c9      	lsls	r1, r1, #27
    fe9a:	d409      	bmi.n	feb0 <am_hal_uart_transfer+0x348>
    fe9c:	6801      	ldr	r1, [r0, #0]
    fe9e:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fea2:	f102 0201 	add.w	r2, r2, #1
    fea6:	d118      	bne.n	feda <am_hal_uart_transfer+0x372>
    fea8:	2a20      	cmp	r2, #32
    feaa:	f804 1b01 	strb.w	r1, [r4], #1
    feae:	d1f2      	bne.n	fe96 <am_hal_uart_transfer+0x32e>
    feb0:	a908      	add	r1, sp, #32
    feb2:	9802      	ldr	r0, [sp, #8]
    feb4:	9301      	str	r3, [sp, #4]
    feb6:	f000 f949 	bl	1014c <am_hal_queue_item_add>
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	2800      	cmp	r0, #0
    febe:	d1b2      	bne.n	fe26 <am_hal_uart_transfer+0x2be>
    fec0:	4f45      	ldr	r7, [pc, #276]	; (ffd8 <am_hal_uart_transfer+0x470>)
    fec2:	469b      	mov	fp, r3
    fec4:	9807      	ldr	r0, [sp, #28]
    fec6:	f7fe fd71 	bl	e9ac <am_hal_interrupt_master_set>
    feca:	e691      	b.n	fbf0 <am_hal_uart_transfer+0x88>
    fecc:	469b      	mov	fp, r3
    fece:	4426      	add	r6, r4
    fed0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fed4:	e68c      	b.n	fbf0 <am_hal_uart_transfer+0x88>
    fed6:	46b8      	mov	r8, r7
    fed8:	e71a      	b.n	fd10 <am_hal_uart_transfer+0x1a8>
    feda:	469b      	mov	fp, r3
    fedc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fee0:	e7f0      	b.n	fec4 <am_hal_uart_transfer+0x35c>
    fee2:	463e      	mov	r6, r7
    fee4:	e797      	b.n	fe16 <am_hal_uart_transfer+0x2ae>
    fee6:	4616      	mov	r6, r2
    fee8:	e6b2      	b.n	fc50 <am_hal_uart_transfer+0xe8>
    feea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    feec:	6bab      	ldr	r3, [r5, #56]	; 0x38
    feee:	1a9b      	subs	r3, r3, r2
    fef0:	429e      	cmp	r6, r3
    fef2:	bf28      	it	cs
    fef4:	461e      	movcs	r6, r3
    fef6:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    fefa:	4651      	mov	r1, sl
    fefc:	4632      	mov	r2, r6
    fefe:	4620      	mov	r0, r4
    ff00:	f000 f924 	bl	1014c <am_hal_queue_item_add>
    ff04:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ff06:	f7fe fd4d 	bl	e9a4 <am_hal_interrupt_master_disable>
    ff0a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ff0e:	371c      	adds	r7, #28
    ff10:	033f      	lsls	r7, r7, #12
    ff12:	9005      	str	r0, [sp, #20]
    ff14:	e00d      	b.n	ff32 <am_hal_uart_transfer+0x3ca>
    ff16:	f000 f951 	bl	101bc <am_hal_queue_item_get>
    ff1a:	b188      	cbz	r0, ff40 <am_hal_uart_transfer+0x3d8>
    ff1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ff1e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ff22:	331c      	adds	r3, #28
    ff24:	031b      	lsls	r3, r3, #12
    ff26:	699a      	ldr	r2, [r3, #24]
    ff28:	0692      	lsls	r2, r2, #26
    ff2a:	bf5c      	itt	pl
    ff2c:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    ff30:	601a      	strpl	r2, [r3, #0]
    ff32:	69bb      	ldr	r3, [r7, #24]
    ff34:	069b      	lsls	r3, r3, #26
    ff36:	f04f 0201 	mov.w	r2, #1
    ff3a:	a908      	add	r1, sp, #32
    ff3c:	4620      	mov	r0, r4
    ff3e:	d5ea      	bpl.n	ff16 <am_hal_uart_transfer+0x3ae>
    ff40:	9805      	ldr	r0, [sp, #20]
    ff42:	f7fe fd33 	bl	e9ac <am_hal_interrupt_master_set>
    ff46:	e683      	b.n	fc50 <am_hal_uart_transfer+0xe8>
    ff48:	469b      	mov	fp, r3
    ff4a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff4e:	e64f      	b.n	fbf0 <am_hal_uart_transfer+0x88>
    ff50:	461e      	mov	r6, r3
    ff52:	e67d      	b.n	fc50 <am_hal_uart_transfer+0xe8>
    ff54:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff58:	e6b4      	b.n	fcc4 <am_hal_uart_transfer+0x15c>
    ff5a:	9300      	str	r3, [sp, #0]
    ff5c:	f7fe fd22 	bl	e9a4 <am_hal_interrupt_master_disable>
    ff60:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ff62:	9006      	str	r0, [sp, #24]
    ff64:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ff68:	321c      	adds	r2, #28
    ff6a:	0311      	lsls	r1, r2, #12
    ff6c:	a808      	add	r0, sp, #32
    ff6e:	2200      	movs	r2, #0
    ff70:	9b00      	ldr	r3, [sp, #0]
    ff72:	e009      	b.n	ff88 <am_hal_uart_transfer+0x420>
    ff74:	680c      	ldr	r4, [r1, #0]
    ff76:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ff7a:	f102 0201 	add.w	r2, r2, #1
    ff7e:	d121      	bne.n	ffc4 <am_hal_uart_transfer+0x45c>
    ff80:	2a20      	cmp	r2, #32
    ff82:	f800 4b01 	strb.w	r4, [r0], #1
    ff86:	d002      	beq.n	ff8e <am_hal_uart_transfer+0x426>
    ff88:	698c      	ldr	r4, [r1, #24]
    ff8a:	06e4      	lsls	r4, r4, #27
    ff8c:	d5f2      	bpl.n	ff74 <am_hal_uart_transfer+0x40c>
    ff8e:	f105 0648 	add.w	r6, r5, #72	; 0x48
    ff92:	a908      	add	r1, sp, #32
    ff94:	4630      	mov	r0, r6
    ff96:	9300      	str	r3, [sp, #0]
    ff98:	f000 f8d8 	bl	1014c <am_hal_queue_item_add>
    ff9c:	b920      	cbnz	r0, ffa8 <am_hal_uart_transfer+0x440>
    ff9e:	4f0e      	ldr	r7, [pc, #56]	; (ffd8 <am_hal_uart_transfer+0x470>)
    ffa0:	9806      	ldr	r0, [sp, #24]
    ffa2:	f7fe fd03 	bl	e9ac <am_hal_interrupt_master_set>
    ffa6:	e5e9      	b.n	fb7c <am_hal_uart_transfer+0x14>
    ffa8:	9806      	ldr	r0, [sp, #24]
    ffaa:	f7fe fcff 	bl	e9ac <am_hal_interrupt_master_set>
    ffae:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ffb0:	9b00      	ldr	r3, [sp, #0]
    ffb2:	42bc      	cmp	r4, r7
    ffb4:	bf28      	it	cs
    ffb6:	463c      	movcs	r4, r7
    ffb8:	4619      	mov	r1, r3
    ffba:	4630      	mov	r0, r6
    ffbc:	4622      	mov	r2, r4
    ffbe:	f000 f8fd 	bl	101bc <am_hal_queue_item_get>
    ffc2:	e67e      	b.n	fcc2 <am_hal_uart_transfer+0x15a>
    ffc4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ffc8:	e7ea      	b.n	ffa0 <am_hal_uart_transfer+0x438>
    ffca:	4604      	mov	r4, r0
    ffcc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ffd0:	e678      	b.n	fcc4 <am_hal_uart_transfer+0x15c>
    ffd2:	4627      	mov	r7, r4
    ffd4:	e676      	b.n	fcc4 <am_hal_uart_transfer+0x15c>
    ffd6:	bf00      	nop
    ffd8:	08000001 	.word	0x08000001

0000ffdc <am_hal_uart_tx_flush>:
    ffdc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ffe0:	b570      	push	{r4, r5, r6, lr}
    ffe2:	4604      	mov	r4, r0
    ffe4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ffe6:	b15b      	cbz	r3, 10000 <am_hal_uart_tx_flush+0x24>
    ffe8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ffea:	b14b      	cbz	r3, 10000 <am_hal_uart_tx_flush+0x24>
    ffec:	4e0e      	ldr	r6, [pc, #56]	; (10028 <am_hal_uart_tx_flush+0x4c>)
    ffee:	6e20      	ldr	r0, [r4, #96]	; 0x60
    fff0:	fbb6 f0f0 	udiv	r0, r6, r0
    fff4:	0100      	lsls	r0, r0, #4
    fff6:	f7fe facb 	bl	e590 <am_hal_flash_delay>
    fffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    fffc:	2b00      	cmp	r3, #0
    fffe:	d1f6      	bne.n	ffee <am_hal_uart_tx_flush+0x12>
   10000:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   10004:	351c      	adds	r5, #28
   10006:	032d      	lsls	r5, r5, #12
   10008:	69ab      	ldr	r3, [r5, #24]
   1000a:	071a      	lsls	r2, r3, #28
   1000c:	d509      	bpl.n	10022 <am_hal_uart_tx_flush+0x46>
   1000e:	4e06      	ldr	r6, [pc, #24]	; (10028 <am_hal_uart_tx_flush+0x4c>)
   10010:	6e20      	ldr	r0, [r4, #96]	; 0x60
   10012:	fbb6 f0f0 	udiv	r0, r6, r0
   10016:	0100      	lsls	r0, r0, #4
   10018:	f7fe faba 	bl	e590 <am_hal_flash_delay>
   1001c:	69ab      	ldr	r3, [r5, #24]
   1001e:	071b      	lsls	r3, r3, #28
   10020:	d4f6      	bmi.n	10010 <am_hal_uart_tx_flush+0x34>
   10022:	2000      	movs	r0, #0
   10024:	bd70      	pop	{r4, r5, r6, pc}
   10026:	bf00      	nop
   10028:	00b71b00 	.word	0x00b71b00

0001002c <am_hal_cmdq_init>:
   1002c:	2807      	cmp	r0, #7
   1002e:	d901      	bls.n	10034 <am_hal_cmdq_init+0x8>
   10030:	2005      	movs	r0, #5
   10032:	4770      	bx	lr
   10034:	b1c9      	cbz	r1, 1006a <am_hal_cmdq_init+0x3e>
   10036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1003a:	684c      	ldr	r4, [r1, #4]
   1003c:	b194      	cbz	r4, 10064 <am_hal_cmdq_init+0x38>
   1003e:	b18a      	cbz	r2, 10064 <am_hal_cmdq_init+0x38>
   10040:	680e      	ldr	r6, [r1, #0]
   10042:	2e01      	cmp	r6, #1
   10044:	d90e      	bls.n	10064 <am_hal_cmdq_init+0x38>
   10046:	272c      	movs	r7, #44	; 0x2c
   10048:	f8df c09c 	ldr.w	ip, [pc, #156]	; 100e8 <am_hal_cmdq_init+0xbc>
   1004c:	fb07 f700 	mul.w	r7, r7, r0
   10050:	eb0c 0507 	add.w	r5, ip, r7
   10054:	f895 e003 	ldrb.w	lr, [r5, #3]
   10058:	f01e 0301 	ands.w	r3, lr, #1
   1005c:	d007      	beq.n	1006e <am_hal_cmdq_init+0x42>
   1005e:	2007      	movs	r0, #7
   10060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10064:	2006      	movs	r0, #6
   10066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1006a:	2006      	movs	r0, #6
   1006c:	4770      	bx	lr
   1006e:	f04e 0e01 	orr.w	lr, lr, #1
   10072:	00f6      	lsls	r6, r6, #3
   10074:	f363 0e41 	bfi	lr, r3, #1, #1
   10078:	f885 e003 	strb.w	lr, [r5, #3]
   1007c:	eb06 0804 	add.w	r8, r6, r4
   10080:	f8df e068 	ldr.w	lr, [pc, #104]	; 100ec <am_hal_cmdq_init+0xc0>
   10084:	f8c5 8008 	str.w	r8, [r5, #8]
   10088:	606c      	str	r4, [r5, #4]
   1008a:	60ec      	str	r4, [r5, #12]
   1008c:	616c      	str	r4, [r5, #20]
   1008e:	612c      	str	r4, [r5, #16]
   10090:	61ae      	str	r6, [r5, #24]
   10092:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10096:	f85c 6007 	ldr.w	r6, [ip, r7]
   1009a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 100f0 <am_hal_cmdq_init+0xc4>
   1009e:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
   100a2:	f368 0617 	bfi	r6, r8, #0, #24
   100a6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   100aa:	f84c 6007 	str.w	r6, [ip, r7]
   100ae:	6268      	str	r0, [r5, #36]	; 0x24
   100b0:	61eb      	str	r3, [r5, #28]
   100b2:	622b      	str	r3, [r5, #32]
   100b4:	f8ce 3000 	str.w	r3, [lr]
   100b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
   100ba:	7a09      	ldrb	r1, [r1, #8]
   100bc:	68c0      	ldr	r0, [r0, #12]
   100be:	6003      	str	r3, [r0, #0]
   100c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
   100c2:	6906      	ldr	r6, [r0, #16]
   100c4:	6940      	ldr	r0, [r0, #20]
   100c6:	6837      	ldr	r7, [r6, #0]
   100c8:	4338      	orrs	r0, r7
   100ca:	6030      	str	r0, [r6, #0]
   100cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
   100ce:	6840      	ldr	r0, [r0, #4]
   100d0:	6004      	str	r4, [r0, #0]
   100d2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   100d4:	0049      	lsls	r1, r1, #1
   100d6:	6804      	ldr	r4, [r0, #0]
   100d8:	f001 0102 	and.w	r1, r1, #2
   100dc:	6021      	str	r1, [r4, #0]
   100de:	4618      	mov	r0, r3
   100e0:	6015      	str	r5, [r2, #0]
   100e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100e6:	bf00      	nop
   100e8:	10001194 	.word	0x10001194
   100ec:	00010834 	.word	0x00010834
   100f0:	00cdcdcd 	.word	0x00cdcdcd

000100f4 <am_hal_cmdq_enable>:
   100f4:	4603      	mov	r3, r0
   100f6:	b128      	cbz	r0, 10104 <am_hal_cmdq_enable+0x10>
   100f8:	6802      	ldr	r2, [r0, #0]
   100fa:	490d      	ldr	r1, [pc, #52]	; (10130 <am_hal_cmdq_enable+0x3c>)
   100fc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10100:	428a      	cmp	r2, r1
   10102:	d001      	beq.n	10108 <am_hal_cmdq_enable+0x14>
   10104:	2002      	movs	r0, #2
   10106:	4770      	bx	lr
   10108:	78c2      	ldrb	r2, [r0, #3]
   1010a:	f002 0202 	and.w	r2, r2, #2
   1010e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   10112:	b952      	cbnz	r2, 1012a <am_hal_cmdq_enable+0x36>
   10114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   10116:	6811      	ldr	r1, [r2, #0]
   10118:	680a      	ldr	r2, [r1, #0]
   1011a:	f042 0201 	orr.w	r2, r2, #1
   1011e:	600a      	str	r2, [r1, #0]
   10120:	78da      	ldrb	r2, [r3, #3]
   10122:	f042 0202 	orr.w	r2, r2, #2
   10126:	70da      	strb	r2, [r3, #3]
   10128:	4770      	bx	lr
   1012a:	2000      	movs	r0, #0
   1012c:	4770      	bx	lr
   1012e:	bf00      	nop
   10130:	01cdcdcd 	.word	0x01cdcdcd

00010134 <am_hal_queue_init>:
   10134:	b410      	push	{r4}
   10136:	2400      	movs	r4, #0
   10138:	6004      	str	r4, [r0, #0]
   1013a:	6044      	str	r4, [r0, #4]
   1013c:	6084      	str	r4, [r0, #8]
   1013e:	60c3      	str	r3, [r0, #12]
   10140:	6102      	str	r2, [r0, #16]
   10142:	6141      	str	r1, [r0, #20]
   10144:	f85d 4b04 	ldr.w	r4, [sp], #4
   10148:	4770      	bx	lr
   1014a:	bf00      	nop

0001014c <am_hal_queue_item_add>:
   1014c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1014e:	4604      	mov	r4, r0
   10150:	6906      	ldr	r6, [r0, #16]
   10152:	b083      	sub	sp, #12
   10154:	fb06 f602 	mul.w	r6, r6, r2
   10158:	460d      	mov	r5, r1
   1015a:	f7fe fc23 	bl	e9a4 <am_hal_interrupt_master_disable>
   1015e:	68e7      	ldr	r7, [r4, #12]
   10160:	68a2      	ldr	r2, [r4, #8]
   10162:	9001      	str	r0, [sp, #4]
   10164:	1abb      	subs	r3, r7, r2
   10166:	429e      	cmp	r6, r3
   10168:	d826      	bhi.n	101b8 <am_hal_queue_item_add+0x6c>
   1016a:	b196      	cbz	r6, 10192 <am_hal_queue_item_add+0x46>
   1016c:	6823      	ldr	r3, [r4, #0]
   1016e:	4629      	mov	r1, r5
   10170:	b1c5      	cbz	r5, 101a4 <am_hal_queue_item_add+0x58>
   10172:	19af      	adds	r7, r5, r6
   10174:	6962      	ldr	r2, [r4, #20]
   10176:	f811 0b01 	ldrb.w	r0, [r1], #1
   1017a:	54d0      	strb	r0, [r2, r3]
   1017c:	6823      	ldr	r3, [r4, #0]
   1017e:	68e5      	ldr	r5, [r4, #12]
   10180:	3301      	adds	r3, #1
   10182:	42b9      	cmp	r1, r7
   10184:	fbb3 f0f5 	udiv	r0, r3, r5
   10188:	fb05 3310 	mls	r3, r5, r0, r3
   1018c:	6023      	str	r3, [r4, #0]
   1018e:	d1f1      	bne.n	10174 <am_hal_queue_item_add+0x28>
   10190:	68a2      	ldr	r2, [r4, #8]
   10192:	4432      	add	r2, r6
   10194:	60a2      	str	r2, [r4, #8]
   10196:	2401      	movs	r4, #1
   10198:	9801      	ldr	r0, [sp, #4]
   1019a:	f7fe fc07 	bl	e9ac <am_hal_interrupt_master_set>
   1019e:	4620      	mov	r0, r4
   101a0:	b003      	add	sp, #12
   101a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101a4:	3101      	adds	r1, #1
   101a6:	3301      	adds	r3, #1
   101a8:	428e      	cmp	r6, r1
   101aa:	fbb3 f0f7 	udiv	r0, r3, r7
   101ae:	fb07 3310 	mls	r3, r7, r0, r3
   101b2:	d1f7      	bne.n	101a4 <am_hal_queue_item_add+0x58>
   101b4:	6023      	str	r3, [r4, #0]
   101b6:	e7ec      	b.n	10192 <am_hal_queue_item_add+0x46>
   101b8:	2400      	movs	r4, #0
   101ba:	e7ed      	b.n	10198 <am_hal_queue_item_add+0x4c>

000101bc <am_hal_queue_item_get>:
   101bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   101be:	4604      	mov	r4, r0
   101c0:	6906      	ldr	r6, [r0, #16]
   101c2:	b083      	sub	sp, #12
   101c4:	fb06 f602 	mul.w	r6, r6, r2
   101c8:	460d      	mov	r5, r1
   101ca:	f7fe fbeb 	bl	e9a4 <am_hal_interrupt_master_disable>
   101ce:	68a2      	ldr	r2, [r4, #8]
   101d0:	9001      	str	r0, [sp, #4]
   101d2:	4296      	cmp	r6, r2
   101d4:	d81c      	bhi.n	10210 <am_hal_queue_item_get+0x54>
   101d6:	b196      	cbz	r6, 101fe <am_hal_queue_item_get+0x42>
   101d8:	6863      	ldr	r3, [r4, #4]
   101da:	b1dd      	cbz	r5, 10214 <am_hal_queue_item_get+0x58>
   101dc:	4629      	mov	r1, r5
   101de:	19af      	adds	r7, r5, r6
   101e0:	6962      	ldr	r2, [r4, #20]
   101e2:	5cd3      	ldrb	r3, [r2, r3]
   101e4:	f801 3b01 	strb.w	r3, [r1], #1
   101e8:	6863      	ldr	r3, [r4, #4]
   101ea:	68e5      	ldr	r5, [r4, #12]
   101ec:	3301      	adds	r3, #1
   101ee:	428f      	cmp	r7, r1
   101f0:	fbb3 f0f5 	udiv	r0, r3, r5
   101f4:	fb05 3310 	mls	r3, r5, r0, r3
   101f8:	6063      	str	r3, [r4, #4]
   101fa:	d1f1      	bne.n	101e0 <am_hal_queue_item_get+0x24>
   101fc:	68a2      	ldr	r2, [r4, #8]
   101fe:	1b92      	subs	r2, r2, r6
   10200:	60a2      	str	r2, [r4, #8]
   10202:	2401      	movs	r4, #1
   10204:	9801      	ldr	r0, [sp, #4]
   10206:	f7fe fbd1 	bl	e9ac <am_hal_interrupt_master_set>
   1020a:	4620      	mov	r0, r4
   1020c:	b003      	add	sp, #12
   1020e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10210:	2400      	movs	r4, #0
   10212:	e7f7      	b.n	10204 <am_hal_queue_item_get+0x48>
   10214:	68e0      	ldr	r0, [r4, #12]
   10216:	4629      	mov	r1, r5
   10218:	3101      	adds	r1, #1
   1021a:	3301      	adds	r3, #1
   1021c:	428e      	cmp	r6, r1
   1021e:	fbb3 f5f0 	udiv	r5, r3, r0
   10222:	fb00 3315 	mls	r3, r0, r5, r3
   10226:	d1f7      	bne.n	10218 <am_hal_queue_item_get+0x5c>
   10228:	6063      	str	r3, [r4, #4]
   1022a:	e7e8      	b.n	101fe <am_hal_queue_item_get+0x42>
   1022c:	72617053 	.word	0x72617053
   10230:	6e75466b 	.word	0x6e75466b
   10234:	67644520 	.word	0x67644520
   10238:	6f422065 	.word	0x6f422065
   1023c:	20647261 	.word	0x20647261
   10240:	74736554 	.word	0x74736554
   10244:	00000a0a 	.word	0x00000a0a
   10248:	74696e49 	.word	0x74696e49
   1024c:	696c6169 	.word	0x696c6169
   10250:	676e697a 	.word	0x676e697a
   10254:	63636120 	.word	0x63636120
   10258:	72656c65 	.word	0x72656c65
   1025c:	74656d6f 	.word	0x74656d6f
   10260:	2e2e7265 	.word	0x2e2e7265
   10264:	0a0d202e 	.word	0x0a0d202e
   10268:	00000000 	.word	0x00000000
   1026c:	65636341 	.word	0x65636341
   10270:	6f72656c 	.word	0x6f72656c
   10274:	6574656d 	.word	0x6574656d
   10278:	6e692072 	.word	0x6e692072
   1027c:	72207469 	.word	0x72207469
   10280:	72757465 	.word	0x72757465
   10284:	2064656e 	.word	0x2064656e
   10288:	0d783825 	.word	0x0d783825
   1028c:	00000a0a 	.word	0x00000a0a
   10290:	65746e49 	.word	0x65746e49
   10294:	6c617672 	.word	0x6c617672
   10298:	74656220 	.word	0x74656220
   1029c:	6e656577 	.word	0x6e656577
   102a0:	61657220 	.word	0x61657220
   102a4:	676e6964 	.word	0x676e6964
   102a8:	7e203a73 	.word	0x7e203a73
   102ac:	00006425 	.word	0x00006425
   102b0:	0a0d736d 	.word	0x0a0d736d
   102b4:	0000000a 	.word	0x0000000a
   102b8:	58636341 	.word	0x58636341
   102bc:	676d5b20 	.word	0x676d5b20
   102c0:	41202c5d 	.word	0x41202c5d
   102c4:	20596363 	.word	0x20596363
   102c8:	5d676d5b 	.word	0x5d676d5b
   102cc:	6341202c 	.word	0x6341202c
   102d0:	5b205a63 	.word	0x5b205a63
   102d4:	0d5d676d 	.word	0x0d5d676d
   102d8:	0000000a 	.word	0x0000000a
   102dc:	2e343025 	.word	0x2e343025
   102e0:	2c206632 	.word	0x2c206632
   102e4:	2e343025 	.word	0x2e343025
   102e8:	2c206632 	.word	0x2c206632
   102ec:	2e343025 	.word	0x2e343025
   102f0:	0d206632 	.word	0x0d206632
   102f4:	0000000a 	.word	0x0000000a
   102f8:	0a0a0a0a 	.word	0x0a0a0a0a
   102fc:	0a0a0a0a 	.word	0x0a0a0a0a
   10300:	0a0a0a0a 	.word	0x0a0a0a0a
   10304:	0a0a0a0a 	.word	0x0a0a0a0a
   10308:	00000a0a 	.word	0x00000a0a
   1030c:	6f727245 	.word	0x6f727245
   10310:	202d2072 	.word	0x202d2072
   10314:	65736572 	.word	0x65736572
   10318:	74617672 	.word	0x74617672
   1031c:	206e6f69 	.word	0x206e6f69
   10320:	7420666f 	.word	0x7420666f
   10324:	41206568 	.word	0x41206568
   10328:	69204344 	.word	0x69204344
   1032c:	6174736e 	.word	0x6174736e
   10330:	2065636e 	.word	0x2065636e
   10334:	6c696166 	.word	0x6c696166
   10338:	0a2e6465 	.word	0x0a2e6465
   1033c:	00000000 	.word	0x00000000
   10340:	6f727245 	.word	0x6f727245
   10344:	202d2072 	.word	0x202d2072
   10348:	20434441 	.word	0x20434441
   1034c:	65776f70 	.word	0x65776f70
   10350:	6e6f2072 	.word	0x6e6f2072
   10354:	69616620 	.word	0x69616620
   10358:	2e64656c 	.word	0x2e64656c
   1035c:	0000000a 	.word	0x0000000a
   10360:	6f727245 	.word	0x6f727245
   10364:	202d2072 	.word	0x202d2072
   10368:	666e6f63 	.word	0x666e6f63
   1036c:	72756769 	.word	0x72756769
   10370:	20676e69 	.word	0x20676e69
   10374:	20434441 	.word	0x20434441
   10378:	6c696166 	.word	0x6c696166
   1037c:	0a2e6465 	.word	0x0a2e6465
   10380:	00000000 	.word	0x00000000
   10384:	6f727245 	.word	0x6f727245
   10388:	202d2072 	.word	0x202d2072
   1038c:	666e6f63 	.word	0x666e6f63
   10390:	72756769 	.word	0x72756769
   10394:	20676e69 	.word	0x20676e69
   10398:	20434441 	.word	0x20434441
   1039c:	746f6c53 	.word	0x746f6c53
   103a0:	66203020 	.word	0x66203020
   103a4:	656c6961 	.word	0x656c6961
   103a8:	000a2e64 	.word	0x000a2e64
   103ac:	6f727245 	.word	0x6f727245
   103b0:	202d2072 	.word	0x202d2072
   103b4:	62616e65 	.word	0x62616e65
   103b8:	676e696c 	.word	0x676e696c
   103bc:	43444120 	.word	0x43444120
   103c0:	69616620 	.word	0x69616620
   103c4:	2e64656c 	.word	0x2e64656c
   103c8:	0000000a 	.word	0x0000000a
   103cc:	6f727245 	.word	0x6f727245
   103d0:	65722072 	.word	0x65722072
   103d4:	6e696461 	.word	0x6e696461
   103d8:	44412067 	.word	0x44412067
   103dc:	6e692043 	.word	0x6e692043
   103e0:	72726574 	.word	0x72726574
   103e4:	20747075 	.word	0x20747075
   103e8:	74617473 	.word	0x74617473
   103ec:	000a7375 	.word	0x000a7375
   103f0:	6f727245 	.word	0x6f727245
   103f4:	6c632072 	.word	0x6c632072
   103f8:	69726165 	.word	0x69726165
   103fc:	4120676e 	.word	0x4120676e
   10400:	69204344 	.word	0x69204344
   10404:	7265746e 	.word	0x7265746e
   10408:	74707572 	.word	0x74707572
   1040c:	61747320 	.word	0x61747320
   10410:	0a737574 	.word	0x0a737574
   10414:	00000000 	.word	0x00000000
   10418:	6f727245 	.word	0x6f727245
   1041c:	202d2072 	.word	0x202d2072
   10420:	20434441 	.word	0x20434441
   10424:	706d6173 	.word	0x706d6173
   10428:	7220656c 	.word	0x7220656c
   1042c:	20646165 	.word	0x20646165
   10430:	6d6f7266 	.word	0x6d6f7266
   10434:	46494620 	.word	0x46494620
   10438:	6166204f 	.word	0x6166204f
   1043c:	64656c69 	.word	0x64656c69
   10440:	00000a2e 	.word	0x00000a2e
   10444:	6f727245 	.word	0x6f727245
   10448:	202d2072 	.word	0x202d2072
   1044c:	61736964 	.word	0x61736964
   10450:	20656c62 	.word	0x20656c62
   10454:	20434441 	.word	0x20434441
   10458:	6c696166 	.word	0x6c696166
   1045c:	0a2e6465 	.word	0x0a2e6465
   10460:	00000000 	.word	0x00000000
   10464:	6f727245 	.word	0x6f727245
   10468:	202d2072 	.word	0x202d2072
   1046c:	61736964 	.word	0x61736964
   10470:	6e696c62 	.word	0x6e696c62
   10474:	68742067 	.word	0x68742067
   10478:	44412065 	.word	0x44412065
   1047c:	6f702043 	.word	0x6f702043
   10480:	20726577 	.word	0x20726577
   10484:	616d6f64 	.word	0x616d6f64
   10488:	66206e69 	.word	0x66206e69
   1048c:	656c6961 	.word	0x656c6961
   10490:	000a2e64 	.word	0x000a2e64
   10494:	6f727245 	.word	0x6f727245
   10498:	202d2072 	.word	0x202d2072
   1049c:	75746572 	.word	0x75746572
   104a0:	6f206e72 	.word	0x6f206e72
   104a4:	68742066 	.word	0x68742066
   104a8:	44412065 	.word	0x44412065
   104ac:	6e692043 	.word	0x6e692043
   104b0:	6e617473 	.word	0x6e617473
   104b4:	66206563 	.word	0x66206563
   104b8:	656c6961 	.word	0x656c6961
   104bc:	000a2e64 	.word	0x000a2e64

000104c0 <g_AM_PIN_11_ADCSE2>:
   104c0:	00000000 52206f4e 75622058 72656666     ....No RX buffer
   104d0:	6f727020 65646976 00000a64 646e6553      provided...Send
   104e0:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   104f0:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   10500:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   10510:	65646976 00000a64 646e6553 72726520     vided...Send err
   10520:	68702820 20657361 203a2931 000a6425      (phase 1): %d..
   10530:	616f6857 2820696d 756f6873 6220646c     Whoami (should b
   10540:	78302065 3a293333 25783020 000a7832     e 0x33): 0x%2x..

00010550 <g_sBspUartConfig>:
   10550:	000004b0 00000060 00000000 00000000     ....`...........
   10560:	00000000 00000012 00000000 00000000     ................
	...

00010578 <g_AM_BSP_GPIO_COM_UART_RX>:
   10578:	00000000                                ....

0001057c <g_AM_BSP_GPIO_COM_UART_TX>:
   1057c:	00000000                                ....

00010580 <g_AM_BSP_GPIO_IOM4_SCL>:
   10580:	00040b44                                D...

00010584 <g_AM_BSP_GPIO_IOM4_SDA>:
   10584:	00040b44                                D...

00010588 <am_hal_cachectrl_defaults>:
   10588:	00000308                                ....

0001058c <g_AM_HAL_GPIO_INPUT>:
   1058c:	00001003                                ....

00010590 <g_ui8Bit76Capabilities>:
   10590:	02800101 80010180 80800101 80808080     ................
   105a0:	80808080 80808008 01800180 80808080     ................
   105b0:	80808080 01800402 01010401 80808080     ................
   105c0:	00000101                                ....

000105c4 <g_ui8NCEtable>:
   105c4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   105d4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   105e4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   105f4:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10604:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10614:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10624:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10634:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10644:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10654:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10664:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10674:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10684:	32221202 43231303                       .."2..#C

0001068c <g_ui8Inpen>:
   1068c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   1069c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   106ac:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   106bc:	00003130                                01..

000106c0 <g_AM_HAL_GPIO_DISABLE>:
   106c0:	00000003                                ....

000106c4 <g_AM_HAL_GPIO_OUTPUT>:
   106c4:	00000403                                ....

000106c8 <g_ui8nCEpins>:
   106c8:	02070707 00080802 01020202 01010101     ................
   106d8:	01010101 01010101 01010101 01010101     ................
   106e8:	01010101 08010101 01010008 01010101     ................
   106f8:	00000101                                ....

000106fc <g_AM_HAL_GPIO_OUTPUT_12>:
   106fc:	00000703                                ....

00010700 <g_am_hal_mcuctrl_flash_size>:
   10700:	00004000 00008000 00010000 00020000     .@..............
   10710:	00040000 00080000 00100000 00200000     .............. .
   10720:	00180000 00000000 00000000 00000000     ................
	...

00010740 <g_am_hal_mcuctrl_sram_size>:
   10740:	00004000 00008000 00010000 00020000     .@..............
   10750:	00040000 00080000 00100000 00060000     ................
   10760:	000c0000 00000000 00000000 00000000     ................
	...

00010780 <am_hal_pwrctrl_peripheral_control>:
	...
   1078c:	00000001 00000004 00000004 00000002     ................
   1079c:	00000008 00000008 00000004 00000008     ................
   107ac:	00000008 00000008 00000008 00000008     ................
   107bc:	00000010 00000010 00000010 00000020     ............ ...
   107cc:	00000010 00000010 00000040 00000010     ........@.......
   107dc:	00000010 00000080 00000004 00000004     ................
   107ec:	00000100 00000004 00000004 00000200     ................
   107fc:	00000020 00000020 00000400 00000004      ... ...........
   1080c:	00000004 00000800 00000040 00000040     ........@...@...
   1081c:	00001000 00000080 00000080 00002000     ............. ..
   1082c:	00000100 00000100                       ........

00010834 <gAmHalCmdQReg>:
   10834:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   10844:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10854:	00000004 00000002 50005294 50005298     .........R.P.R.P
   10864:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   10874:	5000529c 00000001 00000004 00000002     .R.P............
   10884:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   10894:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   108a4:	00000004 00000002 50007294 50007298     .........r.P.r.P
   108b4:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   108c4:	5000729c 00000001 00000004 00000002     .r.P............
   108d4:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   108e4:	500082a8 00008000 5000829c 00000001     ...P.......P....
   108f4:	00000004 00000002 50009294 50009298     ...........P...P
   10904:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10914:	5000929c 00000001 00000004 00000002     ...P............
   10924:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   10934:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   10944:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10954:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   10964:	5000c250 00000001 00000004 00000002     P..P............
