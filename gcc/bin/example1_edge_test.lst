
bin/example1_edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 a1 d2 00 00 99 d2 00 00 e1 c6 00 00     ................
    c010:	e1 c6 00 00 e1 c6 00 00 e1 c6 00 00 00 00 00 00     ................
	...
    c02c:	9d d2 00 00 9d d2 00 00 00 00 00 00 9d d2 00 00     ................
    c03c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c04c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c05c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c06c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 09 d3 00 00     ................
    c07c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 c5 d3 00 00     ................
    c08c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c09c:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c0ac:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c0bc:	9d d2 00 00 9d d2 00 00 9d d2 00 00 9d d2 00 00     ................
    c0cc:	9d d2 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c51c:	2100      	movs	r1, #0
{
    c51e:	b088      	sub	sp, #32
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c520:	4608      	mov	r0, r1
    c522:	f001 fe75 	bl	e210 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c526:	4854      	ldr	r0, [pc, #336]	; (c678 <main+0x160>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c528:	f8df 8188 	ldr.w	r8, [pc, #392]	; c6b4 <main+0x19c>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c52c:	4f53      	ldr	r7, [pc, #332]	; (c67c <main+0x164>)
            acceleration_mg[0] =
    c52e:	4e54      	ldr	r6, [pc, #336]	; (c680 <main+0x168>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c530:	f001 fccc 	bl	decc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c534:	f001 fcf0 	bl	df18 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c538:	f001 fa04 	bl	d944 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c53c:	f001 fa6a 	bl	da14 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c540:	4b50      	ldr	r3, [pc, #320]	; (c684 <main+0x16c>)
    c542:	681c      	ldr	r4, [r3, #0]
    c544:	202e      	movs	r0, #46	; 0x2e
    c546:	4621      	mov	r1, r4
    c548:	f002 f844 	bl	e5d4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c54c:	4621      	mov	r1, r4
    c54e:	2025      	movs	r0, #37	; 0x25
    c550:	f002 f840 	bl	e5d4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c554:	4621      	mov	r1, r4
    c556:	202c      	movs	r0, #44	; 0x2c
    c558:	f002 f83c 	bl	e5d4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c55c:	4621      	mov	r1, r4
    c55e:	202f      	movs	r0, #47	; 0x2f
    c560:	f002 f838 	bl	e5d4 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c564:	4b48      	ldr	r3, [pc, #288]	; (c688 <main+0x170>)
    c566:	200e      	movs	r0, #14
    c568:	6819      	ldr	r1, [r3, #0]
    c56a:	f002 f833 	bl	e5d4 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c56e:	4b47      	ldr	r3, [pc, #284]	; (c68c <main+0x174>)
    c570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c574:	2220      	movs	r2, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c576:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c578:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c57a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c57e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c582:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c584:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c586:	f000 fe81 	bl	d28c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c58a:	4841      	ldr	r0, [pc, #260]	; (c690 <main+0x178>)
    c58c:	f000 fe64 	bl	d258 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c590:	4a40      	ldr	r2, [pc, #256]	; (c694 <main+0x17c>)
    c592:	4941      	ldr	r1, [pc, #260]	; (c698 <main+0x180>)
    c594:	4841      	ldr	r0, [pc, #260]	; (c69c <main+0x184>)
    c596:	f000 fe5f 	bl	d258 <am_util_stdio_printf>
    am_util_stdio_printf("Initializing accelerometer... \r\n");
    c59a:	4841      	ldr	r0, [pc, #260]	; (c6a0 <main+0x188>)
    c59c:	f000 fe5c 	bl	d258 <am_util_stdio_printf>
    int accInitRes = initAccelerometer();
    c5a0:	f001 f862 	bl	d668 <initAccelerometer>
    c5a4:	4601      	mov	r1, r0
    am_util_stdio_printf("Accelerometer init returned %8x\r\n\n", accInitRes);
    c5a6:	483f      	ldr	r0, [pc, #252]	; (c6a4 <main+0x18c>)
    c5a8:	f000 fe56 	bl	d258 <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
}

static int testADC(void)
{
    initADC();
    c5ac:	f000 ff70 	bl	d490 <initADC>
    enableAdcInterrupts();
    c5b0:	f000 ff8e 	bl	d4d0 <enableAdcInterrupts>
    am_util_stdio_printf("AccX [mg], AccY [mg], AccZ [mg]\r\n");
    c5b4:	483c      	ldr	r0, [pc, #240]	; (c6a8 <main+0x190>)
    c5b6:	f000 fe4f 	bl	d258 <am_util_stdio_printf>
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5ba:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c5bc:	2501      	movs	r5, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5be:	aa07      	add	r2, sp, #28
    c5c0:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c5c2:	9507      	str	r5, [sp, #28]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5c4:	f002 f942 	bl	e84c <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c5c8:	9c07      	ldr	r4, [sp, #28]
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5ca:	a906      	add	r1, sp, #24
    c5cc:	4640      	mov	r0, r8
        if( pin14Val == 0 ){ break; }
    c5ce:	2c00      	cmp	r4, #0
    c5d0:	d03d      	beq.n	c64e <main+0x136>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5d2:	f001 f96f 	bl	d8b4 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c5d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    c5da:	2b00      	cmp	r3, #0
    c5dc:	d0ed      	beq.n	c5ba <main+0xa2>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c5de:	2300      	movs	r3, #0
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5e0:	4926      	ldr	r1, [pc, #152]	; (c67c <main+0x164>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c5e2:	603b      	str	r3, [r7, #0]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5e4:	4640      	mov	r0, r8
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c5e6:	80bb      	strh	r3, [r7, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c5e8:	f001 f974 	bl	d8d4 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c5ec:	f9b7 0000 	ldrsh.w	r0, [r7]
    c5f0:	f001 f8a6 	bl	d740 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c5f4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
            acceleration_mg[0] =
    c5f8:	ed86 0a00 	vstr	s0, [r6]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c5fc:	f001 f8a0 	bl	d740 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c600:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
            acceleration_mg[1] =
    c604:	ed86 0a01 	vstr	s0, [r6, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c608:	f001 f89a 	bl	d740 <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("%04.2f ,%04.2f ,%04.2f \r\n",
    c60c:	6830      	ldr	r0, [r6, #0]
            acceleration_mg[2] =
    c60e:	ed86 0a02 	vstr	s0, [r6, #8]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c612:	ee10 4a10 	vmov	r4, s0
            am_util_stdio_printf("%04.2f ,%04.2f ,%04.2f \r\n",
    c616:	f7ff fed7 	bl	c3c8 <__aeabi_f2d>
    c61a:	4602      	mov	r2, r0
    c61c:	460b      	mov	r3, r1
    c61e:	4620      	mov	r0, r4
    c620:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c624:	f7ff fed0 	bl	c3c8 <__aeabi_f2d>
    c628:	4604      	mov	r4, r0
    c62a:	460d      	mov	r5, r1
    c62c:	6870      	ldr	r0, [r6, #4]
    c62e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    c632:	f7ff fec9 	bl	c3c8 <__aeabi_f2d>
    c636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c63a:	e9cd 0100 	strd	r0, r1, [sp]
    c63e:	481b      	ldr	r0, [pc, #108]	; (c6ac <main+0x194>)
    c640:	f000 fe0a 	bl	d258 <am_util_stdio_printf>
            am_util_delay_ms(TIME_DELAY_MILISECONDS);
    c644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    c648:	f000 f836 	bl	c6b8 <am_util_delay_ms>
    {
    c64c:	e7b5      	b.n	c5ba <main+0xa2>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c64e:	4b18      	ldr	r3, [pc, #96]	; (c6b0 <main+0x198>)
    c650:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c654:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c65a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c65e:	2020      	movs	r0, #32
    c660:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c662:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c664:	601a      	str	r2, [r3, #0]
    am_bsp_debug_printf_disable();
    c666:	f001 f99f 	bl	d9a8 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c66a:	4628      	mov	r0, r5
    c66c:	f003 f840 	bl	f6f0 <am_hal_sysctrl_sleep>
}
    c670:	4620      	mov	r0, r4
    c672:	b008      	add	sp, #32
    c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c678:	0001052c 	.word	0x0001052c
    c67c:	100012f8 	.word	0x100012f8
    c680:	10001304 	.word	0x10001304
    c684:	000106a0 	.word	0x000106a0
    c688:	00010530 	.word	0x00010530
    c68c:	40010094 	.word	0x40010094
    c690:	000101c8 	.word	0x000101c8
    c694:	000101e4 	.word	0x000101e4
    c698:	000101f0 	.word	0x000101f0
    c69c:	000101fc 	.word	0x000101fc
    c6a0:	00010214 	.word	0x00010214
    c6a4:	00010238 	.word	0x00010238
    c6a8:	0001025c 	.word	0x0001025c
    c6ac:	00010280 	.word	0x00010280
    c6b0:	4001009c 	.word	0x4001009c
    c6b4:	10001314 	.word	0x10001314

0000c6b8 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c6b8:	b510      	push	{r4, lr}
    c6ba:	b084      	sub	sp, #16
    c6bc:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c6be:	a801      	add	r0, sp, #4
    c6c0:	f001 fe32 	bl	e328 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c6c4:	9b01      	ldr	r3, [sp, #4]
    c6c6:	4805      	ldr	r0, [pc, #20]	; (c6dc <am_util_delay_ms+0x24>)
    c6c8:	fba0 2303 	umull	r2, r3, r0, r3
    c6cc:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c6ce:	fb04 f003 	mul.w	r0, r4, r3
    c6d2:	f001 ff2b 	bl	e52c <am_hal_flash_delay>
}
    c6d6:	b004      	add	sp, #16
    c6d8:	bd10      	pop	{r4, pc}
    c6da:	bf00      	nop
    c6dc:	057619f1 	.word	0x057619f1

0000c6e0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c6e0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c6e2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c6e6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c6e8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c6ec:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c6f0:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c6f4:	f000 f806 	bl	c704 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c6f8:	bd01      	pop	{r0, pc}
    c6fa:	bf00      	nop

0000c6fc <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c6fc:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c6fe:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c700:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c702:	4770      	bx	lr

0000c704 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c704:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c706:	2300      	movs	r3, #0
{
    c708:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c70a:	e9cd 3300 	strd	r3, r3, [sp]
    c70e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c712:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c716:	4a2b      	ldr	r2, [pc, #172]	; (c7c4 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c718:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c71a:	6813      	ldr	r3, [r2, #0]
    c71c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c71e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c720:	b2db      	uxtb	r3, r3
    c722:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c726:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c728:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c72c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c730:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c732:	0c1b      	lsrs	r3, r3, #16
    c734:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c738:	6913      	ldr	r3, [r2, #16]
    c73a:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c73c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    c740:	079b      	lsls	r3, r3, #30
{
    c742:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c744:	d437      	bmi.n	c7b6 <am_util_faultisr_collect_data+0xb2>
    c746:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c74a:	4621      	mov	r1, r4
    c74c:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c74e:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c750:	f7ff ffd4 	bl	c6fc <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c754:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c756:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c758:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c75a:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c75c:	f7ff ffce 	bl	c6fc <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c760:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c762:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c764:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c766:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c768:	f7ff ffc8 	bl	c6fc <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c76c:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c76e:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c770:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c772:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c774:	f7ff ffc2 	bl	c6fc <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c778:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c77a:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c77c:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c77e:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c780:	f7ff ffbc 	bl	c6fc <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c784:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c786:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c788:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c78a:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c78c:	f7ff ffb6 	bl	c6fc <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c790:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c792:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c794:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c796:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c798:	f7ff ffb0 	bl	c6fc <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c79c:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c79e:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7a0:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7a2:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7a4:	f7ff ffaa 	bl	c6fc <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7a8:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7aa:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7ac:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7ae:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7b0:	f002 fe2e 	bl	f410 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c7b4:	e7fe      	b.n	c7b4 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7b6:	4601      	mov	r1, r0
    c7b8:	2006      	movs	r0, #6
    c7ba:	f7ff ff9f 	bl	c6fc <getStackedReg>
    c7be:	4603      	mov	r3, r0
    c7c0:	e7c3      	b.n	c74a <am_util_faultisr_collect_data+0x46>
    c7c2:	bf00      	nop
    c7c4:	e000ed28 	.word	0xe000ed28

0000c7c8 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c7c8:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c7ca:	460e      	mov	r6, r1
    c7cc:	2700      	movs	r7, #0
    c7ce:	ea56 0307 	orrs.w	r3, r6, r7
    c7d2:	d045      	beq.n	c860 <divu64_10+0x98>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7d4:	0844      	lsrs	r4, r0, #1
    c7d6:	0883      	lsrs	r3, r0, #2
    c7d8:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c7dc:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
    c7e0:	18e4      	adds	r4, r4, r3
    c7e2:	ea4f 0251 	mov.w	r2, r1, lsr #1
    c7e6:	ea4f 0391 	mov.w	r3, r1, lsr #2
    c7ea:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 4);
    c7ee:	0923      	lsrs	r3, r4, #4
    c7f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c7f4:	18e4      	adds	r4, r4, r3
    c7f6:	ea4f 1312 	mov.w	r3, r2, lsr #4
    c7fa:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 8);
    c7fe:	0a23      	lsrs	r3, r4, #8
    c800:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    c804:	18e4      	adds	r4, r4, r3
    c806:	ea4f 2312 	mov.w	r3, r2, lsr #8
    c80a:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 16);
    c80e:	0c23      	lsrs	r3, r4, #16
    c810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c814:	18e4      	adds	r4, r4, r3
    c816:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c81a:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 32);
    c81e:	18a4      	adds	r4, r4, r2
    c820:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c824:	08e3      	lsrs	r3, r4, #3
    c826:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c82a:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c82c:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c82e:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c832:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c836:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c838:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c83c:	18e4      	adds	r4, r4, r3
    c83e:	eb42 0505 	adc.w	r5, r2, r5
    c842:	1924      	adds	r4, r4, r4
    c844:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c846:	1b00      	subs	r0, r0, r4
    c848:	eb61 0105 	sbc.w	r1, r1, r5
    c84c:	0900      	lsrs	r0, r0, #4
    c84e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c852:	18c0      	adds	r0, r0, r3
    c854:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c858:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c85c:	bcf0      	pop	{r4, r5, r6, r7}
    c85e:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c860:	0882      	lsrs	r2, r0, #2
    c862:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c866:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c86a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c86e:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c872:	08d2      	lsrs	r2, r2, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c874:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c876:	eb02 0382 	add.w	r3, r2, r2, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c87a:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
    c87e:	eb02 1010 	add.w	r0, r2, r0, lsr #4
    c882:	2100      	movs	r1, #0
}
    c884:	bcf0      	pop	{r4, r5, r6, r7}
    c886:	4770      	bx	lr

0000c888 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c88c:	b08b      	sub	sp, #44	; 0x2c
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c88e:	f10d 0e0c 	add.w	lr, sp, #12
{
    c892:	9201      	str	r2, [sp, #4]
        tbuf[ix++] = uMod + '0';
    c894:	f04f 0800 	mov.w	r8, #0
    c898:	e049      	b.n	c92e <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c89a:	eb16 0309 	adds.w	r3, r6, r9
    c89e:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 4);
    c8a2:	091c      	lsrs	r4, r3, #4
    c8a4:	ea44 7407 	orr.w	r4, r4, r7, lsl #28
    c8a8:	191b      	adds	r3, r3, r4
    c8aa:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    c8ae:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 8);
    c8b2:	0a1c      	lsrs	r4, r3, #8
    c8b4:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
    c8b8:	191b      	adds	r3, r3, r4
    c8ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
    c8be:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 16);
    c8c2:	0c1c      	lsrs	r4, r3, #16
    c8c4:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    c8c8:	191b      	adds	r3, r3, r4
    c8ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8ce:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 32);
    c8d2:	19db      	adds	r3, r3, r7
    c8d4:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c8d8:	08db      	lsrs	r3, r3, #3
    c8da:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c8de:	08d2      	lsrs	r2, r2, #3
        return q64 + ((r64 + 6) >> 4);
    c8e0:	1d84      	adds	r4, r0, #6
        r64 = ui64Val - q64*10;
    c8e2:	ea4f 0583 	mov.w	r5, r3, lsl #2
    c8e6:	ea4f 0682 	mov.w	r6, r2, lsl #2
    c8ea:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
        return q64 + ((r64 + 6) >> 4);
    c8ee:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c8f2:	18ed      	adds	r5, r5, r3
    c8f4:	eb42 0606 	adc.w	r6, r2, r6
    c8f8:	196d      	adds	r5, r5, r5
    c8fa:	4176      	adcs	r6, r6
        return q64 + ((r64 + 6) >> 4);
    c8fc:	1b64      	subs	r4, r4, r5
    c8fe:	eb61 0106 	sbc.w	r1, r1, r6
    c902:	0924      	lsrs	r4, r4, #4
    c904:	ea44 7401 	orr.w	r4, r4, r1, lsl #28
    c908:	18e3      	adds	r3, r4, r3
        uMod = ui64Val - (u64Tmp * 10);
    c90a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    c90e:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
        tbuf[ix++] = uMod + '0';
    c912:	f100 0030 	add.w	r0, r0, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c916:	ea4f 1111 	mov.w	r1, r1, lsr #4
        tbuf[ix++] = uMod + '0';
    c91a:	f88e 0000 	strb.w	r0, [lr]
        return q64 + ((r64 + 6) >> 4);
    c91e:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c922:	f108 0401 	add.w	r4, r8, #1
    c926:	4618      	mov	r0, r3
    c928:	46a0      	mov	r8, r4
    c92a:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c92e:	0882      	lsrs	r2, r0, #2
    c930:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c934:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c938:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c93c:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c940:	08d3      	lsrs	r3, r2, #3
        r32 = ui32Val - q32*10;
    c942:	eb03 0483 	add.w	r4, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c946:	1d82      	adds	r2, r0, #6
    c948:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
    c94c:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    c950:	2500      	movs	r5, #0
    c952:	460c      	mov	r4, r1
        uMod = ui64Val - (u64Tmp * 10);
    c954:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c958:	0846      	lsrs	r6, r0, #1
    c95a:	ea4f 0990 	mov.w	r9, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c95e:	eba0 0a4b 	sub.w	sl, r0, fp, lsl #1
    if ( ui64Val >> 32 )
    c962:	432c      	orrs	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c964:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
    c968:	ea49 7981 	orr.w	r9, r9, r1, lsl #30
    c96c:	ea4f 0751 	mov.w	r7, r1, lsr #1
    c970:	ea4f 0c91 	mov.w	ip, r1, lsr #2
        q64 += (q64 >> 32);
    c974:	462a      	mov	r2, r5
        tbuf[ix++] = uMod + '0';
    c976:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
    if ( ui64Val >> 32 )
    c97a:	d18e      	bne.n	c89a <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c97c:	f88e a000 	strb.w	sl, [lr]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c980:	4618      	mov	r0, r3
    c982:	2100      	movs	r1, #0
        tbuf[ix++] = uMod + '0';
    c984:	f108 0401 	add.w	r4, r8, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c988:	2b00      	cmp	r3, #0
    c98a:	d1cd      	bne.n	c928 <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c98c:	9a01      	ldr	r2, [sp, #4]
    c98e:	b17a      	cbz	r2, c9b0 <uint64_to_str+0x128>
    c990:	ab03      	add	r3, sp, #12
    c992:	4423      	add	r3, r4
    c994:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c996:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c99a:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c99e:	a903      	add	r1, sp, #12
    c9a0:	4299      	cmp	r1, r3
    c9a2:	d1f8      	bne.n	c996 <uint64_to_str+0x10e>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c9a4:	9b01      	ldr	r3, [sp, #4]
    c9a6:	4443      	add	r3, r8
    c9a8:	4698      	mov	r8, r3
    c9aa:	2300      	movs	r3, #0
    c9ac:	f888 3001 	strb.w	r3, [r8, #1]
    }

    return iNumDig;
}
    c9b0:	4620      	mov	r0, r4
    c9b2:	b00b      	add	sp, #44	; 0x2c
    c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c9b8 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c9b8:	4b01      	ldr	r3, [pc, #4]	; (c9c0 <am_util_stdio_printf_init+0x8>)
    c9ba:	6018      	str	r0, [r3, #0]
}
    c9bc:	4770      	bx	lr
    c9be:	bf00      	nop
    c9c0:	10001310 	.word	0x10001310

0000c9c4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c9c8:	780b      	ldrb	r3, [r1, #0]
{
    c9ca:	b089      	sub	sp, #36	; 0x24
    c9cc:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	f000 8092 	beq.w	caf8 <am_util_stdio_vsprintf+0x134>
    c9d4:	4693      	mov	fp, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c9d6:	f04f 0a00 	mov.w	sl, #0
    c9da:	e00b      	b.n	c9f4 <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c9dc:	b11d      	cbz	r5, c9e6 <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c9de:	2b0a      	cmp	r3, #10
    c9e0:	d07e      	beq.n	cae0 <am_util_stdio_vsprintf+0x11c>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c9e2:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    c9e6:	3101      	adds	r1, #1
            ++ui32CharCnt;
    c9e8:	f10a 0a01 	add.w	sl, sl, #1
    while ( *pcFmt != 0x0 )
    c9ec:	780b      	ldrb	r3, [r1, #0]
    c9ee:	2b00      	cmp	r3, #0
    c9f0:	f000 8083 	beq.w	cafa <am_util_stdio_vsprintf+0x136>
        if ( *pcFmt != '%' )
    c9f4:	2b25      	cmp	r3, #37	; 0x25
    c9f6:	d1f1      	bne.n	c9dc <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    c9f8:	784b      	ldrb	r3, [r1, #1]
    c9fa:	2b30      	cmp	r3, #48	; 0x30
    c9fc:	f000 8090 	beq.w	cb20 <am_util_stdio_vsprintf+0x15c>
        ++pcFmt;
    ca00:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    ca02:	f04f 0820 	mov.w	r8, #32
    if ( *pcStr == '-')
    ca06:	2b2d      	cmp	r3, #45	; 0x2d
    ca08:	d07e      	beq.n	cb08 <am_util_stdio_vsprintf+0x144>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    ca0e:	2000      	movs	r0, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca10:	2a09      	cmp	r2, #9
    bool bNeg = false;
    ca12:	4607      	mov	r7, r0
    ca14:	4634      	mov	r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca16:	f200 8081 	bhi.w	cb1c <am_util_stdio_vsprintf+0x158>
    ca1a:	3001      	adds	r0, #1
    ca1c:	1b00      	subs	r0, r0, r4
    ca1e:	2100      	movs	r1, #0
        ui32Val *= 10;
    ca20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    ca24:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    ca28:	eb04 0c00 	add.w	ip, r4, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ca30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ca34:	2a09      	cmp	r2, #9
        ui32Val += (*pcStr - '0');
    ca36:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca3a:	d9f1      	bls.n	ca20 <am_util_stdio_vsprintf+0x5c>
    ca3c:	f816 300c 	ldrb.w	r3, [r6, ip]
    ca40:	eb06 040c 	add.w	r4, r6, ip
    return bNeg ? -ui32Val : ui32Val;
    ca44:	b107      	cbz	r7, ca48 <am_util_stdio_vsprintf+0x84>
    ca46:	4249      	negs	r1, r1
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca48:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ca4a:	460a      	mov	r2, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca4c:	f000 8146 	beq.w	ccdc <am_util_stdio_vsprintf+0x318>
    ca50:	ea81 79e1 	eor.w	r9, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ca54:	2b2e      	cmp	r3, #46	; 0x2e
    ca56:	eba9 79e1 	sub.w	r9, r9, r1, asr #31
    ca5a:	f000 8116 	beq.w	cc8a <am_util_stdio_vsprintf+0x2c6>
        iPrecision = 6;             // printf() default precision for %f is 6
    ca5e:	2606      	movs	r6, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ca60:	2b6c      	cmp	r3, #108	; 0x6c
    ca62:	d104      	bne.n	ca6e <am_util_stdio_vsprintf+0xaa>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ca64:	7863      	ldrb	r3, [r4, #1]
    ca66:	2b6c      	cmp	r3, #108	; 0x6c
    ca68:	f000 8186 	beq.w	cd78 <am_util_stdio_vsprintf+0x3b4>
            pcFmt++;
    ca6c:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    ca6e:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    ca72:	2a32      	cmp	r2, #50	; 0x32
    ca74:	d858      	bhi.n	cb28 <am_util_stdio_vsprintf+0x164>
    ca76:	e8df f012 	tbh	[pc, r2, lsl #1]
    ca7a:	005e      	.short	0x005e
    ca7c:	00570057 	.word	0x00570057
    ca80:	00570057 	.word	0x00570057
    ca84:	00570057 	.word	0x00570057
    ca88:	00570057 	.word	0x00570057
    ca8c:	00570057 	.word	0x00570057
    ca90:	00570057 	.word	0x00570057
    ca94:	00570057 	.word	0x00570057
    ca98:	00570057 	.word	0x00570057
    ca9c:	01fe0057 	.word	0x01fe0057
    caa0:	00570057 	.word	0x00570057
    caa4:	00570057 	.word	0x00570057
    caa8:	00570057 	.word	0x00570057
    caac:	00570057 	.word	0x00570057
    cab0:	00570057 	.word	0x00570057
    cab4:	009700e9 	.word	0x009700e9
    cab8:	005e0057 	.word	0x005e0057
    cabc:	00570057 	.word	0x00570057
    cac0:	00570097 	.word	0x00570097
    cac4:	00570057 	.word	0x00570057
    cac8:	00570057 	.word	0x00570057
    cacc:	00570057 	.word	0x00570057
    cad0:	00570057 	.word	0x00570057
    cad4:	00570130 	.word	0x00570130
    cad8:	005700f5 	.word	0x005700f5
    cadc:	03330057 	.word	0x03330057
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cae0:	4aa4      	ldr	r2, [pc, #656]	; (cd74 <am_util_stdio_vsprintf+0x3b0>)
    cae2:	7812      	ldrb	r2, [r2, #0]
    cae4:	2a00      	cmp	r2, #0
    cae6:	f43f af7c 	beq.w	c9e2 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    caea:	230d      	movs	r3, #13
    caec:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    caf0:	f10a 0a01 	add.w	sl, sl, #1
    caf4:	780b      	ldrb	r3, [r1, #0]
    caf6:	e774      	b.n	c9e2 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    caf8:	469a      	mov	sl, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    cafa:	b10d      	cbz	r5, cb00 <am_util_stdio_vsprintf+0x13c>
    {
        *pcBuf = 0x0;
    cafc:	2300      	movs	r3, #0
    cafe:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    cb00:	4650      	mov	r0, sl
    cb02:	b009      	add	sp, #36	; 0x24
    cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pcStr++;
    cb08:	7873      	ldrb	r3, [r6, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        uCnt++;
    cb0e:	2001      	movs	r0, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb10:	2a09      	cmp	r2, #9
        bNeg = true;
    cb12:	4607      	mov	r7, r0
        pcStr++;
    cb14:	eb06 0400 	add.w	r4, r6, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb18:	f67f af7f 	bls.w	ca1a <am_util_stdio_vsprintf+0x56>
    cb1c:	2100      	movs	r1, #0
    cb1e:	e791      	b.n	ca44 <am_util_stdio_vsprintf+0x80>
            ui8PadChar = '0';
    cb20:	4698      	mov	r8, r3
            ++pcFmt;
    cb22:	1c8e      	adds	r6, r1, #2
    cb24:	788b      	ldrb	r3, [r1, #2]
    cb26:	e76e      	b.n	ca06 <am_util_stdio_vsprintf+0x42>
                if ( pcBuf )
    cb28:	b10d      	cbz	r5, cb2e <am_util_stdio_vsprintf+0x16a>
                    *pcBuf++ = *pcFmt;
    cb2a:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    cb2e:	f10a 0a01 	add.w	sl, sl, #1
        ++pcFmt;
    cb32:	1c61      	adds	r1, r4, #1
    cb34:	e75a      	b.n	c9ec <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
    cb36:	2d00      	cmp	r5, #0
    cb38:	d0fb      	beq.n	cb32 <am_util_stdio_vsprintf+0x16e>
                    float fValue = va_arg(pArgs, double);
    cb3a:	f10b 0b07 	add.w	fp, fp, #7
    cb3e:	f02b 0b07 	bic.w	fp, fp, #7
    cb42:	e8fb 0102 	ldrd	r0, r1, [fp], #8
    cb46:	f7ff fc97 	bl	c478 <__aeabi_d2f>
    cb4a:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    cb4e:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    cb52:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    cb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    cb58:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    cb5a:	f000 833d 	beq.w	d1d8 <am_util_stdio_vsprintf+0x814>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb5e:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    cb62:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    cb66:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    cb68:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb6a:	f3c0 0016 	ubfx	r0, r0, #0, #23
    cb6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    cb72:	f300 8353 	bgt.w	d21c <am_util_stdio_vsprintf+0x858>
    else if (iExp2 < -23)
    cb76:	f112 0f17 	cmn.w	r2, #23
    cb7a:	f2c0 834b 	blt.w	d214 <am_util_stdio_vsprintf+0x850>
    else if (iExp2 >= 23)
    cb7e:	2a16      	cmp	r2, #22
    cb80:	f340 8262 	ble.w	d048 <am_util_stdio_vsprintf+0x684>
        i32IntPart = i32Significand << (iExp2 - 23);
    cb84:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    cb86:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    cb88:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    cb8c:	f2c0 82bc 	blt.w	d108 <am_util_stdio_vsprintf+0x744>
    cb90:	462b      	mov	r3, r5
    i32FracPart = 0;
    cb92:	2700      	movs	r7, #0
    if (i32IntPart == 0)
    cb94:	2800      	cmp	r0, #0
    cb96:	f000 82b2 	beq.w	d0fe <am_util_stdio_vsprintf+0x73a>
            *pcBuf++ = '-';
    cb9a:	4698      	mov	r8, r3
    cb9c:	bfde      	ittt	le
    cb9e:	232d      	movle	r3, #45	; 0x2d
    cba0:	f808 3b01 	strble.w	r3, [r8], #1
            uint64_to_str(-i32IntPart, pcBuf);
    cba4:	4240      	negle	r0, r0
    cba6:	e25e      	b.n	d066 <am_util_stdio_vsprintf+0x6a2>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cba8:	f85b 6b04 	ldr.w	r6, [fp], #4
    cbac:	17f7      	asrs	r7, r6, #31
                if ( i64Val < 0 )
    cbae:	2e00      	cmp	r6, #0
    cbb0:	f177 0300 	sbcs.w	r3, r7, #0
    cbb4:	f2c0 8150 	blt.w	ce58 <am_util_stdio_vsprintf+0x494>
                    ui64Val = i64Val;
    cbb8:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    cbbc:	2900      	cmp	r1, #0
    cbbe:	d05a      	beq.n	cc76 <am_util_stdio_vsprintf+0x2b2>
    int iNDigits = ui64Val ? 0 : 1;
    cbc0:	4633      	mov	r3, r6
    cbc2:	4630      	mov	r0, r6
    cbc4:	433b      	orrs	r3, r7
    cbc6:	4639      	mov	r1, r7
    cbc8:	bf0c      	ite	eq
    cbca:	2601      	moveq	r6, #1
    cbcc:	2600      	movne	r6, #0
    while ( ui64Val )
    cbce:	ea50 0301 	orrs.w	r3, r0, r1
    cbd2:	f000 8336 	beq.w	d242 <am_util_stdio_vsprintf+0x87e>
                    bNeg = false;
    cbd6:	2300      	movs	r3, #0
    cbd8:	461f      	mov	r7, r3
    cbda:	e9dd 0100 	ldrd	r0, r1, [sp]
        ui64Val = divu64_10(ui64Val);
    cbde:	f7ff fdf3 	bl	c7c8 <divu64_10>
    while ( ui64Val )
    cbe2:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cbe6:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cbea:	d1f8      	bne.n	cbde <am_util_stdio_vsprintf+0x21a>
                    iWidth -= ndigits_in_i64(ui64Val);
    cbec:	eba9 0906 	sub.w	r9, r9, r6
                    if ( bNeg )
    cbf0:	b12f      	cbz	r7, cbfe <am_util_stdio_vsprintf+0x23a>
                        if ( ui8PadChar == '0' )
    cbf2:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    cbf6:	f109 39ff 	add.w	r9, r9, #4294967295
                        if ( ui8PadChar == '0' )
    cbfa:	f000 8314 	beq.w	d226 <am_util_stdio_vsprintf+0x862>
    if ( i32NumChars <= 0 )
    cbfe:	f1b9 0f00 	cmp.w	r9, #0
    cc02:	f340 8305 	ble.w	d210 <am_util_stdio_vsprintf+0x84c>
    while ( i32NumChars-- )
    cc06:	f109 33ff 	add.w	r3, r9, #4294967295
    int32_t i32Cnt = 0;
    cc0a:	2100      	movs	r1, #0
    cc0c:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    cc0e:	4632      	mov	r2, r6
        if ( pcBuf )
    cc10:	2e00      	cmp	r6, #0
    cc12:	f000 829a 	beq.w	d14a <am_util_stdio_vsprintf+0x786>
            *pcBuf++ = cPadChar;
    cc16:	f802 8b01 	strb.w	r8, [r2], #1
    cc1a:	4618      	mov	r0, r3
    cc1c:	4616      	mov	r6, r2
        i32Cnt++;
    cc1e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cc20:	1e43      	subs	r3, r0, #1
    cc22:	2800      	cmp	r0, #0
    cc24:	d1f3      	bne.n	cc0e <am_util_stdio_vsprintf+0x24a>
    cc26:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    cc28:	2d00      	cmp	r5, #0
    cc2a:	f000 82dd 	beq.w	d1e8 <am_util_stdio_vsprintf+0x824>
    cc2e:	440d      	add	r5, r1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cc30:	b11f      	cbz	r7, cc3a <am_util_stdio_vsprintf+0x276>
    cc32:	f1b8 0f20 	cmp.w	r8, #32
    cc36:	f000 8118 	beq.w	ce6a <am_util_stdio_vsprintf+0x4a6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc3a:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc3e:	462a      	mov	r2, r5
    cc40:	f7ff fe22 	bl	c888 <uint64_to_str>
                    pcBuf += iVal;
    cc44:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    cc46:	4482      	add	sl, r0
        ++pcFmt;
    cc48:	1c61      	adds	r1, r4, #1
    cc4a:	e6cf      	b.n	c9ec <am_util_stdio_vsprintf+0x28>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc4c:	f10b 0304 	add.w	r3, fp, #4
                if ( pcBuf )
    cc50:	b11d      	cbz	r5, cc5a <am_util_stdio_vsprintf+0x296>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc52:	f8db 2000 	ldr.w	r2, [fp]
    cc56:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    cc5a:	f10a 0a01 	add.w	sl, sl, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc5e:	469b      	mov	fp, r3
        ++pcFmt;
    cc60:	1c61      	adds	r1, r4, #1
    cc62:	e6c3      	b.n	c9ec <am_util_stdio_vsprintf+0x28>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc64:	f85b 6b04 	ldr.w	r6, [fp], #4
    cc68:	2300      	movs	r3, #0
    cc6a:	4632      	mov	r2, r6
    cc6c:	e9cd 2300 	strd	r2, r3, [sp]
                if ( iWidth )
    cc70:	2900      	cmp	r1, #0
    cc72:	f040 81b4 	bne.w	cfde <am_util_stdio_vsprintf+0x61a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc76:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc7a:	462a      	mov	r2, r5
    cc7c:	f7ff fe04 	bl	c888 <uint64_to_str>
                if ( pcBuf )
    cc80:	2d00      	cmp	r5, #0
    cc82:	d1df      	bne.n	cc44 <am_util_stdio_vsprintf+0x280>
                if ( pcBuf )
    cc84:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    cc86:	4482      	add	sl, r0
                break;
    cc88:	e7de      	b.n	cc48 <am_util_stdio_vsprintf+0x284>
    if ( *pcStr == '-')
    cc8a:	7862      	ldrb	r2, [r4, #1]
    cc8c:	2a2d      	cmp	r2, #45	; 0x2d
            ++pcFmt;
    cc8e:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    cc92:	f000 8197 	beq.w	cfc4 <am_util_stdio_vsprintf+0x600>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cc96:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cc9a:	2b09      	cmp	r3, #9
    cc9c:	f200 82af 	bhi.w	d1fe <am_util_stdio_vsprintf+0x83a>
    uint32_t ui32Val = 0, uCnt = 0;
    cca0:	2300      	movs	r3, #0
    bool bNeg = false;
    cca2:	469e      	mov	lr, r3
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cca4:	4664      	mov	r4, ip
    cca6:	3301      	adds	r3, #1
    cca8:	1b1e      	subs	r6, r3, r4
    bool bNeg = false;
    ccaa:	2300      	movs	r3, #0
        ui32Val *= 10;
    ccac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    ccb0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ccb4:	19a7      	adds	r7, r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccb6:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    ccba:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    ccbe:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    ccc0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccc4:	d9f2      	bls.n	ccac <am_util_stdio_vsprintf+0x2e8>
    return bNeg ? -ui32Val : ui32Val;
    ccc6:	f1be 0f00 	cmp.w	lr, #0
    ccca:	d000      	beq.n	ccce <am_util_stdio_vsprintf+0x30a>
    cccc:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ccce:	461e      	mov	r6, r3
            pcFmt += ui32NumChars;
    ccd0:	eb0c 0407 	add.w	r4, ip, r7
    ccd4:	f81c 3007 	ldrb.w	r3, [ip, r7]
    ccd8:	e6c2      	b.n	ca60 <am_util_stdio_vsprintf+0x9c>
        switch ( *pcFmt )
    ccda:	464a      	mov	r2, r9
                pcStr = va_arg(pArgs, char *);
    ccdc:	f85b 3b04 	ldr.w	r3, [fp], #4
    if ( !pcBuf )
    cce0:	2b00      	cmp	r3, #0
    cce2:	f000 81e0 	beq.w	d0a6 <am_util_stdio_vsprintf+0x6e2>
    while ( *pcBuf++ )
    cce6:	461e      	mov	r6, r3
    cce8:	f816 1b01 	ldrb.w	r1, [r6], #1
    ccec:	2900      	cmp	r1, #0
    ccee:	f000 8289 	beq.w	d204 <am_util_stdio_vsprintf+0x840>
    uint32_t ui32RetVal = 0;
    ccf2:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    ccf4:	f816 0b01 	ldrb.w	r0, [r6], #1
        ui32RetVal++;
    ccf8:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    ccfa:	2800      	cmp	r0, #0
    ccfc:	d1fa      	bne.n	ccf4 <am_util_stdio_vsprintf+0x330>
                if ( iWidth > 0 )
    ccfe:	2a00      	cmp	r2, #0
    cd00:	dd02      	ble.n	cd08 <am_util_stdio_vsprintf+0x344>
                    if ( ui32strlen < iWidth )
    cd02:	42ba      	cmp	r2, r7
    cd04:	f200 81ee 	bhi.w	d0e4 <am_util_stdio_vsprintf+0x720>
    cd08:	f1c3 0c01 	rsb	ip, r3, #1
                while (*pcStr != 0x0)
    cd0c:	46d6      	mov	lr, sl
    cd0e:	4628      	mov	r0, r5
    cd10:	eb0c 060a 	add.w	r6, ip, sl
    cd14:	e000      	b.n	cd18 <am_util_stdio_vsprintf+0x354>
                        *pcBuf++ = *pcStr;
    cd16:	4628      	mov	r0, r5
    cd18:	eb06 0a03 	add.w	sl, r6, r3
                    if ( pcBuf )
    cd1c:	2d00      	cmp	r5, #0
    cd1e:	f000 8102 	beq.w	cf26 <am_util_stdio_vsprintf+0x562>
                        *pcBuf++ = *pcStr;
    cd22:	7001      	strb	r1, [r0, #0]
                while (*pcStr != 0x0)
    cd24:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    cd28:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    cd2a:	2900      	cmp	r1, #0
    cd2c:	d1f3      	bne.n	cd16 <am_util_stdio_vsprintf+0x352>
                if ( iWidth )
    cd2e:	2a00      	cmp	r2, #0
    cd30:	f43f aeff 	beq.w	cb32 <am_util_stdio_vsprintf+0x16e>
                    iWidth = -iWidth;
    cd34:	f1c2 0900 	rsb	r9, r2, #0
                    if ( ui32strlen < iWidth )
    cd38:	45b9      	cmp	r9, r7
    cd3a:	f67f aefa 	bls.w	cb32 <am_util_stdio_vsprintf+0x16e>
                        iWidth -= ui32strlen;
    cd3e:	eba9 0307 	sub.w	r3, r9, r7
    if ( i32NumChars <= 0 )
    cd42:	2b00      	cmp	r3, #0
    cd44:	f340 8268 	ble.w	d218 <am_util_stdio_vsprintf+0x854>
    while ( i32NumChars-- )
    cd48:	3b01      	subs	r3, #1
    cd4a:	462e      	mov	r6, r5
    int32_t i32Cnt = 0;
    cd4c:	2100      	movs	r1, #0
            *pcBuf++ = cPadChar;
    cd4e:	4632      	mov	r2, r6
        if ( pcBuf )
    cd50:	2e00      	cmp	r6, #0
    cd52:	f000 8130 	beq.w	cfb6 <am_util_stdio_vsprintf+0x5f2>
            *pcBuf++ = cPadChar;
    cd56:	f802 8b01 	strb.w	r8, [r2], #1
    cd5a:	4618      	mov	r0, r3
    cd5c:	4616      	mov	r6, r2
        i32Cnt++;
    cd5e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cd60:	1e43      	subs	r3, r0, #1
    cd62:	2800      	cmp	r0, #0
    cd64:	d1f3      	bne.n	cd4e <am_util_stdio_vsprintf+0x38a>
    cd66:	448a      	add	sl, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cd68:	2d00      	cmp	r5, #0
    cd6a:	f43f aee2 	beq.w	cb32 <am_util_stdio_vsprintf+0x16e>
    cd6e:	440d      	add	r5, r1
                        iWidth = 0;
    cd70:	e6df      	b.n	cb32 <am_util_stdio_vsprintf+0x16e>
    cd72:	bf00      	nop
    cd74:	10001064 	.word	0x10001064
        switch ( *pcFmt )
    cd78:	78a3      	ldrb	r3, [r4, #2]
    cd7a:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
                pcFmt++;
    cd7e:	3402      	adds	r4, #2
        switch ( *pcFmt )
    cd80:	2a32      	cmp	r2, #50	; 0x32
    cd82:	f63f aed1 	bhi.w	cb28 <am_util_stdio_vsprintf+0x164>
    cd86:	a001      	add	r0, pc, #4	; (adr r0, cd8c <am_util_stdio_vsprintf+0x3c8>)
    cd88:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    cd8c:	0000cb37 	.word	0x0000cb37
    cd90:	0000cb29 	.word	0x0000cb29
    cd94:	0000cb29 	.word	0x0000cb29
    cd98:	0000cb29 	.word	0x0000cb29
    cd9c:	0000cb29 	.word	0x0000cb29
    cda0:	0000cb29 	.word	0x0000cb29
    cda4:	0000cb29 	.word	0x0000cb29
    cda8:	0000cb29 	.word	0x0000cb29
    cdac:	0000cb29 	.word	0x0000cb29
    cdb0:	0000cb29 	.word	0x0000cb29
    cdb4:	0000cb29 	.word	0x0000cb29
    cdb8:	0000cb29 	.word	0x0000cb29
    cdbc:	0000cb29 	.word	0x0000cb29
    cdc0:	0000cb29 	.word	0x0000cb29
    cdc4:	0000cb29 	.word	0x0000cb29
    cdc8:	0000cb29 	.word	0x0000cb29
    cdcc:	0000cb29 	.word	0x0000cb29
    cdd0:	0000cb29 	.word	0x0000cb29
    cdd4:	0000d129 	.word	0x0000d129
    cdd8:	0000cb29 	.word	0x0000cb29
    cddc:	0000cb29 	.word	0x0000cb29
    cde0:	0000cb29 	.word	0x0000cb29
    cde4:	0000cb29 	.word	0x0000cb29
    cde8:	0000cb29 	.word	0x0000cb29
    cdec:	0000cb29 	.word	0x0000cb29
    cdf0:	0000cb29 	.word	0x0000cb29
    cdf4:	0000cb29 	.word	0x0000cb29
    cdf8:	0000cb29 	.word	0x0000cb29
    cdfc:	0000cb29 	.word	0x0000cb29
    ce00:	0000cc4d 	.word	0x0000cc4d
    ce04:	0000cea3 	.word	0x0000cea3
    ce08:	0000cb29 	.word	0x0000cb29
    ce0c:	0000cb37 	.word	0x0000cb37
    ce10:	0000cb29 	.word	0x0000cb29
    ce14:	0000cb29 	.word	0x0000cb29
    ce18:	0000cea3 	.word	0x0000cea3
    ce1c:	0000cb29 	.word	0x0000cb29
    ce20:	0000cb29 	.word	0x0000cb29
    ce24:	0000cb29 	.word	0x0000cb29
    ce28:	0000cb29 	.word	0x0000cb29
    ce2c:	0000cb29 	.word	0x0000cb29
    ce30:	0000cb29 	.word	0x0000cb29
    ce34:	0000cb29 	.word	0x0000cb29
    ce38:	0000cb29 	.word	0x0000cb29
    ce3c:	0000cb29 	.word	0x0000cb29
    ce40:	0000ccdb 	.word	0x0000ccdb
    ce44:	0000cb29 	.word	0x0000cb29
    ce48:	0000ceb1 	.word	0x0000ceb1
    ce4c:	0000cb29 	.word	0x0000cb29
    ce50:	0000cb29 	.word	0x0000cb29
    ce54:	0000d139 	.word	0x0000d139
                    ui64Val = -i64Val;          // Get absolute value
    ce58:	4276      	negs	r6, r6
    ce5a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    ce5e:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    ce62:	2900      	cmp	r1, #0
    ce64:	f040 81bc 	bne.w	d1e0 <am_util_stdio_vsprintf+0x81c>
                        if ( pcBuf )
    ce68:	b115      	cbz	r5, ce70 <am_util_stdio_vsprintf+0x4ac>
                            *pcBuf++ = '-';
    ce6a:	232d      	movs	r3, #45	; 0x2d
    ce6c:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    ce70:	f10a 0a01 	add.w	sl, sl, #1
    ce74:	e6ff      	b.n	cc76 <am_util_stdio_vsprintf+0x2b2>
        bLower = bLongLong = false;
    ce76:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce78:	f85b 2b04 	ldr.w	r2, [fp], #4
    ce7c:	2300      	movs	r3, #0
                if ( iWidth )
    ce7e:	2900      	cmp	r1, #0
    ce80:	d15d      	bne.n	cf3e <am_util_stdio_vsprintf+0x57a>
    if ( ui64Val == 0 )
    ce82:	ea52 0103 	orrs.w	r1, r2, r3
    ce86:	d120      	bne.n	ceca <am_util_stdio_vsprintf+0x506>
    if (pcBuf)
    ce88:	2d00      	cmp	r5, #0
    ce8a:	f000 80a6 	beq.w	cfda <am_util_stdio_vsprintf+0x616>
            *pcBuf++ = tbuf[ix];
    ce8e:	462b      	mov	r3, r5
    ce90:	2230      	movs	r2, #48	; 0x30
    ce92:	f803 2b01 	strb.w	r2, [r3], #1
    ce96:	2001      	movs	r0, #1
    ce98:	461d      	mov	r5, r3
        *pcBuf = 0;
    ce9a:	2200      	movs	r2, #0
    ce9c:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    ce9e:	4482      	add	sl, r0
                break;
    cea0:	e6d2      	b.n	cc48 <am_util_stdio_vsprintf+0x284>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cea2:	f10b 0b07 	add.w	fp, fp, #7
    cea6:	f02b 0b07 	bic.w	fp, fp, #7
    ceaa:	e8fb 6702 	ldrd	r6, r7, [fp], #8
    ceae:	e67e      	b.n	cbae <am_util_stdio_vsprintf+0x1ea>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ceb0:	f10b 0b07 	add.w	fp, fp, #7
    ceb4:	f02b 0b07 	bic.w	fp, fp, #7
    ceb8:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    cebc:	e9cd 2300 	strd	r2, r3, [sp]
    cec0:	e6d6      	b.n	cc70 <am_util_stdio_vsprintf+0x2ac>
    if ( ui64Val == 0 )
    cec2:	ea52 0103 	orrs.w	r1, r2, r3
    cec6:	f000 8088 	beq.w	cfda <am_util_stdio_vsprintf+0x616>
    ceca:	2f00      	cmp	r7, #0
    cecc:	f10d 0c0c 	add.w	ip, sp, #12
    ced0:	bf14      	ite	ne
    ced2:	f04f 0e27 	movne.w	lr, #39	; 0x27
    ced6:	f04f 0e07 	moveq.w	lr, #7
    ceda:	4667      	mov	r7, ip
    int iNumDig, ix = 0;
    cedc:	2000      	movs	r0, #0
        cCh = ui64Val & 0xf;
    cede:	f002 010f 	and.w	r1, r2, #15
        if ( cCh > 9 )
    cee2:	2909      	cmp	r1, #9
        ui64Val >>= 4;
    cee4:	ea4f 1612 	mov.w	r6, r2, lsr #4
    cee8:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
            cCh += bLower ? 0x27 : 0x7;
    ceec:	bf88      	it	hi
    ceee:	4471      	addhi	r1, lr
        ui64Val >>= 4;
    cef0:	ea4f 1813 	mov.w	r8, r3, lsr #4
        tbuf[ix++] = cCh + '0';
    cef4:	3130      	adds	r1, #48	; 0x30
        ui64Val >>= 4;
    cef6:	4632      	mov	r2, r6
    cef8:	4643      	mov	r3, r8
        tbuf[ix++] = cCh + '0';
    cefa:	f807 1b01 	strb.w	r1, [r7], #1
    while ( ui64Val )
    cefe:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cf02:	f100 0001 	add.w	r0, r0, #1
    while ( ui64Val )
    cf06:	d1ea      	bne.n	cede <am_util_stdio_vsprintf+0x51a>
    if (pcBuf)
    cf08:	2d00      	cmp	r5, #0
    cf0a:	f43f aebb 	beq.w	cc84 <am_util_stdio_vsprintf+0x2c0>
    cf0e:	eb0c 0300 	add.w	r3, ip, r0
    cf12:	1e6a      	subs	r2, r5, #1
            *pcBuf++ = tbuf[ix];
    cf14:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cf18:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cf1c:	4563      	cmp	r3, ip
    cf1e:	d1f9      	bne.n	cf14 <am_util_stdio_vsprintf+0x550>
    cf20:	182b      	adds	r3, r5, r0
    cf22:	461d      	mov	r5, r3
    cf24:	e7b9      	b.n	ce9a <am_util_stdio_vsprintf+0x4d6>
    cf26:	eb0c 010e 	add.w	r1, ip, lr
                    ++ui32CharCnt;
    cf2a:	eb01 0a03 	add.w	sl, r1, r3
                while (*pcStr != 0x0)
    cf2e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    cf32:	2800      	cmp	r0, #0
    cf34:	d1f9      	bne.n	cf2a <am_util_stdio_vsprintf+0x566>
                if ( iWidth )
    cf36:	2a00      	cmp	r2, #0
    cf38:	f43f adfb 	beq.w	cb32 <am_util_stdio_vsprintf+0x16e>
    cf3c:	e6fa      	b.n	cd34 <am_util_stdio_vsprintf+0x370>
    int iDigits = ui64Val ? 0 : 1;
    cf3e:	ea52 0103 	orrs.w	r1, r2, r3
    cf42:	bf0c      	ite	eq
    cf44:	2601      	moveq	r6, #1
    cf46:	2600      	movne	r6, #0
    while ( ui64Val )
    cf48:	ea52 0103 	orrs.w	r1, r2, r3
    cf4c:	d00e      	beq.n	cf6c <am_util_stdio_vsprintf+0x5a8>
    cf4e:	4610      	mov	r0, r2
    cf50:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cf52:	ea4f 1c10 	mov.w	ip, r0, lsr #4
    cf56:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
    cf5a:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cf5e:	4660      	mov	r0, ip
    cf60:	4671      	mov	r1, lr
    while ( ui64Val )
    cf62:	ea50 0c01 	orrs.w	ip, r0, r1
        ++iDigits;
    cf66:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cf6a:	d1f2      	bne.n	cf52 <am_util_stdio_vsprintf+0x58e>
                    iWidth -= ndigits_in_hex(ui64Val);
    cf6c:	eba9 0106 	sub.w	r1, r9, r6
    if ( i32NumChars <= 0 )
    cf70:	2900      	cmp	r1, #0
    cf72:	f340 812f 	ble.w	d1d4 <am_util_stdio_vsprintf+0x810>
    while ( i32NumChars-- )
    cf76:	3901      	subs	r1, #1
    cf78:	46ae      	mov	lr, r5
    int32_t i32Cnt = 0;
    cf7a:	46a4      	mov	ip, r4
    cf7c:	2600      	movs	r6, #0
    cf7e:	462c      	mov	r4, r5
    cf80:	460d      	mov	r5, r1
            *pcBuf++ = cPadChar;
    cf82:	4620      	mov	r0, r4
        if ( pcBuf )
    cf84:	b194      	cbz	r4, cfac <am_util_stdio_vsprintf+0x5e8>
            *pcBuf++ = cPadChar;
    cf86:	f800 8b01 	strb.w	r8, [r0], #1
    cf8a:	4629      	mov	r1, r5
    cf8c:	4604      	mov	r4, r0
        i32Cnt++;
    cf8e:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cf90:	1e4d      	subs	r5, r1, #1
    cf92:	2900      	cmp	r1, #0
    cf94:	d1f5      	bne.n	cf82 <am_util_stdio_vsprintf+0x5be>
    cf96:	4664      	mov	r4, ip
    cf98:	4675      	mov	r5, lr
    cf9a:	44b2      	add	sl, r6
                    pcBuf += pcBuf ? iWidth : 0;
    cf9c:	2d00      	cmp	r5, #0
    cf9e:	d090      	beq.n	cec2 <am_util_stdio_vsprintf+0x4fe>
    if ( ui64Val == 0 )
    cfa0:	ea52 0103 	orrs.w	r1, r2, r3
    cfa4:	4435      	add	r5, r6
    cfa6:	f43f af72 	beq.w	ce8e <am_util_stdio_vsprintf+0x4ca>
    cfaa:	e78e      	b.n	ceca <am_util_stdio_vsprintf+0x506>
        i32Cnt++;
    cfac:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cfae:	1e69      	subs	r1, r5, #1
    cfb0:	2d00      	cmp	r5, #0
    cfb2:	d1ec      	bne.n	cf8e <am_util_stdio_vsprintf+0x5ca>
    cfb4:	e7ef      	b.n	cf96 <am_util_stdio_vsprintf+0x5d2>
        i32Cnt++;
    cfb6:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cfb8:	1e58      	subs	r0, r3, #1
    cfba:	2b00      	cmp	r3, #0
    cfbc:	f47f aecf 	bne.w	cd5e <am_util_stdio_vsprintf+0x39a>
    cfc0:	448a      	add	sl, r1
    cfc2:	e6d1      	b.n	cd68 <am_util_stdio_vsprintf+0x3a4>
        pcStr++;
    cfc4:	78a2      	ldrb	r2, [r4, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfc6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cfca:	2b09      	cmp	r3, #9
        pcStr++;
    cfcc:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfd0:	f200 8126 	bhi.w	d220 <am_util_stdio_vsprintf+0x85c>
        uCnt++;
    cfd4:	2301      	movs	r3, #1
        bNeg = true;
    cfd6:	469e      	mov	lr, r3
    cfd8:	e665      	b.n	cca6 <am_util_stdio_vsprintf+0x2e2>
    if ( ui64Val == 0 )
    cfda:	2001      	movs	r0, #1
    cfdc:	e652      	b.n	cc84 <am_util_stdio_vsprintf+0x2c0>
    int iNDigits = ui64Val ? 0 : 1;
    cfde:	e9dd 0100 	ldrd	r0, r1, [sp]
    cfe2:	4603      	mov	r3, r0
    cfe4:	430b      	orrs	r3, r1
    cfe6:	bf0c      	ite	eq
    cfe8:	2601      	moveq	r6, #1
    cfea:	2600      	movne	r6, #0
    while ( ui64Val )
    cfec:	ea50 0301 	orrs.w	r3, r0, r1
    cff0:	d006      	beq.n	d000 <am_util_stdio_vsprintf+0x63c>
        ui64Val = divu64_10(ui64Val);
    cff2:	f7ff fbe9 	bl	c7c8 <divu64_10>
    while ( ui64Val )
    cff6:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cffa:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cffe:	d1f8      	bne.n	cff2 <am_util_stdio_vsprintf+0x62e>
                    iWidth -= ndigits_in_u64(ui64Val);
    d000:	eba9 0306 	sub.w	r3, r9, r6
    if ( i32NumChars <= 0 )
    d004:	2b00      	cmp	r3, #0
    d006:	f340 8101 	ble.w	d20c <am_util_stdio_vsprintf+0x848>
    while ( i32NumChars-- )
    d00a:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d00c:	2100      	movs	r1, #0
    d00e:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    d010:	4632      	mov	r2, r6
        if ( pcBuf )
    d012:	b19e      	cbz	r6, d03c <am_util_stdio_vsprintf+0x678>
            *pcBuf++ = cPadChar;
    d014:	f802 8b01 	strb.w	r8, [r2], #1
    d018:	4618      	mov	r0, r3
    d01a:	4616      	mov	r6, r2
        i32Cnt++;
    d01c:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d01e:	1e43      	subs	r3, r0, #1
    d020:	2800      	cmp	r0, #0
    d022:	d1f5      	bne.n	d010 <am_util_stdio_vsprintf+0x64c>
    d024:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    d026:	2d00      	cmp	r5, #0
    d028:	f000 80e3 	beq.w	d1f2 <am_util_stdio_vsprintf+0x82e>
    d02c:	440d      	add	r5, r1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d02e:	462a      	mov	r2, r5
    d030:	e9dd 0100 	ldrd	r0, r1, [sp]
    d034:	f7ff fc28 	bl	c888 <uint64_to_str>
                    pcBuf += iVal;
    d038:	4405      	add	r5, r0
    d03a:	e604      	b.n	cc46 <am_util_stdio_vsprintf+0x282>
        i32Cnt++;
    d03c:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d03e:	1e58      	subs	r0, r3, #1
    d040:	2b00      	cmp	r3, #0
    d042:	d1eb      	bne.n	d01c <am_util_stdio_vsprintf+0x658>
    d044:	448a      	add	sl, r1
    d046:	e7ee      	b.n	d026 <am_util_stdio_vsprintf+0x662>
    else if (iExp2 >= 0)
    d048:	2a00      	cmp	r2, #0
    d04a:	db4f      	blt.n	d0ec <am_util_stdio_vsprintf+0x728>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d04c:	f1a1 077e 	sub.w	r7, r1, #126	; 0x7e
    d050:	fa00 f707 	lsl.w	r7, r0, r7
        i32IntPart = i32Significand >> (23 - iExp2);
    d054:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d058:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d05a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d05e:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d062:	db52      	blt.n	d10a <am_util_stdio_vsprintf+0x746>
    d064:	46a8      	mov	r8, r5
            uint64_to_str(-i32IntPart, pcBuf);
    d066:	4642      	mov	r2, r8
    d068:	17c1      	asrs	r1, r0, #31
    d06a:	f7ff fc0d 	bl	c888 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d06e:	f898 3000 	ldrb.w	r3, [r8]
    d072:	b11b      	cbz	r3, d07c <am_util_stdio_vsprintf+0x6b8>
    d074:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    d078:	2b00      	cmp	r3, #0
    d07a:	d1fb      	bne.n	d074 <am_util_stdio_vsprintf+0x6b0>
    *pcBuf++ = '.';
    d07c:	232e      	movs	r3, #46	; 0x2e
    d07e:	f888 3000 	strb.w	r3, [r8]
    if (i32FracPart == 0)
    d082:	2f00      	cmp	r7, #0
    d084:	d168      	bne.n	d158 <am_util_stdio_vsprintf+0x794>
        *pcBuf++ = '0';
    d086:	f108 0102 	add.w	r1, r8, #2
    d08a:	2330      	movs	r3, #48	; 0x30
    d08c:	1b4a      	subs	r2, r1, r5
    d08e:	f888 3001 	strb.w	r3, [r8, #1]
    *pcBuf = 0x00;
    d092:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    d094:	429a      	cmp	r2, r3
    *pcBuf = 0x00;
    d096:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    d098:	f2c0 8094 	blt.w	d1c4 <am_util_stdio_vsprintf+0x800>
    d09c:	4613      	mov	r3, r2
                    ui32CharCnt += iVal;
    d09e:	449a      	add	sl, r3
                    pcBuf += iVal;
    d0a0:	441d      	add	r5, r3
        ++pcFmt;
    d0a2:	1c61      	adds	r1, r4, #1
    d0a4:	e4a2      	b.n	c9ec <am_util_stdio_vsprintf+0x28>
                if ( iWidth > 0 )
    d0a6:	2a00      	cmp	r2, #0
    d0a8:	dd34      	ble.n	d114 <am_util_stdio_vsprintf+0x750>
        return ui32RetVal;
    d0aa:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    d0ac:	f102 39ff 	add.w	r9, r2, #4294967295
    int32_t i32Cnt = 0;
    d0b0:	2100      	movs	r1, #0
    while ( i32NumChars-- )
    d0b2:	462a      	mov	r2, r5
            *pcBuf++ = cPadChar;
    d0b4:	4610      	mov	r0, r2
        if ( pcBuf )
    d0b6:	2a00      	cmp	r2, #0
    d0b8:	d040      	beq.n	d13c <am_util_stdio_vsprintf+0x778>
            *pcBuf++ = cPadChar;
    d0ba:	f800 8b01 	strb.w	r8, [r0], #1
    d0be:	464e      	mov	r6, r9
    d0c0:	4602      	mov	r2, r0
        i32Cnt++;
    d0c2:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d0c4:	f106 39ff 	add.w	r9, r6, #4294967295
    d0c8:	2e00      	cmp	r6, #0
    d0ca:	d1f3      	bne.n	d0b4 <am_util_stdio_vsprintf+0x6f0>
    d0cc:	4608      	mov	r0, r1
    d0ce:	448a      	add	sl, r1
    d0d0:	7819      	ldrb	r1, [r3, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    d0d2:	b105      	cbz	r5, d0d6 <am_util_stdio_vsprintf+0x712>
    d0d4:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    d0d6:	2900      	cmp	r1, #0
    d0d8:	f43f ad2b 	beq.w	cb32 <am_util_stdio_vsprintf+0x16e>
                        iWidth = 0;
    d0dc:	2200      	movs	r2, #0
    d0de:	e613      	b.n	cd08 <am_util_stdio_vsprintf+0x344>
        bLower = bLongLong = false;
    d0e0:	2701      	movs	r7, #1
    d0e2:	e6c9      	b.n	ce78 <am_util_stdio_vsprintf+0x4b4>
    d0e4:	1bd2      	subs	r2, r2, r7
    if ( i32NumChars <= 0 )
    d0e6:	2a00      	cmp	r2, #0
    d0e8:	ddf3      	ble.n	d0d2 <am_util_stdio_vsprintf+0x70e>
    d0ea:	e7df      	b.n	d0ac <am_util_stdio_vsprintf+0x6e8>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d0ec:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d0ee:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d0f0:	fa40 f702 	asr.w	r7, r0, r2
        *pcBuf++ = '-';
    d0f4:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    d0f6:	da02      	bge.n	d0fe <am_util_stdio_vsprintf+0x73a>
        *pcBuf++ = '-';
    d0f8:	222d      	movs	r2, #45	; 0x2d
    d0fa:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    d0fe:	4698      	mov	r8, r3
    d100:	2330      	movs	r3, #48	; 0x30
    d102:	f808 3b01 	strb.w	r3, [r8], #1
    d106:	e7b9      	b.n	d07c <am_util_stdio_vsprintf+0x6b8>
    i32FracPart = 0;
    d108:	2700      	movs	r7, #0
        *pcBuf++ = '-';
    d10a:	462b      	mov	r3, r5
    d10c:	222d      	movs	r2, #45	; 0x2d
    d10e:	f803 2b01 	strb.w	r2, [r3], #1
    d112:	e53f      	b.n	cb94 <am_util_stdio_vsprintf+0x1d0>
    d114:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    d116:	461f      	mov	r7, r3
    d118:	2900      	cmp	r1, #0
    d11a:	f47f adf5 	bne.w	cd08 <am_util_stdio_vsprintf+0x344>
    d11e:	460f      	mov	r7, r1
                if ( iWidth )
    d120:	2a00      	cmp	r2, #0
    d122:	f43f ad06 	beq.w	cb32 <am_util_stdio_vsprintf+0x16e>
    d126:	e605      	b.n	cd34 <am_util_stdio_vsprintf+0x370>
        bLower = bLongLong = false;
    d128:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d12a:	f10b 0b07 	add.w	fp, fp, #7
    d12e:	f02b 0b07 	bic.w	fp, fp, #7
    d132:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    d136:	e6a2      	b.n	ce7e <am_util_stdio_vsprintf+0x4ba>
        switch ( *pcFmt )
    d138:	2701      	movs	r7, #1
    d13a:	e7f6      	b.n	d12a <am_util_stdio_vsprintf+0x766>
        i32Cnt++;
    d13c:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d13e:	f109 36ff 	add.w	r6, r9, #4294967295
    d142:	f1b9 0f00 	cmp.w	r9, #0
    d146:	d1bc      	bne.n	d0c2 <am_util_stdio_vsprintf+0x6fe>
    d148:	e7c0      	b.n	d0cc <am_util_stdio_vsprintf+0x708>
        i32Cnt++;
    d14a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d14c:	1e58      	subs	r0, r3, #1
    d14e:	2b00      	cmp	r3, #0
    d150:	f47f ad65 	bne.w	cc1e <am_util_stdio_vsprintf+0x25a>
    d154:	448a      	add	sl, r1
    d156:	e567      	b.n	cc28 <am_util_stdio_vsprintf+0x264>
    *pcBuf++ = '.';
    d158:	f108 0101 	add.w	r1, r8, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d15c:	1b4a      	subs	r2, r1, r5
    d15e:	f1c2 0313 	rsb	r3, r2, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d162:	42b3      	cmp	r3, r6
    d164:	bfa8      	it	ge
    d166:	4633      	movge	r3, r6
        for (jx = 0; jx < iMax; jx++)
    d168:	2b00      	cmp	r3, #0
    d16a:	dd10      	ble.n	d18e <am_util_stdio_vsprintf+0x7ca>
    d16c:	1c5e      	adds	r6, r3, #1
    d16e:	4446      	add	r6, r8
    *pcBuf++ = '.';
    d170:	4608      	mov	r0, r1
            i32FracPart *= 10;
    d172:	eb07 0787 	add.w	r7, r7, r7, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d176:	15fa      	asrs	r2, r7, #23
    d178:	3230      	adds	r2, #48	; 0x30
    d17a:	f800 2b01 	strb.w	r2, [r0], #1
            i32FracPart *= 10;
    d17e:	007f      	lsls	r7, r7, #1
        for (jx = 0; jx < iMax; jx++)
    d180:	4286      	cmp	r6, r0
            i32FracPart &= 0x00FFFFFF;
    d182:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d186:	d1f4      	bne.n	d172 <am_util_stdio_vsprintf+0x7ae>
    d188:	4419      	add	r1, r3
    d18a:	4498      	add	r8, r3
    d18c:	1b4a      	subs	r2, r1, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d18e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d192:	f347 53c7 	sbfx	r3, r7, #23, #8
    d196:	2b04      	cmp	r3, #4
    d198:	f77f af7b 	ble.w	d092 <am_util_stdio_vsprintf+0x6ce>
            while ( pcBuftmp >= pcBufInitial )
    d19c:	45a8      	cmp	r8, r5
    d19e:	f4ff af78 	bcc.w	d092 <am_util_stdio_vsprintf+0x6ce>
    d1a2:	4643      	mov	r3, r8
                    *pcBuftmp = '0';
    d1a4:	2730      	movs	r7, #48	; 0x30
    d1a6:	e003      	b.n	d1b0 <am_util_stdio_vsprintf+0x7ec>
    d1a8:	705f      	strb	r7, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d1aa:	429d      	cmp	r5, r3
    d1ac:	f63f af71 	bhi.w	d092 <am_util_stdio_vsprintf+0x6ce>
                    *pcBuftmp = '0';
    d1b0:	461e      	mov	r6, r3
                if ( *pcBuftmp == '.' )
    d1b2:	f813 0901 	ldrb.w	r0, [r3], #-1
    d1b6:	282e      	cmp	r0, #46	; 0x2e
    d1b8:	d0f7      	beq.n	d1aa <am_util_stdio_vsprintf+0x7e6>
                else if ( *pcBuftmp == '9' )
    d1ba:	2839      	cmp	r0, #57	; 0x39
    d1bc:	d0f4      	beq.n	d1a8 <am_util_stdio_vsprintf+0x7e4>
                    *pcBuftmp += 1;
    d1be:	3001      	adds	r0, #1
    d1c0:	7030      	strb	r0, [r6, #0]
                    break;
    d1c2:	e766      	b.n	d092 <am_util_stdio_vsprintf+0x6ce>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d1c4:	1c53      	adds	r3, r2, #1
    d1c6:	d025      	beq.n	d214 <am_util_stdio_vsprintf+0x850>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d1c8:	3202      	adds	r2, #2
    d1ca:	d027      	beq.n	d21c <am_util_stdio_vsprintf+0x858>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d1cc:	4b1f      	ldr	r3, [pc, #124]	; (d24c <am_util_stdio_vsprintf+0x888>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1ce:	602b      	str	r3, [r5, #0]
    d1d0:	2303      	movs	r3, #3
    d1d2:	e764      	b.n	d09e <am_util_stdio_vsprintf+0x6da>
    d1d4:	2600      	movs	r6, #0
    d1d6:	e6e1      	b.n	cf9c <am_util_stdio_vsprintf+0x5d8>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d1d8:	4b1d      	ldr	r3, [pc, #116]	; (d250 <am_util_stdio_vsprintf+0x88c>)
    d1da:	602b      	str	r3, [r5, #0]
    d1dc:	2303      	movs	r3, #3
    d1de:	e75e      	b.n	d09e <am_util_stdio_vsprintf+0x6da>
                    bNeg = true;
    d1e0:	2301      	movs	r3, #1
    d1e2:	461f      	mov	r7, r3
    int iNDigits = ui64Val ? 0 : 1;
    d1e4:	2600      	movs	r6, #0
    d1e6:	e4f8      	b.n	cbda <am_util_stdio_vsprintf+0x216>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1e8:	b327      	cbz	r7, d234 <am_util_stdio_vsprintf+0x870>
    d1ea:	f1b8 0f20 	cmp.w	r8, #32
    d1ee:	f43f ae3f 	beq.w	ce70 <am_util_stdio_vsprintf+0x4ac>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d1f2:	e9dd 0100 	ldrd	r0, r1, [sp]
    d1f6:	462a      	mov	r2, r5
    d1f8:	f7ff fb46 	bl	c888 <uint64_to_str>
                if ( pcBuf )
    d1fc:	e542      	b.n	cc84 <am_util_stdio_vsprintf+0x2c0>
    uint32_t ui32Val = 0, uCnt = 0;
    d1fe:	2700      	movs	r7, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d200:	463b      	mov	r3, r7
    d202:	e564      	b.n	ccce <am_util_stdio_vsprintf+0x30a>
                if ( iWidth > 0 )
    d204:	2a00      	cmp	r2, #0
    d206:	dd8a      	ble.n	d11e <am_util_stdio_vsprintf+0x75a>
    uint32_t ui32RetVal = 0;
    d208:	460f      	mov	r7, r1
    d20a:	e74f      	b.n	d0ac <am_util_stdio_vsprintf+0x6e8>
    d20c:	2100      	movs	r1, #0
    d20e:	e70a      	b.n	d026 <am_util_stdio_vsprintf+0x662>
    d210:	2100      	movs	r1, #0
    d212:	e509      	b.n	cc28 <am_util_stdio_vsprintf+0x264>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d214:	4b0e      	ldr	r3, [pc, #56]	; (d250 <am_util_stdio_vsprintf+0x88c>)
    d216:	e7da      	b.n	d1ce <am_util_stdio_vsprintf+0x80a>
    d218:	2100      	movs	r1, #0
    d21a:	e5a5      	b.n	cd68 <am_util_stdio_vsprintf+0x3a4>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d21c:	4b0d      	ldr	r3, [pc, #52]	; (d254 <am_util_stdio_vsprintf+0x890>)
    d21e:	e7d6      	b.n	d1ce <am_util_stdio_vsprintf+0x80a>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d220:	2300      	movs	r3, #0
        uCnt++;
    d222:	2701      	movs	r7, #1
    d224:	e552      	b.n	cccc <am_util_stdio_vsprintf+0x308>
                            if ( pcBuf )
    d226:	b115      	cbz	r5, d22e <am_util_stdio_vsprintf+0x86a>
                                *pcBuf++ = '-';
    d228:	232d      	movs	r3, #45	; 0x2d
    d22a:	f805 3b01 	strb.w	r3, [r5], #1
                            ++ui32CharCnt;
    d22e:	f10a 0a01 	add.w	sl, sl, #1
    d232:	e4e4      	b.n	cbfe <am_util_stdio_vsprintf+0x23a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d234:	e9dd 0100 	ldrd	r0, r1, [sp]
    d238:	462a      	mov	r2, r5
    d23a:	f7ff fb25 	bl	c888 <uint64_to_str>
                ui32CharCnt += iVal;
    d23e:	4482      	add	sl, r0
                break;
    d240:	e502      	b.n	cc48 <am_util_stdio_vsprintf+0x284>
                    bNeg = false;
    d242:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    d244:	eba9 0906 	sub.w	r9, r9, r6
                    bNeg = false;
    d248:	461f      	mov	r7, r3
    d24a:	e4d8      	b.n	cbfe <am_util_stdio_vsprintf+0x23a>
    d24c:	003f2e3f 	.word	0x003f2e3f
    d250:	00302e30 	.word	0x00302e30
    d254:	00232e23 	.word	0x00232e23

0000d258 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d258:	b40f      	push	{r0, r1, r2, r3}
    d25a:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d25c:	4d09      	ldr	r5, [pc, #36]	; (d284 <am_util_stdio_printf+0x2c>)
    d25e:	682c      	ldr	r4, [r5, #0]
{
    d260:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d262:	b14c      	cbz	r4, d278 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d264:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d266:	9906      	ldr	r1, [sp, #24]
    d268:	4807      	ldr	r0, [pc, #28]	; (d288 <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    d26a:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d26c:	f7ff fbaa 	bl	c9c4 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d270:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d272:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d274:	4804      	ldr	r0, [pc, #16]	; (d288 <am_util_stdio_printf+0x30>)
    d276:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d278:	4620      	mov	r0, r4
    d27a:	b003      	add	sp, #12
    d27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d280:	b004      	add	sp, #16
    d282:	4770      	bx	lr
    d284:	10001310 	.word	0x10001310
    d288:	10001068 	.word	0x10001068

0000d28c <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d28c:	4801      	ldr	r0, [pc, #4]	; (d294 <am_util_stdio_terminal_clear+0x8>)
    d28e:	f7ff bfe3 	b.w	d258 <am_util_stdio_printf>
    d292:	bf00      	nop
    d294:	0001029c 	.word	0x0001029c

0000d298 <NMI_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d298:	e7fe      	b.n	d298 <NMI_Handler>
    d29a:	bf00      	nop

0000d29c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d29c:	e7fe      	b.n	d29c <DebugMon_Handler>
    d29e:	bf00      	nop

0000d2a0 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d2a0:	4811      	ldr	r0, [pc, #68]	; (d2e8 <zero_loop+0x12>)
    d2a2:	4912      	ldr	r1, [pc, #72]	; (d2ec <zero_loop+0x16>)
    d2a4:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d2a6:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d2aa:	4811      	ldr	r0, [pc, #68]	; (d2f0 <zero_loop+0x1a>)
    d2ac:	6801      	ldr	r1, [r0, #0]
    d2ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d2b2:	6001      	str	r1, [r0, #0]
    d2b4:	f3bf 8f4f 	dsb	sy
    d2b8:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d2bc:	480d      	ldr	r0, [pc, #52]	; (d2f4 <zero_loop+0x1e>)
    d2be:	490e      	ldr	r1, [pc, #56]	; (d2f8 <zero_loop+0x22>)
    d2c0:	4a0e      	ldr	r2, [pc, #56]	; (d2fc <zero_loop+0x26>)

0000d2c2 <copy_loop>:
    d2c2:	f850 3b04 	ldr.w	r3, [r0], #4
    d2c6:	f841 3b04 	str.w	r3, [r1], #4
    d2ca:	4291      	cmp	r1, r2
    d2cc:	dbf9      	blt.n	d2c2 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d2ce:	480c      	ldr	r0, [pc, #48]	; (d300 <zero_loop+0x2a>)
    d2d0:	490c      	ldr	r1, [pc, #48]	; (d304 <zero_loop+0x2e>)
    d2d2:	f04f 0200 	mov.w	r2, #0

0000d2d6 <zero_loop>:
    d2d6:	4288      	cmp	r0, r1
    d2d8:	bfb8      	it	lt
    d2da:	f840 2b04 	strlt.w	r2, [r0], #4
    d2de:	dbfa      	blt.n	d2d6 <zero_loop>
    main();
    d2e0:	f7ff f91a 	bl	c518 <main>
    __asm("    bkpt     ");
    d2e4:	be00      	bkpt	0x0000
}
    d2e6:	0000      	.short	0x0000
    d2e8:	e000ed08 	.word	0xe000ed08
    d2ec:	0000c000 	.word	0x0000c000
    d2f0:	e000ed88 	.word	0xe000ed88
    d2f4:	00010918 	.word	0x00010918
    d2f8:	10001000 	.word	0x10001000
    d2fc:	10001064 	.word	0x10001064
    d300:	10001064 	.word	0x10001064
    d304:	10004bd8 	.word	0x10004bd8

0000d308 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d308:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d30a:	2001      	movs	r0, #1
{
    d30c:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d30e:	f001 f8fd 	bl	e50c <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d312:	4925      	ldr	r1, [pc, #148]	; (d3a8 <am_ctimer_isr+0xa0>)
    d314:	2000      	movs	r0, #0
    d316:	f000 fbab 	bl	da70 <am_hal_adc_initialize>
    d31a:	bb68      	cbnz	r0, d378 <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d31c:	4c22      	ldr	r4, [pc, #136]	; (d3a8 <am_ctimer_isr+0xa0>)
    d31e:	2200      	movs	r2, #0
    d320:	6820      	ldr	r0, [r4, #0]
    d322:	4611      	mov	r1, r2
    d324:	f000 fd6e 	bl	de04 <am_hal_adc_power_control>
    d328:	2800      	cmp	r0, #0
    d32a:	d139      	bne.n	d3a0 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d32c:	4b1f      	ldr	r3, [pc, #124]	; (d3ac <am_ctimer_isr+0xa4>)
    d32e:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d330:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d332:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d334:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d336:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d33a:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d33c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d340:	f000 fc06 	bl	db50 <am_hal_adc_configure>
    d344:	bb40      	cbnz	r0, d398 <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d346:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d34a:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d34c:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d34e:	9500      	str	r5, [sp, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d350:	466a      	mov	r2, sp
    d352:	2100      	movs	r1, #0
    ADCSlotConfig.bEnabled        = true;
    d354:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d358:	f000 fc32 	bl	dbc0 <am_hal_adc_configure_slot>
    d35c:	b9c0      	cbnz	r0, d390 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d35e:	6820      	ldr	r0, [r4, #0]
    d360:	2101      	movs	r1, #1
    d362:	f000 fc9b 	bl	dc9c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d366:	6820      	ldr	r0, [r4, #0]
    d368:	f000 fc60 	bl	dc2c <am_hal_adc_enable>
    d36c:	b940      	cbnz	r0, d380 <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d36e:	6820      	ldr	r0, [r4, #0]
    d370:	f000 fd36 	bl	dde0 <am_hal_adc_sw_trigger>
}
    d374:	b005      	add	sp, #20
    d376:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d378:	480d      	ldr	r0, [pc, #52]	; (d3b0 <am_ctimer_isr+0xa8>)
    d37a:	f7ff ff6d 	bl	d258 <am_util_stdio_printf>
    d37e:	e7cd      	b.n	d31c <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d380:	480c      	ldr	r0, [pc, #48]	; (d3b4 <am_ctimer_isr+0xac>)
    d382:	f7ff ff69 	bl	d258 <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d386:	6820      	ldr	r0, [r4, #0]
    d388:	f000 fd2a 	bl	dde0 <am_hal_adc_sw_trigger>
}
    d38c:	b005      	add	sp, #20
    d38e:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d390:	4809      	ldr	r0, [pc, #36]	; (d3b8 <am_ctimer_isr+0xb0>)
    d392:	f7ff ff61 	bl	d258 <am_util_stdio_printf>
    d396:	e7e2      	b.n	d35e <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d398:	4808      	ldr	r0, [pc, #32]	; (d3bc <am_ctimer_isr+0xb4>)
    d39a:	f7ff ff5d 	bl	d258 <am_util_stdio_printf>
    d39e:	e7d2      	b.n	d346 <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d3a0:	4807      	ldr	r0, [pc, #28]	; (d3c0 <am_ctimer_isr+0xb8>)
    d3a2:	f7ff ff59 	bl	d258 <am_util_stdio_printf>
    d3a6:	e7c1      	b.n	d32c <am_ctimer_isr+0x24>
    d3a8:	1000116c 	.word	0x1000116c
    d3ac:	00070001 	.word	0x00070001
    d3b0:	000102b0 	.word	0x000102b0
    d3b4:	00010350 	.word	0x00010350
    d3b8:	00010328 	.word	0x00010328
    d3bc:	00010304 	.word	0x00010304
    d3c0:	000102e4 	.word	0x000102e4

0000d3c4 <am_adc_isr>:
{
    d3c4:	b510      	push	{r4, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d3c6:	4c2a      	ldr	r4, [pc, #168]	; (d470 <am_adc_isr+0xac>)
{
    d3c8:	b086      	sub	sp, #24
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d3ca:	6820      	ldr	r0, [r4, #0]
    d3cc:	2200      	movs	r2, #0
    d3ce:	a902      	add	r1, sp, #8
    d3d0:	f000 fc7a 	bl	dcc8 <am_hal_adc_interrupt_status>
    d3d4:	b9e8      	cbnz	r0, d412 <am_adc_isr+0x4e>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d3d6:	9902      	ldr	r1, [sp, #8]
    d3d8:	6820      	ldr	r0, [r4, #0]
    d3da:	f000 fc93 	bl	dd04 <am_hal_adc_interrupt_clear>
    d3de:	bb08      	cbnz	r0, d424 <am_adc_isr+0x60>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d3e0:	9b02      	ldr	r3, [sp, #8]
    d3e2:	07db      	lsls	r3, r3, #31
    d3e4:	d424      	bmi.n	d430 <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d3e6:	4b23      	ldr	r3, [pc, #140]	; (d474 <am_adc_isr+0xb0>)
    d3e8:	9a04      	ldr	r2, [sp, #16]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d3ea:	6820      	ldr	r0, [r4, #0]
    audioSample = Sample.ui32Sample;
    d3ec:	601a      	str	r2, [r3, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d3ee:	f000 fc3d 	bl	dc6c <am_hal_adc_disable>
    d3f2:	2800      	cmp	r0, #0
    d3f4:	d137      	bne.n	d466 <am_adc_isr+0xa2>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d3f6:	200a      	movs	r0, #10
    d3f8:	f002 f8ca 	bl	f590 <am_hal_pwrctrl_periph_disable>
    d3fc:	2800      	cmp	r0, #0
    d3fe:	d12e      	bne.n	d45e <am_adc_isr+0x9a>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d400:	6820      	ldr	r0, [r4, #0]
    d402:	f000 fb85 	bl	db10 <am_hal_adc_deinitialize>
    d406:	bb10      	cbnz	r0, d44e <am_adc_isr+0x8a>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d408:	6820      	ldr	r0, [r4, #0]
    d40a:	f000 fce9 	bl	dde0 <am_hal_adc_sw_trigger>
}
    d40e:	b006      	add	sp, #24
    d410:	bd10      	pop	{r4, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d412:	4819      	ldr	r0, [pc, #100]	; (d478 <am_adc_isr+0xb4>)
    d414:	f7ff ff20 	bl	d258 <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d418:	9902      	ldr	r1, [sp, #8]
    d41a:	6820      	ldr	r0, [r4, #0]
    d41c:	f000 fc72 	bl	dd04 <am_hal_adc_interrupt_clear>
    d420:	2800      	cmp	r0, #0
    d422:	d0dd      	beq.n	d3e0 <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d424:	4815      	ldr	r0, [pc, #84]	; (d47c <am_adc_isr+0xb8>)
    d426:	f7ff ff17 	bl	d258 <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d42a:	9b02      	ldr	r3, [sp, #8]
    d42c:	07db      	lsls	r3, r3, #31
    d42e:	d5da      	bpl.n	d3e6 <am_adc_isr+0x22>
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d430:	ab04      	add	r3, sp, #16
        uint32_t    ui32NumSamples = 1;
    d432:	2101      	movs	r1, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d434:	9300      	str	r3, [sp, #0]
    d436:	6820      	ldr	r0, [r4, #0]
        uint32_t    ui32NumSamples = 1;
    d438:	9103      	str	r1, [sp, #12]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d43a:	ab03      	add	r3, sp, #12
    d43c:	2200      	movs	r2, #0
    d43e:	f000 fc73 	bl	dd28 <am_hal_adc_samples_read>
    d442:	2800      	cmp	r0, #0
    d444:	d0cf      	beq.n	d3e6 <am_adc_isr+0x22>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d446:	480e      	ldr	r0, [pc, #56]	; (d480 <am_adc_isr+0xbc>)
    d448:	f7ff ff06 	bl	d258 <am_util_stdio_printf>
    d44c:	e7cb      	b.n	d3e6 <am_adc_isr+0x22>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d44e:	480d      	ldr	r0, [pc, #52]	; (d484 <am_adc_isr+0xc0>)
    d450:	f7ff ff02 	bl	d258 <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d454:	6820      	ldr	r0, [r4, #0]
    d456:	f000 fcc3 	bl	dde0 <am_hal_adc_sw_trigger>
}
    d45a:	b006      	add	sp, #24
    d45c:	bd10      	pop	{r4, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d45e:	480a      	ldr	r0, [pc, #40]	; (d488 <am_adc_isr+0xc4>)
    d460:	f7ff fefa 	bl	d258 <am_util_stdio_printf>
    d464:	e7cc      	b.n	d400 <am_adc_isr+0x3c>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d466:	4809      	ldr	r0, [pc, #36]	; (d48c <am_adc_isr+0xc8>)
    d468:	f7ff fef6 	bl	d258 <am_util_stdio_printf>
    d46c:	e7c3      	b.n	d3f6 <am_adc_isr+0x32>
    d46e:	bf00      	nop
    d470:	1000116c 	.word	0x1000116c
    d474:	10001168 	.word	0x10001168
    d478:	00010370 	.word	0x00010370
    d47c:	00010394 	.word	0x00010394
    d480:	000103bc 	.word	0x000103bc
    d484:	00010438 	.word	0x00010438
    d488:	00010408 	.word	0x00010408
    d48c:	000103e8 	.word	0x000103e8

0000d490 <initADC>:
{
    d490:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d492:	4b0e      	ldr	r3, [pc, #56]	; (d4cc <initADC+0x3c>)
    d494:	200b      	movs	r0, #11
    d496:	6819      	ldr	r1, [r3, #0]
    d498:	f001 f89c 	bl	e5d4 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d49c:	f44f 7215 	mov.w	r2, #596	; 0x254
    d4a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4a4:	2000      	movs	r0, #0
    d4a6:	f000 ff5d 	bl	e364 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d4aa:	2001      	movs	r0, #1
    d4ac:	f001 f81a 	bl	e4e4 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d4b0:	2300      	movs	r3, #0
    d4b2:	4618      	mov	r0, r3
    d4b4:	2201      	movs	r2, #1
    d4b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4ba:	f000 ffbd 	bl	e438 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d4be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4c2:	2000      	movs	r0, #0
    d4c4:	f000 ff8e 	bl	e3e4 <am_hal_ctimer_start>
}
    d4c8:	2000      	movs	r0, #0
    d4ca:	bd08      	pop	{r3, pc}
    d4cc:	00010464 	.word	0x00010464

0000d4d0 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4d0:	4b04      	ldr	r3, [pc, #16]	; (d4e4 <enableAdcInterrupts+0x14>)
    d4d2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d4d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d4da:	6019      	str	r1, [r3, #0]
    d4dc:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d4de:	f001 ba2b 	b.w	e938 <am_hal_interrupt_master_enable>
    d4e2:	bf00      	nop
    d4e4:	e000e100 	.word	0xe000e100

0000d4e8 <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d4e8:	2b80      	cmp	r3, #128	; 0x80
    d4ea:	d840      	bhi.n	d56e <platform_read+0x86>
{
    d4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4f0:	4690      	mov	r8, r2
    d4f2:	b08a      	sub	sp, #40	; 0x28
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d4f4:	2a00      	cmp	r2, #0
    d4f6:	d044      	beq.n	d582 <platform_read+0x9a>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d4f8:	4d28      	ldr	r5, [pc, #160]	; (d59c <platform_read+0xb4>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d4fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d5ac <platform_read+0xc4>
    d4fe:	460e      	mov	r6, r1
    d500:	461f      	mov	r7, r3
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d504:	466c      	mov	r4, sp
    d506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d50a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d50c:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d510:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d512:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d516:	f04f 0a01 	mov.w	sl, #1
    iomTransfer.ui32PauseCondition = 0;     // ?
    d51a:	2400      	movs	r4, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d51c:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d520:	f8cd a004 	str.w	sl, [sp, #4]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d524:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d528:	4669      	mov	r1, sp
    iomTransfer.ui32PauseCondition = 0;     // ?
    d52a:	2500      	movs	r5, #0
    d52c:	e9cd 4508 	strd	r4, r5, [sp, #32]
    iomTransfer.pui32RxBuffer = NULL;
    d530:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d534:	9602      	str	r6, [sp, #8]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d536:	f8ad a01c 	strh.w	sl, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d53a:	f88d a01e 	strb.w	sl, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d53e:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d540:	f88d 3010 	strb.w	r3, [sp, #16]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d544:	f001 fd52 	bl	efec <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d548:	4604      	mov	r4, r0
    d54a:	b990      	cbnz	r0, d572 <platform_read+0x8a>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d54c:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d550:	f88d 401c 	strb.w	r4, [sp, #28]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d554:	4669      	mov	r1, sp
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d556:	f88d a010 	strb.w	sl, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d55a:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d55e:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d560:	f001 fd44 	bl	efec <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d564:	4604      	mov	r4, r0
    d566:	b998      	cbnz	r0, d590 <platform_read+0xa8>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d568:	b00a      	add	sp, #40	; 0x28
    d56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d56e:	2001      	movs	r0, #1
}
    d570:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d572:	4601      	mov	r1, r0
    d574:	480a      	ldr	r0, [pc, #40]	; (d5a0 <platform_read+0xb8>)
    d576:	f7ff fe6f 	bl	d258 <am_util_stdio_printf>
        return retVal32;
    d57a:	4620      	mov	r0, r4
}
    d57c:	b00a      	add	sp, #40	; 0x28
    d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d582:	4808      	ldr	r0, [pc, #32]	; (d5a4 <platform_read+0xbc>)
    d584:	f7ff fe68 	bl	d258 <am_util_stdio_printf>
    d588:	2001      	movs	r0, #1
}
    d58a:	b00a      	add	sp, #40	; 0x28
    d58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d590:	4601      	mov	r1, r0
    d592:	4805      	ldr	r0, [pc, #20]	; (d5a8 <platform_read+0xc0>)
    d594:	f7ff fe60 	bl	d258 <am_util_stdio_printf>
        return retVal32;
    d598:	4620      	mov	r0, r4
    d59a:	e7e5      	b.n	d568 <platform_read+0x80>
    d59c:	10001000 	.word	0x10001000
    d5a0:	00010480 	.word	0x00010480
    d5a4:	00010468 	.word	0x00010468
    d5a8:	00010490 	.word	0x00010490
    d5ac:	10001520 	.word	0x10001520

0000d5b0 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d5b0:	2b80      	cmp	r3, #128	; 0x80
    d5b2:	d83e      	bhi.n	d632 <platform_write+0x82>
{
    d5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5b6:	4e26      	ldr	r6, [pc, #152]	; (d650 <platform_write+0xa0>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d5b8:	4f26      	ldr	r7, [pc, #152]	; (d654 <platform_write+0xa4>)
    d5ba:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5bc:	469c      	mov	ip, r3
    d5be:	4614      	mov	r4, r2
    d5c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d5c2:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5c4:	466d      	mov	r5, sp
    d5c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d5c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d5ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d5cc:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d5d0:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d5d4:	f8df e08c 	ldr.w	lr, [pc, #140]	; d664 <platform_write+0xb4>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5d8:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d5dc:	2601      	movs	r6, #1
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d5de:	2200      	movs	r2, #0
    iomTransfer.ui32PauseCondition = 0;     // ?
    d5e0:	2000      	movs	r0, #0
    d5e2:	2100      	movs	r1, #0
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d5e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.pui32RxBuffer = i2cRX;
    d5e8:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d5ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d5f0:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d5f2:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d5f6:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d5fa:	f8ad 201c 	strh.w	r2, [sp, #28]
    if(bufp == NULL){
    d5fe:	b30c      	cbz	r4, d644 <platform_write+0x94>
    while(len--){
    d600:	f10c 31ff 	add.w	r1, ip, #4294967295
    d604:	b289      	uxth	r1, r1
    d606:	f1bc 0f00 	cmp.w	ip, #0
    d60a:	d009      	beq.n	d620 <platform_write+0x70>
    d60c:	1c4b      	adds	r3, r1, #1
    d60e:	18e2      	adds	r2, r4, r3
    d610:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d614:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d618:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d61c:	42bb      	cmp	r3, r7
    d61e:	d1f9      	bne.n	d614 <platform_write+0x64>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d620:	4b0d      	ldr	r3, [pc, #52]	; (d658 <platform_write+0xa8>)
    d622:	4669      	mov	r1, sp
    d624:	6818      	ldr	r0, [r3, #0]
    d626:	f001 fce1 	bl	efec <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d62a:	4606      	mov	r6, r0
    d62c:	b918      	cbnz	r0, d636 <platform_write+0x86>
}
    d62e:	b00b      	add	sp, #44	; 0x2c
    d630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d632:	2001      	movs	r0, #1
}
    d634:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d636:	4601      	mov	r1, r0
    d638:	4808      	ldr	r0, [pc, #32]	; (d65c <platform_write+0xac>)
    d63a:	f7ff fe0d 	bl	d258 <am_util_stdio_printf>
        return retVal32;
    d63e:	4630      	mov	r0, r6
}
    d640:	b00b      	add	sp, #44	; 0x2c
    d642:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d644:	4806      	ldr	r0, [pc, #24]	; (d660 <platform_write+0xb0>)
    d646:	f7ff fe07 	bl	d258 <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d64a:	4630      	mov	r0, r6
    d64c:	e7ef      	b.n	d62e <platform_write+0x7e>
    d64e:	bf00      	nop
    d650:	10001000 	.word	0x10001000
    d654:	10001320 	.word	0x10001320
    d658:	10001520 	.word	0x10001520
    d65c:	000104bc 	.word	0x000104bc
    d660:	000104a4 	.word	0x000104a4
    d664:	10001524 	.word	0x10001524

0000d668 <initAccelerometer>:
{
    d668:	b530      	push	{r4, r5, lr}
    dev_ctx.write_reg = platform_write;
    d66a:	4a2c      	ldr	r2, [pc, #176]	; (d71c <initAccelerometer+0xb4>)
    d66c:	4b2c      	ldr	r3, [pc, #176]	; (d720 <initAccelerometer+0xb8>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d66e:	4c2d      	ldr	r4, [pc, #180]	; (d724 <initAccelerometer+0xbc>)
    dev_ctx.write_reg = platform_write;
    d670:	6013      	str	r3, [r2, #0]
{
    d672:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d674:	2300      	movs	r3, #0
    d676:	2001      	movs	r0, #1
    d678:	9301      	str	r3, [sp, #4]
    d67a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    dev_ctx.read_reg = platform_read;
    d67e:	4d2a      	ldr	r5, [pc, #168]	; (d728 <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d680:	9305      	str	r3, [sp, #20]
    d682:	f88d 0004 	strb.w	r0, [sp, #4]
    d686:	4b29      	ldr	r3, [pc, #164]	; (d72c <initAccelerometer+0xc4>)
    dev_ctx.read_reg = platform_read;
    d688:	6055      	str	r5, [r2, #4]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d68a:	4621      	mov	r1, r4
    d68c:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d68e:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d690:	f001 f9d6 	bl	ea40 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d694:	b140      	cbz	r0, d6a8 <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d696:	4c26      	ldr	r4, [pc, #152]	; (d730 <initAccelerometer+0xc8>)
    d698:	4820      	ldr	r0, [pc, #128]	; (d71c <initAccelerometer+0xb4>)
    d69a:	4621      	mov	r1, r4
    d69c:	f000 f924 	bl	d8e8 <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d6a0:	7821      	ldrb	r1, [r4, #0]
    d6a2:	2933      	cmp	r1, #51	; 0x33
    d6a4:	d01b      	beq.n	d6de <initAccelerometer+0x76>
        while(1)
    d6a6:	e7fe      	b.n	d6a6 <initAccelerometer+0x3e>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d6a8:	4602      	mov	r2, r0
    d6aa:	4601      	mov	r1, r0
    d6ac:	6820      	ldr	r0, [r4, #0]
    d6ae:	f001 fa5f 	bl	eb70 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d6b2:	2800      	cmp	r0, #0
    d6b4:	d1ef      	bne.n	d696 <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d6b6:	6820      	ldr	r0, [r4, #0]
    d6b8:	a901      	add	r1, sp, #4
    d6ba:	f001 fb69 	bl	ed90 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d6be:	2800      	cmp	r0, #0
    d6c0:	d1e9      	bne.n	d696 <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d6c2:	4b1c      	ldr	r3, [pc, #112]	; (d734 <initAccelerometer+0xcc>)
    d6c4:	202b      	movs	r0, #43	; 0x2b
    d6c6:	6819      	ldr	r1, [r3, #0]
    d6c8:	f000 ff84 	bl	e5d4 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d6cc:	4b1a      	ldr	r3, [pc, #104]	; (d738 <initAccelerometer+0xd0>)
    d6ce:	202a      	movs	r0, #42	; 0x2a
    d6d0:	6819      	ldr	r1, [r3, #0]
    d6d2:	f000 ff7f 	bl	e5d4 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d6d6:	6820      	ldr	r0, [r4, #0]
    d6d8:	f001 f9da 	bl	ea90 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d6dc:	e7db      	b.n	d696 <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d6de:	4817      	ldr	r0, [pc, #92]	; (d73c <initAccelerometer+0xd4>)
    d6e0:	f7ff fdba 	bl	d258 <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d6e4:	2101      	movs	r1, #1
    d6e6:	480d      	ldr	r0, [pc, #52]	; (d71c <initAccelerometer+0xb4>)
    d6e8:	f000 f8ca 	bl	d880 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d6ec:	2103      	movs	r1, #3
    d6ee:	480b      	ldr	r0, [pc, #44]	; (d71c <initAccelerometer+0xb4>)
    d6f0:	f000 f82c 	bl	d74c <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d6f4:	2103      	movs	r1, #3
    d6f6:	4809      	ldr	r0, [pc, #36]	; (d71c <initAccelerometer+0xb4>)
    d6f8:	f000 f88e 	bl	d818 <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d6fc:	2100      	movs	r1, #0
    d6fe:	4807      	ldr	r0, [pc, #28]	; (d71c <initAccelerometer+0xb4>)
    d700:	f000 f8a4 	bl	d84c <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d704:	2103      	movs	r1, #3
    d706:	4805      	ldr	r0, [pc, #20]	; (d71c <initAccelerometer+0xb4>)
    d708:	f000 f820 	bl	d74c <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d70c:	2100      	movs	r1, #0
    d70e:	4803      	ldr	r0, [pc, #12]	; (d71c <initAccelerometer+0xb4>)
    d710:	f000 f836 	bl	d780 <lis2dh12_operating_mode_set>
}
    d714:	2000      	movs	r0, #0
    d716:	b007      	add	sp, #28
    d718:	bd30      	pop	{r4, r5, pc}
    d71a:	bf00      	nop
    d71c:	10001314 	.word	0x10001314
    d720:	0000d5b1 	.word	0x0000d5b1
    d724:	10001520 	.word	0x10001520
    d728:	0000d4e9 	.word	0x0000d4e9
    d72c:	000186a0 	.word	0x000186a0
    d730:	10001170 	.word	0x10001170
    d734:	00010524 	.word	0x00010524
    d738:	00010528 	.word	0x00010528
    d73c:	000104d4 	.word	0x000104d4

0000d740 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
    d740:	ee00 0a10 	vmov	s0, r0
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d744:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d748:	4770      	bx	lr
    d74a:	bf00      	nop

0000d74c <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d74c:	b570      	push	{r4, r5, r6, lr}
    d74e:	b082      	sub	sp, #8
    d750:	4604      	mov	r4, r0
    d752:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d754:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d758:	aa01      	add	r2, sp, #4
    d75a:	2301      	movs	r3, #1
    d75c:	211f      	movs	r1, #31
    d75e:	47b0      	blx	r6
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d760:	b958      	cbnz	r0, d77a <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d762:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d766:	6826      	ldr	r6, [r4, #0]
    d768:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d76a:	f365 1387 	bfi	r3, r5, #6, #2
    d76e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d772:	aa01      	add	r2, sp, #4
    d774:	2301      	movs	r3, #1
    d776:	211f      	movs	r1, #31
    d778:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d77a:	b002      	add	sp, #8
    d77c:	bd70      	pop	{r4, r5, r6, pc}
    d77e:	bf00      	nop

0000d780 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d780:	b570      	push	{r4, r5, r6, lr}
    d782:	b082      	sub	sp, #8
    d784:	4604      	mov	r4, r0
    d786:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d788:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d78c:	466a      	mov	r2, sp
    d78e:	2301      	movs	r3, #1
    d790:	2120      	movs	r1, #32
    d792:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d794:	bb00      	cbnz	r0, d7d8 <lis2dh12_operating_mode_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d796:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d79a:	aa01      	add	r2, sp, #4
    d79c:	2301      	movs	r3, #1
    d79e:	2123      	movs	r1, #35	; 0x23
    d7a0:	47b0      	blx	r6
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
    d7a2:	b9c8      	cbnz	r0, d7d8 <lis2dh12_operating_mode_set+0x58>
    if ( val == LIS2DH12_HR_12bit ) {
    d7a4:	b9d5      	cbnz	r5, d7dc <lis2dh12_operating_mode_set+0x5c>
      ctrl_reg1.lpen = 0;
    d7a6:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d7aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d7ae:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d7b2:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d7b6:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d7ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d7be:	6825      	ldr	r5, [r4, #0]
    d7c0:	68a0      	ldr	r0, [r4, #8]
    d7c2:	466a      	mov	r2, sp
    d7c4:	2301      	movs	r3, #1
    d7c6:	2120      	movs	r1, #32
    d7c8:	47a8      	blx	r5
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  } 
  if (ret == 0) {
    d7ca:	b928      	cbnz	r0, d7d8 <lis2dh12_operating_mode_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d7cc:	6825      	ldr	r5, [r4, #0]
    d7ce:	68a0      	ldr	r0, [r4, #8]
    d7d0:	aa01      	add	r2, sp, #4
    d7d2:	2301      	movs	r3, #1
    d7d4:	2123      	movs	r1, #35	; 0x23
    d7d6:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d7d8:	b002      	add	sp, #8
    d7da:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d7dc:	2d01      	cmp	r5, #1
    d7de:	d10c      	bne.n	d7fa <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
    d7e0:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d7e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d7e8:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d7ec:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d7f0:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d7f4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == LIS2DH12_LP_8bit) {
    d7f8:	e7e1      	b.n	d7be <lis2dh12_operating_mode_set+0x3e>
    d7fa:	2d02      	cmp	r5, #2
    d7fc:	d1df      	bne.n	d7be <lis2dh12_operating_mode_set+0x3e>
      ctrl_reg1.lpen = 1;
    d7fe:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d802:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d806:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d80a:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d80e:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d812:	f88d 2004 	strb.w	r2, [sp, #4]
    d816:	e7d2      	b.n	d7be <lis2dh12_operating_mode_set+0x3e>

0000d818 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d818:	b570      	push	{r4, r5, r6, lr}
    d81a:	b082      	sub	sp, #8
    d81c:	4604      	mov	r4, r0
    d81e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d820:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d824:	aa01      	add	r2, sp, #4
    d826:	2301      	movs	r3, #1
    d828:	2120      	movs	r1, #32
    d82a:	47b0      	blx	r6
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d82c:	b958      	cbnz	r0, d846 <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d82e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d832:	6826      	ldr	r6, [r4, #0]
    d834:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d836:	f365 1307 	bfi	r3, r5, #4, #4
    d83a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d83e:	aa01      	add	r2, sp, #4
    d840:	2301      	movs	r3, #1
    d842:	2120      	movs	r1, #32
    d844:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d846:	b002      	add	sp, #8
    d848:	bd70      	pop	{r4, r5, r6, pc}
    d84a:	bf00      	nop

0000d84c <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d84c:	b570      	push	{r4, r5, r6, lr}
    d84e:	b082      	sub	sp, #8
    d850:	4604      	mov	r4, r0
    d852:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d854:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d858:	aa01      	add	r2, sp, #4
    d85a:	2301      	movs	r3, #1
    d85c:	2123      	movs	r1, #35	; 0x23
    d85e:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d860:	b958      	cbnz	r0, d87a <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d862:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d866:	6826      	ldr	r6, [r4, #0]
    d868:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d86a:	f365 1305 	bfi	r3, r5, #4, #2
    d86e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d872:	aa01      	add	r2, sp, #4
    d874:	2301      	movs	r3, #1
    d876:	2123      	movs	r1, #35	; 0x23
    d878:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d87a:	b002      	add	sp, #8
    d87c:	bd70      	pop	{r4, r5, r6, pc}
    d87e:	bf00      	nop

0000d880 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d880:	b570      	push	{r4, r5, r6, lr}
    d882:	b082      	sub	sp, #8
    d884:	4604      	mov	r4, r0
    d886:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d888:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d88c:	aa01      	add	r2, sp, #4
    d88e:	2301      	movs	r3, #1
    d890:	2123      	movs	r1, #35	; 0x23
    d892:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d894:	b958      	cbnz	r0, d8ae <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d896:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d89a:	6826      	ldr	r6, [r4, #0]
    d89c:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d89e:	f365 13c7 	bfi	r3, r5, #7, #1
    d8a2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8a6:	aa01      	add	r2, sp, #4
    d8a8:	2301      	movs	r3, #1
    d8aa:	2123      	movs	r1, #35	; 0x23
    d8ac:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d8ae:	b002      	add	sp, #8
    d8b0:	bd70      	pop	{r4, r5, r6, pc}
    d8b2:	bf00      	nop

0000d8b4 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d8b4:	b530      	push	{r4, r5, lr}
    d8b6:	b083      	sub	sp, #12
    d8b8:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8ba:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d8be:	2301      	movs	r3, #1
    d8c0:	aa01      	add	r2, sp, #4
    d8c2:	2127      	movs	r1, #39	; 0x27
    d8c4:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    d8c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d8ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d8ce:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d8d0:	b003      	add	sp, #12
    d8d2:	bd30      	pop	{r4, r5, pc}

0000d8d4 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d8d4:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8d6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d8da:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8dc:	46a4      	mov	ip, r4
    d8de:	2306      	movs	r3, #6
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    d8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8e4:	2128      	movs	r1, #40	; 0x28
    d8e6:	4760      	bx	ip

0000d8e8 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d8e8:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8ea:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d8ee:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8f0:	46a4      	mov	ip, r4
    d8f2:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8f8:	210f      	movs	r1, #15
    d8fa:	4760      	bx	ip

0000d8fc <am_bsp_uart_string_print>:
    d8fc:	b510      	push	{r4, lr}
    d8fe:	b086      	sub	sp, #24
    d900:	7804      	ldrb	r4, [r0, #0]
    d902:	2300      	movs	r3, #0
    d904:	9300      	str	r3, [sp, #0]
    d906:	b13c      	cbz	r4, d918 <am_bsp_uart_string_print+0x1c>
    d908:	4603      	mov	r3, r0
    d90a:	f1c0 0201 	rsb	r2, r0, #1
    d90e:	18d4      	adds	r4, r2, r3
    d910:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d914:	2900      	cmp	r1, #0
    d916:	d1fa      	bne.n	d90e <am_bsp_uart_string_print+0x12>
    d918:	4b09      	ldr	r3, [pc, #36]	; (d940 <am_bsp_uart_string_print+0x44>)
    d91a:	9002      	str	r0, [sp, #8]
    d91c:	2200      	movs	r2, #0
    d91e:	6818      	ldr	r0, [r3, #0]
    d920:	9403      	str	r4, [sp, #12]
    d922:	f04f 33ff 	mov.w	r3, #4294967295
    d926:	a901      	add	r1, sp, #4
    d928:	9304      	str	r3, [sp, #16]
    d92a:	9201      	str	r2, [sp, #4]
    d92c:	f8cd d014 	str.w	sp, [sp, #20]
    d930:	f002 f8e8 	bl	fb04 <am_hal_uart_transfer>
    d934:	9b00      	ldr	r3, [sp, #0]
    d936:	42a3      	cmp	r3, r4
    d938:	d000      	beq.n	d93c <am_bsp_uart_string_print+0x40>
    d93a:	e7fe      	b.n	d93a <am_bsp_uart_string_print+0x3e>
    d93c:	b006      	add	sp, #24
    d93e:	bd10      	pop	{r4, pc}
    d940:	10001174 	.word	0x10001174

0000d944 <am_bsp_low_power_init>:
    d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d946:	f001 fd0d 	bl	f364 <am_hal_itm_disable>
    d94a:	2000      	movs	r0, #0
    d94c:	f7ff f834 	bl	c9b8 <am_util_stdio_printf_init>
    d950:	4b12      	ldr	r3, [pc, #72]	; (d99c <am_bsp_low_power_init+0x58>)
    d952:	4f13      	ldr	r7, [pc, #76]	; (d9a0 <am_bsp_low_power_init+0x5c>)
    d954:	6819      	ldr	r1, [r3, #0]
    d956:	2021      	movs	r0, #33	; 0x21
    d958:	f000 fe3c 	bl	e5d4 <am_hal_gpio_pinconfig>
    d95c:	f001 fe44 	bl	f5e8 <am_hal_pwrctrl_low_power_init>
    d960:	2001      	movs	r0, #1
    d962:	f001 feb3 	bl	f6cc <am_hal_rtc_osc_select>
    d966:	2100      	movs	r1, #0
    d968:	2003      	movs	r0, #3
    d96a:	f000 fc51 	bl	e210 <am_hal_clkgen_control>
    d96e:	f001 feb5 	bl	f6dc <am_hal_rtc_osc_disable>
    d972:	4b0c      	ldr	r3, [pc, #48]	; (d9a4 <am_bsp_low_power_init+0x60>)
    d974:	681e      	ldr	r6, [r3, #0]
    d976:	2400      	movs	r4, #0
    d978:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d97c:	4631      	mov	r1, r6
    d97e:	4628      	mov	r0, r5
    d980:	f000 fe28 	bl	e5d4 <am_hal_gpio_pinconfig>
    d984:	2103      	movs	r1, #3
    d986:	4628      	mov	r0, r5
    d988:	f000 ff92 	bl	e8b0 <am_hal_gpio_state_write>
    d98c:	3401      	adds	r4, #1
    d98e:	4628      	mov	r0, r5
    d990:	2100      	movs	r1, #0
    d992:	f000 ff8d 	bl	e8b0 <am_hal_gpio_state_write>
    d996:	2c04      	cmp	r4, #4
    d998:	d1ee      	bne.n	d978 <am_bsp_low_power_init+0x34>
    d99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d99c:	00010664 	.word	0x00010664
    d9a0:	10001028 	.word	0x10001028
    d9a4:	00010668 	.word	0x00010668

0000d9a8 <am_bsp_debug_printf_disable>:
    d9a8:	b538      	push	{r3, r4, r5, lr}
    d9aa:	4b17      	ldr	r3, [pc, #92]	; (da08 <am_bsp_debug_printf_disable+0x60>)
    d9ac:	681c      	ldr	r4, [r3, #0]
    d9ae:	2c01      	cmp	r4, #1
    d9b0:	d002      	beq.n	d9b8 <am_bsp_debug_printf_disable+0x10>
    d9b2:	2c02      	cmp	r4, #2
    d9b4:	d00c      	beq.n	d9d0 <am_bsp_debug_printf_disable+0x28>
    d9b6:	bd38      	pop	{r3, r4, r5, pc}
    d9b8:	f001 fcd4 	bl	f364 <am_hal_itm_disable>
    d9bc:	2000      	movs	r0, #0
    d9be:	f7fe fffb 	bl	c9b8 <am_util_stdio_printf_init>
    d9c2:	4b12      	ldr	r3, [pc, #72]	; (da0c <am_bsp_debug_printf_disable+0x64>)
    d9c4:	2021      	movs	r0, #33	; 0x21
    d9c6:	6819      	ldr	r1, [r3, #0]
    d9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d9cc:	f000 be02 	b.w	e5d4 <am_hal_gpio_pinconfig>
    d9d0:	4d0f      	ldr	r5, [pc, #60]	; (da10 <am_bsp_debug_printf_disable+0x68>)
    d9d2:	6828      	ldr	r0, [r5, #0]
    d9d4:	f002 fad0 	bl	ff78 <am_hal_uart_tx_flush>
    d9d8:	2000      	movs	r0, #0
    d9da:	f7fe ffed 	bl	c9b8 <am_util_stdio_printf_init>
    d9de:	4621      	mov	r1, r4
    d9e0:	2200      	movs	r2, #0
    d9e2:	6828      	ldr	r0, [r5, #0]
    d9e4:	f001 fef8 	bl	f7d8 <am_hal_uart_power_control>
    d9e8:	6828      	ldr	r0, [r5, #0]
    d9ea:	f001 fee1 	bl	f7b0 <am_hal_uart_deinitialize>
    d9ee:	4b07      	ldr	r3, [pc, #28]	; (da0c <am_bsp_debug_printf_disable+0x64>)
    d9f0:	681c      	ldr	r4, [r3, #0]
    d9f2:	2030      	movs	r0, #48	; 0x30
    d9f4:	4621      	mov	r1, r4
    d9f6:	f000 fded 	bl	e5d4 <am_hal_gpio_pinconfig>
    d9fa:	4621      	mov	r1, r4
    d9fc:	2031      	movs	r0, #49	; 0x31
    d9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da02:	f000 bde7 	b.w	e5d4 <am_hal_gpio_pinconfig>
    da06:	bf00      	nop
    da08:	10001178 	.word	0x10001178
    da0c:	00010664 	.word	0x00010664
    da10:	10001174 	.word	0x10001174

0000da14 <am_bsp_uart_printf_enable>:
    da14:	b510      	push	{r4, lr}
    da16:	4c10      	ldr	r4, [pc, #64]	; (da58 <am_bsp_uart_printf_enable+0x44>)
    da18:	4b10      	ldr	r3, [pc, #64]	; (da5c <am_bsp_uart_printf_enable+0x48>)
    da1a:	4621      	mov	r1, r4
    da1c:	2202      	movs	r2, #2
    da1e:	2000      	movs	r0, #0
    da20:	601a      	str	r2, [r3, #0]
    da22:	f001 fe9d 	bl	f760 <am_hal_uart_initialize>
    da26:	2200      	movs	r2, #0
    da28:	4611      	mov	r1, r2
    da2a:	6820      	ldr	r0, [r4, #0]
    da2c:	f001 fed4 	bl	f7d8 <am_hal_uart_power_control>
    da30:	6820      	ldr	r0, [r4, #0]
    da32:	490b      	ldr	r1, [pc, #44]	; (da60 <am_bsp_uart_printf_enable+0x4c>)
    da34:	f001 ff42 	bl	f8bc <am_hal_uart_configure>
    da38:	4b0a      	ldr	r3, [pc, #40]	; (da64 <am_bsp_uart_printf_enable+0x50>)
    da3a:	2030      	movs	r0, #48	; 0x30
    da3c:	6819      	ldr	r1, [r3, #0]
    da3e:	f000 fdc9 	bl	e5d4 <am_hal_gpio_pinconfig>
    da42:	4b09      	ldr	r3, [pc, #36]	; (da68 <am_bsp_uart_printf_enable+0x54>)
    da44:	2031      	movs	r0, #49	; 0x31
    da46:	6819      	ldr	r1, [r3, #0]
    da48:	f000 fdc4 	bl	e5d4 <am_hal_gpio_pinconfig>
    da4c:	4807      	ldr	r0, [pc, #28]	; (da6c <am_bsp_uart_printf_enable+0x58>)
    da4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da52:	f7fe bfb1 	b.w	c9b8 <am_util_stdio_printf_init>
    da56:	bf00      	nop
    da58:	10001174 	.word	0x10001174
    da5c:	10001178 	.word	0x10001178
    da60:	000104f4 	.word	0x000104f4
    da64:	00010520 	.word	0x00010520
    da68:	0001051c 	.word	0x0001051c
    da6c:	0000d8fd 	.word	0x0000d8fd

0000da70 <am_hal_adc_initialize>:
    da70:	b108      	cbz	r0, da76 <am_hal_adc_initialize+0x6>
    da72:	2005      	movs	r0, #5
    da74:	4770      	bx	lr
    da76:	b139      	cbz	r1, da88 <am_hal_adc_initialize+0x18>
    da78:	4a1b      	ldr	r2, [pc, #108]	; (dae8 <am_hal_adc_initialize+0x78>)
    da7a:	b538      	push	{r3, r4, r5, lr}
    da7c:	78d3      	ldrb	r3, [r2, #3]
    da7e:	f013 0401 	ands.w	r4, r3, #1
    da82:	d003      	beq.n	da8c <am_hal_adc_initialize+0x1c>
    da84:	2007      	movs	r0, #7
    da86:	bd38      	pop	{r3, r4, r5, pc}
    da88:	2006      	movs	r0, #6
    da8a:	4770      	bx	lr
    da8c:	f043 0301 	orr.w	r3, r3, #1
    da90:	70d3      	strb	r3, [r2, #3]
    da92:	6813      	ldr	r3, [r2, #0]
    da94:	4d15      	ldr	r5, [pc, #84]	; (daec <am_hal_adc_initialize+0x7c>)
    da96:	4816      	ldr	r0, [pc, #88]	; (daf0 <am_hal_adc_initialize+0x80>)
    da98:	6054      	str	r4, [r2, #4]
    da9a:	f365 0317 	bfi	r3, r5, #0, #24
    da9e:	6013      	str	r3, [r2, #0]
    daa0:	6004      	str	r4, [r0, #0]
    daa2:	600a      	str	r2, [r1, #0]
    daa4:	4813      	ldr	r0, [pc, #76]	; (daf4 <am_hal_adc_initialize+0x84>)
    daa6:	4d14      	ldr	r5, [pc, #80]	; (daf8 <am_hal_adc_initialize+0x88>)
    daa8:	f000 fd8a 	bl	e5c0 <am_hal_flash_load_ui32>
    daac:	6028      	str	r0, [r5, #0]
    daae:	4813      	ldr	r0, [pc, #76]	; (dafc <am_hal_adc_initialize+0x8c>)
    dab0:	f000 fd86 	bl	e5c0 <am_hal_flash_load_ui32>
    dab4:	6068      	str	r0, [r5, #4]
    dab6:	4812      	ldr	r0, [pc, #72]	; (db00 <am_hal_adc_initialize+0x90>)
    dab8:	f000 fd82 	bl	e5c0 <am_hal_flash_load_ui32>
    dabc:	682b      	ldr	r3, [r5, #0]
    dabe:	60a8      	str	r0, [r5, #8]
    dac0:	3301      	adds	r3, #1
    dac2:	d008      	beq.n	dad6 <am_hal_adc_initialize+0x66>
    dac4:	686b      	ldr	r3, [r5, #4]
    dac6:	3301      	adds	r3, #1
    dac8:	d005      	beq.n	dad6 <am_hal_adc_initialize+0x66>
    daca:	3001      	adds	r0, #1
    dacc:	d003      	beq.n	dad6 <am_hal_adc_initialize+0x66>
    dace:	2301      	movs	r3, #1
    dad0:	732b      	strb	r3, [r5, #12]
    dad2:	4620      	mov	r0, r4
    dad4:	bd38      	pop	{r3, r4, r5, pc}
    dad6:	490b      	ldr	r1, [pc, #44]	; (db04 <am_hal_adc_initialize+0x94>)
    dad8:	4a0b      	ldr	r2, [pc, #44]	; (db08 <am_hal_adc_initialize+0x98>)
    dada:	4b0c      	ldr	r3, [pc, #48]	; (db0c <am_hal_adc_initialize+0x9c>)
    dadc:	6029      	str	r1, [r5, #0]
    dade:	2000      	movs	r0, #0
    dae0:	606a      	str	r2, [r5, #4]
    dae2:	60ab      	str	r3, [r5, #8]
    dae4:	7328      	strb	r0, [r5, #12]
    dae6:	bd38      	pop	{r3, r4, r5, pc}
    dae8:	10001728 	.word	0x10001728
    daec:	00afafaf 	.word	0x00afafaf
    daf0:	10001724 	.word	0x10001724
    daf4:	50023840 	.word	0x50023840
    daf8:	1000117c 	.word	0x1000117c
    dafc:	50023844 	.word	0x50023844
    db00:	50023848 	.word	0x50023848
    db04:	4395c000 	.word	0x4395c000
    db08:	3f839874 	.word	0x3f839874
    db0c:	bb8c47a1 	.word	0xbb8c47a1

0000db10 <am_hal_adc_deinitialize>:
    db10:	b128      	cbz	r0, db1e <am_hal_adc_deinitialize+0xe>
    db12:	6803      	ldr	r3, [r0, #0]
    db14:	4a0c      	ldr	r2, [pc, #48]	; (db48 <am_hal_adc_deinitialize+0x38>)
    db16:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db1a:	4293      	cmp	r3, r2
    db1c:	d001      	beq.n	db22 <am_hal_adc_deinitialize+0x12>
    db1e:	2002      	movs	r0, #2
    db20:	4770      	bx	lr
    db22:	78c3      	ldrb	r3, [r0, #3]
    db24:	079b      	lsls	r3, r3, #30
    db26:	d508      	bpl.n	db3a <am_hal_adc_deinitialize+0x2a>
    db28:	4b08      	ldr	r3, [pc, #32]	; (db4c <am_hal_adc_deinitialize+0x3c>)
    db2a:	681a      	ldr	r2, [r3, #0]
    db2c:	f36f 0200 	bfc	r2, #0, #1
    db30:	601a      	str	r2, [r3, #0]
    db32:	78c3      	ldrb	r3, [r0, #3]
    db34:	f36f 0341 	bfc	r3, #1, #1
    db38:	70c3      	strb	r3, [r0, #3]
    db3a:	78c3      	ldrb	r3, [r0, #3]
    db3c:	f36f 0300 	bfc	r3, #0, #1
    db40:	70c3      	strb	r3, [r0, #3]
    db42:	2000      	movs	r0, #0
    db44:	4770      	bx	lr
    db46:	bf00      	nop
    db48:	01afafaf 	.word	0x01afafaf
    db4c:	50010000 	.word	0x50010000

0000db50 <am_hal_adc_configure>:
    db50:	b128      	cbz	r0, db5e <am_hal_adc_configure+0xe>
    db52:	6803      	ldr	r3, [r0, #0]
    db54:	4a18      	ldr	r2, [pc, #96]	; (dbb8 <am_hal_adc_configure+0x68>)
    db56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db5a:	4293      	cmp	r3, r2
    db5c:	d001      	beq.n	db62 <am_hal_adc_configure+0x12>
    db5e:	2002      	movs	r0, #2
    db60:	4770      	bx	lr
    db62:	b5f0      	push	{r4, r5, r6, r7, lr}
    db64:	7808      	ldrb	r0, [r1, #0]
    db66:	784d      	ldrb	r5, [r1, #1]
    db68:	788c      	ldrb	r4, [r1, #2]
    db6a:	f891 e003 	ldrb.w	lr, [r1, #3]
    db6e:	790f      	ldrb	r7, [r1, #4]
    db70:	794a      	ldrb	r2, [r1, #5]
    db72:	798b      	ldrb	r3, [r1, #6]
    db74:	4e11      	ldr	r6, [pc, #68]	; (dbbc <am_hal_adc_configure+0x6c>)
    db76:	0600      	lsls	r0, r0, #24
    db78:	04ed      	lsls	r5, r5, #19
    db7a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    db7e:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    db82:	4328      	orrs	r0, r5
    db84:	0424      	lsls	r4, r4, #16
    db86:	ea4f 210e 	mov.w	r1, lr, lsl #8
    db8a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    db8e:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    db92:	4304      	orrs	r4, r0
    db94:	f401 7040 	and.w	r0, r1, #768	; 0x300
    db98:	0139      	lsls	r1, r7, #4
    db9a:	4320      	orrs	r0, r4
    db9c:	f001 0110 	and.w	r1, r1, #16
    dba0:	00d2      	lsls	r2, r2, #3
    dba2:	4301      	orrs	r1, r0
    dba4:	f002 0208 	and.w	r2, r2, #8
    dba8:	009b      	lsls	r3, r3, #2
    dbaa:	430a      	orrs	r2, r1
    dbac:	f003 0304 	and.w	r3, r3, #4
    dbb0:	4313      	orrs	r3, r2
    dbb2:	6033      	str	r3, [r6, #0]
    dbb4:	2000      	movs	r0, #0
    dbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbb8:	01afafaf 	.word	0x01afafaf
    dbbc:	50010000 	.word	0x50010000

0000dbc0 <am_hal_adc_configure_slot>:
    dbc0:	b128      	cbz	r0, dbce <am_hal_adc_configure_slot+0xe>
    dbc2:	6803      	ldr	r3, [r0, #0]
    dbc4:	4816      	ldr	r0, [pc, #88]	; (dc20 <am_hal_adc_configure_slot+0x60>)
    dbc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dbca:	4283      	cmp	r3, r0
    dbcc:	d001      	beq.n	dbd2 <am_hal_adc_configure_slot+0x12>
    dbce:	2002      	movs	r0, #2
    dbd0:	4770      	bx	lr
    dbd2:	2907      	cmp	r1, #7
    dbd4:	d901      	bls.n	dbda <am_hal_adc_configure_slot+0x1a>
    dbd6:	2005      	movs	r0, #5
    dbd8:	4770      	bx	lr
    dbda:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbdc:	7813      	ldrb	r3, [r2, #0]
    dbde:	7854      	ldrb	r4, [r2, #1]
    dbe0:	7890      	ldrb	r0, [r2, #2]
    dbe2:	78d7      	ldrb	r7, [r2, #3]
    dbe4:	f892 e004 	ldrb.w	lr, [r2, #4]
    dbe8:	4d0e      	ldr	r5, [pc, #56]	; (dc24 <am_hal_adc_configure_slot+0x64>)
    dbea:	4e0f      	ldr	r6, [pc, #60]	; (dc28 <am_hal_adc_configure_slot+0x68>)
    dbec:	061b      	lsls	r3, r3, #24
    dbee:	0424      	lsls	r4, r4, #16
    dbf0:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    dbf4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    dbf8:	4323      	orrs	r3, r4
    dbfa:	0202      	lsls	r2, r0, #8
    dbfc:	ea43 0e0e 	orr.w	lr, r3, lr
    dc00:	440d      	add	r5, r1
    dc02:	007b      	lsls	r3, r7, #1
    dc04:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    dc08:	ea4e 0202 	orr.w	r2, lr, r2
    dc0c:	00ad      	lsls	r5, r5, #2
    dc0e:	f003 0302 	and.w	r3, r3, #2
    dc12:	4313      	orrs	r3, r2
    dc14:	602b      	str	r3, [r5, #0]
    dc16:	6833      	ldr	r3, [r6, #0]
    dc18:	3301      	adds	r3, #1
    dc1a:	6033      	str	r3, [r6, #0]
    dc1c:	2000      	movs	r0, #0
    dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc20:	01afafaf 	.word	0x01afafaf
    dc24:	14004003 	.word	0x14004003
    dc28:	10001724 	.word	0x10001724

0000dc2c <am_hal_adc_enable>:
    dc2c:	4603      	mov	r3, r0
    dc2e:	b128      	cbz	r0, dc3c <am_hal_adc_enable+0x10>
    dc30:	6802      	ldr	r2, [r0, #0]
    dc32:	490c      	ldr	r1, [pc, #48]	; (dc64 <am_hal_adc_enable+0x38>)
    dc34:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dc38:	428a      	cmp	r2, r1
    dc3a:	d001      	beq.n	dc40 <am_hal_adc_enable+0x14>
    dc3c:	2002      	movs	r0, #2
    dc3e:	4770      	bx	lr
    dc40:	78c2      	ldrb	r2, [r0, #3]
    dc42:	f002 0202 	and.w	r2, r2, #2
    dc46:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    dc4a:	b94a      	cbnz	r2, dc60 <am_hal_adc_enable+0x34>
    dc4c:	4906      	ldr	r1, [pc, #24]	; (dc68 <am_hal_adc_enable+0x3c>)
    dc4e:	680a      	ldr	r2, [r1, #0]
    dc50:	f042 0201 	orr.w	r2, r2, #1
    dc54:	600a      	str	r2, [r1, #0]
    dc56:	78da      	ldrb	r2, [r3, #3]
    dc58:	f042 0202 	orr.w	r2, r2, #2
    dc5c:	70da      	strb	r2, [r3, #3]
    dc5e:	4770      	bx	lr
    dc60:	2000      	movs	r0, #0
    dc62:	4770      	bx	lr
    dc64:	01afafaf 	.word	0x01afafaf
    dc68:	50010000 	.word	0x50010000

0000dc6c <am_hal_adc_disable>:
    dc6c:	b128      	cbz	r0, dc7a <am_hal_adc_disable+0xe>
    dc6e:	6803      	ldr	r3, [r0, #0]
    dc70:	4a08      	ldr	r2, [pc, #32]	; (dc94 <am_hal_adc_disable+0x28>)
    dc72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc76:	4293      	cmp	r3, r2
    dc78:	d001      	beq.n	dc7e <am_hal_adc_disable+0x12>
    dc7a:	2002      	movs	r0, #2
    dc7c:	4770      	bx	lr
    dc7e:	4b06      	ldr	r3, [pc, #24]	; (dc98 <am_hal_adc_disable+0x2c>)
    dc80:	681a      	ldr	r2, [r3, #0]
    dc82:	f36f 0200 	bfc	r2, #0, #1
    dc86:	601a      	str	r2, [r3, #0]
    dc88:	78c3      	ldrb	r3, [r0, #3]
    dc8a:	f36f 0341 	bfc	r3, #1, #1
    dc8e:	70c3      	strb	r3, [r0, #3]
    dc90:	2000      	movs	r0, #0
    dc92:	4770      	bx	lr
    dc94:	01afafaf 	.word	0x01afafaf
    dc98:	50010000 	.word	0x50010000

0000dc9c <am_hal_adc_interrupt_enable>:
    dc9c:	b128      	cbz	r0, dcaa <am_hal_adc_interrupt_enable+0xe>
    dc9e:	6803      	ldr	r3, [r0, #0]
    dca0:	4a07      	ldr	r2, [pc, #28]	; (dcc0 <am_hal_adc_interrupt_enable+0x24>)
    dca2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dca6:	4293      	cmp	r3, r2
    dca8:	d001      	beq.n	dcae <am_hal_adc_interrupt_enable+0x12>
    dcaa:	2002      	movs	r0, #2
    dcac:	4770      	bx	lr
    dcae:	4b05      	ldr	r3, [pc, #20]	; (dcc4 <am_hal_adc_interrupt_enable+0x28>)
    dcb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dcb4:	4311      	orrs	r1, r2
    dcb6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dcba:	2000      	movs	r0, #0
    dcbc:	4770      	bx	lr
    dcbe:	bf00      	nop
    dcc0:	01afafaf 	.word	0x01afafaf
    dcc4:	50010000 	.word	0x50010000

0000dcc8 <am_hal_adc_interrupt_status>:
    dcc8:	b128      	cbz	r0, dcd6 <am_hal_adc_interrupt_status+0xe>
    dcca:	6803      	ldr	r3, [r0, #0]
    dccc:	480b      	ldr	r0, [pc, #44]	; (dcfc <am_hal_adc_interrupt_status+0x34>)
    dcce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcd2:	4283      	cmp	r3, r0
    dcd4:	d001      	beq.n	dcda <am_hal_adc_interrupt_status+0x12>
    dcd6:	2002      	movs	r0, #2
    dcd8:	4770      	bx	lr
    dcda:	b92a      	cbnz	r2, dce8 <am_hal_adc_interrupt_status+0x20>
    dcdc:	4b08      	ldr	r3, [pc, #32]	; (dd00 <am_hal_adc_interrupt_status+0x38>)
    dcde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    dce2:	600b      	str	r3, [r1, #0]
    dce4:	4610      	mov	r0, r2
    dce6:	4770      	bx	lr
    dce8:	4a05      	ldr	r2, [pc, #20]	; (dd00 <am_hal_adc_interrupt_status+0x38>)
    dcea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    dcee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dcf2:	4003      	ands	r3, r0
    dcf4:	600b      	str	r3, [r1, #0]
    dcf6:	2000      	movs	r0, #0
    dcf8:	4770      	bx	lr
    dcfa:	bf00      	nop
    dcfc:	01afafaf 	.word	0x01afafaf
    dd00:	50010000 	.word	0x50010000

0000dd04 <am_hal_adc_interrupt_clear>:
    dd04:	b128      	cbz	r0, dd12 <am_hal_adc_interrupt_clear+0xe>
    dd06:	6803      	ldr	r3, [r0, #0]
    dd08:	4a05      	ldr	r2, [pc, #20]	; (dd20 <am_hal_adc_interrupt_clear+0x1c>)
    dd0a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd0e:	4293      	cmp	r3, r2
    dd10:	d001      	beq.n	dd16 <am_hal_adc_interrupt_clear+0x12>
    dd12:	2002      	movs	r0, #2
    dd14:	4770      	bx	lr
    dd16:	4b03      	ldr	r3, [pc, #12]	; (dd24 <am_hal_adc_interrupt_clear+0x20>)
    dd18:	2000      	movs	r0, #0
    dd1a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    dd1e:	4770      	bx	lr
    dd20:	01afafaf 	.word	0x01afafaf
    dd24:	50010000 	.word	0x50010000

0000dd28 <am_hal_adc_samples_read>:
    dd28:	b148      	cbz	r0, dd3e <am_hal_adc_samples_read+0x16>
    dd2a:	6800      	ldr	r0, [r0, #0]
    dd2c:	b470      	push	{r4, r5, r6}
    dd2e:	4c2a      	ldr	r4, [pc, #168]	; (ddd8 <am_hal_adc_samples_read+0xb0>)
    dd30:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    dd34:	42a0      	cmp	r0, r4
    dd36:	d004      	beq.n	dd42 <am_hal_adc_samples_read+0x1a>
    dd38:	2002      	movs	r0, #2
    dd3a:	bc70      	pop	{r4, r5, r6}
    dd3c:	4770      	bx	lr
    dd3e:	2002      	movs	r0, #2
    dd40:	4770      	bx	lr
    dd42:	9803      	ldr	r0, [sp, #12]
    dd44:	b1e0      	cbz	r0, dd80 <am_hal_adc_samples_read+0x58>
    dd46:	2000      	movs	r0, #0
    dd48:	681c      	ldr	r4, [r3, #0]
    dd4a:	6018      	str	r0, [r3, #0]
    dd4c:	b1d2      	cbz	r2, dd84 <am_hal_adc_samples_read+0x5c>
    dd4e:	9903      	ldr	r1, [sp, #12]
    dd50:	4d22      	ldr	r5, [pc, #136]	; (dddc <am_hal_adc_samples_read+0xb4>)
    dd52:	3a04      	subs	r2, #4
    dd54:	3108      	adds	r1, #8
    dd56:	f852 0f04 	ldr.w	r0, [r2, #4]!
    dd5a:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    dd5c:	f3c0 7002 	ubfx	r0, r0, #28, #3
    dd60:	f841 0c04 	str.w	r0, [r1, #-4]
    dd64:	6810      	ldr	r0, [r2, #0]
    dd66:	f3c0 108d 	ubfx	r0, r0, #6, #14
    dd6a:	f841 0c08 	str.w	r0, [r1, #-8]
    dd6e:	6818      	ldr	r0, [r3, #0]
    dd70:	3001      	adds	r0, #1
    dd72:	4284      	cmp	r4, r0
    dd74:	f101 0108 	add.w	r1, r1, #8
    dd78:	6018      	str	r0, [r3, #0]
    dd7a:	d8ec      	bhi.n	dd56 <am_hal_adc_samples_read+0x2e>
    dd7c:	2000      	movs	r0, #0
    dd7e:	e7dc      	b.n	dd3a <am_hal_adc_samples_read+0x12>
    dd80:	2006      	movs	r0, #6
    dd82:	e7da      	b.n	dd3a <am_hal_adc_samples_read+0x12>
    dd84:	9a03      	ldr	r2, [sp, #12]
    dd86:	4e15      	ldr	r6, [pc, #84]	; (dddc <am_hal_adc_samples_read+0xb4>)
    dd88:	f102 0008 	add.w	r0, r2, #8
    dd8c:	b9a1      	cbnz	r1, ddb8 <am_hal_adc_samples_read+0x90>
    dd8e:	e001      	b.n	dd94 <am_hal_adc_samples_read+0x6c>
    dd90:	428c      	cmp	r4, r1
    dd92:	d9f3      	bls.n	dd7c <am_hal_adc_samples_read+0x54>
    dd94:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    dd96:	f3c2 118d 	ubfx	r1, r2, #6, #14
    dd9a:	f3c2 7502 	ubfx	r5, r2, #28, #3
    dd9e:	e900 0022 	stmdb	r0, {r1, r5}
    dda2:	6819      	ldr	r1, [r3, #0]
    dda4:	f3c2 5207 	ubfx	r2, r2, #20, #8
    dda8:	3101      	adds	r1, #1
    ddaa:	3008      	adds	r0, #8
    ddac:	6019      	str	r1, [r3, #0]
    ddae:	2a00      	cmp	r2, #0
    ddb0:	d1ee      	bne.n	dd90 <am_hal_adc_samples_read+0x68>
    ddb2:	e7e3      	b.n	dd7c <am_hal_adc_samples_read+0x54>
    ddb4:	428c      	cmp	r4, r1
    ddb6:	d9e1      	bls.n	dd7c <am_hal_adc_samples_read+0x54>
    ddb8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    ddba:	f3c2 0113 	ubfx	r1, r2, #0, #20
    ddbe:	f3c2 7502 	ubfx	r5, r2, #28, #3
    ddc2:	e900 0022 	stmdb	r0, {r1, r5}
    ddc6:	6819      	ldr	r1, [r3, #0]
    ddc8:	f3c2 5207 	ubfx	r2, r2, #20, #8
    ddcc:	3101      	adds	r1, #1
    ddce:	3008      	adds	r0, #8
    ddd0:	6019      	str	r1, [r3, #0]
    ddd2:	2a00      	cmp	r2, #0
    ddd4:	d1ee      	bne.n	ddb4 <am_hal_adc_samples_read+0x8c>
    ddd6:	e7d1      	b.n	dd7c <am_hal_adc_samples_read+0x54>
    ddd8:	01afafaf 	.word	0x01afafaf
    dddc:	50010000 	.word	0x50010000

0000dde0 <am_hal_adc_sw_trigger>:
    dde0:	b128      	cbz	r0, ddee <am_hal_adc_sw_trigger+0xe>
    dde2:	6803      	ldr	r3, [r0, #0]
    dde4:	4a05      	ldr	r2, [pc, #20]	; (ddfc <am_hal_adc_sw_trigger+0x1c>)
    dde6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ddea:	4293      	cmp	r3, r2
    ddec:	d001      	beq.n	ddf2 <am_hal_adc_sw_trigger+0x12>
    ddee:	2002      	movs	r0, #2
    ddf0:	4770      	bx	lr
    ddf2:	4b03      	ldr	r3, [pc, #12]	; (de00 <am_hal_adc_sw_trigger+0x20>)
    ddf4:	2237      	movs	r2, #55	; 0x37
    ddf6:	609a      	str	r2, [r3, #8]
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr
    ddfc:	01afafaf 	.word	0x01afafaf
    de00:	50010000 	.word	0x50010000

0000de04 <am_hal_adc_power_control>:
    de04:	b140      	cbz	r0, de18 <am_hal_adc_power_control+0x14>
    de06:	6803      	ldr	r3, [r0, #0]
    de08:	b570      	push	{r4, r5, r6, lr}
    de0a:	4c2e      	ldr	r4, [pc, #184]	; (dec4 <am_hal_adc_power_control+0xc0>)
    de0c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de10:	42a3      	cmp	r3, r4
    de12:	d003      	beq.n	de1c <am_hal_adc_power_control+0x18>
    de14:	2002      	movs	r0, #2
    de16:	bd70      	pop	{r4, r5, r6, pc}
    de18:	2002      	movs	r0, #2
    de1a:	4770      	bx	lr
    de1c:	4604      	mov	r4, r0
    de1e:	4615      	mov	r5, r2
    de20:	460e      	mov	r6, r1
    de22:	b329      	cbz	r1, de70 <am_hal_adc_power_control+0x6c>
    de24:	2902      	cmp	r1, #2
    de26:	d821      	bhi.n	de6c <am_hal_adc_power_control+0x68>
    de28:	b1da      	cbz	r2, de62 <am_hal_adc_power_control+0x5e>
    de2a:	4b27      	ldr	r3, [pc, #156]	; (dec8 <am_hal_adc_power_control+0xc4>)
    de2c:	68da      	ldr	r2, [r3, #12]
    de2e:	6142      	str	r2, [r0, #20]
    de30:	691a      	ldr	r2, [r3, #16]
    de32:	6182      	str	r2, [r0, #24]
    de34:	695a      	ldr	r2, [r3, #20]
    de36:	61c2      	str	r2, [r0, #28]
    de38:	699a      	ldr	r2, [r3, #24]
    de3a:	6202      	str	r2, [r0, #32]
    de3c:	69da      	ldr	r2, [r3, #28]
    de3e:	6242      	str	r2, [r0, #36]	; 0x24
    de40:	6a1a      	ldr	r2, [r3, #32]
    de42:	6282      	str	r2, [r0, #40]	; 0x28
    de44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    de46:	62c2      	str	r2, [r0, #44]	; 0x2c
    de48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de4a:	6302      	str	r2, [r0, #48]	; 0x30
    de4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    de4e:	6342      	str	r2, [r0, #52]	; 0x34
    de50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    de52:	6382      	str	r2, [r0, #56]	; 0x38
    de54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    de58:	63c2      	str	r2, [r0, #60]	; 0x3c
    de5a:	681b      	ldr	r3, [r3, #0]
    de5c:	6103      	str	r3, [r0, #16]
    de5e:	2301      	movs	r3, #1
    de60:	7303      	strb	r3, [r0, #12]
    de62:	200a      	movs	r0, #10
    de64:	f001 fb94 	bl	f590 <am_hal_pwrctrl_periph_disable>
    de68:	2000      	movs	r0, #0
    de6a:	bd70      	pop	{r4, r5, r6, pc}
    de6c:	2006      	movs	r0, #6
    de6e:	bd70      	pop	{r4, r5, r6, pc}
    de70:	b11a      	cbz	r2, de7a <am_hal_adc_power_control+0x76>
    de72:	7b03      	ldrb	r3, [r0, #12]
    de74:	b933      	cbnz	r3, de84 <am_hal_adc_power_control+0x80>
    de76:	2007      	movs	r0, #7
    de78:	bd70      	pop	{r4, r5, r6, pc}
    de7a:	200a      	movs	r0, #10
    de7c:	f001 fb5e 	bl	f53c <am_hal_pwrctrl_periph_enable>
    de80:	4628      	mov	r0, r5
    de82:	bd70      	pop	{r4, r5, r6, pc}
    de84:	200a      	movs	r0, #10
    de86:	f001 fb59 	bl	f53c <am_hal_pwrctrl_periph_enable>
    de8a:	4b0f      	ldr	r3, [pc, #60]	; (dec8 <am_hal_adc_power_control+0xc4>)
    de8c:	6962      	ldr	r2, [r4, #20]
    de8e:	60da      	str	r2, [r3, #12]
    de90:	69a2      	ldr	r2, [r4, #24]
    de92:	611a      	str	r2, [r3, #16]
    de94:	69e2      	ldr	r2, [r4, #28]
    de96:	615a      	str	r2, [r3, #20]
    de98:	6a22      	ldr	r2, [r4, #32]
    de9a:	619a      	str	r2, [r3, #24]
    de9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    de9e:	61da      	str	r2, [r3, #28]
    dea0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dea2:	621a      	str	r2, [r3, #32]
    dea4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    dea6:	625a      	str	r2, [r3, #36]	; 0x24
    dea8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    deaa:	629a      	str	r2, [r3, #40]	; 0x28
    deac:	6b62      	ldr	r2, [r4, #52]	; 0x34
    deae:	62da      	str	r2, [r3, #44]	; 0x2c
    deb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    deb2:	631a      	str	r2, [r3, #48]	; 0x30
    deb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    deb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    deba:	6922      	ldr	r2, [r4, #16]
    debc:	601a      	str	r2, [r3, #0]
    debe:	4630      	mov	r0, r6
    dec0:	7326      	strb	r6, [r4, #12]
    dec2:	bd70      	pop	{r4, r5, r6, pc}
    dec4:	01afafaf 	.word	0x01afafaf
    dec8:	50010000 	.word	0x50010000

0000decc <am_hal_cachectrl_config>:
    decc:	b530      	push	{r4, r5, lr}
    dece:	b083      	sub	sp, #12
    ded0:	4605      	mov	r5, r0
    ded2:	f000 fd35 	bl	e940 <am_hal_interrupt_master_disable>
    ded6:	4c0f      	ldr	r4, [pc, #60]	; (df14 <am_hal_cachectrl_config+0x48>)
    ded8:	9001      	str	r0, [sp, #4]
    deda:	6823      	ldr	r3, [r4, #0]
    dedc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    dee0:	6023      	str	r3, [r4, #0]
    dee2:	9801      	ldr	r0, [sp, #4]
    dee4:	f000 fd30 	bl	e948 <am_hal_interrupt_master_set>
    dee8:	78ab      	ldrb	r3, [r5, #2]
    deea:	782a      	ldrb	r2, [r5, #0]
    deec:	7869      	ldrb	r1, [r5, #1]
    deee:	005b      	lsls	r3, r3, #1
    def0:	0112      	lsls	r2, r2, #4
    def2:	b2d2      	uxtb	r2, r2
    def4:	f003 0302 	and.w	r3, r3, #2
    def8:	4313      	orrs	r3, r2
    defa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    defe:	020a      	lsls	r2, r1, #8
    df00:	f402 7240 	and.w	r2, r2, #768	; 0x300
    df04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    df08:	4313      	orrs	r3, r2
    df0a:	2000      	movs	r0, #0
    df0c:	6023      	str	r3, [r4, #0]
    df0e:	b003      	add	sp, #12
    df10:	bd30      	pop	{r4, r5, pc}
    df12:	bf00      	nop
    df14:	40018000 	.word	0x40018000

0000df18 <am_hal_cachectrl_enable>:
    df18:	4a03      	ldr	r2, [pc, #12]	; (df28 <am_hal_cachectrl_enable+0x10>)
    df1a:	6813      	ldr	r3, [r2, #0]
    df1c:	f043 0301 	orr.w	r3, r3, #1
    df20:	6013      	str	r3, [r2, #0]
    df22:	2000      	movs	r0, #0
    df24:	4770      	bx	lr
    df26:	bf00      	nop
    df28:	40018000 	.word	0x40018000

0000df2c <am_hal_cachectrl_control>:
    df2c:	b510      	push	{r4, lr}
    df2e:	3801      	subs	r0, #1
    df30:	b08e      	sub	sp, #56	; 0x38
    df32:	2810      	cmp	r0, #16
    df34:	f200 8143 	bhi.w	e1be <am_hal_cachectrl_control+0x292>
    df38:	e8df f010 	tbh	[pc, r0, lsl #1]
    df3c:	01380136 	.word	0x01380136
    df40:	0011013e 	.word	0x0011013e
    df44:	001a0018 	.word	0x001a0018
    df48:	001f001c 	.word	0x001f001c
    df4c:	00300022 	.word	0x00300022
    df50:	0074003c 	.word	0x0074003c
    df54:	00e400ac 	.word	0x00e400ac
    df58:	011a00ff 	.word	0x011a00ff
    df5c:	0120      	.short	0x0120
    df5e:	f44f 7208 	mov.w	r2, #544	; 0x220
    df62:	4ba8      	ldr	r3, [pc, #672]	; (e204 <am_hal_cachectrl_control+0x2d8>)
    df64:	2000      	movs	r0, #0
    df66:	609a      	str	r2, [r3, #8]
    df68:	b00e      	add	sp, #56	; 0x38
    df6a:	bd10      	pop	{r4, pc}
    df6c:	2240      	movs	r2, #64	; 0x40
    df6e:	e7f8      	b.n	df62 <am_hal_cachectrl_control+0x36>
    df70:	2220      	movs	r2, #32
    df72:	e7f6      	b.n	df62 <am_hal_cachectrl_control+0x36>
    df74:	f44f 6280 	mov.w	r2, #1024	; 0x400
    df78:	e7f3      	b.n	df62 <am_hal_cachectrl_control+0x36>
    df7a:	f44f 7200 	mov.w	r2, #512	; 0x200
    df7e:	e7f0      	b.n	df62 <am_hal_cachectrl_control+0x36>
    df80:	f000 fcde 	bl	e940 <am_hal_interrupt_master_disable>
    df84:	4a9f      	ldr	r2, [pc, #636]	; (e204 <am_hal_cachectrl_control+0x2d8>)
    df86:	9000      	str	r0, [sp, #0]
    df88:	6813      	ldr	r3, [r2, #0]
    df8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    df8e:	6013      	str	r3, [r2, #0]
    df90:	9800      	ldr	r0, [sp, #0]
    df92:	f000 fcd9 	bl	e948 <am_hal_interrupt_master_set>
    df96:	2000      	movs	r0, #0
    df98:	b00e      	add	sp, #56	; 0x38
    df9a:	bd10      	pop	{r4, pc}
    df9c:	f000 fcd0 	bl	e940 <am_hal_interrupt_master_disable>
    dfa0:	4a98      	ldr	r2, [pc, #608]	; (e204 <am_hal_cachectrl_control+0x2d8>)
    dfa2:	9001      	str	r0, [sp, #4]
    dfa4:	6813      	ldr	r3, [r2, #0]
    dfa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    dfaa:	6013      	str	r3, [r2, #0]
    dfac:	9801      	ldr	r0, [sp, #4]
    dfae:	f000 fccb 	bl	e948 <am_hal_interrupt_master_set>
    dfb2:	e7f0      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    dfb4:	f000 fcc4 	bl	e940 <am_hal_interrupt_master_disable>
    dfb8:	4603      	mov	r3, r0
    dfba:	4893      	ldr	r0, [pc, #588]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    dfbc:	9302      	str	r3, [sp, #8]
    dfbe:	f000 faff 	bl	e5c0 <am_hal_flash_load_ui32>
    dfc2:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    dfc6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dfca:	488f      	ldr	r0, [pc, #572]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    dfcc:	f000 fafc 	bl	e5c8 <am_hal_flash_store_ui32>
    dfd0:	9802      	ldr	r0, [sp, #8]
    dfd2:	f000 fcb9 	bl	e948 <am_hal_interrupt_master_set>
    dfd6:	f000 fcb3 	bl	e940 <am_hal_interrupt_master_disable>
    dfda:	4603      	mov	r3, r0
    dfdc:	488a      	ldr	r0, [pc, #552]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    dfde:	9303      	str	r3, [sp, #12]
    dfe0:	f000 faee 	bl	e5c0 <am_hal_flash_load_ui32>
    dfe4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    dfe8:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    dfec:	4886      	ldr	r0, [pc, #536]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    dfee:	f000 faeb 	bl	e5c8 <am_hal_flash_store_ui32>
    dff2:	9803      	ldr	r0, [sp, #12]
    dff4:	f000 fca8 	bl	e948 <am_hal_interrupt_master_set>
    dff8:	f000 fca2 	bl	e940 <am_hal_interrupt_master_disable>
    dffc:	4603      	mov	r3, r0
    dffe:	4882      	ldr	r0, [pc, #520]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e000:	9304      	str	r3, [sp, #16]
    e002:	f000 fadd 	bl	e5c0 <am_hal_flash_load_ui32>
    e006:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e00a:	f021 010f 	bic.w	r1, r1, #15
    e00e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e012:	f041 0103 	orr.w	r1, r1, #3
    e016:	487c      	ldr	r0, [pc, #496]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e018:	f000 fad6 	bl	e5c8 <am_hal_flash_store_ui32>
    e01c:	9804      	ldr	r0, [sp, #16]
    e01e:	f000 fc93 	bl	e948 <am_hal_interrupt_master_set>
    e022:	e7b8      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    e024:	f000 fc8c 	bl	e940 <am_hal_interrupt_master_disable>
    e028:	4603      	mov	r3, r0
    e02a:	4877      	ldr	r0, [pc, #476]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e02c:	9305      	str	r3, [sp, #20]
    e02e:	f000 fac7 	bl	e5c0 <am_hal_flash_load_ui32>
    e032:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e036:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e03a:	4873      	ldr	r0, [pc, #460]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e03c:	f000 fac4 	bl	e5c8 <am_hal_flash_store_ui32>
    e040:	9805      	ldr	r0, [sp, #20]
    e042:	f000 fc81 	bl	e948 <am_hal_interrupt_master_set>
    e046:	f000 fc7b 	bl	e940 <am_hal_interrupt_master_disable>
    e04a:	4603      	mov	r3, r0
    e04c:	486e      	ldr	r0, [pc, #440]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e04e:	9306      	str	r3, [sp, #24]
    e050:	f000 fab6 	bl	e5c0 <am_hal_flash_load_ui32>
    e054:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e058:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    e05c:	486a      	ldr	r0, [pc, #424]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e05e:	f000 fab3 	bl	e5c8 <am_hal_flash_store_ui32>
    e062:	9806      	ldr	r0, [sp, #24]
    e064:	f000 fc70 	bl	e948 <am_hal_interrupt_master_set>
    e068:	f000 fc6a 	bl	e940 <am_hal_interrupt_master_disable>
    e06c:	4603      	mov	r3, r0
    e06e:	4866      	ldr	r0, [pc, #408]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e070:	9307      	str	r3, [sp, #28]
    e072:	f000 faa5 	bl	e5c0 <am_hal_flash_load_ui32>
    e076:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e07a:	f021 010f 	bic.w	r1, r1, #15
    e07e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e082:	f041 0101 	orr.w	r1, r1, #1
    e086:	4860      	ldr	r0, [pc, #384]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e088:	f000 fa9e 	bl	e5c8 <am_hal_flash_store_ui32>
    e08c:	9807      	ldr	r0, [sp, #28]
    e08e:	f000 fc5b 	bl	e948 <am_hal_interrupt_master_set>
    e092:	e780      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    e094:	f000 fc54 	bl	e940 <am_hal_interrupt_master_disable>
    e098:	4603      	mov	r3, r0
    e09a:	485b      	ldr	r0, [pc, #364]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e09c:	9308      	str	r3, [sp, #32]
    e09e:	f000 fa8f 	bl	e5c0 <am_hal_flash_load_ui32>
    e0a2:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e0a6:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e0aa:	4857      	ldr	r0, [pc, #348]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e0ac:	f000 fa8c 	bl	e5c8 <am_hal_flash_store_ui32>
    e0b0:	9808      	ldr	r0, [sp, #32]
    e0b2:	f000 fc49 	bl	e948 <am_hal_interrupt_master_set>
    e0b6:	f000 fc43 	bl	e940 <am_hal_interrupt_master_disable>
    e0ba:	4603      	mov	r3, r0
    e0bc:	4852      	ldr	r0, [pc, #328]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e0be:	9309      	str	r3, [sp, #36]	; 0x24
    e0c0:	f000 fa7e 	bl	e5c0 <am_hal_flash_load_ui32>
    e0c4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e0c8:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    e0cc:	484e      	ldr	r0, [pc, #312]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e0ce:	f000 fa7b 	bl	e5c8 <am_hal_flash_store_ui32>
    e0d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    e0d4:	f000 fc38 	bl	e948 <am_hal_interrupt_master_set>
    e0d8:	f000 fc32 	bl	e940 <am_hal_interrupt_master_disable>
    e0dc:	4603      	mov	r3, r0
    e0de:	484a      	ldr	r0, [pc, #296]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e0e0:	930a      	str	r3, [sp, #40]	; 0x28
    e0e2:	f000 fa6d 	bl	e5c0 <am_hal_flash_load_ui32>
    e0e6:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e0ea:	f021 010f 	bic.w	r1, r1, #15
    e0ee:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e0f2:	f041 0101 	orr.w	r1, r1, #1
    e0f6:	4844      	ldr	r0, [pc, #272]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e0f8:	f000 fa66 	bl	e5c8 <am_hal_flash_store_ui32>
    e0fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    e0fe:	f000 fc23 	bl	e948 <am_hal_interrupt_master_set>
    e102:	e748      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    e104:	2900      	cmp	r1, #0
    e106:	d05a      	beq.n	e1be <am_hal_cachectrl_control+0x292>
    e108:	680c      	ldr	r4, [r1, #0]
    e10a:	2c03      	cmp	r4, #3
    e10c:	d834      	bhi.n	e178 <am_hal_cachectrl_control+0x24c>
    e10e:	f000 fc17 	bl	e940 <am_hal_interrupt_master_disable>
    e112:	4603      	mov	r3, r0
    e114:	483c      	ldr	r0, [pc, #240]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e116:	930b      	str	r3, [sp, #44]	; 0x2c
    e118:	f000 fa52 	bl	e5c0 <am_hal_flash_load_ui32>
    e11c:	0323      	lsls	r3, r4, #12
    e11e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    e122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e126:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e12a:	4319      	orrs	r1, r3
    e12c:	4836      	ldr	r0, [pc, #216]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e12e:	f000 fa4b 	bl	e5c8 <am_hal_flash_store_ui32>
    e132:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e134:	f000 fc08 	bl	e948 <am_hal_interrupt_master_set>
    e138:	e72d      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    e13a:	2900      	cmp	r1, #0
    e13c:	d03f      	beq.n	e1be <am_hal_cachectrl_control+0x292>
    e13e:	680c      	ldr	r4, [r1, #0]
    e140:	2c07      	cmp	r4, #7
    e142:	d819      	bhi.n	e178 <am_hal_cachectrl_control+0x24c>
    e144:	f000 fbfc 	bl	e940 <am_hal_interrupt_master_disable>
    e148:	4603      	mov	r3, r0
    e14a:	482f      	ldr	r0, [pc, #188]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e14c:	930c      	str	r3, [sp, #48]	; 0x30
    e14e:	f000 fa37 	bl	e5c0 <am_hal_flash_load_ui32>
    e152:	0123      	lsls	r3, r4, #4
    e154:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e158:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e15c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e160:	4319      	orrs	r1, r3
    e162:	4829      	ldr	r0, [pc, #164]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e164:	f000 fa30 	bl	e5c8 <am_hal_flash_store_ui32>
    e168:	980c      	ldr	r0, [sp, #48]	; 0x30
    e16a:	f000 fbed 	bl	e948 <am_hal_interrupt_master_set>
    e16e:	e712      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    e170:	b329      	cbz	r1, e1be <am_hal_cachectrl_control+0x292>
    e172:	680c      	ldr	r4, [r1, #0]
    e174:	2c0f      	cmp	r4, #15
    e176:	d926      	bls.n	e1c6 <am_hal_cachectrl_control+0x29a>
    e178:	2001      	movs	r0, #1
    e17a:	e6f5      	b.n	df68 <am_hal_cachectrl_control+0x3c>
    e17c:	b1f9      	cbz	r1, e1be <am_hal_cachectrl_control+0x292>
    e17e:	684a      	ldr	r2, [r1, #4]
    e180:	4b22      	ldr	r3, [pc, #136]	; (e20c <am_hal_cachectrl_control+0x2e0>)
    e182:	4013      	ands	r3, r2
    e184:	b9db      	cbnz	r3, e1be <am_hal_cachectrl_control+0x292>
    e186:	688b      	ldr	r3, [r1, #8]
    e188:	4820      	ldr	r0, [pc, #128]	; (e20c <am_hal_cachectrl_control+0x2e0>)
    e18a:	4018      	ands	r0, r3
    e18c:	b9b8      	cbnz	r0, e1be <am_hal_cachectrl_control+0x292>
    e18e:	780c      	ldrb	r4, [r1, #0]
    e190:	b374      	cbz	r4, e1f0 <am_hal_cachectrl_control+0x2c4>
    e192:	2c01      	cmp	r4, #1
    e194:	d113      	bne.n	e1be <am_hal_cachectrl_control+0x292>
    e196:	4c1b      	ldr	r4, [pc, #108]	; (e204 <am_hal_cachectrl_control+0x2d8>)
    e198:	61a2      	str	r2, [r4, #24]
    e19a:	61e3      	str	r3, [r4, #28]
    e19c:	784a      	ldrb	r2, [r1, #1]
    e19e:	6823      	ldr	r3, [r4, #0]
    e1a0:	f362 03c3 	bfi	r3, r2, #3, #1
    e1a4:	6023      	str	r3, [r4, #0]
    e1a6:	e6df      	b.n	df68 <am_hal_cachectrl_control+0x3c>
    e1a8:	2201      	movs	r2, #1
    e1aa:	e6da      	b.n	df62 <am_hal_cachectrl_control+0x36>
    e1ac:	4b15      	ldr	r3, [pc, #84]	; (e204 <am_hal_cachectrl_control+0x2d8>)
    e1ae:	681b      	ldr	r3, [r3, #0]
    e1b0:	01db      	lsls	r3, r3, #7
    e1b2:	d406      	bmi.n	e1c2 <am_hal_cachectrl_control+0x296>
    e1b4:	2007      	movs	r0, #7
    e1b6:	e6d7      	b.n	df68 <am_hal_cachectrl_control+0x3c>
    e1b8:	f44f 6288 	mov.w	r2, #1088	; 0x440
    e1bc:	e6d1      	b.n	df62 <am_hal_cachectrl_control+0x36>
    e1be:	2006      	movs	r0, #6
    e1c0:	e6d2      	b.n	df68 <am_hal_cachectrl_control+0x3c>
    e1c2:	2202      	movs	r2, #2
    e1c4:	e6cd      	b.n	df62 <am_hal_cachectrl_control+0x36>
    e1c6:	f000 fbbb 	bl	e940 <am_hal_interrupt_master_disable>
    e1ca:	4603      	mov	r3, r0
    e1cc:	480e      	ldr	r0, [pc, #56]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e1ce:	930d      	str	r3, [sp, #52]	; 0x34
    e1d0:	f000 f9f6 	bl	e5c0 <am_hal_flash_load_ui32>
    e1d4:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e1d8:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    e1dc:	f021 010f 	bic.w	r1, r1, #15
    e1e0:	4321      	orrs	r1, r4
    e1e2:	4809      	ldr	r0, [pc, #36]	; (e208 <am_hal_cachectrl_control+0x2dc>)
    e1e4:	f000 f9f0 	bl	e5c8 <am_hal_flash_store_ui32>
    e1e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    e1ea:	f000 fbad 	bl	e948 <am_hal_interrupt_master_set>
    e1ee:	e6d2      	b.n	df96 <am_hal_cachectrl_control+0x6a>
    e1f0:	4c04      	ldr	r4, [pc, #16]	; (e204 <am_hal_cachectrl_control+0x2d8>)
    e1f2:	6122      	str	r2, [r4, #16]
    e1f4:	6163      	str	r3, [r4, #20]
    e1f6:	784a      	ldrb	r2, [r1, #1]
    e1f8:	6823      	ldr	r3, [r4, #0]
    e1fa:	f362 0382 	bfi	r3, r2, #2, #1
    e1fe:	6023      	str	r3, [r4, #0]
    e200:	e6b2      	b.n	df68 <am_hal_cachectrl_control+0x3c>
    e202:	bf00      	nop
    e204:	40018000 	.word	0x40018000
    e208:	40018004 	.word	0x40018004
    e20c:	f800000f 	.word	0xf800000f

0000e210 <am_hal_clkgen_control>:
    e210:	4b41      	ldr	r3, [pc, #260]	; (e318 <am_hal_clkgen_control+0x108>)
    e212:	681a      	ldr	r2, [r3, #0]
    e214:	b912      	cbnz	r2, e21c <am_hal_clkgen_control+0xc>
    e216:	4a41      	ldr	r2, [pc, #260]	; (e31c <am_hal_clkgen_control+0x10c>)
    e218:	6812      	ldr	r2, [r2, #0]
    e21a:	601a      	str	r2, [r3, #0]
    e21c:	2809      	cmp	r0, #9
    e21e:	d878      	bhi.n	e312 <am_hal_clkgen_control+0x102>
    e220:	e8df f000 	tbb	[pc, r0]
    e224:	261e160d 	.word	0x261e160d
    e228:	524c423a 	.word	0x524c423a
    e22c:	055a      	.short	0x055a
    e22e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e232:	2000      	movs	r0, #0
    e234:	6a1a      	ldr	r2, [r3, #32]
    e236:	f36f 0200 	bfc	r2, #0, #1
    e23a:	621a      	str	r2, [r3, #32]
    e23c:	4770      	bx	lr
    e23e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e242:	2200      	movs	r2, #0
    e244:	2147      	movs	r1, #71	; 0x47
    e246:	6159      	str	r1, [r3, #20]
    e248:	4610      	mov	r0, r2
    e24a:	619a      	str	r2, [r3, #24]
    e24c:	615a      	str	r2, [r3, #20]
    e24e:	4770      	bx	lr
    e250:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e254:	2000      	movs	r0, #0
    e256:	68d3      	ldr	r3, [r2, #12]
    e258:	f023 0301 	bic.w	r3, r3, #1
    e25c:	60d3      	str	r3, [r2, #12]
    e25e:	4770      	bx	lr
    e260:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e264:	2000      	movs	r0, #0
    e266:	68d3      	ldr	r3, [r2, #12]
    e268:	f023 0302 	bic.w	r3, r3, #2
    e26c:	60d3      	str	r3, [r2, #12]
    e26e:	4770      	bx	lr
    e270:	4a2b      	ldr	r2, [pc, #172]	; (e320 <am_hal_clkgen_control+0x110>)
    e272:	68d3      	ldr	r3, [r2, #12]
    e274:	b2db      	uxtb	r3, r3
    e276:	2b21      	cmp	r3, #33	; 0x21
    e278:	d106      	bne.n	e288 <am_hal_clkgen_control+0x78>
    e27a:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e27e:	2101      	movs	r1, #1
    e280:	f361 2309 	bfi	r3, r1, #8, #2
    e284:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e288:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e28c:	2000      	movs	r0, #0
    e28e:	68d3      	ldr	r3, [r2, #12]
    e290:	f043 0301 	orr.w	r3, r3, #1
    e294:	60d3      	str	r3, [r2, #12]
    e296:	4770      	bx	lr
    e298:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e29c:	2000      	movs	r0, #0
    e29e:	68d3      	ldr	r3, [r2, #12]
    e2a0:	f043 0302 	orr.w	r3, r3, #2
    e2a4:	60d3      	str	r3, [r2, #12]
    e2a6:	4770      	bx	lr
    e2a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2ac:	2200      	movs	r2, #0
    e2ae:	2047      	movs	r0, #71	; 0x47
    e2b0:	2101      	movs	r1, #1
    e2b2:	6158      	str	r0, [r3, #20]
    e2b4:	6199      	str	r1, [r3, #24]
    e2b6:	4610      	mov	r0, r2
    e2b8:	615a      	str	r2, [r3, #20]
    e2ba:	4770      	bx	lr
    e2bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2c0:	2000      	movs	r0, #0
    e2c2:	68da      	ldr	r2, [r3, #12]
    e2c4:	60da      	str	r2, [r3, #12]
    e2c6:	4770      	bx	lr
    e2c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2cc:	2000      	movs	r0, #0
    e2ce:	68d3      	ldr	r3, [r2, #12]
    e2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e2d4:	60d3      	str	r3, [r2, #12]
    e2d6:	4770      	bx	lr
    e2d8:	b510      	push	{r4, lr}
    e2da:	4a11      	ldr	r2, [pc, #68]	; (e320 <am_hal_clkgen_control+0x110>)
    e2dc:	68d3      	ldr	r3, [r2, #12]
    e2de:	b2db      	uxtb	r3, r3
    e2e0:	2b21      	cmp	r3, #33	; 0x21
    e2e2:	460c      	mov	r4, r1
    e2e4:	d008      	beq.n	e2f8 <am_hal_clkgen_control+0xe8>
    e2e6:	b194      	cbz	r4, e30e <am_hal_clkgen_control+0xfe>
    e2e8:	6823      	ldr	r3, [r4, #0]
    e2ea:	f043 0301 	orr.w	r3, r3, #1
    e2ee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2f2:	2000      	movs	r0, #0
    e2f4:	6213      	str	r3, [r2, #32]
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e2fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e300:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e304:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e308:	f000 f910 	bl	e52c <am_hal_flash_delay>
    e30c:	e7eb      	b.n	e2e6 <am_hal_clkgen_control+0xd6>
    e30e:	4b05      	ldr	r3, [pc, #20]	; (e324 <am_hal_clkgen_control+0x114>)
    e310:	e7ed      	b.n	e2ee <am_hal_clkgen_control+0xde>
    e312:	2006      	movs	r0, #6
    e314:	4770      	bx	lr
    e316:	bf00      	nop
    e318:	1000118c 	.word	0x1000118c
    e31c:	4ffff000 	.word	0x4ffff000
    e320:	40020000 	.word	0x40020000
    e324:	0025b801 	.word	0x0025b801

0000e328 <am_hal_clkgen_status_get>:
    e328:	b1a8      	cbz	r0, e356 <am_hal_clkgen_status_get+0x2e>
    e32a:	b410      	push	{r4}
    e32c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e330:	490a      	ldr	r1, [pc, #40]	; (e35c <am_hal_clkgen_status_get+0x34>)
    e332:	6994      	ldr	r4, [r2, #24]
    e334:	4b0a      	ldr	r3, [pc, #40]	; (e360 <am_hal_clkgen_status_get+0x38>)
    e336:	f014 0f01 	tst.w	r4, #1
    e33a:	bf08      	it	eq
    e33c:	460b      	moveq	r3, r1
    e33e:	6003      	str	r3, [r0, #0]
    e340:	69d3      	ldr	r3, [r2, #28]
    e342:	f85d 4b04 	ldr.w	r4, [sp], #4
    e346:	f003 0201 	and.w	r2, r3, #1
    e34a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e34e:	6042      	str	r2, [r0, #4]
    e350:	7203      	strb	r3, [r0, #8]
    e352:	2000      	movs	r0, #0
    e354:	4770      	bx	lr
    e356:	2006      	movs	r0, #6
    e358:	4770      	bx	lr
    e35a:	bf00      	nop
    e35c:	02dc6c00 	.word	0x02dc6c00
    e360:	016e3600 	.word	0x016e3600

0000e364 <am_hal_ctimer_config_single>:
    e364:	b5f0      	push	{r4, r5, r6, r7, lr}
    e366:	b083      	sub	sp, #12
    e368:	460e      	mov	r6, r1
    e36a:	4614      	mov	r4, r2
    e36c:	0147      	lsls	r7, r0, #5
    e36e:	4605      	mov	r5, r0
    e370:	f000 fae6 	bl	e940 <am_hal_interrupt_master_disable>
    e374:	4a19      	ldr	r2, [pc, #100]	; (e3dc <am_hal_ctimer_config_single+0x78>)
    e376:	9001      	str	r0, [sp, #4]
    e378:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e37c:	58bb      	ldr	r3, [r7, r2]
    e37e:	d021      	beq.n	e3c4 <am_hal_ctimer_config_single+0x60>
    e380:	ea23 0306 	bic.w	r3, r3, r6
    e384:	1c71      	adds	r1, r6, #1
    e386:	ea43 0304 	orr.w	r3, r3, r4
    e38a:	d00c      	beq.n	e3a6 <am_hal_ctimer_config_single+0x42>
    e38c:	50bb      	str	r3, [r7, r2]
    e38e:	9801      	ldr	r0, [sp, #4]
    e390:	f000 fada 	bl	e948 <am_hal_interrupt_master_set>
    e394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e398:	429e      	cmp	r6, r3
    e39a:	d01c      	beq.n	e3d6 <am_hal_ctimer_config_single+0x72>
    e39c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e3a0:	d017      	beq.n	e3d2 <am_hal_ctimer_config_single+0x6e>
    e3a2:	b003      	add	sp, #12
    e3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3aa:	50bb      	str	r3, [r7, r2]
    e3ac:	9801      	ldr	r0, [sp, #4]
    e3ae:	f000 facb 	bl	e948 <am_hal_interrupt_master_set>
    e3b2:	2200      	movs	r2, #0
    e3b4:	4b0a      	ldr	r3, [pc, #40]	; (e3e0 <am_hal_ctimer_config_single+0x7c>)
    e3b6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e3ba:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e3be:	54ac      	strb	r4, [r5, r2]
    e3c0:	b003      	add	sp, #12
    e3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3c4:	0424      	lsls	r4, r4, #16
    e3c6:	b29b      	uxth	r3, r3
    e3c8:	4323      	orrs	r3, r4
    e3ca:	50bb      	str	r3, [r7, r2]
    e3cc:	9801      	ldr	r0, [sp, #4]
    e3ce:	f000 fabb 	bl	e948 <am_hal_interrupt_master_set>
    e3d2:	2201      	movs	r2, #1
    e3d4:	e7ee      	b.n	e3b4 <am_hal_ctimer_config_single+0x50>
    e3d6:	2200      	movs	r2, #0
    e3d8:	e7ec      	b.n	e3b4 <am_hal_ctimer_config_single+0x50>
    e3da:	bf00      	nop
    e3dc:	4000800c 	.word	0x4000800c
    e3e0:	10001048 	.word	0x10001048

0000e3e4 <am_hal_ctimer_start>:
    e3e4:	b570      	push	{r4, r5, r6, lr}
    e3e6:	b082      	sub	sp, #8
    e3e8:	460c      	mov	r4, r1
    e3ea:	0146      	lsls	r6, r0, #5
    e3ec:	4605      	mov	r5, r0
    e3ee:	f000 faa7 	bl	e940 <am_hal_interrupt_master_disable>
    e3f2:	4a0f      	ldr	r2, [pc, #60]	; (e430 <am_hal_ctimer_start+0x4c>)
    e3f4:	9001      	str	r0, [sp, #4]
    e3f6:	58b3      	ldr	r3, [r6, r2]
    e3f8:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e3fc:	ea23 0301 	bic.w	r3, r3, r1
    e400:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e404:	430b      	orrs	r3, r1
    e406:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e40a:	bf0c      	ite	eq
    e40c:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e410:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e414:	50b3      	str	r3, [r6, r2]
    e416:	4b07      	ldr	r3, [pc, #28]	; (e434 <am_hal_ctimer_start+0x50>)
    e418:	9801      	ldr	r0, [sp, #4]
    e41a:	bf0c      	ite	eq
    e41c:	2101      	moveq	r1, #1
    e41e:	2100      	movne	r1, #0
    e420:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e424:	545c      	strb	r4, [r3, r1]
    e426:	f000 fa8f 	bl	e948 <am_hal_interrupt_master_set>
    e42a:	b002      	add	sp, #8
    e42c:	bd70      	pop	{r4, r5, r6, pc}
    e42e:	bf00      	nop
    e430:	4000800c 	.word	0x4000800c
    e434:	10001048 	.word	0x10001048

0000e438 <am_hal_ctimer_period_set>:
    e438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e43c:	b082      	sub	sp, #8
    e43e:	4689      	mov	r9, r1
    e440:	4698      	mov	r8, r3
    e442:	0147      	lsls	r7, r0, #5
    e444:	4614      	mov	r4, r2
    e446:	f000 fa7b 	bl	e940 <am_hal_interrupt_master_disable>
    e44a:	f8df a094 	ldr.w	sl, [pc, #148]	; e4e0 <am_hal_ctimer_period_set+0xa8>
    e44e:	9001      	str	r0, [sp, #4]
    e450:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e454:	4d20      	ldr	r5, [pc, #128]	; (e4d8 <am_hal_ctimer_period_set+0xa0>)
    e456:	4e21      	ldr	r6, [pc, #132]	; (e4dc <am_hal_ctimer_period_set+0xa4>)
    e458:	f857 300a 	ldr.w	r3, [r7, sl]
    e45c:	d01a      	beq.n	e494 <am_hal_ctimer_period_set+0x5c>
    e45e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e462:	2b80      	cmp	r3, #128	; 0x80
    e464:	d01b      	beq.n	e49e <am_hal_ctimer_period_set+0x66>
    e466:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e46a:	2000      	movs	r0, #0
    e46c:	4591      	cmp	r9, r2
    e46e:	4603      	mov	r3, r0
    e470:	d01e      	beq.n	e4b0 <am_hal_ctimer_period_set+0x78>
    e472:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e476:	d025      	beq.n	e4c4 <am_hal_ctimer_period_set+0x8c>
    e478:	0c1b      	lsrs	r3, r3, #16
    e47a:	b2a2      	uxth	r2, r4
    e47c:	041b      	lsls	r3, r3, #16
    e47e:	4310      	orrs	r0, r2
    e480:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e484:	5178      	str	r0, [r7, r5]
    e486:	51bb      	str	r3, [r7, r6]
    e488:	9801      	ldr	r0, [sp, #4]
    e48a:	f000 fa5d 	bl	e948 <am_hal_interrupt_master_set>
    e48e:	b002      	add	sp, #8
    e490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e494:	0c1b      	lsrs	r3, r3, #16
    e496:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e49a:	2b80      	cmp	r3, #128	; 0x80
    e49c:	d111      	bne.n	e4c2 <am_hal_ctimer_period_set+0x8a>
    e49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4a2:	4591      	cmp	r9, r2
    e4a4:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e4a8:	4623      	mov	r3, r4
    e4aa:	ebc8 0404 	rsb	r4, r8, r4
    e4ae:	d1e0      	bne.n	e472 <am_hal_ctimer_period_set+0x3a>
    e4b0:	b2a3      	uxth	r3, r4
    e4b2:	4318      	orrs	r0, r3
    e4b4:	5178      	str	r0, [r7, r5]
    e4b6:	9801      	ldr	r0, [sp, #4]
    e4b8:	f000 fa46 	bl	e948 <am_hal_interrupt_master_set>
    e4bc:	b002      	add	sp, #8
    e4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4c2:	2000      	movs	r0, #0
    e4c4:	b2a3      	uxth	r3, r4
    e4c6:	4318      	orrs	r0, r3
    e4c8:	51b8      	str	r0, [r7, r6]
    e4ca:	9801      	ldr	r0, [sp, #4]
    e4cc:	f000 fa3c 	bl	e948 <am_hal_interrupt_master_set>
    e4d0:	b002      	add	sp, #8
    e4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4d6:	bf00      	nop
    e4d8:	40008004 	.word	0x40008004
    e4dc:	40008008 	.word	0x40008008
    e4e0:	4000800c 	.word	0x4000800c

0000e4e4 <am_hal_ctimer_int_enable>:
    e4e4:	b510      	push	{r4, lr}
    e4e6:	b082      	sub	sp, #8
    e4e8:	4604      	mov	r4, r0
    e4ea:	f000 fa29 	bl	e940 <am_hal_interrupt_master_disable>
    e4ee:	4b06      	ldr	r3, [pc, #24]	; (e508 <am_hal_ctimer_int_enable+0x24>)
    e4f0:	9001      	str	r0, [sp, #4]
    e4f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e4f6:	4314      	orrs	r4, r2
    e4f8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e4fc:	9801      	ldr	r0, [sp, #4]
    e4fe:	f000 fa23 	bl	e948 <am_hal_interrupt_master_set>
    e502:	b002      	add	sp, #8
    e504:	bd10      	pop	{r4, pc}
    e506:	bf00      	nop
    e508:	40008000 	.word	0x40008000

0000e50c <am_hal_ctimer_int_clear>:
    e50c:	b510      	push	{r4, lr}
    e50e:	b082      	sub	sp, #8
    e510:	4604      	mov	r4, r0
    e512:	f000 fa15 	bl	e940 <am_hal_interrupt_master_disable>
    e516:	4b04      	ldr	r3, [pc, #16]	; (e528 <am_hal_ctimer_int_clear+0x1c>)
    e518:	9001      	str	r0, [sp, #4]
    e51a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e51e:	9801      	ldr	r0, [sp, #4]
    e520:	f000 fa12 	bl	e948 <am_hal_interrupt_master_set>
    e524:	b002      	add	sp, #8
    e526:	bd10      	pop	{r4, pc}
    e528:	40008000 	.word	0x40008000

0000e52c <am_hal_flash_delay>:
    e52c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e532:	075b      	lsls	r3, r3, #29
    e534:	bf46      	itte	mi
    e536:	0040      	lslmi	r0, r0, #1
    e538:	230e      	movmi	r3, #14
    e53a:	230b      	movpl	r3, #11
    e53c:	4298      	cmp	r0, r3
    e53e:	d800      	bhi.n	e542 <am_hal_flash_delay+0x16>
    e540:	4770      	bx	lr
    e542:	1ac0      	subs	r0, r0, r3
    e544:	4b00      	ldr	r3, [pc, #0]	; (e548 <am_hal_flash_delay+0x1c>)
    e546:	4718      	bx	r3
    e548:	0800009d 	.word	0x0800009d

0000e54c <am_hal_flash_delay_status_check>:
    e54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e550:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e554:	460d      	mov	r5, r1
    e556:	4616      	mov	r6, r2
    e558:	461f      	mov	r7, r3
    e55a:	b1b4      	cbz	r4, e58a <am_hal_flash_delay_status_check+0x3e>
    e55c:	4604      	mov	r4, r0
    e55e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e562:	f8df 8058 	ldr.w	r8, [pc, #88]	; e5bc <am_hal_flash_delay_status_check+0x70>
    e566:	e009      	b.n	e57c <am_hal_flash_delay_status_check+0x30>
    e568:	b324      	cbz	r4, e5b4 <am_hal_flash_delay_status_check+0x68>
    e56a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e56e:	f013 0f04 	tst.w	r3, #4
    e572:	bf14      	ite	ne
    e574:	2012      	movne	r0, #18
    e576:	2005      	moveq	r0, #5
    e578:	3c01      	subs	r4, #1
    e57a:	47c0      	blx	r8
    e57c:	682b      	ldr	r3, [r5, #0]
    e57e:	4033      	ands	r3, r6
    e580:	429f      	cmp	r7, r3
    e582:	d1f1      	bne.n	e568 <am_hal_flash_delay_status_check+0x1c>
    e584:	2000      	movs	r0, #0
    e586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e58a:	f8df 8030 	ldr.w	r8, [pc, #48]	; e5bc <am_hal_flash_delay_status_check+0x70>
    e58e:	4604      	mov	r4, r0
    e590:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e594:	e009      	b.n	e5aa <am_hal_flash_delay_status_check+0x5e>
    e596:	b16c      	cbz	r4, e5b4 <am_hal_flash_delay_status_check+0x68>
    e598:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e59c:	f013 0f04 	tst.w	r3, #4
    e5a0:	bf14      	ite	ne
    e5a2:	2012      	movne	r0, #18
    e5a4:	2005      	moveq	r0, #5
    e5a6:	3c01      	subs	r4, #1
    e5a8:	47c0      	blx	r8
    e5aa:	682b      	ldr	r3, [r5, #0]
    e5ac:	4033      	ands	r3, r6
    e5ae:	429f      	cmp	r7, r3
    e5b0:	d0f1      	beq.n	e596 <am_hal_flash_delay_status_check+0x4a>
    e5b2:	e7e7      	b.n	e584 <am_hal_flash_delay_status_check+0x38>
    e5b4:	2004      	movs	r0, #4
    e5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e5ba:	bf00      	nop
    e5bc:	0800009d 	.word	0x0800009d

0000e5c0 <am_hal_flash_load_ui32>:
    e5c0:	4b00      	ldr	r3, [pc, #0]	; (e5c4 <am_hal_flash_load_ui32+0x4>)
    e5c2:	4718      	bx	r3
    e5c4:	08000075 	.word	0x08000075

0000e5c8 <am_hal_flash_store_ui32>:
    e5c8:	4b01      	ldr	r3, [pc, #4]	; (e5d0 <am_hal_flash_store_ui32+0x8>)
    e5ca:	f043 0301 	orr.w	r3, r3, #1
    e5ce:	4718      	bx	r3
    e5d0:	10001058 	.word	0x10001058

0000e5d4 <am_hal_gpio_pinconfig>:
    e5d4:	2831      	cmp	r0, #49	; 0x31
    e5d6:	d901      	bls.n	e5dc <am_hal_gpio_pinconfig+0x8>
    e5d8:	2006      	movs	r0, #6
    e5da:	4770      	bx	lr
    e5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5e0:	f001 0307 	and.w	r3, r1, #7
    e5e4:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    e5e8:	b085      	sub	sp, #20
    e5ea:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e5ee:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e5f2:	d014      	beq.n	e61e <am_hal_gpio_pinconfig+0x4a>
    e5f4:	f3c1 1742 	ubfx	r7, r1, #5, #3
    e5f8:	1dbd      	adds	r5, r7, #6
    e5fa:	f005 0507 	and.w	r5, r5, #7
    e5fe:	2d03      	cmp	r5, #3
    e600:	f042 0201 	orr.w	r2, r2, #1
    e604:	f200 80a7 	bhi.w	e756 <am_hal_gpio_pinconfig+0x182>
    e608:	4d82      	ldr	r5, [pc, #520]	; (e814 <am_hal_gpio_pinconfig+0x240>)
    e60a:	5c2d      	ldrb	r5, [r5, r0]
    e60c:	07ee      	lsls	r6, r5, #31
    e60e:	d403      	bmi.n	e618 <am_hal_gpio_pinconfig+0x44>
    e610:	4881      	ldr	r0, [pc, #516]	; (e818 <am_hal_gpio_pinconfig+0x244>)
    e612:	b005      	add	sp, #20
    e614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e618:	3f02      	subs	r7, #2
    e61a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    e61e:	2c00      	cmp	r4, #0
    e620:	f040 8091 	bne.w	e746 <am_hal_gpio_pinconfig+0x172>
    e624:	4c7d      	ldr	r4, [pc, #500]	; (e81c <am_hal_gpio_pinconfig+0x248>)
    e626:	4d7e      	ldr	r5, [pc, #504]	; (e820 <am_hal_gpio_pinconfig+0x24c>)
    e628:	5c24      	ldrb	r4, [r4, r0]
    e62a:	5c2d      	ldrb	r5, [r5, r0]
    e62c:	411c      	asrs	r4, r3
    e62e:	f014 0f01 	tst.w	r4, #1
    e632:	bf0c      	ite	eq
    e634:	2400      	moveq	r4, #0
    e636:	2402      	movne	r4, #2
    e638:	42ab      	cmp	r3, r5
    e63a:	ea42 0204 	orr.w	r2, r2, r4
    e63e:	f000 8096 	beq.w	e76e <am_hal_gpio_pinconfig+0x19a>
    e642:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e646:	105d      	asrs	r5, r3, #1
    e648:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e64c:	00db      	lsls	r3, r3, #3
    e64e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    e652:	f003 0408 	and.w	r4, r3, #8
    e656:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e65a:	f00e 060c 	and.w	r6, lr, #12
    e65e:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e662:	2e04      	cmp	r6, #4
    e664:	ea43 0304 	orr.w	r3, r3, r4
    e668:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e66c:	462c      	mov	r4, r5
    e66e:	f000 808b 	beq.w	e788 <am_hal_gpio_pinconfig+0x1b4>
    e672:	4c6c      	ldr	r4, [pc, #432]	; (e824 <am_hal_gpio_pinconfig+0x250>)
    e674:	6827      	ldr	r7, [r4, #0]
    e676:	1bcf      	subs	r7, r1, r7
    e678:	fab7 f787 	clz	r7, r7
    e67c:	097f      	lsrs	r7, r7, #5
    e67e:	f01e 0f60 	tst.w	lr, #96	; 0x60
    e682:	bf04      	itt	eq
    e684:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e688:	f364 0300 	bfieq	r3, r4, #0, #1
    e68c:	0084      	lsls	r4, r0, #2
    e68e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e692:	2902      	cmp	r1, #2
    e694:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e698:	d078      	beq.n	e78c <am_hal_gpio_pinconfig+0x1b8>
    e69a:	d87f      	bhi.n	e79c <am_hal_gpio_pinconfig+0x1c8>
    e69c:	2901      	cmp	r1, #1
    e69e:	f04f 0100 	mov.w	r1, #0
    e6a2:	bf08      	it	eq
    e6a4:	f042 0204 	orreq.w	r2, r2, #4
    e6a8:	f005 0518 	and.w	r5, r5, #24
    e6ac:	9101      	str	r1, [sp, #4]
    e6ae:	f004 041c 	and.w	r4, r4, #28
    e6b2:	f020 0a03 	bic.w	sl, r0, #3
    e6b6:	f04f 090f 	mov.w	r9, #15
    e6ba:	fa09 f904 	lsl.w	r9, r9, r4
    e6be:	0841      	lsrs	r1, r0, #1
    e6c0:	26ff      	movs	r6, #255	; 0xff
    e6c2:	fa03 f404 	lsl.w	r4, r3, r4
    e6c6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e6ca:	40ae      	lsls	r6, r5
    e6cc:	9300      	str	r3, [sp, #0]
    e6ce:	fa02 f505 	lsl.w	r5, r2, r5
    e6d2:	4683      	mov	fp, r0
    e6d4:	f021 0803 	bic.w	r8, r1, #3
    e6d8:	f000 f932 	bl	e940 <am_hal_interrupt_master_disable>
    e6dc:	9b00      	ldr	r3, [sp, #0]
    e6de:	9003      	str	r0, [sp, #12]
    e6e0:	ea6f 0909 	mvn.w	r9, r9
    e6e4:	43f6      	mvns	r6, r6
    e6e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e6ea:	f8df e15c 	ldr.w	lr, [pc, #348]	; e848 <am_hal_gpio_pinconfig+0x274>
    e6ee:	4a4e      	ldr	r2, [pc, #312]	; (e828 <am_hal_gpio_pinconfig+0x254>)
    e6f0:	b15f      	cbz	r7, e70a <am_hal_gpio_pinconfig+0x136>
    e6f2:	ea4f 07db 	mov.w	r7, fp, lsr #3
    e6f6:	f00b 001f 	and.w	r0, fp, #31
    e6fa:	f007 0704 	and.w	r7, r7, #4
    e6fe:	f04f 0b01 	mov.w	fp, #1
    e702:	494a      	ldr	r1, [pc, #296]	; (e82c <am_hal_gpio_pinconfig+0x258>)
    e704:	fa0b f000 	lsl.w	r0, fp, r0
    e708:	5078      	str	r0, [r7, r1]
    e70a:	4849      	ldr	r0, [pc, #292]	; (e830 <am_hal_gpio_pinconfig+0x25c>)
    e70c:	2773      	movs	r7, #115	; 0x73
    e70e:	6607      	str	r7, [r0, #96]	; 0x60
    e710:	681f      	ldr	r7, [r3, #0]
    e712:	4037      	ands	r7, r6
    e714:	433d      	orrs	r5, r7
    e716:	601d      	str	r5, [r3, #0]
    e718:	f858 300e 	ldr.w	r3, [r8, lr]
    e71c:	ea09 0303 	and.w	r3, r9, r3
    e720:	4323      	orrs	r3, r4
    e722:	f848 300e 	str.w	r3, [r8, lr]
    e726:	f85a 3002 	ldr.w	r3, [sl, r2]
    e72a:	401e      	ands	r6, r3
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	2400      	movs	r4, #0
    e730:	431e      	orrs	r6, r3
    e732:	f84a 6002 	str.w	r6, [sl, r2]
    e736:	6604      	str	r4, [r0, #96]	; 0x60
    e738:	9803      	ldr	r0, [sp, #12]
    e73a:	f000 f905 	bl	e948 <am_hal_interrupt_master_set>
    e73e:	4620      	mov	r0, r4
    e740:	b005      	add	sp, #20
    e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e746:	2c01      	cmp	r4, #1
    e748:	d017      	beq.n	e77a <am_hal_gpio_pinconfig+0x1a6>
    e74a:	2c02      	cmp	r4, #2
    e74c:	d035      	beq.n	e7ba <am_hal_gpio_pinconfig+0x1e6>
    e74e:	4839      	ldr	r0, [pc, #228]	; (e834 <am_hal_gpio_pinconfig+0x260>)
    e750:	b005      	add	sp, #20
    e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e756:	2ec0      	cmp	r6, #192	; 0xc0
    e758:	d02a      	beq.n	e7b0 <am_hal_gpio_pinconfig+0x1dc>
    e75a:	2e20      	cmp	r6, #32
    e75c:	f47f af5f 	bne.w	e61e <am_hal_gpio_pinconfig+0x4a>
    e760:	2814      	cmp	r0, #20
    e762:	f43f af55 	beq.w	e610 <am_hal_gpio_pinconfig+0x3c>
    e766:	2c00      	cmp	r4, #0
    e768:	f43f af5c 	beq.w	e624 <am_hal_gpio_pinconfig+0x50>
    e76c:	e7eb      	b.n	e746 <am_hal_gpio_pinconfig+0x172>
    e76e:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e772:	2c07      	cmp	r4, #7
    e774:	d128      	bne.n	e7c8 <am_hal_gpio_pinconfig+0x1f4>
    e776:	4830      	ldr	r0, [pc, #192]	; (e838 <am_hal_gpio_pinconfig+0x264>)
    e778:	e74b      	b.n	e612 <am_hal_gpio_pinconfig+0x3e>
    e77a:	4c26      	ldr	r4, [pc, #152]	; (e814 <am_hal_gpio_pinconfig+0x240>)
    e77c:	5c24      	ldrb	r4, [r4, r0]
    e77e:	07a5      	lsls	r5, r4, #30
    e780:	d5e5      	bpl.n	e74e <am_hal_gpio_pinconfig+0x17a>
    e782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e786:	e74d      	b.n	e624 <am_hal_gpio_pinconfig+0x50>
    e788:	2701      	movs	r7, #1
    e78a:	e778      	b.n	e67e <am_hal_gpio_pinconfig+0xaa>
    e78c:	f005 0518 	and.w	r5, r5, #24
    e790:	f04f 0801 	mov.w	r8, #1
    e794:	fa08 f105 	lsl.w	r1, r8, r5
    e798:	9101      	str	r1, [sp, #4]
    e79a:	e788      	b.n	e6ae <am_hal_gpio_pinconfig+0xda>
    e79c:	f005 0518 	and.w	r5, r5, #24
    e7a0:	f04f 0801 	mov.w	r8, #1
    e7a4:	fa08 f105 	lsl.w	r1, r8, r5
    e7a8:	f042 0204 	orr.w	r2, r2, #4
    e7ac:	9101      	str	r1, [sp, #4]
    e7ae:	e77e      	b.n	e6ae <am_hal_gpio_pinconfig+0xda>
    e7b0:	2814      	cmp	r0, #20
    e7b2:	f43f af34 	beq.w	e61e <am_hal_gpio_pinconfig+0x4a>
    e7b6:	4821      	ldr	r0, [pc, #132]	; (e83c <am_hal_gpio_pinconfig+0x268>)
    e7b8:	e72b      	b.n	e612 <am_hal_gpio_pinconfig+0x3e>
    e7ba:	4c16      	ldr	r4, [pc, #88]	; (e814 <am_hal_gpio_pinconfig+0x240>)
    e7bc:	5c24      	ldrb	r4, [r4, r0]
    e7be:	0764      	lsls	r4, r4, #29
    e7c0:	d5c5      	bpl.n	e74e <am_hal_gpio_pinconfig+0x17a>
    e7c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e7c6:	e72d      	b.n	e624 <am_hal_gpio_pinconfig+0x50>
    e7c8:	4d1d      	ldr	r5, [pc, #116]	; (e840 <am_hal_gpio_pinconfig+0x26c>)
    e7ca:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e7ce:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e7d2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e7d6:	429e      	cmp	r6, r3
    e7d8:	d00c      	beq.n	e7f4 <am_hal_gpio_pinconfig+0x220>
    e7da:	0084      	lsls	r4, r0, #2
    e7dc:	4425      	add	r5, r4
    e7de:	786e      	ldrb	r6, [r5, #1]
    e7e0:	429e      	cmp	r6, r3
    e7e2:	d012      	beq.n	e80a <am_hal_gpio_pinconfig+0x236>
    e7e4:	78ae      	ldrb	r6, [r5, #2]
    e7e6:	429e      	cmp	r6, r3
    e7e8:	d00d      	beq.n	e806 <am_hal_gpio_pinconfig+0x232>
    e7ea:	78ed      	ldrb	r5, [r5, #3]
    e7ec:	429d      	cmp	r5, r3
    e7ee:	d00e      	beq.n	e80e <am_hal_gpio_pinconfig+0x23a>
    e7f0:	4814      	ldr	r0, [pc, #80]	; (e844 <am_hal_gpio_pinconfig+0x270>)
    e7f2:	e70e      	b.n	e612 <am_hal_gpio_pinconfig+0x3e>
    e7f4:	2300      	movs	r3, #0
    e7f6:	0084      	lsls	r4, r0, #2
    e7f8:	005b      	lsls	r3, r3, #1
    e7fa:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e7fe:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e802:	2700      	movs	r7, #0
    e804:	e743      	b.n	e68e <am_hal_gpio_pinconfig+0xba>
    e806:	2302      	movs	r3, #2
    e808:	e7f6      	b.n	e7f8 <am_hal_gpio_pinconfig+0x224>
    e80a:	2301      	movs	r3, #1
    e80c:	e7f4      	b.n	e7f8 <am_hal_gpio_pinconfig+0x224>
    e80e:	2303      	movs	r3, #3
    e810:	e7f2      	b.n	e7f8 <am_hal_gpio_pinconfig+0x224>
    e812:	bf00      	nop
    e814:	00010534 	.word	0x00010534
    e818:	08000100 	.word	0x08000100
    e81c:	00010630 	.word	0x00010630
    e820:	0001066c 	.word	0x0001066c
    e824:	00010664 	.word	0x00010664
    e828:	400100e0 	.word	0x400100e0
    e82c:	400100b4 	.word	0x400100b4
    e830:	40010000 	.word	0x40010000
    e834:	08000102 	.word	0x08000102
    e838:	08000103 	.word	0x08000103
    e83c:	08000101 	.word	0x08000101
    e840:	00010568 	.word	0x00010568
    e844:	08000104 	.word	0x08000104
    e848:	40010040 	.word	0x40010040

0000e84c <am_hal_gpio_state_read>:
    e84c:	b1ca      	cbz	r2, e882 <am_hal_gpio_state_read+0x36>
    e84e:	2831      	cmp	r0, #49	; 0x31
    e850:	d904      	bls.n	e85c <am_hal_gpio_state_read+0x10>
    e852:	f04f 33ff 	mov.w	r3, #4294967295
    e856:	6013      	str	r3, [r2, #0]
    e858:	2005      	movs	r0, #5
    e85a:	4770      	bx	lr
    e85c:	08c3      	lsrs	r3, r0, #3
    e85e:	2901      	cmp	r1, #1
    e860:	f003 0304 	and.w	r3, r3, #4
    e864:	f000 001f 	and.w	r0, r0, #31
    e868:	d00d      	beq.n	e886 <am_hal_gpio_state_read+0x3a>
    e86a:	d313      	bcc.n	e894 <am_hal_gpio_state_read+0x48>
    e86c:	2902      	cmp	r1, #2
    e86e:	d108      	bne.n	e882 <am_hal_gpio_state_read+0x36>
    e870:	490c      	ldr	r1, [pc, #48]	; (e8a4 <am_hal_gpio_state_read+0x58>)
    e872:	585b      	ldr	r3, [r3, r1]
    e874:	fa23 f000 	lsr.w	r0, r3, r0
    e878:	f000 0001 	and.w	r0, r0, #1
    e87c:	6010      	str	r0, [r2, #0]
    e87e:	2000      	movs	r0, #0
    e880:	4770      	bx	lr
    e882:	2006      	movs	r0, #6
    e884:	4770      	bx	lr
    e886:	4908      	ldr	r1, [pc, #32]	; (e8a8 <am_hal_gpio_state_read+0x5c>)
    e888:	585b      	ldr	r3, [r3, r1]
    e88a:	fa23 f000 	lsr.w	r0, r3, r0
    e88e:	f000 0001 	and.w	r0, r0, #1
    e892:	e7f3      	b.n	e87c <am_hal_gpio_state_read+0x30>
    e894:	4905      	ldr	r1, [pc, #20]	; (e8ac <am_hal_gpio_state_read+0x60>)
    e896:	585b      	ldr	r3, [r3, r1]
    e898:	fa23 f000 	lsr.w	r0, r3, r0
    e89c:	f000 0001 	and.w	r0, r0, #1
    e8a0:	e7ec      	b.n	e87c <am_hal_gpio_state_read+0x30>
    e8a2:	bf00      	nop
    e8a4:	400100a0 	.word	0x400100a0
    e8a8:	40010088 	.word	0x40010088
    e8ac:	40010080 	.word	0x40010080

0000e8b0 <am_hal_gpio_state_write>:
    e8b0:	2831      	cmp	r0, #49	; 0x31
    e8b2:	d901      	bls.n	e8b8 <am_hal_gpio_state_write+0x8>
    e8b4:	2005      	movs	r0, #5
    e8b6:	4770      	bx	lr
    e8b8:	2905      	cmp	r1, #5
    e8ba:	d901      	bls.n	e8c0 <am_hal_gpio_state_write+0x10>
    e8bc:	2006      	movs	r0, #6
    e8be:	4770      	bx	lr
    e8c0:	b570      	push	{r4, r5, r6, lr}
    e8c2:	f000 031f 	and.w	r3, r0, #31
    e8c6:	b082      	sub	sp, #8
    e8c8:	08c0      	lsrs	r0, r0, #3
    e8ca:	2201      	movs	r2, #1
    e8cc:	460d      	mov	r5, r1
    e8ce:	f000 0404 	and.w	r4, r0, #4
    e8d2:	fa02 f603 	lsl.w	r6, r2, r3
    e8d6:	f000 f833 	bl	e940 <am_hal_interrupt_master_disable>
    e8da:	1e69      	subs	r1, r5, #1
    e8dc:	9001      	str	r0, [sp, #4]
    e8de:	2904      	cmp	r1, #4
    e8e0:	d817      	bhi.n	e912 <am_hal_gpio_state_write+0x62>
    e8e2:	e8df f001 	tbb	[pc, r1]
    e8e6:	0e13      	.short	0x0e13
    e8e8:	030b      	.short	0x030b
    e8ea:	19          	.byte	0x19
    e8eb:	00          	.byte	0x00
    e8ec:	4b0d      	ldr	r3, [pc, #52]	; (e924 <am_hal_gpio_state_write+0x74>)
    e8ee:	50e6      	str	r6, [r4, r3]
    e8f0:	9801      	ldr	r0, [sp, #4]
    e8f2:	f000 f829 	bl	e948 <am_hal_interrupt_master_set>
    e8f6:	2000      	movs	r0, #0
    e8f8:	b002      	add	sp, #8
    e8fa:	bd70      	pop	{r4, r5, r6, pc}
    e8fc:	4b0a      	ldr	r3, [pc, #40]	; (e928 <am_hal_gpio_state_write+0x78>)
    e8fe:	50e6      	str	r6, [r4, r3]
    e900:	e7f6      	b.n	e8f0 <am_hal_gpio_state_write+0x40>
    e902:	4a0a      	ldr	r2, [pc, #40]	; (e92c <am_hal_gpio_state_write+0x7c>)
    e904:	58a3      	ldr	r3, [r4, r2]
    e906:	4073      	eors	r3, r6
    e908:	50a3      	str	r3, [r4, r2]
    e90a:	e7f1      	b.n	e8f0 <am_hal_gpio_state_write+0x40>
    e90c:	4b08      	ldr	r3, [pc, #32]	; (e930 <am_hal_gpio_state_write+0x80>)
    e90e:	50e6      	str	r6, [r4, r3]
    e910:	e7ee      	b.n	e8f0 <am_hal_gpio_state_write+0x40>
    e912:	4b08      	ldr	r3, [pc, #32]	; (e934 <am_hal_gpio_state_write+0x84>)
    e914:	50e6      	str	r6, [r4, r3]
    e916:	e7eb      	b.n	e8f0 <am_hal_gpio_state_write+0x40>
    e918:	4a03      	ldr	r2, [pc, #12]	; (e928 <am_hal_gpio_state_write+0x78>)
    e91a:	58a3      	ldr	r3, [r4, r2]
    e91c:	4073      	eors	r3, r6
    e91e:	50a3      	str	r3, [r4, r2]
    e920:	e7e6      	b.n	e8f0 <am_hal_gpio_state_write+0x40>
    e922:	bf00      	nop
    e924:	400100a8 	.word	0x400100a8
    e928:	400100b4 	.word	0x400100b4
    e92c:	40010088 	.word	0x40010088
    e930:	40010090 	.word	0x40010090
    e934:	40010098 	.word	0x40010098

0000e938 <am_hal_interrupt_master_enable>:
    e938:	f3ef 8010 	mrs	r0, PRIMASK
    e93c:	b662      	cpsie	i
    e93e:	4770      	bx	lr

0000e940 <am_hal_interrupt_master_disable>:
    e940:	f3ef 8010 	mrs	r0, PRIMASK
    e944:	b672      	cpsid	i
    e946:	4770      	bx	lr

0000e948 <am_hal_interrupt_master_set>:
    e948:	f380 8810 	msr	PRIMASK, r0
    e94c:	4770      	bx	lr
    e94e:	bf00      	nop

0000e950 <internal_iom_reset_on_error>:
    e950:	b570      	push	{r4, r5, r6, lr}
    e952:	6844      	ldr	r4, [r0, #4]
    e954:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e958:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e95c:	3404      	adds	r4, #4
    e95e:	0324      	lsls	r4, r4, #12
    e960:	2300      	movs	r3, #0
    e962:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e966:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e96a:	050b      	lsls	r3, r1, #20
    e96c:	d52a      	bpl.n	e9c4 <internal_iom_reset_on_error+0x74>
    e96e:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e972:	079e      	lsls	r6, r3, #30
    e974:	d450      	bmi.n	ea18 <internal_iom_reset_on_error+0xc8>
    e976:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e97a:	079a      	lsls	r2, r3, #30
    e97c:	d508      	bpl.n	e990 <internal_iom_reset_on_error+0x40>
    e97e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e982:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e986:	2b03      	cmp	r3, #3
    e988:	d9f5      	bls.n	e976 <internal_iom_reset_on_error+0x26>
    e98a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e98e:	e7f6      	b.n	e97e <internal_iom_reset_on_error+0x2e>
    e990:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e994:	f003 0306 	and.w	r3, r3, #6
    e998:	2b04      	cmp	r3, #4
    e99a:	d1f9      	bne.n	e990 <internal_iom_reset_on_error+0x40>
    e99c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e9a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e9a4:	b173      	cbz	r3, e9c4 <internal_iom_reset_on_error+0x74>
    e9a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e9aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e9ae:	2b03      	cmp	r3, #3
    e9b0:	d9f4      	bls.n	e99c <internal_iom_reset_on_error+0x4c>
    e9b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9b6:	e7f6      	b.n	e9a6 <internal_iom_reset_on_error+0x56>
    e9b8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9bc:	f003 0306 	and.w	r3, r3, #6
    e9c0:	2b04      	cmp	r3, #4
    e9c2:	d1f9      	bne.n	e9b8 <internal_iom_reset_on_error+0x68>
    e9c4:	06cb      	lsls	r3, r1, #27
    e9c6:	d520      	bpl.n	ea0a <internal_iom_reset_on_error+0xba>
    e9c8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9cc:	f003 0306 	and.w	r3, r3, #6
    e9d0:	2b04      	cmp	r3, #4
    e9d2:	d1f9      	bne.n	e9c8 <internal_iom_reset_on_error+0x78>
    e9d4:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e9d8:	f36f 1304 	bfc	r3, #4, #1
    e9dc:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e9e0:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e9e4:	f36f 0341 	bfc	r3, #1, #1
    e9e8:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e9ec:	0040      	lsls	r0, r0, #1
    e9ee:	f7ff fd9d 	bl	e52c <am_hal_flash_delay>
    e9f2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e9f6:	f043 0302 	orr.w	r3, r3, #2
    e9fa:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e9fe:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ea02:	f043 0310 	orr.w	r3, r3, #16
    ea06:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ea0a:	f04f 33ff 	mov.w	r3, #4294967295
    ea0e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ea12:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    ea16:	bd70      	pop	{r4, r5, r6, pc}
    ea18:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    ea1c:	4e07      	ldr	r6, [pc, #28]	; (ea3c <internal_iom_reset_on_error+0xec>)
    ea1e:	2a00      	cmp	r2, #0
    ea20:	d0ca      	beq.n	e9b8 <internal_iom_reset_on_error+0x68>
    ea22:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea26:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ea2a:	2b03      	cmp	r3, #3
    ea2c:	d9f9      	bls.n	ea22 <internal_iom_reset_on_error+0xd2>
    ea2e:	2a04      	cmp	r2, #4
    ea30:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    ea34:	d9c0      	bls.n	e9b8 <internal_iom_reset_on_error+0x68>
    ea36:	3a04      	subs	r2, #4
    ea38:	e7f1      	b.n	ea1e <internal_iom_reset_on_error+0xce>
    ea3a:	bf00      	nop
    ea3c:	deadbeef 	.word	0xdeadbeef

0000ea40 <am_hal_iom_initialize>:
    ea40:	2805      	cmp	r0, #5
    ea42:	d901      	bls.n	ea48 <am_hal_iom_initialize+0x8>
    ea44:	2005      	movs	r0, #5
    ea46:	4770      	bx	lr
    ea48:	b1e1      	cbz	r1, ea84 <am_hal_iom_initialize+0x44>
    ea4a:	b4f0      	push	{r4, r5, r6, r7}
    ea4c:	f640 049c 	movw	r4, #2204	; 0x89c
    ea50:	4e0d      	ldr	r6, [pc, #52]	; (ea88 <am_hal_iom_initialize+0x48>)
    ea52:	fb04 f400 	mul.w	r4, r4, r0
    ea56:	1935      	adds	r5, r6, r4
    ea58:	4602      	mov	r2, r0
    ea5a:	78e8      	ldrb	r0, [r5, #3]
    ea5c:	f010 0301 	ands.w	r3, r0, #1
    ea60:	d002      	beq.n	ea68 <am_hal_iom_initialize+0x28>
    ea62:	2007      	movs	r0, #7
    ea64:	bcf0      	pop	{r4, r5, r6, r7}
    ea66:	4770      	bx	lr
    ea68:	f040 0001 	orr.w	r0, r0, #1
    ea6c:	f363 0041 	bfi	r0, r3, #1, #1
    ea70:	70e8      	strb	r0, [r5, #3]
    ea72:	5937      	ldr	r7, [r6, r4]
    ea74:	4805      	ldr	r0, [pc, #20]	; (ea8c <am_hal_iom_initialize+0x4c>)
    ea76:	f360 0717 	bfi	r7, r0, #0, #24
    ea7a:	5137      	str	r7, [r6, r4]
    ea7c:	4618      	mov	r0, r3
    ea7e:	606a      	str	r2, [r5, #4]
    ea80:	600d      	str	r5, [r1, #0]
    ea82:	e7ef      	b.n	ea64 <am_hal_iom_initialize+0x24>
    ea84:	2006      	movs	r0, #6
    ea86:	4770      	bx	lr
    ea88:	10001768 	.word	0x10001768
    ea8c:	00123456 	.word	0x00123456

0000ea90 <am_hal_iom_enable>:
    ea90:	b128      	cbz	r0, ea9e <am_hal_iom_enable+0xe>
    ea92:	6803      	ldr	r3, [r0, #0]
    ea94:	4a34      	ldr	r2, [pc, #208]	; (eb68 <am_hal_iom_enable+0xd8>)
    ea96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea9a:	4293      	cmp	r3, r2
    ea9c:	d001      	beq.n	eaa2 <am_hal_iom_enable+0x12>
    ea9e:	2002      	movs	r0, #2
    eaa0:	4770      	bx	lr
    eaa2:	78c3      	ldrb	r3, [r0, #3]
    eaa4:	079b      	lsls	r3, r3, #30
    eaa6:	d45d      	bmi.n	eb64 <am_hal_iom_enable+0xd4>
    eaa8:	6843      	ldr	r3, [r0, #4]
    eaaa:	7a01      	ldrb	r1, [r0, #8]
    eaac:	b570      	push	{r4, r5, r6, lr}
    eaae:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eab2:	3304      	adds	r3, #4
    eab4:	031b      	lsls	r3, r3, #12
    eab6:	3100      	adds	r1, #0
    eab8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    eabc:	bf18      	it	ne
    eabe:	2101      	movne	r1, #1
    eac0:	f3c2 0242 	ubfx	r2, r2, #1, #3
    eac4:	4291      	cmp	r1, r2
    eac6:	bf0c      	ite	eq
    eac8:	2201      	moveq	r2, #1
    eaca:	2210      	movne	r2, #16
    eacc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ead0:	68c3      	ldr	r3, [r0, #12]
    ead2:	b084      	sub	sp, #16
    ead4:	4604      	mov	r4, r0
    ead6:	2b00      	cmp	r3, #0
    ead8:	d039      	beq.n	eb4e <am_hal_iom_enable+0xbe>
    eada:	6843      	ldr	r3, [r0, #4]
    eadc:	4923      	ldr	r1, [pc, #140]	; (eb6c <am_hal_iom_enable+0xdc>)
    eade:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eae2:	3304      	adds	r3, #4
    eae4:	031a      	lsls	r2, r3, #12
    eae6:	2300      	movs	r3, #0
    eae8:	6243      	str	r3, [r0, #36]	; 0x24
    eaea:	61c3      	str	r3, [r0, #28]
    eaec:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    eaf0:	6902      	ldr	r2, [r0, #16]
    eaf2:	6840      	ldr	r0, [r0, #4]
    eaf4:	68e6      	ldr	r6, [r4, #12]
    eaf6:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    eafa:	2501      	movs	r5, #1
    eafc:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    eb00:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    eb04:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    eb08:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    eb0c:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    eb10:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    eb14:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    eb18:	6223      	str	r3, [r4, #32]
    eb1a:	b2c0      	uxtb	r0, r0
    eb1c:	fa22 f305 	lsr.w	r3, r2, r5
    eb20:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    eb24:	f604 0228 	addw	r2, r4, #2088	; 0x828
    eb28:	a901      	add	r1, sp, #4
    eb2a:	9301      	str	r3, [sp, #4]
    eb2c:	9602      	str	r6, [sp, #8]
    eb2e:	f88d 500c 	strb.w	r5, [sp, #12]
    eb32:	f001 fa49 	bl	ffc8 <am_hal_cmdq_init>
    eb36:	6863      	ldr	r3, [r4, #4]
    eb38:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb3c:	3304      	adds	r3, #4
    eb3e:	031b      	lsls	r3, r3, #12
    eb40:	b960      	cbnz	r0, eb5c <am_hal_iom_enable+0xcc>
    eb42:	f44f 7180 	mov.w	r1, #256	; 0x100
    eb46:	2202      	movs	r2, #2
    eb48:	6221      	str	r1, [r4, #32]
    eb4a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    eb4e:	78e3      	ldrb	r3, [r4, #3]
    eb50:	f043 0302 	orr.w	r3, r3, #2
    eb54:	70e3      	strb	r3, [r4, #3]
    eb56:	2000      	movs	r0, #0
    eb58:	b004      	add	sp, #16
    eb5a:	bd70      	pop	{r4, r5, r6, pc}
    eb5c:	2202      	movs	r2, #2
    eb5e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    eb62:	e7f9      	b.n	eb58 <am_hal_iom_enable+0xc8>
    eb64:	2000      	movs	r0, #0
    eb66:	4770      	bx	lr
    eb68:	01123456 	.word	0x01123456
    eb6c:	00800040 	.word	0x00800040

0000eb70 <am_hal_iom_power_ctrl>:
    eb70:	b140      	cbz	r0, eb84 <am_hal_iom_power_ctrl+0x14>
    eb72:	b538      	push	{r3, r4, r5, lr}
    eb74:	6803      	ldr	r3, [r0, #0]
    eb76:	4c85      	ldr	r4, [pc, #532]	; (ed8c <am_hal_iom_power_ctrl+0x21c>)
    eb78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb7c:	42a3      	cmp	r3, r4
    eb7e:	d003      	beq.n	eb88 <am_hal_iom_power_ctrl+0x18>
    eb80:	2002      	movs	r0, #2
    eb82:	bd38      	pop	{r3, r4, r5, pc}
    eb84:	2002      	movs	r0, #2
    eb86:	4770      	bx	lr
    eb88:	4604      	mov	r4, r0
    eb8a:	4615      	mov	r5, r2
    eb8c:	b199      	cbz	r1, ebb6 <am_hal_iom_power_ctrl+0x46>
    eb8e:	2902      	cmp	r1, #2
    eb90:	d80f      	bhi.n	ebb2 <am_hal_iom_power_ctrl+0x42>
    eb92:	78c3      	ldrb	r3, [r0, #3]
    eb94:	6840      	ldr	r0, [r0, #4]
    eb96:	079a      	lsls	r2, r3, #30
    eb98:	d519      	bpl.n	ebce <am_hal_iom_power_ctrl+0x5e>
    eb9a:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    eb9e:	3304      	adds	r3, #4
    eba0:	031b      	lsls	r3, r3, #12
    eba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    eba6:	f003 0306 	and.w	r3, r3, #6
    ebaa:	2b04      	cmp	r3, #4
    ebac:	d00c      	beq.n	ebc8 <am_hal_iom_power_ctrl+0x58>
    ebae:	2003      	movs	r0, #3
    ebb0:	bd38      	pop	{r3, r4, r5, pc}
    ebb2:	2006      	movs	r0, #6
    ebb4:	bd38      	pop	{r3, r4, r5, pc}
    ebb6:	2a00      	cmp	r2, #0
    ebb8:	f000 80cf 	beq.w	ed5a <am_hal_iom_power_ctrl+0x1ea>
    ebbc:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    ebc0:	2b00      	cmp	r3, #0
    ebc2:	d146      	bne.n	ec52 <am_hal_iom_power_ctrl+0xe2>
    ebc4:	2007      	movs	r0, #7
    ebc6:	bd38      	pop	{r3, r4, r5, pc}
    ebc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d1ef      	bne.n	ebae <am_hal_iom_power_ctrl+0x3e>
    ebce:	b3d5      	cbz	r5, ec46 <am_hal_iom_power_ctrl+0xd6>
    ebd0:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ebd4:	3304      	adds	r3, #4
    ebd6:	031b      	lsls	r3, r3, #12
    ebd8:	2201      	movs	r2, #1
    ebda:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    ebde:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    ebe2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ebe6:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    ebea:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    ebee:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    ebf2:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    ebf6:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    ebfa:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    ebfe:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    ec02:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    ec06:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    ec0a:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    ec0e:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    ec12:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    ec16:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    ec1a:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    ec1e:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    ec22:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    ec26:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    ec2a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    ec2e:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    ec32:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    ec36:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    ec3a:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    ec3e:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    ec42:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    ec46:	3002      	adds	r0, #2
    ec48:	b2c0      	uxtb	r0, r0
    ec4a:	f000 fca1 	bl	f590 <am_hal_pwrctrl_periph_disable>
    ec4e:	2000      	movs	r0, #0
    ec50:	bd38      	pop	{r3, r4, r5, pc}
    ec52:	6843      	ldr	r3, [r0, #4]
    ec54:	1c98      	adds	r0, r3, #2
    ec56:	b2c0      	uxtb	r0, r0
    ec58:	f000 fc70 	bl	f53c <am_hal_pwrctrl_periph_enable>
    ec5c:	6863      	ldr	r3, [r4, #4]
    ec5e:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    ec62:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec66:	3304      	adds	r3, #4
    ec68:	031b      	lsls	r3, r3, #12
    ec6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ec6e:	6863      	ldr	r3, [r4, #4]
    ec70:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    ec74:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec78:	3304      	adds	r3, #4
    ec7a:	031b      	lsls	r3, r3, #12
    ec7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ec80:	6863      	ldr	r3, [r4, #4]
    ec82:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    ec86:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec8a:	3304      	adds	r3, #4
    ec8c:	031b      	lsls	r3, r3, #12
    ec8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ec92:	6863      	ldr	r3, [r4, #4]
    ec94:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    ec98:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec9c:	3304      	adds	r3, #4
    ec9e:	031b      	lsls	r3, r3, #12
    eca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    eca4:	6863      	ldr	r3, [r4, #4]
    eca6:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    ecaa:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecae:	3304      	adds	r3, #4
    ecb0:	031b      	lsls	r3, r3, #12
    ecb2:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    ecb6:	6863      	ldr	r3, [r4, #4]
    ecb8:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    ecbc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecc0:	3304      	adds	r3, #4
    ecc2:	031b      	lsls	r3, r3, #12
    ecc4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    ecc8:	6863      	ldr	r3, [r4, #4]
    ecca:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    ecce:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecd2:	3304      	adds	r3, #4
    ecd4:	031b      	lsls	r3, r3, #12
    ecd6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    ecda:	6863      	ldr	r3, [r4, #4]
    ecdc:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    ece0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ece4:	3304      	adds	r3, #4
    ece6:	031b      	lsls	r3, r3, #12
    ece8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    ecec:	6863      	ldr	r3, [r4, #4]
    ecee:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    ecf2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecf6:	3304      	adds	r3, #4
    ecf8:	031b      	lsls	r3, r3, #12
    ecfa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ecfe:	6863      	ldr	r3, [r4, #4]
    ed00:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    ed04:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed08:	3304      	adds	r3, #4
    ed0a:	031b      	lsls	r3, r3, #12
    ed0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ed10:	6863      	ldr	r3, [r4, #4]
    ed12:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    ed16:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed1a:	3304      	adds	r3, #4
    ed1c:	031b      	lsls	r3, r3, #12
    ed1e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ed22:	6863      	ldr	r3, [r4, #4]
    ed24:	f894 287c 	ldrb.w	r2, [r4, #2172]	; 0x87c
    ed28:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed2c:	3304      	adds	r3, #4
    ed2e:	031b      	lsls	r3, r3, #12
    ed30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    ed34:	6863      	ldr	r3, [r4, #4]
    ed36:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    ed3a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed3e:	3304      	adds	r3, #4
    ed40:	031b      	lsls	r3, r3, #12
    ed42:	f022 0201 	bic.w	r2, r2, #1
    ed46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ed4a:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    ed4e:	07db      	lsls	r3, r3, #31
    ed50:	d40a      	bmi.n	ed68 <am_hal_iom_power_ctrl+0x1f8>
    ed52:	2000      	movs	r0, #0
    ed54:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    ed58:	bd38      	pop	{r3, r4, r5, pc}
    ed5a:	6840      	ldr	r0, [r0, #4]
    ed5c:	3002      	adds	r0, #2
    ed5e:	b2c0      	uxtb	r0, r0
    ed60:	f000 fbec 	bl	f53c <am_hal_pwrctrl_periph_enable>
    ed64:	4628      	mov	r0, r5
    ed66:	bd38      	pop	{r3, r4, r5, pc}
    ed68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ed6a:	b953      	cbnz	r3, ed82 <am_hal_iom_power_ctrl+0x212>
    ed6c:	6863      	ldr	r3, [r4, #4]
    ed6e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed72:	3304      	adds	r3, #4
    ed74:	031b      	lsls	r3, r3, #12
    ed76:	f503 7226 	add.w	r2, r3, #664	; 0x298
    ed7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    ed7e:	e883 000c 	stmia.w	r3, {r2, r3}
    ed82:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    ed86:	f001 f983 	bl	10090 <am_hal_cmdq_enable>
    ed8a:	e7e2      	b.n	ed52 <am_hal_iom_power_ctrl+0x1e2>
    ed8c:	01123456 	.word	0x01123456

0000ed90 <am_hal_iom_configure>:
    ed90:	b128      	cbz	r0, ed9e <am_hal_iom_configure+0xe>
    ed92:	6803      	ldr	r3, [r0, #0]
    ed94:	4a88      	ldr	r2, [pc, #544]	; (efb8 <am_hal_iom_configure+0x228>)
    ed96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ed9a:	4293      	cmp	r3, r2
    ed9c:	d001      	beq.n	eda2 <am_hal_iom_configure+0x12>
    ed9e:	2002      	movs	r0, #2
    eda0:	4770      	bx	lr
    eda2:	b111      	cbz	r1, edaa <am_hal_iom_configure+0x1a>
    eda4:	6843      	ldr	r3, [r0, #4]
    eda6:	2b05      	cmp	r3, #5
    eda8:	d901      	bls.n	edae <am_hal_iom_configure+0x1e>
    edaa:	2006      	movs	r0, #6
    edac:	4770      	bx	lr
    edae:	78c2      	ldrb	r2, [r0, #3]
    edb0:	0792      	lsls	r2, r2, #30
    edb2:	d501      	bpl.n	edb8 <am_hal_iom_configure+0x28>
    edb4:	2007      	movs	r0, #7
    edb6:	4770      	bx	lr
    edb8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edbc:	3304      	adds	r3, #4
    edbe:	780a      	ldrb	r2, [r1, #0]
    edc0:	031b      	lsls	r3, r3, #12
    edc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edc6:	f241 0410 	movw	r4, #4112	; 0x1010
    edca:	7202      	strb	r2, [r0, #8]
    edcc:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    edd0:	b92a      	cbnz	r2, edde <am_hal_iom_configure+0x4e>
    edd2:	7a0e      	ldrb	r6, [r1, #8]
    edd4:	2e03      	cmp	r6, #3
    edd6:	d907      	bls.n	ede8 <am_hal_iom_configure+0x58>
    edd8:	2006      	movs	r0, #6
    edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edde:	2a01      	cmp	r2, #1
    ede0:	d06a      	beq.n	eeb8 <am_hal_iom_configure+0x128>
    ede2:	2005      	movs	r0, #5
    ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ede8:	f8d1 a004 	ldr.w	sl, [r1, #4]
    edec:	4a73      	ldr	r2, [pc, #460]	; (efbc <am_hal_iom_configure+0x22c>)
    edee:	4592      	cmp	sl, r2
    edf0:	d8f2      	bhi.n	edd8 <am_hal_iom_configure+0x48>
    edf2:	f1ba 0f00 	cmp.w	sl, #0
    edf6:	d03e      	beq.n	ee76 <am_hal_iom_configure+0xe6>
    edf8:	fbb2 f2fa 	udiv	r2, r2, sl
    edfc:	fb0a f402 	mul.w	r4, sl, r2
    ee00:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    ee04:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    ee08:	2c00      	cmp	r4, #0
    ee0a:	bf0c      	ite	eq
    ee0c:	4614      	moveq	r4, r2
    ee0e:	1c54      	addne	r4, r2, #1
    ee10:	4262      	negs	r2, r4
    ee12:	4022      	ands	r2, r4
    ee14:	fab2 f282 	clz	r2, r2
    ee18:	f1c2 021f 	rsb	r2, r2, #31
    ee1c:	2a06      	cmp	r2, #6
    ee1e:	bfa8      	it	ge
    ee20:	2206      	movge	r2, #6
    ee22:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    ee26:	f240 80c0 	bls.w	efaa <am_hal_iom_configure+0x21a>
    ee2a:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    ee2e:	4f64      	ldr	r7, [pc, #400]	; (efc0 <am_hal_iom_configure+0x230>)
    ee30:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    ee34:	42bd      	cmp	r5, r7
    ee36:	bf8c      	ite	hi
    ee38:	f04f 0800 	movhi.w	r8, #0
    ee3c:	f04f 0801 	movls.w	r8, #1
    ee40:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    ee44:	f10e 0e01 	add.w	lr, lr, #1
    ee48:	fa0e f702 	lsl.w	r7, lr, r2
    ee4c:	fbb4 f5f7 	udiv	r5, r4, r7
    ee50:	fb07 4715 	mls	r7, r7, r5, r4
    ee54:	2f00      	cmp	r7, #0
    ee56:	bf18      	it	ne
    ee58:	3501      	addne	r5, #1
    ee5a:	fab5 f785 	clz	r7, r5
    ee5e:	f1c7 071f 	rsb	r7, r7, #31
    ee62:	2f07      	cmp	r7, #7
    ee64:	f240 809e 	bls.w	efa4 <am_hal_iom_configure+0x214>
    ee68:	3a07      	subs	r2, #7
    ee6a:	443a      	add	r2, r7
    ee6c:	f102 0901 	add.w	r9, r2, #1
    ee70:	f1b9 0f07 	cmp.w	r9, #7
    ee74:	d934      	bls.n	eee0 <am_hal_iom_configure+0x150>
    ee76:	2400      	movs	r4, #0
    ee78:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    ee7c:	f044 0401 	orr.w	r4, r4, #1
    ee80:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    ee84:	68cb      	ldr	r3, [r1, #12]
    ee86:	684d      	ldr	r5, [r1, #4]
    ee88:	690c      	ldr	r4, [r1, #16]
    ee8a:	60c3      	str	r3, [r0, #12]
    ee8c:	2300      	movs	r3, #0
    ee8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ee92:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    ee96:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    ee9a:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    ee9e:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    eea2:	6104      	str	r4, [r0, #16]
    eea4:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    eea8:	4a44      	ldr	r2, [pc, #272]	; (efbc <am_hal_iom_configure+0x22c>)
    eeaa:	fbb2 f2f5 	udiv	r2, r2, r5
    eeae:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    eeb2:	4618      	mov	r0, r3
    eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eeb8:	684a      	ldr	r2, [r1, #4]
    eeba:	4c42      	ldr	r4, [pc, #264]	; (efc4 <am_hal_iom_configure+0x234>)
    eebc:	42a2      	cmp	r2, r4
    eebe:	d06c      	beq.n	ef9a <am_hal_iom_configure+0x20a>
    eec0:	4c41      	ldr	r4, [pc, #260]	; (efc8 <am_hal_iom_configure+0x238>)
    eec2:	42a2      	cmp	r2, r4
    eec4:	d064      	beq.n	ef90 <am_hal_iom_configure+0x200>
    eec6:	4c41      	ldr	r4, [pc, #260]	; (efcc <am_hal_iom_configure+0x23c>)
    eec8:	42a2      	cmp	r2, r4
    eeca:	d185      	bne.n	edd8 <am_hal_iom_configure+0x48>
    eecc:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    eed0:	4a3f      	ldr	r2, [pc, #252]	; (efd0 <am_hal_iom_configure+0x240>)
    eed2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eed6:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    eeda:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    eede:	e7cd      	b.n	ee7c <am_hal_iom_configure+0xec>
    eee0:	3f07      	subs	r7, #7
    eee2:	f04f 0c01 	mov.w	ip, #1
    eee6:	fa0c fc07 	lsl.w	ip, ip, r7
    eeea:	f10c 3cff 	add.w	ip, ip, #4294967295
    eeee:	ea0c 0c05 	and.w	ip, ip, r5
    eef2:	40fd      	lsrs	r5, r7
    eef4:	f1bc 0f00 	cmp.w	ip, #0
    eef8:	bf18      	it	ne
    eefa:	3501      	addne	r5, #1
    eefc:	4f35      	ldr	r7, [pc, #212]	; (efd4 <am_hal_iom_configure+0x244>)
    eefe:	45ba      	cmp	sl, r7
    ef00:	d843      	bhi.n	ef8a <am_hal_iom_configure+0x1fa>
    ef02:	f04f 0c01 	mov.w	ip, #1
    ef06:	fa0c fc02 	lsl.w	ip, ip, r2
    ef0a:	ebbc 0c04 	subs.w	ip, ip, r4
    ef0e:	bf18      	it	ne
    ef10:	f04f 0c01 	movne.w	ip, #1
    ef14:	1074      	asrs	r4, r6, #1
    ef16:	2c01      	cmp	r4, #1
    ef18:	d04a      	beq.n	efb0 <am_hal_iom_configure+0x220>
    ef1a:	3d01      	subs	r5, #1
    ef1c:	086f      	lsrs	r7, r5, #1
    ef1e:	fa0e f402 	lsl.w	r4, lr, r2
    ef22:	fb05 fe0c 	mul.w	lr, r5, ip
    ef26:	fb0e 4404 	mla	r4, lr, r4, r4
    ef2a:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    ef2e:	f8df 908c 	ldr.w	r9, [pc, #140]	; efbc <am_hal_iom_configure+0x22c>
    ef32:	fbb9 fbf4 	udiv	fp, r9, r4
    ef36:	fb04 fa0b 	mul.w	sl, r4, fp
    ef3a:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    ef3e:	0864      	lsrs	r4, r4, #1
    ef40:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    ef44:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    ef48:	4554      	cmp	r4, sl
    ef4a:	bf2c      	ite	cs
    ef4c:	46da      	movcs	sl, fp
    ef4e:	f10b 0a01 	addcc.w	sl, fp, #1
    ef52:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    ef56:	f8df b090 	ldr.w	fp, [pc, #144]	; efe8 <am_hal_iom_configure+0x258>
    ef5a:	fbba f4fb 	udiv	r4, sl, fp
    ef5e:	043f      	lsls	r7, r7, #16
    ef60:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    ef64:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    ef68:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    ef6c:	fb0b ab14 	mls	fp, fp, r4, sl
    ef70:	432f      	orrs	r7, r5
    ef72:	f1bb 0f00 	cmp.w	fp, #0
    ef76:	d105      	bne.n	ef84 <am_hal_iom_configure+0x1f4>
    ef78:	b124      	cbz	r4, ef84 <am_hal_iom_configure+0x1f4>
    ef7a:	1e65      	subs	r5, r4, #1
    ef7c:	4225      	tst	r5, r4
    ef7e:	d101      	bne.n	ef84 <am_hal_iom_configure+0x1f4>
    ef80:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    ef84:	2400      	movs	r4, #0
    ef86:	433c      	orrs	r4, r7
    ef88:	e776      	b.n	ee78 <am_hal_iom_configure+0xe8>
    ef8a:	f04f 0c00 	mov.w	ip, #0
    ef8e:	e7c1      	b.n	ef14 <am_hal_iom_configure+0x184>
    ef90:	4a11      	ldr	r2, [pc, #68]	; (efd8 <am_hal_iom_configure+0x248>)
    ef92:	4c12      	ldr	r4, [pc, #72]	; (efdc <am_hal_iom_configure+0x24c>)
    ef94:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ef98:	e770      	b.n	ee7c <am_hal_iom_configure+0xec>
    ef9a:	4a11      	ldr	r2, [pc, #68]	; (efe0 <am_hal_iom_configure+0x250>)
    ef9c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    efa0:	4c10      	ldr	r4, [pc, #64]	; (efe4 <am_hal_iom_configure+0x254>)
    efa2:	e76b      	b.n	ee7c <am_hal_iom_configure+0xec>
    efa4:	f102 0901 	add.w	r9, r2, #1
    efa8:	e7a8      	b.n	eefc <am_hal_iom_configure+0x16c>
    efaa:	f04f 0801 	mov.w	r8, #1
    efae:	e747      	b.n	ee40 <am_hal_iom_configure+0xb0>
    efb0:	1eaf      	subs	r7, r5, #2
    efb2:	087f      	lsrs	r7, r7, #1
    efb4:	3d01      	subs	r5, #1
    efb6:	e7b2      	b.n	ef1e <am_hal_iom_configure+0x18e>
    efb8:	01123456 	.word	0x01123456
    efbc:	02dc6c00 	.word	0x02dc6c00
    efc0:	007a11ff 	.word	0x007a11ff
    efc4:	00061a80 	.word	0x00061a80
    efc8:	000f4240 	.word	0x000f4240
    efcc:	000186a0 	.word	0x000186a0
    efd0:	0003f070 	.word	0x0003f070
    efd4:	00b71aff 	.word	0x00b71aff
    efd8:	00213040 	.word	0x00213040
    efdc:	06031301 	.word	0x06031301
    efe0:	0003f270 	.word	0x0003f270
    efe4:	1d0e1201 	.word	0x1d0e1201
    efe8:	0003d090 	.word	0x0003d090

0000efec <am_hal_iom_blocking_transfer>:
    efec:	b128      	cbz	r0, effa <am_hal_iom_blocking_transfer+0xe>
    efee:	6803      	ldr	r3, [r0, #0]
    eff0:	4ac8      	ldr	r2, [pc, #800]	; (f314 <am_hal_iom_blocking_transfer+0x328>)
    eff2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eff6:	4293      	cmp	r3, r2
    eff8:	d001      	beq.n	effe <am_hal_iom_blocking_transfer+0x12>
    effa:	2002      	movs	r0, #2
    effc:	4770      	bx	lr
    effe:	b159      	cbz	r1, f018 <am_hal_iom_blocking_transfer+0x2c>
    f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f004:	f891 8010 	ldrb.w	r8, [r1, #16]
    f008:	f1b8 0f01 	cmp.w	r8, #1
    f00c:	b087      	sub	sp, #28
    f00e:	d905      	bls.n	f01c <am_hal_iom_blocking_transfer+0x30>
    f010:	2007      	movs	r0, #7
    f012:	b007      	add	sp, #28
    f014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f018:	2006      	movs	r0, #6
    f01a:	4770      	bx	lr
    f01c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    f020:	f1ba 0f00 	cmp.w	sl, #0
    f024:	d102      	bne.n	f02c <am_hal_iom_blocking_transfer+0x40>
    f026:	f881 a010 	strb.w	sl, [r1, #16]
    f02a:	46d0      	mov	r8, sl
    f02c:	f8d1 9004 	ldr.w	r9, [r1, #4]
    f030:	f1b9 0f03 	cmp.w	r9, #3
    f034:	d901      	bls.n	f03a <am_hal_iom_blocking_transfer+0x4e>
    f036:	2006      	movs	r0, #6
    f038:	e7eb      	b.n	f012 <am_hal_iom_blocking_transfer+0x26>
    f03a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    f03e:	f04f 33ff 	mov.w	r3, #4294967295
    f042:	f8d1 b008 	ldr.w	fp, [r1, #8]
    f046:	4093      	lsls	r3, r2
    f048:	ea13 0f0b 	tst.w	r3, fp
    f04c:	d1f3      	bne.n	f036 <am_hal_iom_blocking_transfer+0x4a>
    f04e:	f1ba 0f00 	cmp.w	sl, #0
    f052:	f000 80c5 	beq.w	f1e0 <am_hal_iom_blocking_transfer+0x1f4>
    f056:	f1b8 0f00 	cmp.w	r8, #0
    f05a:	f000 80d3 	beq.w	f204 <am_hal_iom_blocking_transfer+0x218>
    f05e:	698b      	ldr	r3, [r1, #24]
    f060:	2b00      	cmp	r3, #0
    f062:	d0e8      	beq.n	f036 <am_hal_iom_blocking_transfer+0x4a>
    f064:	7a03      	ldrb	r3, [r0, #8]
    f066:	2b01      	cmp	r3, #1
    f068:	f040 80be 	bne.w	f1e8 <am_hal_iom_blocking_transfer+0x1fc>
    f06c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f070:	d8e1      	bhi.n	f036 <am_hal_iom_blocking_transfer+0x4a>
    f072:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    f076:	2b02      	cmp	r3, #2
    f078:	d0ca      	beq.n	f010 <am_hal_iom_blocking_transfer+0x24>
    f07a:	7f0b      	ldrb	r3, [r1, #28]
    f07c:	694f      	ldr	r7, [r1, #20]
    f07e:	f8d1 e018 	ldr.w	lr, [r1, #24]
    f082:	9303      	str	r3, [sp, #12]
    f084:	4604      	mov	r4, r0
    f086:	2301      	movs	r3, #1
    f088:	460d      	mov	r5, r1
    f08a:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    f08e:	6866      	ldr	r6, [r4, #4]
    f090:	9300      	str	r3, [sp, #0]
    f092:	f04f 32ff 	mov.w	r2, #4294967295
    f096:	2300      	movs	r3, #0
    f098:	f104 0124 	add.w	r1, r4, #36	; 0x24
    f09c:	4598      	cmp	r8, r3
    f09e:	bf18      	it	ne
    f0a0:	4677      	movne	r7, lr
    f0a2:	f7ff fa53 	bl	e54c <am_hal_flash_delay_status_check>
    f0a6:	2800      	cmp	r0, #0
    f0a8:	d1b3      	bne.n	f012 <am_hal_iom_blocking_transfer+0x26>
    f0aa:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    f0ae:	3604      	adds	r6, #4
    f0b0:	2301      	movs	r3, #1
    f0b2:	0336      	lsls	r6, r6, #12
    f0b4:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    f0b8:	9300      	str	r3, [sp, #0]
    f0ba:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    f0be:	9304      	str	r3, [sp, #16]
    f0c0:	4619      	mov	r1, r3
    f0c2:	2206      	movs	r2, #6
    f0c4:	2304      	movs	r3, #4
    f0c6:	f7ff fa41 	bl	e54c <am_hal_flash_delay_status_check>
    f0ca:	2800      	cmp	r0, #0
    f0cc:	d1a1      	bne.n	f012 <am_hal_iom_blocking_transfer+0x26>
    f0ce:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    f0d2:	9305      	str	r3, [sp, #20]
    f0d4:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f0d8:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    f0dc:	f04f 32ff 	mov.w	r2, #4294967295
    f0e0:	f360 0300 	bfi	r3, r0, #0, #1
    f0e4:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    f0e8:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    f0ec:	682b      	ldr	r3, [r5, #0]
    f0ee:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    f0f2:	7a23      	ldrb	r3, [r4, #8]
    f0f4:	b91b      	cbnz	r3, f0fe <am_hal_iom_blocking_transfer+0x112>
    f0f6:	682b      	ldr	r3, [r5, #0]
    f0f8:	4423      	add	r3, r4
    f0fa:	f893 0898 	ldrb.w	r0, [r3, #2200]	; 0x898
    f0fe:	f8c6 021c 	str.w	r0, [r6, #540]	; 0x21c
    f102:	7a23      	ldrb	r3, [r4, #8]
    f104:	2b00      	cmp	r3, #0
    f106:	d17b      	bne.n	f200 <am_hal_iom_blocking_transfer+0x214>
    f108:	682b      	ldr	r3, [r5, #0]
    f10a:	4a83      	ldr	r2, [pc, #524]	; (f318 <am_hal_iom_blocking_transfer+0x32c>)
    f10c:	051b      	lsls	r3, r3, #20
    f10e:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    f112:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    f116:	ea0a 0202 	and.w	r2, sl, r2
    f11a:	f1b8 0f01 	cmp.w	r8, #1
    f11e:	ea42 0203 	orr.w	r2, r2, r3
    f122:	d074      	beq.n	f20e <am_hal_iom_blocking_transfer+0x222>
    f124:	f3cb 230f 	ubfx	r3, fp, #8, #16
    f128:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    f12c:	ea4f 1149 	mov.w	r1, r9, lsl #5
    f130:	ea4f 600b 	mov.w	r0, fp, lsl #24
    f134:	f040 0001 	orr.w	r0, r0, #1
    f138:	f001 0160 	and.w	r1, r1, #96	; 0x60
    f13c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f140:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f144:	4301      	orrs	r1, r0
    f146:	9803      	ldr	r0, [sp, #12]
    f148:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f14c:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    f150:	2b03      	cmp	r3, #3
    f152:	ea42 0201 	orr.w	r2, r2, r1
    f156:	f240 80b8 	bls.w	f2ca <am_hal_iom_blocking_transfer+0x2de>
    f15a:	f1b8 0f00 	cmp.w	r8, #0
    f15e:	d00a      	beq.n	f176 <am_hal_iom_blocking_transfer+0x18a>
    f160:	4641      	mov	r1, r8
    f162:	f857 0b04 	ldr.w	r0, [r7], #4
    f166:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    f16a:	2903      	cmp	r1, #3
    f16c:	f1a3 0304 	sub.w	r3, r3, #4
    f170:	f1a1 0104 	sub.w	r1, r1, #4
    f174:	d82f      	bhi.n	f1d6 <am_hal_iom_blocking_transfer+0x1ea>
    f176:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f17a:	f04f 0800 	mov.w	r8, #0
    f17e:	2701      	movs	r7, #1
    f180:	9904      	ldr	r1, [sp, #16]
    f182:	9700      	str	r7, [sp, #0]
    f184:	2304      	movs	r3, #4
    f186:	2206      	movs	r2, #6
    f188:	4864      	ldr	r0, [pc, #400]	; (f31c <am_hal_iom_blocking_transfer+0x330>)
    f18a:	f7ff f9df 	bl	e54c <am_hal_flash_delay_status_check>
    f18e:	4605      	mov	r5, r0
    f190:	b978      	cbnz	r0, f1b2 <am_hal_iom_blocking_transfer+0x1c6>
    f192:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f196:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    f19a:	f040 8090 	bne.w	f2be <am_hal_iom_blocking_transfer+0x2d2>
    f19e:	0599      	lsls	r1, r3, #22
    f1a0:	f100 8090 	bmi.w	f2c4 <am_hal_iom_blocking_transfer+0x2d8>
    f1a4:	06da      	lsls	r2, r3, #27
    f1a6:	f100 80d2 	bmi.w	f34e <am_hal_iom_blocking_transfer+0x362>
    f1aa:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    f1ae:	d00e      	beq.n	f1ce <am_hal_iom_blocking_transfer+0x1e2>
    f1b0:	463d      	mov	r5, r7
    f1b2:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    f1b6:	4620      	mov	r0, r4
    f1b8:	f7ff fbca 	bl	e950 <internal_iom_reset_on_error>
    f1bc:	f04f 33ff 	mov.w	r3, #4294967295
    f1c0:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    f1c4:	9b05      	ldr	r3, [sp, #20]
    f1c6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    f1ca:	4628      	mov	r0, r5
    f1cc:	e721      	b.n	f012 <am_hal_iom_blocking_transfer+0x26>
    f1ce:	f1b8 0f00 	cmp.w	r8, #0
    f1d2:	d0f3      	beq.n	f1bc <am_hal_iom_blocking_transfer+0x1d0>
    f1d4:	e7ec      	b.n	f1b0 <am_hal_iom_blocking_transfer+0x1c4>
    f1d6:	2b03      	cmp	r3, #3
    f1d8:	d976      	bls.n	f2c8 <am_hal_iom_blocking_transfer+0x2dc>
    f1da:	2900      	cmp	r1, #0
    f1dc:	d1c1      	bne.n	f162 <am_hal_iom_blocking_transfer+0x176>
    f1de:	e7ca      	b.n	f176 <am_hal_iom_blocking_transfer+0x18a>
    f1e0:	7a03      	ldrb	r3, [r0, #8]
    f1e2:	2b01      	cmp	r3, #1
    f1e4:	f43f af45 	beq.w	f072 <am_hal_iom_blocking_transfer+0x86>
    f1e8:	2b00      	cmp	r3, #0
    f1ea:	f47f af42 	bne.w	f072 <am_hal_iom_blocking_transfer+0x86>
    f1ee:	680b      	ldr	r3, [r1, #0]
    f1f0:	2b03      	cmp	r3, #3
    f1f2:	f63f af20 	bhi.w	f036 <am_hal_iom_blocking_transfer+0x4a>
    f1f6:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    f1fa:	f4bf af1c 	bcs.w	f036 <am_hal_iom_blocking_transfer+0x4a>
    f1fe:	e738      	b.n	f072 <am_hal_iom_blocking_transfer+0x86>
    f200:	2300      	movs	r3, #0
    f202:	e782      	b.n	f10a <am_hal_iom_blocking_transfer+0x11e>
    f204:	694b      	ldr	r3, [r1, #20]
    f206:	2b00      	cmp	r3, #0
    f208:	f47f af2c 	bne.w	f064 <am_hal_iom_blocking_transfer+0x78>
    f20c:	e713      	b.n	f036 <am_hal_iom_blocking_transfer+0x4a>
    f20e:	ea4f 1349 	mov.w	r3, r9, lsl #5
    f212:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    f216:	ea4f 610b 	mov.w	r1, fp, lsl #24
    f21a:	9b03      	ldr	r3, [sp, #12]
    f21c:	f041 0102 	orr.w	r1, r1, #2
    f220:	f3cb 200f 	ubfx	r0, fp, #8, #16
    f224:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    f228:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f22c:	ea4e 0301 	orr.w	r3, lr, r1
    f230:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f234:	431a      	orrs	r2, r3
    f236:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f23a:	2200      	movs	r2, #0
    f23c:	f1b8 0f00 	cmp.w	r8, #0
    f240:	d09b      	beq.n	f17a <am_hal_iom_blocking_transfer+0x18e>
    f242:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f246:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f24a:	2b03      	cmp	r3, #3
    f24c:	d81e      	bhi.n	f28c <am_hal_iom_blocking_transfer+0x2a0>
    f24e:	4d33      	ldr	r5, [pc, #204]	; (f31c <am_hal_iom_blocking_transfer+0x330>)
    f250:	e001      	b.n	f256 <am_hal_iom_blocking_transfer+0x26a>
    f252:	3d01      	subs	r5, #1
    f254:	d093      	beq.n	f17e <am_hal_iom_blocking_transfer+0x192>
    f256:	2010      	movs	r0, #16
    f258:	b10a      	cbz	r2, f25e <am_hal_iom_blocking_transfer+0x272>
    f25a:	4598      	cmp	r8, r3
    f25c:	d88f      	bhi.n	f17e <am_hal_iom_blocking_transfer+0x192>
    f25e:	f7ff f965 	bl	e52c <am_hal_flash_delay>
    f262:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    f266:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f26a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f26e:	2b03      	cmp	r3, #3
    f270:	f002 0201 	and.w	r2, r2, #1
    f274:	d9ed      	bls.n	f252 <am_hal_iom_blocking_transfer+0x266>
    f276:	e009      	b.n	f28c <am_hal_iom_blocking_transfer+0x2a0>
    f278:	2b03      	cmp	r3, #3
    f27a:	6039      	str	r1, [r7, #0]
    f27c:	f1a8 0804 	sub.w	r8, r8, #4
    f280:	d967      	bls.n	f352 <am_hal_iom_blocking_transfer+0x366>
    f282:	f1b8 0f00 	cmp.w	r8, #0
    f286:	f43f af78 	beq.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f28a:	4607      	mov	r7, r0
    f28c:	f1b8 0f03 	cmp.w	r8, #3
    f290:	f1a3 0304 	sub.w	r3, r3, #4
    f294:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    f298:	f107 0004 	add.w	r0, r7, #4
    f29c:	d8ec      	bhi.n	f278 <am_hal_iom_blocking_transfer+0x28c>
    f29e:	f1b8 0f01 	cmp.w	r8, #1
    f2a2:	7039      	strb	r1, [r7, #0]
    f2a4:	ea4f 2311 	mov.w	r3, r1, lsr #8
    f2a8:	f43f af67 	beq.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f2ac:	f1b8 0f02 	cmp.w	r8, #2
    f2b0:	707b      	strb	r3, [r7, #1]
    f2b2:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f2b6:	f43f af60 	beq.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f2ba:	70b9      	strb	r1, [r7, #2]
    f2bc:	e75d      	b.n	f17a <am_hal_iom_blocking_transfer+0x18e>
    f2be:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f2c2:	e776      	b.n	f1b2 <am_hal_iom_blocking_transfer+0x1c6>
    f2c4:	4d16      	ldr	r5, [pc, #88]	; (f320 <am_hal_iom_blocking_transfer+0x334>)
    f2c6:	e774      	b.n	f1b2 <am_hal_iom_blocking_transfer+0x1c6>
    f2c8:	4688      	mov	r8, r1
    f2ca:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f2ce:	f1b8 0f00 	cmp.w	r8, #0
    f2d2:	f43f af52 	beq.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f2d6:	463b      	mov	r3, r7
    f2d8:	4647      	mov	r7, r8
    f2da:	4698      	mov	r8, r3
    f2dc:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f2e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f2e4:	2b03      	cmp	r3, #3
    f2e6:	d820      	bhi.n	f32a <am_hal_iom_blocking_transfer+0x33e>
    f2e8:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f2ec:	07d8      	lsls	r0, r3, #31
    f2ee:	d42c      	bmi.n	f34a <am_hal_iom_blocking_transfer+0x35e>
    f2f0:	4d0a      	ldr	r5, [pc, #40]	; (f31c <am_hal_iom_blocking_transfer+0x330>)
    f2f2:	e005      	b.n	f300 <am_hal_iom_blocking_transfer+0x314>
    f2f4:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f2f8:	07db      	lsls	r3, r3, #31
    f2fa:	d426      	bmi.n	f34a <am_hal_iom_blocking_transfer+0x35e>
    f2fc:	3d01      	subs	r5, #1
    f2fe:	d024      	beq.n	f34a <am_hal_iom_blocking_transfer+0x35e>
    f300:	2010      	movs	r0, #16
    f302:	f7ff f913 	bl	e52c <am_hal_flash_delay>
    f306:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f30a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f30e:	2b03      	cmp	r3, #3
    f310:	d9f0      	bls.n	f2f4 <am_hal_iom_blocking_transfer+0x308>
    f312:	e00a      	b.n	f32a <am_hal_iom_blocking_transfer+0x33e>
    f314:	01123456 	.word	0x01123456
    f318:	000fff00 	.word	0x000fff00
    f31c:	0007a120 	.word	0x0007a120
    f320:	08000001 	.word	0x08000001
    f324:	2f00      	cmp	r7, #0
    f326:	f43f af28 	beq.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f32a:	f858 2b04 	ldr.w	r2, [r8], #4
    f32e:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f332:	2f03      	cmp	r7, #3
    f334:	f1a3 0304 	sub.w	r3, r3, #4
    f338:	f1a7 0704 	sub.w	r7, r7, #4
    f33c:	f67f af1d 	bls.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f340:	2b03      	cmp	r3, #3
    f342:	d8ef      	bhi.n	f324 <am_hal_iom_blocking_transfer+0x338>
    f344:	2f00      	cmp	r7, #0
    f346:	d1c9      	bne.n	f2dc <am_hal_iom_blocking_transfer+0x2f0>
    f348:	e717      	b.n	f17a <am_hal_iom_blocking_transfer+0x18e>
    f34a:	46b8      	mov	r8, r7
    f34c:	e717      	b.n	f17e <am_hal_iom_blocking_transfer+0x192>
    f34e:	4d04      	ldr	r5, [pc, #16]	; (f360 <am_hal_iom_blocking_transfer+0x374>)
    f350:	e72f      	b.n	f1b2 <am_hal_iom_blocking_transfer+0x1c6>
    f352:	f1b8 0f00 	cmp.w	r8, #0
    f356:	f43f af10 	beq.w	f17a <am_hal_iom_blocking_transfer+0x18e>
    f35a:	4607      	mov	r7, r0
    f35c:	e771      	b.n	f242 <am_hal_iom_blocking_transfer+0x256>
    f35e:	bf00      	nop
    f360:	08000002 	.word	0x08000002

0000f364 <am_hal_itm_disable>:
    f364:	b510      	push	{r4, lr}
    f366:	4b25      	ldr	r3, [pc, #148]	; (f3fc <am_hal_itm_disable+0x98>)
    f368:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f36c:	b9b3      	cbnz	r3, f39c <am_hal_itm_disable+0x38>
    f36e:	4b24      	ldr	r3, [pc, #144]	; (f400 <am_hal_itm_disable+0x9c>)
    f370:	68da      	ldr	r2, [r3, #12]
    f372:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f376:	60da      	str	r2, [r3, #12]
    f378:	68da      	ldr	r2, [r3, #12]
    f37a:	01d2      	lsls	r2, r2, #7
    f37c:	d5fc      	bpl.n	f378 <am_hal_itm_disable+0x14>
    f37e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f382:	4920      	ldr	r1, [pc, #128]	; (f404 <am_hal_itm_disable+0xa0>)
    f384:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f388:	4a1f      	ldr	r2, [pc, #124]	; (f408 <am_hal_itm_disable+0xa4>)
    f38a:	200f      	movs	r0, #15
    f38c:	f04f 31ff 	mov.w	r1, #4294967295
    f390:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f394:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f398:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f39c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f3a0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f3a4:	021b      	lsls	r3, r3, #8
    f3a6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f3aa:	d4f9      	bmi.n	f3a0 <am_hal_itm_disable+0x3c>
    f3ac:	f44f 7048 	mov.w	r0, #800	; 0x320
    f3b0:	f7ff f8bc 	bl	e52c <am_hal_flash_delay>
    f3b4:	4b13      	ldr	r3, [pc, #76]	; (f404 <am_hal_itm_disable+0xa0>)
    f3b6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f3ba:	4621      	mov	r1, r4
    f3bc:	2064      	movs	r0, #100	; 0x64
    f3be:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f3c2:	f023 0301 	bic.w	r3, r3, #1
    f3c6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f3ca:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f3ce:	4b0f      	ldr	r3, [pc, #60]	; (f40c <am_hal_itm_disable+0xa8>)
    f3d0:	4013      	ands	r3, r2
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	d1f9      	bne.n	f3ca <am_hal_itm_disable+0x66>
    f3d6:	3801      	subs	r0, #1
    f3d8:	d1f1      	bne.n	f3be <am_hal_itm_disable+0x5a>
    f3da:	4a09      	ldr	r2, [pc, #36]	; (f400 <am_hal_itm_disable+0x9c>)
    f3dc:	68d3      	ldr	r3, [r2, #12]
    f3de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f3e2:	60d3      	str	r3, [r2, #12]
    f3e4:	68d3      	ldr	r3, [r2, #12]
    f3e6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f3ea:	d1fb      	bne.n	f3e4 <am_hal_itm_disable+0x80>
    f3ec:	4a03      	ldr	r2, [pc, #12]	; (f3fc <am_hal_itm_disable+0x98>)
    f3ee:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f3f2:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	d1fb      	bne.n	f3f2 <am_hal_itm_disable+0x8e>
    f3fa:	bd10      	pop	{r4, pc}
    f3fc:	40020000 	.word	0x40020000
    f400:	e000edf0 	.word	0xe000edf0
    f404:	c5acce55 	.word	0xc5acce55
    f408:	00150511 	.word	0x00150511
    f40c:	00800001 	.word	0x00800001

0000f410 <am_hal_mcuctrl_info_get>:
    f410:	b4f0      	push	{r4, r5, r6, r7}
    f412:	b121      	cbz	r1, f41e <am_hal_mcuctrl_info_get+0xe>
    f414:	2801      	cmp	r0, #1
    f416:	d038      	beq.n	f48a <am_hal_mcuctrl_info_get+0x7a>
    f418:	d320      	bcc.n	f45c <am_hal_mcuctrl_info_get+0x4c>
    f41a:	2802      	cmp	r0, #2
    f41c:	d002      	beq.n	f424 <am_hal_mcuctrl_info_get+0x14>
    f41e:	2006      	movs	r0, #6
    f420:	bcf0      	pop	{r4, r5, r6, r7}
    f422:	4770      	bx	lr
    f424:	4a41      	ldr	r2, [pc, #260]	; (f52c <am_hal_mcuctrl_info_get+0x11c>)
    f426:	684d      	ldr	r5, [r1, #4]
    f428:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f42c:	694c      	ldr	r4, [r1, #20]
    f42e:	f003 0601 	and.w	r6, r3, #1
    f432:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f436:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f43a:	700e      	strb	r6, [r1, #0]
    f43c:	7208      	strb	r0, [r1, #8]
    f43e:	740b      	strb	r3, [r1, #16]
    f440:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f444:	60cb      	str	r3, [r1, #12]
    f446:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f44a:	4328      	orrs	r0, r5
    f44c:	6048      	str	r0, [r1, #4]
    f44e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f452:	4323      	orrs	r3, r4
    f454:	2000      	movs	r0, #0
    f456:	614b      	str	r3, [r1, #20]
    f458:	bcf0      	pop	{r4, r5, r6, r7}
    f45a:	4770      	bx	lr
    f45c:	4a33      	ldr	r2, [pc, #204]	; (f52c <am_hal_mcuctrl_info_get+0x11c>)
    f45e:	6993      	ldr	r3, [r2, #24]
    f460:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f464:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f468:	7008      	strb	r0, [r1, #0]
    f46a:	704b      	strb	r3, [r1, #1]
    f46c:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f470:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f474:	710b      	strb	r3, [r1, #4]
    f476:	6953      	ldr	r3, [r2, #20]
    f478:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f47c:	f003 0301 	and.w	r3, r3, #1
    f480:	2000      	movs	r0, #0
    f482:	708a      	strb	r2, [r1, #2]
    f484:	70cb      	strb	r3, [r1, #3]
    f486:	bcf0      	pop	{r4, r5, r6, r7}
    f488:	4770      	bx	lr
    f48a:	4b28      	ldr	r3, [pc, #160]	; (f52c <am_hal_mcuctrl_info_get+0x11c>)
    f48c:	4c28      	ldr	r4, [pc, #160]	; (f530 <am_hal_mcuctrl_info_get+0x120>)
    f48e:	681a      	ldr	r2, [r3, #0]
    f490:	600a      	str	r2, [r1, #0]
    f492:	6858      	ldr	r0, [r3, #4]
    f494:	6048      	str	r0, [r1, #4]
    f496:	6898      	ldr	r0, [r3, #8]
    f498:	6088      	str	r0, [r1, #8]
    f49a:	68d8      	ldr	r0, [r3, #12]
    f49c:	60c8      	str	r0, [r1, #12]
    f49e:	691d      	ldr	r5, [r3, #16]
    f4a0:	4824      	ldr	r0, [pc, #144]	; (f534 <am_hal_mcuctrl_info_get+0x124>)
    f4a2:	610d      	str	r5, [r1, #16]
    f4a4:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f4a8:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f4ac:	695d      	ldr	r5, [r3, #20]
    f4ae:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f4b2:	4b21      	ldr	r3, [pc, #132]	; (f538 <am_hal_mcuctrl_info_get+0x128>)
    f4b4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f4b8:	6208      	str	r0, [r1, #32]
    f4ba:	f002 0201 	and.w	r2, r2, #1
    f4be:	614d      	str	r5, [r1, #20]
    f4c0:	61cc      	str	r4, [r1, #28]
    f4c2:	618a      	str	r2, [r1, #24]
    f4c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f4c8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f4cc:	b2d0      	uxtb	r0, r2
    f4ce:	f004 020f 	and.w	r2, r4, #15
    f4d2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f4d6:	624a      	str	r2, [r1, #36]	; 0x24
    f4d8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f4dc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f4e0:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f4e4:	f004 020f 	and.w	r2, r4, #15
    f4e8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f4ec:	628a      	str	r2, [r1, #40]	; 0x28
    f4ee:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f4f2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f4f6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f4fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f4fe:	4302      	orrs	r2, r0
    f500:	62ca      	str	r2, [r1, #44]	; 0x2c
    f502:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f506:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f50a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f50e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f512:	b2c0      	uxtb	r0, r0
    f514:	0400      	lsls	r0, r0, #16
    f516:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f51a:	b2d2      	uxtb	r2, r2
    f51c:	431a      	orrs	r2, r3
    f51e:	b2e3      	uxtb	r3, r4
    f520:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f524:	630b      	str	r3, [r1, #48]	; 0x30
    f526:	2000      	movs	r0, #0
    f528:	bcf0      	pop	{r4, r5, r6, r7}
    f52a:	4770      	bx	lr
    f52c:	40020000 	.word	0x40020000
    f530:	000106a4 	.word	0x000106a4
    f534:	000106e4 	.word	0x000106e4
    f538:	f0000f00 	.word	0xf0000f00

0000f53c <am_hal_pwrctrl_periph_enable>:
    f53c:	b570      	push	{r4, r5, r6, lr}
    f53e:	b082      	sub	sp, #8
    f540:	4604      	mov	r4, r0
    f542:	f7ff f9fd 	bl	e940 <am_hal_interrupt_master_disable>
    f546:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f54a:	4d0f      	ldr	r5, [pc, #60]	; (f588 <am_hal_pwrctrl_periph_enable+0x4c>)
    f54c:	4e0f      	ldr	r6, [pc, #60]	; (f58c <am_hal_pwrctrl_periph_enable+0x50>)
    f54e:	9001      	str	r0, [sp, #4]
    f550:	00a4      	lsls	r4, r4, #2
    f552:	68aa      	ldr	r2, [r5, #8]
    f554:	5933      	ldr	r3, [r6, r4]
    f556:	4313      	orrs	r3, r2
    f558:	60ab      	str	r3, [r5, #8]
    f55a:	9801      	ldr	r0, [sp, #4]
    f55c:	4434      	add	r4, r6
    f55e:	f7ff f9f3 	bl	e948 <am_hal_interrupt_master_set>
    f562:	20a0      	movs	r0, #160	; 0xa0
    f564:	f7fe ffe2 	bl	e52c <am_hal_flash_delay>
    f568:	69ab      	ldr	r3, [r5, #24]
    f56a:	6864      	ldr	r4, [r4, #4]
    f56c:	4223      	tst	r3, r4
    f56e:	d103      	bne.n	f578 <am_hal_pwrctrl_periph_enable+0x3c>
    f570:	20a0      	movs	r0, #160	; 0xa0
    f572:	f7fe ffdb 	bl	e52c <am_hal_flash_delay>
    f576:	69ab      	ldr	r3, [r5, #24]
    f578:	4b03      	ldr	r3, [pc, #12]	; (f588 <am_hal_pwrctrl_periph_enable+0x4c>)
    f57a:	699b      	ldr	r3, [r3, #24]
    f57c:	4223      	tst	r3, r4
    f57e:	bf0c      	ite	eq
    f580:	2001      	moveq	r0, #1
    f582:	2000      	movne	r0, #0
    f584:	b002      	add	sp, #8
    f586:	bd70      	pop	{r4, r5, r6, pc}
    f588:	40021000 	.word	0x40021000
    f58c:	00010724 	.word	0x00010724

0000f590 <am_hal_pwrctrl_periph_disable>:
    f590:	b570      	push	{r4, r5, r6, lr}
    f592:	b082      	sub	sp, #8
    f594:	4604      	mov	r4, r0
    f596:	f7ff f9d3 	bl	e940 <am_hal_interrupt_master_disable>
    f59a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f59e:	4d10      	ldr	r5, [pc, #64]	; (f5e0 <am_hal_pwrctrl_periph_disable+0x50>)
    f5a0:	4e10      	ldr	r6, [pc, #64]	; (f5e4 <am_hal_pwrctrl_periph_disable+0x54>)
    f5a2:	9001      	str	r0, [sp, #4]
    f5a4:	00a4      	lsls	r4, r4, #2
    f5a6:	68ab      	ldr	r3, [r5, #8]
    f5a8:	5932      	ldr	r2, [r6, r4]
    f5aa:	ea23 0302 	bic.w	r3, r3, r2
    f5ae:	60ab      	str	r3, [r5, #8]
    f5b0:	9801      	ldr	r0, [sp, #4]
    f5b2:	4434      	add	r4, r6
    f5b4:	f7ff f9c8 	bl	e948 <am_hal_interrupt_master_set>
    f5b8:	20a0      	movs	r0, #160	; 0xa0
    f5ba:	f7fe ffb7 	bl	e52c <am_hal_flash_delay>
    f5be:	69ab      	ldr	r3, [r5, #24]
    f5c0:	6864      	ldr	r4, [r4, #4]
    f5c2:	4223      	tst	r3, r4
    f5c4:	d003      	beq.n	f5ce <am_hal_pwrctrl_periph_disable+0x3e>
    f5c6:	20a0      	movs	r0, #160	; 0xa0
    f5c8:	f7fe ffb0 	bl	e52c <am_hal_flash_delay>
    f5cc:	69ab      	ldr	r3, [r5, #24]
    f5ce:	4b04      	ldr	r3, [pc, #16]	; (f5e0 <am_hal_pwrctrl_periph_disable+0x50>)
    f5d0:	699b      	ldr	r3, [r3, #24]
    f5d2:	4223      	tst	r3, r4
    f5d4:	bf14      	ite	ne
    f5d6:	2001      	movne	r0, #1
    f5d8:	2000      	moveq	r0, #0
    f5da:	b002      	add	sp, #8
    f5dc:	bd70      	pop	{r4, r5, r6, pc}
    f5de:	bf00      	nop
    f5e0:	40021000 	.word	0x40021000
    f5e4:	00010724 	.word	0x00010724

0000f5e8 <am_hal_pwrctrl_low_power_init>:
    f5e8:	b530      	push	{r4, r5, lr}
    f5ea:	4b33      	ldr	r3, [pc, #204]	; (f6b8 <am_hal_pwrctrl_low_power_init+0xd0>)
    f5ec:	681a      	ldr	r2, [r3, #0]
    f5ee:	b085      	sub	sp, #20
    f5f0:	b912      	cbnz	r2, f5f8 <am_hal_pwrctrl_low_power_init+0x10>
    f5f2:	4a32      	ldr	r2, [pc, #200]	; (f6bc <am_hal_pwrctrl_low_power_init+0xd4>)
    f5f4:	6812      	ldr	r2, [r2, #0]
    f5f6:	601a      	str	r2, [r3, #0]
    f5f8:	4b31      	ldr	r3, [pc, #196]	; (f6c0 <am_hal_pwrctrl_low_power_init+0xd8>)
    f5fa:	68db      	ldr	r3, [r3, #12]
    f5fc:	b2db      	uxtb	r3, r3
    f5fe:	2b12      	cmp	r3, #18
    f600:	d00a      	beq.n	f618 <am_hal_pwrctrl_low_power_init+0x30>
    f602:	4c30      	ldr	r4, [pc, #192]	; (f6c4 <am_hal_pwrctrl_low_power_init+0xdc>)
    f604:	2100      	movs	r1, #0
    f606:	200c      	movs	r0, #12
    f608:	f7fe fc90 	bl	df2c <am_hal_cachectrl_control>
    f60c:	69a3      	ldr	r3, [r4, #24]
    f60e:	05d8      	lsls	r0, r3, #23
    f610:	d520      	bpl.n	f654 <am_hal_pwrctrl_low_power_init+0x6c>
    f612:	2000      	movs	r0, #0
    f614:	b005      	add	sp, #20
    f616:	bd30      	pop	{r4, r5, pc}
    f618:	4c2a      	ldr	r4, [pc, #168]	; (f6c4 <am_hal_pwrctrl_low_power_init+0xdc>)
    f61a:	6863      	ldr	r3, [r4, #4]
    f61c:	07d9      	lsls	r1, r3, #31
    f61e:	d5f0      	bpl.n	f602 <am_hal_pwrctrl_low_power_init+0x1a>
    f620:	f7ff f98e 	bl	e940 <am_hal_interrupt_master_disable>
    f624:	9003      	str	r0, [sp, #12]
    f626:	68a3      	ldr	r3, [r4, #8]
    f628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f62c:	60a3      	str	r3, [r4, #8]
    f62e:	9803      	ldr	r0, [sp, #12]
    f630:	f7ff f98a 	bl	e948 <am_hal_interrupt_master_set>
    f634:	20a0      	movs	r0, #160	; 0xa0
    f636:	f7fe ff79 	bl	e52c <am_hal_flash_delay>
    f63a:	69a3      	ldr	r3, [r4, #24]
    f63c:	061a      	lsls	r2, r3, #24
    f63e:	d403      	bmi.n	f648 <am_hal_pwrctrl_low_power_init+0x60>
    f640:	20a0      	movs	r0, #160	; 0xa0
    f642:	f7fe ff73 	bl	e52c <am_hal_flash_delay>
    f646:	69a3      	ldr	r3, [r4, #24]
    f648:	4b1e      	ldr	r3, [pc, #120]	; (f6c4 <am_hal_pwrctrl_low_power_init+0xdc>)
    f64a:	699b      	ldr	r3, [r3, #24]
    f64c:	061b      	lsls	r3, r3, #24
    f64e:	d4d8      	bmi.n	f602 <am_hal_pwrctrl_low_power_init+0x1a>
    f650:	2001      	movs	r0, #1
    f652:	e7df      	b.n	f614 <am_hal_pwrctrl_low_power_init+0x2c>
    f654:	4d1a      	ldr	r5, [pc, #104]	; (f6c0 <am_hal_pwrctrl_low_power_init+0xd8>)
    f656:	491c      	ldr	r1, [pc, #112]	; (f6c8 <am_hal_pwrctrl_low_power_init+0xe0>)
    f658:	7e2a      	ldrb	r2, [r5, #24]
    f65a:	2001      	movs	r0, #1
    f65c:	4302      	orrs	r2, r0
    f65e:	2307      	movs	r3, #7
    f660:	762a      	strb	r2, [r5, #24]
    f662:	9000      	str	r0, [sp, #0]
    f664:	461a      	mov	r2, r3
    f666:	f242 7010 	movw	r0, #10000	; 0x2710
    f66a:	f7fe ff6f 	bl	e54c <am_hal_flash_delay_status_check>
    f66e:	b110      	cbz	r0, f676 <am_hal_pwrctrl_low_power_init+0x8e>
    f670:	2004      	movs	r0, #4
    f672:	b005      	add	sp, #20
    f674:	bd30      	pop	{r4, r5, pc}
    f676:	6823      	ldr	r3, [r4, #0]
    f678:	f043 0301 	orr.w	r3, r3, #1
    f67c:	6023      	str	r3, [r4, #0]
    f67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f684:	6263      	str	r3, [r4, #36]	; 0x24
    f686:	68eb      	ldr	r3, [r5, #12]
    f688:	b2db      	uxtb	r3, r3
    f68a:	2b11      	cmp	r3, #17
    f68c:	d1c1      	bne.n	f612 <am_hal_pwrctrl_low_power_init+0x2a>
    f68e:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f692:	f360 5356 	bfi	r3, r0, #21, #2
    f696:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f69a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f69e:	220f      	movs	r2, #15
    f6a0:	f362 138b 	bfi	r3, r2, #6, #6
    f6a4:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f6a8:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f6ac:	f362 0305 	bfi	r3, r2, #0, #6
    f6b0:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f6b4:	e7ae      	b.n	f614 <am_hal_pwrctrl_low_power_init+0x2c>
    f6b6:	bf00      	nop
    f6b8:	1000118c 	.word	0x1000118c
    f6bc:	4ffff000 	.word	0x4ffff000
    f6c0:	40020000 	.word	0x40020000
    f6c4:	40021000 	.word	0x40021000
    f6c8:	40020018 	.word	0x40020018

0000f6cc <am_hal_rtc_osc_select>:
    f6cc:	b928      	cbnz	r0, f6da <am_hal_rtc_osc_select+0xe>
    f6ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f6d2:	68d3      	ldr	r3, [r2, #12]
    f6d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f6d8:	60d3      	str	r3, [r2, #12]
    f6da:	4770      	bx	lr

0000f6dc <am_hal_rtc_osc_disable>:
    f6dc:	4a03      	ldr	r2, [pc, #12]	; (f6ec <am_hal_rtc_osc_disable+0x10>)
    f6de:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f6e2:	f043 0310 	orr.w	r3, r3, #16
    f6e6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f6ea:	4770      	bx	lr
    f6ec:	40004200 	.word	0x40004200

0000f6f0 <am_hal_sysctrl_sleep>:
    f6f0:	b510      	push	{r4, lr}
    f6f2:	b082      	sub	sp, #8
    f6f4:	4604      	mov	r4, r0
    f6f6:	f7ff f923 	bl	e940 <am_hal_interrupt_master_disable>
    f6fa:	9001      	str	r0, [sp, #4]
    f6fc:	b124      	cbz	r4, f708 <am_hal_sysctrl_sleep+0x18>
    f6fe:	4b12      	ldr	r3, [pc, #72]	; (f748 <am_hal_sysctrl_sleep+0x58>)
    f700:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f704:	07db      	lsls	r3, r3, #31
    f706:	d512      	bpl.n	f72e <am_hal_sysctrl_sleep+0x3e>
    f708:	4a10      	ldr	r2, [pc, #64]	; (f74c <am_hal_sysctrl_sleep+0x5c>)
    f70a:	6913      	ldr	r3, [r2, #16]
    f70c:	f023 0304 	bic.w	r3, r3, #4
    f710:	6113      	str	r3, [r2, #16]
    f712:	f3bf 8f4f 	dsb	sy
    f716:	4a0e      	ldr	r2, [pc, #56]	; (f750 <am_hal_sysctrl_sleep+0x60>)
    f718:	4b0e      	ldr	r3, [pc, #56]	; (f754 <am_hal_sysctrl_sleep+0x64>)
    f71a:	6812      	ldr	r2, [r2, #0]
    f71c:	601a      	str	r2, [r3, #0]
    f71e:	bf30      	wfi
    f720:	f3bf 8f6f 	isb	sy
    f724:	9801      	ldr	r0, [sp, #4]
    f726:	f7ff f90f 	bl	e948 <am_hal_interrupt_master_set>
    f72a:	b002      	add	sp, #8
    f72c:	bd10      	pop	{r4, pc}
    f72e:	4b0a      	ldr	r3, [pc, #40]	; (f758 <am_hal_sysctrl_sleep+0x68>)
    f730:	681a      	ldr	r2, [r3, #0]
    f732:	b912      	cbnz	r2, f73a <am_hal_sysctrl_sleep+0x4a>
    f734:	4a09      	ldr	r2, [pc, #36]	; (f75c <am_hal_sysctrl_sleep+0x6c>)
    f736:	6812      	ldr	r2, [r2, #0]
    f738:	601a      	str	r2, [r3, #0]
    f73a:	4a04      	ldr	r2, [pc, #16]	; (f74c <am_hal_sysctrl_sleep+0x5c>)
    f73c:	6913      	ldr	r3, [r2, #16]
    f73e:	f043 0304 	orr.w	r3, r3, #4
    f742:	6113      	str	r3, [r2, #16]
    f744:	e7e5      	b.n	f712 <am_hal_sysctrl_sleep+0x22>
    f746:	bf00      	nop
    f748:	40020000 	.word	0x40020000
    f74c:	e000ed00 	.word	0xe000ed00
    f750:	5fff0000 	.word	0x5fff0000
    f754:	10001190 	.word	0x10001190
    f758:	1000118c 	.word	0x1000118c
    f75c:	4ffff000 	.word	0x4ffff000

0000f760 <am_hal_uart_initialize>:
    f760:	2801      	cmp	r0, #1
    f762:	d901      	bls.n	f768 <am_hal_uart_initialize+0x8>
    f764:	2005      	movs	r0, #5
    f766:	4770      	bx	lr
    f768:	b169      	cbz	r1, f786 <am_hal_uart_initialize+0x26>
    f76a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f76c:	2264      	movs	r2, #100	; 0x64
    f76e:	4e0e      	ldr	r6, [pc, #56]	; (f7a8 <am_hal_uart_initialize+0x48>)
    f770:	fb02 f200 	mul.w	r2, r2, r0
    f774:	18b4      	adds	r4, r6, r2
    f776:	4603      	mov	r3, r0
    f778:	78e0      	ldrb	r0, [r4, #3]
    f77a:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f77e:	b2fd      	uxtb	r5, r7
    f780:	b11d      	cbz	r5, f78a <am_hal_uart_initialize+0x2a>
    f782:	2007      	movs	r0, #7
    f784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f786:	2006      	movs	r0, #6
    f788:	4770      	bx	lr
    f78a:	f040 0001 	orr.w	r0, r0, #1
    f78e:	70e0      	strb	r0, [r4, #3]
    f790:	58b0      	ldr	r0, [r6, r2]
    f792:	f8df e018 	ldr.w	lr, [pc, #24]	; f7ac <am_hal_uart_initialize+0x4c>
    f796:	f36e 0017 	bfi	r0, lr, #0, #24
    f79a:	50b0      	str	r0, [r6, r2]
    f79c:	6263      	str	r3, [r4, #36]	; 0x24
    f79e:	7127      	strb	r7, [r4, #4]
    f7a0:	6625      	str	r5, [r4, #96]	; 0x60
    f7a2:	4628      	mov	r0, r5
    f7a4:	600c      	str	r4, [r1, #0]
    f7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7a8:	10004b10 	.word	0x10004b10
    f7ac:	00ea9e06 	.word	0x00ea9e06

0000f7b0 <am_hal_uart_deinitialize>:
    f7b0:	b128      	cbz	r0, f7be <am_hal_uart_deinitialize+0xe>
    f7b2:	6803      	ldr	r3, [r0, #0]
    f7b4:	4a07      	ldr	r2, [pc, #28]	; (f7d4 <am_hal_uart_deinitialize+0x24>)
    f7b6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f7ba:	4293      	cmp	r3, r2
    f7bc:	d001      	beq.n	f7c2 <am_hal_uart_deinitialize+0x12>
    f7be:	2002      	movs	r0, #2
    f7c0:	4770      	bx	lr
    f7c2:	78c2      	ldrb	r2, [r0, #3]
    f7c4:	2300      	movs	r3, #0
    f7c6:	f36f 0200 	bfc	r2, #0, #1
    f7ca:	70c2      	strb	r2, [r0, #3]
    f7cc:	6243      	str	r3, [r0, #36]	; 0x24
    f7ce:	7103      	strb	r3, [r0, #4]
    f7d0:	4618      	mov	r0, r3
    f7d2:	4770      	bx	lr
    f7d4:	01ea9e06 	.word	0x01ea9e06

0000f7d8 <am_hal_uart_power_control>:
    f7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7dc:	6804      	ldr	r4, [r0, #0]
    f7de:	4b36      	ldr	r3, [pc, #216]	; (f8b8 <am_hal_uart_power_control+0xe0>)
    f7e0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f7e4:	429c      	cmp	r4, r3
    f7e6:	b083      	sub	sp, #12
    f7e8:	d003      	beq.n	f7f2 <am_hal_uart_power_control+0x1a>
    f7ea:	2002      	movs	r0, #2
    f7ec:	b003      	add	sp, #12
    f7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f7f2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f7f4:	4605      	mov	r5, r0
    f7f6:	f107 0008 	add.w	r0, r7, #8
    f7fa:	4691      	mov	r9, r2
    f7fc:	460e      	mov	r6, r1
    f7fe:	fa5f f880 	uxtb.w	r8, r0
    f802:	b181      	cbz	r1, f826 <am_hal_uart_power_control+0x4e>
    f804:	2902      	cmp	r1, #2
    f806:	d80c      	bhi.n	f822 <am_hal_uart_power_control+0x4a>
    f808:	b992      	cbnz	r2, f830 <am_hal_uart_power_control+0x58>
    f80a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f80e:	371c      	adds	r7, #28
    f810:	033f      	lsls	r7, r7, #12
    f812:	f04f 33ff 	mov.w	r3, #4294967295
    f816:	647b      	str	r3, [r7, #68]	; 0x44
    f818:	4640      	mov	r0, r8
    f81a:	f7ff feb9 	bl	f590 <am_hal_pwrctrl_periph_disable>
    f81e:	2000      	movs	r0, #0
    f820:	e7e4      	b.n	f7ec <am_hal_uart_power_control+0x14>
    f822:	2006      	movs	r0, #6
    f824:	e7e2      	b.n	f7ec <am_hal_uart_power_control+0x14>
    f826:	b322      	cbz	r2, f872 <am_hal_uart_power_control+0x9a>
    f828:	792b      	ldrb	r3, [r5, #4]
    f82a:	bb3b      	cbnz	r3, f87c <am_hal_uart_power_control+0xa4>
    f82c:	2007      	movs	r0, #7
    f82e:	e7dd      	b.n	f7ec <am_hal_uart_power_control+0x14>
    f830:	f7ff f886 	bl	e940 <am_hal_interrupt_master_disable>
    f834:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f838:	331c      	adds	r3, #28
    f83a:	031b      	lsls	r3, r3, #12
    f83c:	9001      	str	r0, [sp, #4]
    f83e:	6a1a      	ldr	r2, [r3, #32]
    f840:	60aa      	str	r2, [r5, #8]
    f842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f844:	60ea      	str	r2, [r5, #12]
    f846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f848:	612a      	str	r2, [r5, #16]
    f84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f84c:	616a      	str	r2, [r5, #20]
    f84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f850:	61aa      	str	r2, [r5, #24]
    f852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f854:	61ea      	str	r2, [r5, #28]
    f856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f858:	622b      	str	r3, [r5, #32]
    f85a:	2301      	movs	r3, #1
    f85c:	712b      	strb	r3, [r5, #4]
    f85e:	9801      	ldr	r0, [sp, #4]
    f860:	f7ff f872 	bl	e948 <am_hal_interrupt_master_set>
    f864:	682b      	ldr	r3, [r5, #0]
    f866:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f86a:	42a3      	cmp	r3, r4
    f86c:	d1d4      	bne.n	f818 <am_hal_uart_power_control+0x40>
    f86e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f870:	e7cb      	b.n	f80a <am_hal_uart_power_control+0x32>
    f872:	4640      	mov	r0, r8
    f874:	f7ff fe62 	bl	f53c <am_hal_pwrctrl_periph_enable>
    f878:	4648      	mov	r0, r9
    f87a:	e7b7      	b.n	f7ec <am_hal_uart_power_control+0x14>
    f87c:	4640      	mov	r0, r8
    f87e:	f7ff fe5d 	bl	f53c <am_hal_pwrctrl_periph_enable>
    f882:	f7ff f85d 	bl	e940 <am_hal_interrupt_master_disable>
    f886:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f88a:	331c      	adds	r3, #28
    f88c:	031b      	lsls	r3, r3, #12
    f88e:	68aa      	ldr	r2, [r5, #8]
    f890:	9000      	str	r0, [sp, #0]
    f892:	621a      	str	r2, [r3, #32]
    f894:	68ea      	ldr	r2, [r5, #12]
    f896:	625a      	str	r2, [r3, #36]	; 0x24
    f898:	692a      	ldr	r2, [r5, #16]
    f89a:	629a      	str	r2, [r3, #40]	; 0x28
    f89c:	696a      	ldr	r2, [r5, #20]
    f89e:	62da      	str	r2, [r3, #44]	; 0x2c
    f8a0:	69aa      	ldr	r2, [r5, #24]
    f8a2:	631a      	str	r2, [r3, #48]	; 0x30
    f8a4:	69ea      	ldr	r2, [r5, #28]
    f8a6:	635a      	str	r2, [r3, #52]	; 0x34
    f8a8:	6a2a      	ldr	r2, [r5, #32]
    f8aa:	639a      	str	r2, [r3, #56]	; 0x38
    f8ac:	9800      	ldr	r0, [sp, #0]
    f8ae:	712e      	strb	r6, [r5, #4]
    f8b0:	f7ff f84a 	bl	e948 <am_hal_interrupt_master_set>
    f8b4:	4630      	mov	r0, r6
    f8b6:	e799      	b.n	f7ec <am_hal_uart_power_control+0x14>
    f8b8:	01ea9e06 	.word	0x01ea9e06

0000f8bc <am_hal_uart_configure>:
    f8bc:	6803      	ldr	r3, [r0, #0]
    f8be:	4a84      	ldr	r2, [pc, #528]	; (fad0 <am_hal_uart_configure+0x214>)
    f8c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f8c4:	4293      	cmp	r3, r2
    f8c6:	d001      	beq.n	f8cc <am_hal_uart_configure+0x10>
    f8c8:	2002      	movs	r0, #2
    f8ca:	4770      	bx	lr
    f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f8d2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f8d6:	351c      	adds	r5, #28
    f8d8:	032d      	lsls	r5, r5, #12
    f8da:	2700      	movs	r7, #0
    f8dc:	b084      	sub	sp, #16
    f8de:	632f      	str	r7, [r5, #48]	; 0x30
    f8e0:	460e      	mov	r6, r1
    f8e2:	4604      	mov	r4, r0
    f8e4:	f7ff f82c 	bl	e940 <am_hal_interrupt_master_disable>
    f8e8:	9001      	str	r0, [sp, #4]
    f8ea:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f8ec:	f043 0308 	orr.w	r3, r3, #8
    f8f0:	862b      	strh	r3, [r5, #48]	; 0x30
    f8f2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f8f4:	2201      	movs	r2, #1
    f8f6:	f362 1306 	bfi	r3, r2, #4, #3
    f8fa:	862b      	strh	r3, [r5, #48]	; 0x30
    f8fc:	9801      	ldr	r0, [sp, #4]
    f8fe:	f7ff f823 	bl	e948 <am_hal_interrupt_master_set>
    f902:	f7ff f81d 	bl	e940 <am_hal_interrupt_master_disable>
    f906:	9002      	str	r0, [sp, #8]
    f908:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f90a:	f367 0300 	bfi	r3, r7, #0, #1
    f90e:	862b      	strh	r3, [r5, #48]	; 0x30
    f910:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f912:	f367 2349 	bfi	r3, r7, #9, #1
    f916:	862b      	strh	r3, [r5, #48]	; 0x30
    f918:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f91a:	f367 2308 	bfi	r3, r7, #8, #1
    f91e:	862b      	strh	r3, [r5, #48]	; 0x30
    f920:	9802      	ldr	r0, [sp, #8]
    f922:	f7ff f811 	bl	e948 <am_hal_interrupt_master_set>
    f926:	4a6b      	ldr	r2, [pc, #428]	; (fad4 <am_hal_uart_configure+0x218>)
    f928:	6833      	ldr	r3, [r6, #0]
    f92a:	68d2      	ldr	r2, [r2, #12]
    f92c:	b2d2      	uxtb	r2, r2
    f92e:	2a12      	cmp	r2, #18
    f930:	d00b      	beq.n	f94a <am_hal_uart_configure+0x8e>
    f932:	4a68      	ldr	r2, [pc, #416]	; (fad4 <am_hal_uart_configure+0x218>)
    f934:	68d2      	ldr	r2, [r2, #12]
    f936:	b2d2      	uxtb	r2, r2
    f938:	2a20      	cmp	r2, #32
    f93a:	d90a      	bls.n	f952 <am_hal_uart_configure+0x96>
    f93c:	4a66      	ldr	r2, [pc, #408]	; (fad8 <am_hal_uart_configure+0x21c>)
    f93e:	4293      	cmp	r3, r2
    f940:	d907      	bls.n	f952 <am_hal_uart_configure+0x96>
    f942:	4866      	ldr	r0, [pc, #408]	; (fadc <am_hal_uart_configure+0x220>)
    f944:	b004      	add	sp, #16
    f946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f94a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f94e:	d8f8      	bhi.n	f942 <am_hal_uart_configure+0x86>
    f950:	e7ef      	b.n	f932 <am_hal_uart_configure+0x76>
    f952:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f954:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f958:	3a01      	subs	r2, #1
    f95a:	2a03      	cmp	r2, #3
    f95c:	d852      	bhi.n	fa04 <am_hal_uart_configure+0x148>
    f95e:	e8df f002 	tbb	[pc, r2]
    f962:	020f      	.short	0x020f
    f964:	1215      	.short	0x1215
    f966:	4a5e      	ldr	r2, [pc, #376]	; (fae0 <am_hal_uart_configure+0x224>)
    f968:	495e      	ldr	r1, [pc, #376]	; (fae4 <am_hal_uart_configure+0x228>)
    f96a:	011b      	lsls	r3, r3, #4
    f96c:	fbb2 f2f3 	udiv	r2, r2, r3
    f970:	fbb1 f3f3 	udiv	r3, r1, r3
    f974:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f978:	b95b      	cbnz	r3, f992 <am_hal_uart_configure+0xd6>
    f97a:	6623      	str	r3, [r4, #96]	; 0x60
    f97c:	4857      	ldr	r0, [pc, #348]	; (fadc <am_hal_uart_configure+0x220>)
    f97e:	e7e1      	b.n	f944 <am_hal_uart_configure+0x88>
    f980:	4a59      	ldr	r2, [pc, #356]	; (fae8 <am_hal_uart_configure+0x22c>)
    f982:	495a      	ldr	r1, [pc, #360]	; (faec <am_hal_uart_configure+0x230>)
    f984:	e7f1      	b.n	f96a <am_hal_uart_configure+0xae>
    f986:	4a5a      	ldr	r2, [pc, #360]	; (faf0 <am_hal_uart_configure+0x234>)
    f988:	495a      	ldr	r1, [pc, #360]	; (faf4 <am_hal_uart_configure+0x238>)
    f98a:	e7ee      	b.n	f96a <am_hal_uart_configure+0xae>
    f98c:	4a5a      	ldr	r2, [pc, #360]	; (faf8 <am_hal_uart_configure+0x23c>)
    f98e:	495b      	ldr	r1, [pc, #364]	; (fafc <am_hal_uart_configure+0x240>)
    f990:	e7eb      	b.n	f96a <am_hal_uart_configure+0xae>
    f992:	0890      	lsrs	r0, r2, #2
    f994:	626b      	str	r3, [r5, #36]	; 0x24
    f996:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    f99a:	626b      	str	r3, [r5, #36]	; 0x24
    f99c:	fbb1 f1f0 	udiv	r1, r1, r0
    f9a0:	62aa      	str	r2, [r5, #40]	; 0x28
    f9a2:	6621      	str	r1, [r4, #96]	; 0x60
    f9a4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9a6:	f36f 338e 	bfc	r3, #14, #1
    f9aa:	862b      	strh	r3, [r5, #48]	; 0x30
    f9ac:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9ae:	f36f 33cf 	bfc	r3, #15, #1
    f9b2:	862b      	strh	r3, [r5, #48]	; 0x30
    f9b4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f9b6:	6933      	ldr	r3, [r6, #16]
    f9b8:	4313      	orrs	r3, r2
    f9ba:	632b      	str	r3, [r5, #48]	; 0x30
    f9bc:	6973      	ldr	r3, [r6, #20]
    f9be:	636b      	str	r3, [r5, #52]	; 0x34
    f9c0:	6871      	ldr	r1, [r6, #4]
    f9c2:	68b3      	ldr	r3, [r6, #8]
    f9c4:	68f2      	ldr	r2, [r6, #12]
    f9c6:	430b      	orrs	r3, r1
    f9c8:	f043 0310 	orr.w	r3, r3, #16
    f9cc:	4313      	orrs	r3, r2
    f9ce:	62eb      	str	r3, [r5, #44]	; 0x2c
    f9d0:	f7fe ffb6 	bl	e940 <am_hal_interrupt_master_disable>
    f9d4:	9003      	str	r0, [sp, #12]
    f9d6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9d8:	f043 0301 	orr.w	r3, r3, #1
    f9dc:	862b      	strh	r3, [r5, #48]	; 0x30
    f9de:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f9e4:	862b      	strh	r3, [r5, #48]	; 0x30
    f9e6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f9ec:	862b      	strh	r3, [r5, #48]	; 0x30
    f9ee:	9803      	ldr	r0, [sp, #12]
    f9f0:	f7fe ffaa 	bl	e948 <am_hal_interrupt_master_set>
    f9f4:	6825      	ldr	r5, [r4, #0]
    f9f6:	4b36      	ldr	r3, [pc, #216]	; (fad0 <am_hal_uart_configure+0x214>)
    f9f8:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    f9fc:	429d      	cmp	r5, r3
    f9fe:	d005      	beq.n	fa0c <am_hal_uart_configure+0x150>
    fa00:	2000      	movs	r0, #0
    fa02:	e79f      	b.n	f944 <am_hal_uart_configure+0x88>
    fa04:	2300      	movs	r3, #0
    fa06:	6623      	str	r3, [r4, #96]	; 0x60
    fa08:	483d      	ldr	r0, [pc, #244]	; (fb00 <am_hal_uart_configure+0x244>)
    fa0a:	e79b      	b.n	f944 <am_hal_uart_configure+0x88>
    fa0c:	69b1      	ldr	r1, [r6, #24]
    fa0e:	6a37      	ldr	r7, [r6, #32]
    fa10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    fa14:	b109      	cbz	r1, fa1a <am_hal_uart_configure+0x15e>
    fa16:	69f3      	ldr	r3, [r6, #28]
    fa18:	bb3b      	cbnz	r3, fa6a <am_hal_uart_configure+0x1ae>
    fa1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa1c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fa20:	f103 021c 	add.w	r2, r3, #28
    fa24:	0312      	lsls	r2, r2, #12
    fa26:	2100      	movs	r1, #0
    fa28:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fa2c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fa2e:	f021 0120 	bic.w	r1, r1, #32
    fa32:	6391      	str	r1, [r2, #56]	; 0x38
    fa34:	b1b7      	cbz	r7, fa64 <am_hal_uart_configure+0x1a8>
    fa36:	f1b8 0f00 	cmp.w	r8, #0
    fa3a:	d12e      	bne.n	fa9a <am_hal_uart_configure+0x1de>
    fa3c:	6823      	ldr	r3, [r4, #0]
    fa3e:	4a24      	ldr	r2, [pc, #144]	; (fad0 <am_hal_uart_configure+0x214>)
    fa40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa44:	2100      	movs	r1, #0
    fa46:	4293      	cmp	r3, r2
    fa48:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fa4c:	d1d8      	bne.n	fa00 <am_hal_uart_configure+0x144>
    fa4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa50:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fa54:	331c      	adds	r3, #28
    fa56:	031b      	lsls	r3, r3, #12
    fa58:	2000      	movs	r0, #0
    fa5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fa5c:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fa60:	639a      	str	r2, [r3, #56]	; 0x38
    fa62:	e76f      	b.n	f944 <am_hal_uart_configure+0x88>
    fa64:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    fa68:	e7f4      	b.n	fa54 <am_hal_uart_configure+0x198>
    fa6a:	2201      	movs	r2, #1
    fa6c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    fa70:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fa74:	f000 fb2c 	bl	100d0 <am_hal_queue_init>
    fa78:	6823      	ldr	r3, [r4, #0]
    fa7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa7e:	42ab      	cmp	r3, r5
    fa80:	d1be      	bne.n	fa00 <am_hal_uart_configure+0x144>
    fa82:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fa88:	331c      	adds	r3, #28
    fa8a:	031b      	lsls	r3, r3, #12
    fa8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fa8e:	f042 0220 	orr.w	r2, r2, #32
    fa92:	639a      	str	r2, [r3, #56]	; 0x38
    fa94:	2f00      	cmp	r7, #0
    fa96:	d1ce      	bne.n	fa36 <am_hal_uart_configure+0x17a>
    fa98:	e7d0      	b.n	fa3c <am_hal_uart_configure+0x180>
    fa9a:	2201      	movs	r2, #1
    fa9c:	4643      	mov	r3, r8
    fa9e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    faa2:	4639      	mov	r1, r7
    faa4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    faa8:	f000 fb12 	bl	100d0 <am_hal_queue_init>
    faac:	6823      	ldr	r3, [r4, #0]
    faae:	4a08      	ldr	r2, [pc, #32]	; (fad0 <am_hal_uart_configure+0x214>)
    fab0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fab4:	4293      	cmp	r3, r2
    fab6:	d1a3      	bne.n	fa00 <am_hal_uart_configure+0x144>
    fab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    faba:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fabe:	331c      	adds	r3, #28
    fac0:	031b      	lsls	r3, r3, #12
    fac2:	2000      	movs	r0, #0
    fac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fac6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    faca:	639a      	str	r2, [r3, #56]	; 0x38
    facc:	e73a      	b.n	f944 <am_hal_uart_configure+0x88>
    face:	bf00      	nop
    fad0:	01ea9e06 	.word	0x01ea9e06
    fad4:	40020000 	.word	0x40020000
    fad8:	0016e360 	.word	0x0016e360
    fadc:	08000003 	.word	0x08000003
    fae0:	2dc6c000 	.word	0x2dc6c000
    fae4:	00b71b00 	.word	0x00b71b00
    fae8:	5b8d8000 	.word	0x5b8d8000
    faec:	016e3600 	.word	0x016e3600
    faf0:	0b71b000 	.word	0x0b71b000
    faf4:	002dc6c0 	.word	0x002dc6c0
    faf8:	16e36000 	.word	0x16e36000
    fafc:	005b8d80 	.word	0x005b8d80
    fb00:	08000002 	.word	0x08000002

0000fb04 <am_hal_uart_transfer>:
    fb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb08:	680f      	ldr	r7, [r1, #0]
    fb0a:	b091      	sub	sp, #68	; 0x44
    fb0c:	4605      	mov	r5, r0
    fb0e:	b13f      	cbz	r7, fb20 <am_hal_uart_transfer+0x1c>
    fb10:	2f01      	cmp	r7, #1
    fb12:	bf18      	it	ne
    fb14:	2707      	movne	r7, #7
    fb16:	d024      	beq.n	fb62 <am_hal_uart_transfer+0x5e>
    fb18:	4638      	mov	r0, r7
    fb1a:	b011      	add	sp, #68	; 0x44
    fb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb20:	f8d1 900c 	ldr.w	r9, [r1, #12]
    fb24:	690b      	ldr	r3, [r1, #16]
    fb26:	f8d1 a004 	ldr.w	sl, [r1, #4]
    fb2a:	688e      	ldr	r6, [r1, #8]
    fb2c:	9300      	str	r3, [sp, #0]
    fb2e:	f1b9 0f00 	cmp.w	r9, #0
    fb32:	d031      	beq.n	fb98 <am_hal_uart_transfer+0x94>
    fb34:	2e00      	cmp	r6, #0
    fb36:	f000 819c 	beq.w	fe72 <am_hal_uart_transfer+0x36e>
    fb3a:	2800      	cmp	r0, #0
    fb3c:	f000 8097 	beq.w	fc6e <am_hal_uart_transfer+0x16a>
    fb40:	6803      	ldr	r3, [r0, #0]
    fb42:	4aa9      	ldr	r2, [pc, #676]	; (fde8 <am_hal_uart_transfer+0x2e4>)
    fb44:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb48:	4293      	cmp	r3, r2
    fb4a:	f000 8092 	beq.w	fc72 <am_hal_uart_transfer+0x16e>
    fb4e:	46b8      	mov	r8, r7
    fb50:	9b00      	ldr	r3, [sp, #0]
    fb52:	b10b      	cbz	r3, fb58 <am_hal_uart_transfer+0x54>
    fb54:	f8c3 8000 	str.w	r8, [r3]
    fb58:	2702      	movs	r7, #2
    fb5a:	4638      	mov	r0, r7
    fb5c:	b011      	add	sp, #68	; 0x44
    fb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb62:	1d0b      	adds	r3, r1, #4
    fb64:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    fb68:	f1b9 0f00 	cmp.w	r9, #0
    fb6c:	d043      	beq.n	fbf6 <am_hal_uart_transfer+0xf2>
    fb6e:	2f00      	cmp	r7, #0
    fb70:	f000 8185 	beq.w	fe7e <am_hal_uart_transfer+0x37a>
    fb74:	2800      	cmp	r0, #0
    fb76:	f000 80eb 	beq.w	fd50 <am_hal_uart_transfer+0x24c>
    fb7a:	6802      	ldr	r2, [r0, #0]
    fb7c:	499a      	ldr	r1, [pc, #616]	; (fde8 <am_hal_uart_transfer+0x2e4>)
    fb7e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fb82:	428a      	cmp	r2, r1
    fb84:	f000 80e7 	beq.w	fd56 <am_hal_uart_transfer+0x252>
    fb88:	2600      	movs	r6, #0
    fb8a:	2702      	movs	r7, #2
    fb8c:	f1bb 0f00 	cmp.w	fp, #0
    fb90:	d0c2      	beq.n	fb18 <am_hal_uart_transfer+0x14>
    fb92:	f8cb 6000 	str.w	r6, [fp]
    fb96:	e7bf      	b.n	fb18 <am_hal_uart_transfer+0x14>
    fb98:	2800      	cmp	r0, #0
    fb9a:	d0dd      	beq.n	fb58 <am_hal_uart_transfer+0x54>
    fb9c:	6803      	ldr	r3, [r0, #0]
    fb9e:	4a92      	ldr	r2, [pc, #584]	; (fde8 <am_hal_uart_transfer+0x2e4>)
    fba0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fba4:	4293      	cmp	r3, r2
    fba6:	d1d7      	bne.n	fb58 <am_hal_uart_transfer+0x54>
    fba8:	9b00      	ldr	r3, [sp, #0]
    fbaa:	b10b      	cbz	r3, fbb0 <am_hal_uart_transfer+0xac>
    fbac:	f8c3 9000 	str.w	r9, [r3]
    fbb0:	b1fe      	cbz	r6, fbf2 <am_hal_uart_transfer+0xee>
    fbb2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	f040 8165 	bne.w	fe86 <am_hal_uart_transfer+0x382>
    fbbc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fbbe:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fbc2:	311c      	adds	r1, #28
    fbc4:	0309      	lsls	r1, r1, #12
    fbc6:	698a      	ldr	r2, [r1, #24]
    fbc8:	f3c2 1240 	ubfx	r2, r2, #5, #1
    fbcc:	2a00      	cmp	r2, #0
    fbce:	f040 818d 	bne.w	feec <am_hal_uart_transfer+0x3e8>
    fbd2:	f10a 33ff 	add.w	r3, sl, #4294967295
    fbd6:	e003      	b.n	fbe0 <am_hal_uart_transfer+0xdc>
    fbd8:	6988      	ldr	r0, [r1, #24]
    fbda:	0680      	lsls	r0, r0, #26
    fbdc:	f100 8151 	bmi.w	fe82 <am_hal_uart_transfer+0x37e>
    fbe0:	3201      	adds	r2, #1
    fbe2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fbe6:	6008      	str	r0, [r1, #0]
    fbe8:	4296      	cmp	r6, r2
    fbea:	d1f5      	bne.n	fbd8 <am_hal_uart_transfer+0xd4>
    fbec:	9b00      	ldr	r3, [sp, #0]
    fbee:	b103      	cbz	r3, fbf2 <am_hal_uart_transfer+0xee>
    fbf0:	601e      	str	r6, [r3, #0]
    fbf2:	2700      	movs	r7, #0
    fbf4:	e790      	b.n	fb18 <am_hal_uart_transfer+0x14>
    fbf6:	2800      	cmp	r0, #0
    fbf8:	d0ae      	beq.n	fb58 <am_hal_uart_transfer+0x54>
    fbfa:	6802      	ldr	r2, [r0, #0]
    fbfc:	497a      	ldr	r1, [pc, #488]	; (fde8 <am_hal_uart_transfer+0x2e4>)
    fbfe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fc02:	428a      	cmp	r2, r1
    fc04:	d1a8      	bne.n	fb58 <am_hal_uart_transfer+0x54>
    fc06:	f1bb 0f00 	cmp.w	fp, #0
    fc0a:	d001      	beq.n	fc10 <am_hal_uart_transfer+0x10c>
    fc0c:	f8cb 9000 	str.w	r9, [fp]
    fc10:	2f00      	cmp	r7, #0
    fc12:	d0ee      	beq.n	fbf2 <am_hal_uart_transfer+0xee>
    fc14:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fc18:	2c00      	cmp	r4, #0
    fc1a:	f040 816c 	bne.w	fef6 <am_hal_uart_transfer+0x3f2>
    fc1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fc20:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fc24:	321c      	adds	r2, #28
    fc26:	0312      	lsls	r2, r2, #12
    fc28:	6990      	ldr	r0, [r2, #24]
    fc2a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fc2e:	2800      	cmp	r0, #0
    fc30:	f040 819d 	bne.w	ff6e <am_hal_uart_transfer+0x46a>
    fc34:	6811      	ldr	r1, [r2, #0]
    fc36:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fc3a:	bf08      	it	eq
    fc3c:	f103 33ff 	addeq.w	r3, r3, #4294967295
    fc40:	d008      	beq.n	fc54 <am_hal_uart_transfer+0x150>
    fc42:	e190      	b.n	ff66 <am_hal_uart_transfer+0x462>
    fc44:	6991      	ldr	r1, [r2, #24]
    fc46:	06c8      	lsls	r0, r1, #27
    fc48:	d409      	bmi.n	fc5e <am_hal_uart_transfer+0x15a>
    fc4a:	6811      	ldr	r1, [r2, #0]
    fc4c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fc50:	f040 814e 	bne.w	fef0 <am_hal_uart_transfer+0x3ec>
    fc54:	3401      	adds	r4, #1
    fc56:	42a7      	cmp	r7, r4
    fc58:	f803 1f01 	strb.w	r1, [r3, #1]!
    fc5c:	d1f2      	bne.n	fc44 <am_hal_uart_transfer+0x140>
    fc5e:	2700      	movs	r7, #0
    fc60:	f1bb 0f00 	cmp.w	fp, #0
    fc64:	f43f af58 	beq.w	fb18 <am_hal_uart_transfer+0x14>
    fc68:	f8cb 4000 	str.w	r4, [fp]
    fc6c:	e754      	b.n	fb18 <am_hal_uart_transfer+0x14>
    fc6e:	4680      	mov	r8, r0
    fc70:	e76e      	b.n	fb50 <am_hal_uart_transfer+0x4c>
    fc72:	9301      	str	r3, [sp, #4]
    fc74:	4651      	mov	r1, sl
    fc76:	46bb      	mov	fp, r7
    fc78:	46b8      	mov	r8, r7
    fc7a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fc7e:	b9f2      	cbnz	r2, fcbe <am_hal_uart_transfer+0x1ba>
    fc80:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fc82:	b19e      	cbz	r6, fcac <am_hal_uart_transfer+0x1a8>
    fc84:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fc88:	321c      	adds	r2, #28
    fc8a:	0312      	lsls	r2, r2, #12
    fc8c:	3901      	subs	r1, #1
    fc8e:	6994      	ldr	r4, [r2, #24]
    fc90:	f3c4 1440 	ubfx	r4, r4, #5, #1
    fc94:	b11c      	cbz	r4, fc9e <am_hal_uart_transfer+0x19a>
    fc96:	e047      	b.n	fd28 <am_hal_uart_transfer+0x224>
    fc98:	6993      	ldr	r3, [r2, #24]
    fc9a:	069b      	lsls	r3, r3, #26
    fc9c:	d441      	bmi.n	fd22 <am_hal_uart_transfer+0x21e>
    fc9e:	3401      	adds	r4, #1
    fca0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fca4:	6013      	str	r3, [r2, #0]
    fca6:	42b4      	cmp	r4, r6
    fca8:	d1f6      	bne.n	fc98 <am_hal_uart_transfer+0x194>
    fcaa:	44a0      	add	r8, r4
    fcac:	9b00      	ldr	r3, [sp, #0]
    fcae:	2b00      	cmp	r3, #0
    fcb0:	d09f      	beq.n	fbf2 <am_hal_uart_transfer+0xee>
    fcb2:	4638      	mov	r0, r7
    fcb4:	f8c3 8000 	str.w	r8, [r3]
    fcb8:	b011      	add	sp, #68	; 0x44
    fcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcbe:	6baa      	ldr	r2, [r5, #56]	; 0x38
    fcc0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    fcc2:	1b14      	subs	r4, r2, r4
    fcc4:	42b4      	cmp	r4, r6
    fcc6:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fcca:	bf28      	it	cs
    fccc:	4634      	movcs	r4, r6
    fcce:	4622      	mov	r2, r4
    fcd0:	4618      	mov	r0, r3
    fcd2:	9302      	str	r3, [sp, #8]
    fcd4:	f000 fa08 	bl	100e8 <am_hal_queue_item_add>
    fcd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fcda:	9303      	str	r3, [sp, #12]
    fcdc:	f7fe fe30 	bl	e940 <am_hal_interrupt_master_disable>
    fce0:	9b03      	ldr	r3, [sp, #12]
    fce2:	9008      	str	r0, [sp, #32]
    fce4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fce8:	331c      	adds	r3, #28
    fcea:	031b      	lsls	r3, r3, #12
    fcec:	9303      	str	r3, [sp, #12]
    fcee:	e00d      	b.n	fd0c <am_hal_uart_transfer+0x208>
    fcf0:	f000 fa32 	bl	10158 <am_hal_queue_item_get>
    fcf4:	b190      	cbz	r0, fd1c <am_hal_uart_transfer+0x218>
    fcf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fcf8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fcfc:	331c      	adds	r3, #28
    fcfe:	031b      	lsls	r3, r3, #12
    fd00:	699a      	ldr	r2, [r3, #24]
    fd02:	0692      	lsls	r2, r2, #26
    fd04:	bf5c      	itt	pl
    fd06:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    fd0a:	601a      	strpl	r2, [r3, #0]
    fd0c:	9b03      	ldr	r3, [sp, #12]
    fd0e:	9802      	ldr	r0, [sp, #8]
    fd10:	699b      	ldr	r3, [r3, #24]
    fd12:	069b      	lsls	r3, r3, #26
    fd14:	f04f 0201 	mov.w	r2, #1
    fd18:	a907      	add	r1, sp, #28
    fd1a:	d5e9      	bpl.n	fcf0 <am_hal_uart_transfer+0x1ec>
    fd1c:	9808      	ldr	r0, [sp, #32]
    fd1e:	f7fe fe13 	bl	e948 <am_hal_interrupt_master_set>
    fd22:	1b36      	subs	r6, r6, r4
    fd24:	44a0      	add	r8, r4
    fd26:	d0c1      	beq.n	fcac <am_hal_uart_transfer+0x1a8>
    fd28:	2010      	movs	r0, #16
    fd2a:	f7fe fbff 	bl	e52c <am_hal_flash_delay>
    fd2e:	f1b9 3fff 	cmp.w	r9, #4294967295
    fd32:	d001      	beq.n	fd38 <am_hal_uart_transfer+0x234>
    fd34:	f10b 0b01 	add.w	fp, fp, #1
    fd38:	45d9      	cmp	r9, fp
    fd3a:	d9b7      	bls.n	fcac <am_hal_uart_transfer+0x1a8>
    fd3c:	682a      	ldr	r2, [r5, #0]
    fd3e:	9b01      	ldr	r3, [sp, #4]
    fd40:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fd44:	429a      	cmp	r2, r3
    fd46:	eb0a 0108 	add.w	r1, sl, r8
    fd4a:	f47f af01 	bne.w	fb50 <am_hal_uart_transfer+0x4c>
    fd4e:	e794      	b.n	fc7a <am_hal_uart_transfer+0x176>
    fd50:	4606      	mov	r6, r0
    fd52:	2702      	movs	r7, #2
    fd54:	e71a      	b.n	fb8c <am_hal_uart_transfer+0x88>
    fd56:	9200      	str	r2, [sp, #0]
    fd58:	f100 0248 	add.w	r2, r0, #72	; 0x48
    fd5c:	f04f 0a00 	mov.w	sl, #0
    fd60:	9202      	str	r2, [sp, #8]
    fd62:	465a      	mov	r2, fp
    fd64:	4698      	mov	r8, r3
    fd66:	469b      	mov	fp, r3
    fd68:	4656      	mov	r6, sl
    fd6a:	4613      	mov	r3, r2
    fd6c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    fd70:	2a00      	cmp	r2, #0
    fd72:	d152      	bne.n	fe1a <am_hal_uart_transfer+0x316>
    fd74:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fd76:	b3a7      	cbz	r7, fde2 <am_hal_uart_transfer+0x2de>
    fd78:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fd7c:	311c      	adds	r1, #28
    fd7e:	0309      	lsls	r1, r1, #12
    fd80:	698a      	ldr	r2, [r1, #24]
    fd82:	06d0      	lsls	r0, r2, #27
    fd84:	d432      	bmi.n	fdec <am_hal_uart_transfer+0x2e8>
    fd86:	680a      	ldr	r2, [r1, #0]
    fd88:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    fd8c:	f040 80aa 	bne.w	fee4 <am_hal_uart_transfer+0x3e0>
    fd90:	f108 38ff 	add.w	r8, r8, #4294967295
    fd94:	e006      	b.n	fda4 <am_hal_uart_transfer+0x2a0>
    fd96:	698a      	ldr	r2, [r1, #24]
    fd98:	06d2      	lsls	r2, r2, #27
    fd9a:	d41f      	bmi.n	fddc <am_hal_uart_transfer+0x2d8>
    fd9c:	680a      	ldr	r2, [r1, #0]
    fd9e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    fda2:	d161      	bne.n	fe68 <am_hal_uart_transfer+0x364>
    fda4:	3401      	adds	r4, #1
    fda6:	42bc      	cmp	r4, r7
    fda8:	f808 2f01 	strb.w	r2, [r8, #1]!
    fdac:	d1f3      	bne.n	fd96 <am_hal_uart_transfer+0x292>
    fdae:	469b      	mov	fp, r3
    fdb0:	4426      	add	r6, r4
    fdb2:	f1bb 0f00 	cmp.w	fp, #0
    fdb6:	f43f af1c 	beq.w	fbf2 <am_hal_uart_transfer+0xee>
    fdba:	f8cb 6000 	str.w	r6, [fp]
    fdbe:	2700      	movs	r7, #0
    fdc0:	e6aa      	b.n	fb18 <am_hal_uart_transfer+0x14>
    fdc2:	9807      	ldr	r0, [sp, #28]
    fdc4:	f7fe fdc0 	bl	e948 <am_hal_interrupt_master_set>
    fdc8:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fdca:	9802      	ldr	r0, [sp, #8]
    fdcc:	42bc      	cmp	r4, r7
    fdce:	bf28      	it	cs
    fdd0:	463c      	movcs	r4, r7
    fdd2:	4641      	mov	r1, r8
    fdd4:	4622      	mov	r2, r4
    fdd6:	f000 f9bf 	bl	10158 <am_hal_queue_item_get>
    fdda:	9b01      	ldr	r3, [sp, #4]
    fddc:	1b3f      	subs	r7, r7, r4
    fdde:	4426      	add	r6, r4
    fde0:	d104      	bne.n	fdec <am_hal_uart_transfer+0x2e8>
    fde2:	469b      	mov	fp, r3
    fde4:	e7e5      	b.n	fdb2 <am_hal_uart_transfer+0x2ae>
    fde6:	bf00      	nop
    fde8:	01ea9e06 	.word	0x01ea9e06
    fdec:	2010      	movs	r0, #16
    fdee:	9301      	str	r3, [sp, #4]
    fdf0:	f7fe fb9c 	bl	e52c <am_hal_flash_delay>
    fdf4:	f1b9 3fff 	cmp.w	r9, #4294967295
    fdf8:	9b01      	ldr	r3, [sp, #4]
    fdfa:	d001      	beq.n	fe00 <am_hal_uart_transfer+0x2fc>
    fdfc:	f10a 0a01 	add.w	sl, sl, #1
    fe00:	45d1      	cmp	r9, sl
    fe02:	d9ee      	bls.n	fde2 <am_hal_uart_transfer+0x2de>
    fe04:	682a      	ldr	r2, [r5, #0]
    fe06:	9900      	ldr	r1, [sp, #0]
    fe08:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe0c:	428a      	cmp	r2, r1
    fe0e:	eb0b 0806 	add.w	r8, fp, r6
    fe12:	d0ab      	beq.n	fd6c <am_hal_uart_transfer+0x268>
    fe14:	469b      	mov	fp, r3
    fe16:	2702      	movs	r7, #2
    fe18:	e6b8      	b.n	fb8c <am_hal_uart_transfer+0x88>
    fe1a:	9301      	str	r3, [sp, #4]
    fe1c:	f7fe fd90 	bl	e940 <am_hal_interrupt_master_disable>
    fe20:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fe22:	9007      	str	r0, [sp, #28]
    fe24:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    fe28:	301c      	adds	r0, #28
    fe2a:	9b01      	ldr	r3, [sp, #4]
    fe2c:	0300      	lsls	r0, r0, #12
    fe2e:	ac08      	add	r4, sp, #32
    fe30:	2200      	movs	r2, #0
    fe32:	6981      	ldr	r1, [r0, #24]
    fe34:	06c9      	lsls	r1, r1, #27
    fe36:	d409      	bmi.n	fe4c <am_hal_uart_transfer+0x348>
    fe38:	6801      	ldr	r1, [r0, #0]
    fe3a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fe3e:	f102 0201 	add.w	r2, r2, #1
    fe42:	d118      	bne.n	fe76 <am_hal_uart_transfer+0x372>
    fe44:	2a20      	cmp	r2, #32
    fe46:	f804 1b01 	strb.w	r1, [r4], #1
    fe4a:	d1f2      	bne.n	fe32 <am_hal_uart_transfer+0x32e>
    fe4c:	a908      	add	r1, sp, #32
    fe4e:	9802      	ldr	r0, [sp, #8]
    fe50:	9301      	str	r3, [sp, #4]
    fe52:	f000 f949 	bl	100e8 <am_hal_queue_item_add>
    fe56:	9b01      	ldr	r3, [sp, #4]
    fe58:	2800      	cmp	r0, #0
    fe5a:	d1b2      	bne.n	fdc2 <am_hal_uart_transfer+0x2be>
    fe5c:	4f45      	ldr	r7, [pc, #276]	; (ff74 <am_hal_uart_transfer+0x470>)
    fe5e:	469b      	mov	fp, r3
    fe60:	9807      	ldr	r0, [sp, #28]
    fe62:	f7fe fd71 	bl	e948 <am_hal_interrupt_master_set>
    fe66:	e691      	b.n	fb8c <am_hal_uart_transfer+0x88>
    fe68:	469b      	mov	fp, r3
    fe6a:	4426      	add	r6, r4
    fe6c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fe70:	e68c      	b.n	fb8c <am_hal_uart_transfer+0x88>
    fe72:	46b8      	mov	r8, r7
    fe74:	e71a      	b.n	fcac <am_hal_uart_transfer+0x1a8>
    fe76:	469b      	mov	fp, r3
    fe78:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fe7c:	e7f0      	b.n	fe60 <am_hal_uart_transfer+0x35c>
    fe7e:	463e      	mov	r6, r7
    fe80:	e797      	b.n	fdb2 <am_hal_uart_transfer+0x2ae>
    fe82:	4616      	mov	r6, r2
    fe84:	e6b2      	b.n	fbec <am_hal_uart_transfer+0xe8>
    fe86:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    fe88:	6bab      	ldr	r3, [r5, #56]	; 0x38
    fe8a:	1a9b      	subs	r3, r3, r2
    fe8c:	429e      	cmp	r6, r3
    fe8e:	bf28      	it	cs
    fe90:	461e      	movcs	r6, r3
    fe92:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    fe96:	4651      	mov	r1, sl
    fe98:	4632      	mov	r2, r6
    fe9a:	4620      	mov	r0, r4
    fe9c:	f000 f924 	bl	100e8 <am_hal_queue_item_add>
    fea0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fea2:	f7fe fd4d 	bl	e940 <am_hal_interrupt_master_disable>
    fea6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    feaa:	371c      	adds	r7, #28
    feac:	033f      	lsls	r7, r7, #12
    feae:	9005      	str	r0, [sp, #20]
    feb0:	e00d      	b.n	fece <am_hal_uart_transfer+0x3ca>
    feb2:	f000 f951 	bl	10158 <am_hal_queue_item_get>
    feb6:	b188      	cbz	r0, fedc <am_hal_uart_transfer+0x3d8>
    feb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    feba:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    febe:	331c      	adds	r3, #28
    fec0:	031b      	lsls	r3, r3, #12
    fec2:	699a      	ldr	r2, [r3, #24]
    fec4:	0692      	lsls	r2, r2, #26
    fec6:	bf5c      	itt	pl
    fec8:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    fecc:	601a      	strpl	r2, [r3, #0]
    fece:	69bb      	ldr	r3, [r7, #24]
    fed0:	069b      	lsls	r3, r3, #26
    fed2:	f04f 0201 	mov.w	r2, #1
    fed6:	a908      	add	r1, sp, #32
    fed8:	4620      	mov	r0, r4
    feda:	d5ea      	bpl.n	feb2 <am_hal_uart_transfer+0x3ae>
    fedc:	9805      	ldr	r0, [sp, #20]
    fede:	f7fe fd33 	bl	e948 <am_hal_interrupt_master_set>
    fee2:	e683      	b.n	fbec <am_hal_uart_transfer+0xe8>
    fee4:	469b      	mov	fp, r3
    fee6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    feea:	e64f      	b.n	fb8c <am_hal_uart_transfer+0x88>
    feec:	461e      	mov	r6, r3
    feee:	e67d      	b.n	fbec <am_hal_uart_transfer+0xe8>
    fef0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fef4:	e6b4      	b.n	fc60 <am_hal_uart_transfer+0x15c>
    fef6:	9300      	str	r3, [sp, #0]
    fef8:	f7fe fd22 	bl	e940 <am_hal_interrupt_master_disable>
    fefc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fefe:	9006      	str	r0, [sp, #24]
    ff00:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ff04:	321c      	adds	r2, #28
    ff06:	0311      	lsls	r1, r2, #12
    ff08:	a808      	add	r0, sp, #32
    ff0a:	2200      	movs	r2, #0
    ff0c:	9b00      	ldr	r3, [sp, #0]
    ff0e:	e009      	b.n	ff24 <am_hal_uart_transfer+0x420>
    ff10:	680c      	ldr	r4, [r1, #0]
    ff12:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ff16:	f102 0201 	add.w	r2, r2, #1
    ff1a:	d121      	bne.n	ff60 <am_hal_uart_transfer+0x45c>
    ff1c:	2a20      	cmp	r2, #32
    ff1e:	f800 4b01 	strb.w	r4, [r0], #1
    ff22:	d002      	beq.n	ff2a <am_hal_uart_transfer+0x426>
    ff24:	698c      	ldr	r4, [r1, #24]
    ff26:	06e4      	lsls	r4, r4, #27
    ff28:	d5f2      	bpl.n	ff10 <am_hal_uart_transfer+0x40c>
    ff2a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    ff2e:	a908      	add	r1, sp, #32
    ff30:	4630      	mov	r0, r6
    ff32:	9300      	str	r3, [sp, #0]
    ff34:	f000 f8d8 	bl	100e8 <am_hal_queue_item_add>
    ff38:	b920      	cbnz	r0, ff44 <am_hal_uart_transfer+0x440>
    ff3a:	4f0e      	ldr	r7, [pc, #56]	; (ff74 <am_hal_uart_transfer+0x470>)
    ff3c:	9806      	ldr	r0, [sp, #24]
    ff3e:	f7fe fd03 	bl	e948 <am_hal_interrupt_master_set>
    ff42:	e5e9      	b.n	fb18 <am_hal_uart_transfer+0x14>
    ff44:	9806      	ldr	r0, [sp, #24]
    ff46:	f7fe fcff 	bl	e948 <am_hal_interrupt_master_set>
    ff4a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ff4c:	9b00      	ldr	r3, [sp, #0]
    ff4e:	42bc      	cmp	r4, r7
    ff50:	bf28      	it	cs
    ff52:	463c      	movcs	r4, r7
    ff54:	4619      	mov	r1, r3
    ff56:	4630      	mov	r0, r6
    ff58:	4622      	mov	r2, r4
    ff5a:	f000 f8fd 	bl	10158 <am_hal_queue_item_get>
    ff5e:	e67e      	b.n	fc5e <am_hal_uart_transfer+0x15a>
    ff60:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff64:	e7ea      	b.n	ff3c <am_hal_uart_transfer+0x438>
    ff66:	4604      	mov	r4, r0
    ff68:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff6c:	e678      	b.n	fc60 <am_hal_uart_transfer+0x15c>
    ff6e:	4627      	mov	r7, r4
    ff70:	e676      	b.n	fc60 <am_hal_uart_transfer+0x15c>
    ff72:	bf00      	nop
    ff74:	08000001 	.word	0x08000001

0000ff78 <am_hal_uart_tx_flush>:
    ff78:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ff7c:	b570      	push	{r4, r5, r6, lr}
    ff7e:	4604      	mov	r4, r0
    ff80:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ff82:	b15b      	cbz	r3, ff9c <am_hal_uart_tx_flush+0x24>
    ff84:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ff86:	b14b      	cbz	r3, ff9c <am_hal_uart_tx_flush+0x24>
    ff88:	4e0e      	ldr	r6, [pc, #56]	; (ffc4 <am_hal_uart_tx_flush+0x4c>)
    ff8a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ff8c:	fbb6 f0f0 	udiv	r0, r6, r0
    ff90:	0100      	lsls	r0, r0, #4
    ff92:	f7fe facb 	bl	e52c <am_hal_flash_delay>
    ff96:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ff98:	2b00      	cmp	r3, #0
    ff9a:	d1f6      	bne.n	ff8a <am_hal_uart_tx_flush+0x12>
    ff9c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ffa0:	351c      	adds	r5, #28
    ffa2:	032d      	lsls	r5, r5, #12
    ffa4:	69ab      	ldr	r3, [r5, #24]
    ffa6:	071a      	lsls	r2, r3, #28
    ffa8:	d509      	bpl.n	ffbe <am_hal_uart_tx_flush+0x46>
    ffaa:	4e06      	ldr	r6, [pc, #24]	; (ffc4 <am_hal_uart_tx_flush+0x4c>)
    ffac:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ffae:	fbb6 f0f0 	udiv	r0, r6, r0
    ffb2:	0100      	lsls	r0, r0, #4
    ffb4:	f7fe faba 	bl	e52c <am_hal_flash_delay>
    ffb8:	69ab      	ldr	r3, [r5, #24]
    ffba:	071b      	lsls	r3, r3, #28
    ffbc:	d4f6      	bmi.n	ffac <am_hal_uart_tx_flush+0x34>
    ffbe:	2000      	movs	r0, #0
    ffc0:	bd70      	pop	{r4, r5, r6, pc}
    ffc2:	bf00      	nop
    ffc4:	00b71b00 	.word	0x00b71b00

0000ffc8 <am_hal_cmdq_init>:
    ffc8:	2807      	cmp	r0, #7
    ffca:	d901      	bls.n	ffd0 <am_hal_cmdq_init+0x8>
    ffcc:	2005      	movs	r0, #5
    ffce:	4770      	bx	lr
    ffd0:	b1c9      	cbz	r1, 10006 <am_hal_cmdq_init+0x3e>
    ffd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffd6:	684c      	ldr	r4, [r1, #4]
    ffd8:	b194      	cbz	r4, 10000 <am_hal_cmdq_init+0x38>
    ffda:	b18a      	cbz	r2, 10000 <am_hal_cmdq_init+0x38>
    ffdc:	680e      	ldr	r6, [r1, #0]
    ffde:	2e01      	cmp	r6, #1
    ffe0:	d90e      	bls.n	10000 <am_hal_cmdq_init+0x38>
    ffe2:	272c      	movs	r7, #44	; 0x2c
    ffe4:	f8df c09c 	ldr.w	ip, [pc, #156]	; 10084 <am_hal_cmdq_init+0xbc>
    ffe8:	fb07 f700 	mul.w	r7, r7, r0
    ffec:	eb0c 0507 	add.w	r5, ip, r7
    fff0:	f895 e003 	ldrb.w	lr, [r5, #3]
    fff4:	f01e 0301 	ands.w	r3, lr, #1
    fff8:	d007      	beq.n	1000a <am_hal_cmdq_init+0x42>
    fffa:	2007      	movs	r0, #7
    fffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10000:	2006      	movs	r0, #6
   10002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10006:	2006      	movs	r0, #6
   10008:	4770      	bx	lr
   1000a:	f04e 0e01 	orr.w	lr, lr, #1
   1000e:	00f6      	lsls	r6, r6, #3
   10010:	f363 0e41 	bfi	lr, r3, #1, #1
   10014:	f885 e003 	strb.w	lr, [r5, #3]
   10018:	eb06 0804 	add.w	r8, r6, r4
   1001c:	f8df e068 	ldr.w	lr, [pc, #104]	; 10088 <am_hal_cmdq_init+0xc0>
   10020:	f8c5 8008 	str.w	r8, [r5, #8]
   10024:	606c      	str	r4, [r5, #4]
   10026:	60ec      	str	r4, [r5, #12]
   10028:	616c      	str	r4, [r5, #20]
   1002a:	612c      	str	r4, [r5, #16]
   1002c:	61ae      	str	r6, [r5, #24]
   1002e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10032:	f85c 6007 	ldr.w	r6, [ip, r7]
   10036:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1008c <am_hal_cmdq_init+0xc4>
   1003a:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
   1003e:	f368 0617 	bfi	r6, r8, #0, #24
   10042:	f8d0 e008 	ldr.w	lr, [r0, #8]
   10046:	f84c 6007 	str.w	r6, [ip, r7]
   1004a:	6268      	str	r0, [r5, #36]	; 0x24
   1004c:	61eb      	str	r3, [r5, #28]
   1004e:	622b      	str	r3, [r5, #32]
   10050:	f8ce 3000 	str.w	r3, [lr]
   10054:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10056:	7a09      	ldrb	r1, [r1, #8]
   10058:	68c0      	ldr	r0, [r0, #12]
   1005a:	6003      	str	r3, [r0, #0]
   1005c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1005e:	6906      	ldr	r6, [r0, #16]
   10060:	6940      	ldr	r0, [r0, #20]
   10062:	6837      	ldr	r7, [r6, #0]
   10064:	4338      	orrs	r0, r7
   10066:	6030      	str	r0, [r6, #0]
   10068:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1006a:	6840      	ldr	r0, [r0, #4]
   1006c:	6004      	str	r4, [r0, #0]
   1006e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10070:	0049      	lsls	r1, r1, #1
   10072:	6804      	ldr	r4, [r0, #0]
   10074:	f001 0102 	and.w	r1, r1, #2
   10078:	6021      	str	r1, [r4, #0]
   1007a:	4618      	mov	r0, r3
   1007c:	6015      	str	r5, [r2, #0]
   1007e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10082:	bf00      	nop
   10084:	10001194 	.word	0x10001194
   10088:	000107d8 	.word	0x000107d8
   1008c:	00cdcdcd 	.word	0x00cdcdcd

00010090 <am_hal_cmdq_enable>:
   10090:	4603      	mov	r3, r0
   10092:	b128      	cbz	r0, 100a0 <am_hal_cmdq_enable+0x10>
   10094:	6802      	ldr	r2, [r0, #0]
   10096:	490d      	ldr	r1, [pc, #52]	; (100cc <am_hal_cmdq_enable+0x3c>)
   10098:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1009c:	428a      	cmp	r2, r1
   1009e:	d001      	beq.n	100a4 <am_hal_cmdq_enable+0x14>
   100a0:	2002      	movs	r0, #2
   100a2:	4770      	bx	lr
   100a4:	78c2      	ldrb	r2, [r0, #3]
   100a6:	f002 0202 	and.w	r2, r2, #2
   100aa:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   100ae:	b952      	cbnz	r2, 100c6 <am_hal_cmdq_enable+0x36>
   100b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   100b2:	6811      	ldr	r1, [r2, #0]
   100b4:	680a      	ldr	r2, [r1, #0]
   100b6:	f042 0201 	orr.w	r2, r2, #1
   100ba:	600a      	str	r2, [r1, #0]
   100bc:	78da      	ldrb	r2, [r3, #3]
   100be:	f042 0202 	orr.w	r2, r2, #2
   100c2:	70da      	strb	r2, [r3, #3]
   100c4:	4770      	bx	lr
   100c6:	2000      	movs	r0, #0
   100c8:	4770      	bx	lr
   100ca:	bf00      	nop
   100cc:	01cdcdcd 	.word	0x01cdcdcd

000100d0 <am_hal_queue_init>:
   100d0:	b410      	push	{r4}
   100d2:	2400      	movs	r4, #0
   100d4:	6004      	str	r4, [r0, #0]
   100d6:	6044      	str	r4, [r0, #4]
   100d8:	6084      	str	r4, [r0, #8]
   100da:	60c3      	str	r3, [r0, #12]
   100dc:	6102      	str	r2, [r0, #16]
   100de:	6141      	str	r1, [r0, #20]
   100e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   100e4:	4770      	bx	lr
   100e6:	bf00      	nop

000100e8 <am_hal_queue_item_add>:
   100e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   100ea:	4604      	mov	r4, r0
   100ec:	6906      	ldr	r6, [r0, #16]
   100ee:	b083      	sub	sp, #12
   100f0:	fb06 f602 	mul.w	r6, r6, r2
   100f4:	460d      	mov	r5, r1
   100f6:	f7fe fc23 	bl	e940 <am_hal_interrupt_master_disable>
   100fa:	68e7      	ldr	r7, [r4, #12]
   100fc:	68a2      	ldr	r2, [r4, #8]
   100fe:	9001      	str	r0, [sp, #4]
   10100:	1abb      	subs	r3, r7, r2
   10102:	429e      	cmp	r6, r3
   10104:	d826      	bhi.n	10154 <am_hal_queue_item_add+0x6c>
   10106:	b196      	cbz	r6, 1012e <am_hal_queue_item_add+0x46>
   10108:	6823      	ldr	r3, [r4, #0]
   1010a:	4629      	mov	r1, r5
   1010c:	b1c5      	cbz	r5, 10140 <am_hal_queue_item_add+0x58>
   1010e:	19af      	adds	r7, r5, r6
   10110:	6962      	ldr	r2, [r4, #20]
   10112:	f811 0b01 	ldrb.w	r0, [r1], #1
   10116:	54d0      	strb	r0, [r2, r3]
   10118:	6823      	ldr	r3, [r4, #0]
   1011a:	68e5      	ldr	r5, [r4, #12]
   1011c:	3301      	adds	r3, #1
   1011e:	42b9      	cmp	r1, r7
   10120:	fbb3 f0f5 	udiv	r0, r3, r5
   10124:	fb05 3310 	mls	r3, r5, r0, r3
   10128:	6023      	str	r3, [r4, #0]
   1012a:	d1f1      	bne.n	10110 <am_hal_queue_item_add+0x28>
   1012c:	68a2      	ldr	r2, [r4, #8]
   1012e:	4432      	add	r2, r6
   10130:	60a2      	str	r2, [r4, #8]
   10132:	2401      	movs	r4, #1
   10134:	9801      	ldr	r0, [sp, #4]
   10136:	f7fe fc07 	bl	e948 <am_hal_interrupt_master_set>
   1013a:	4620      	mov	r0, r4
   1013c:	b003      	add	sp, #12
   1013e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10140:	3101      	adds	r1, #1
   10142:	3301      	adds	r3, #1
   10144:	428e      	cmp	r6, r1
   10146:	fbb3 f0f7 	udiv	r0, r3, r7
   1014a:	fb07 3310 	mls	r3, r7, r0, r3
   1014e:	d1f7      	bne.n	10140 <am_hal_queue_item_add+0x58>
   10150:	6023      	str	r3, [r4, #0]
   10152:	e7ec      	b.n	1012e <am_hal_queue_item_add+0x46>
   10154:	2400      	movs	r4, #0
   10156:	e7ed      	b.n	10134 <am_hal_queue_item_add+0x4c>

00010158 <am_hal_queue_item_get>:
   10158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1015a:	4604      	mov	r4, r0
   1015c:	6906      	ldr	r6, [r0, #16]
   1015e:	b083      	sub	sp, #12
   10160:	fb06 f602 	mul.w	r6, r6, r2
   10164:	460d      	mov	r5, r1
   10166:	f7fe fbeb 	bl	e940 <am_hal_interrupt_master_disable>
   1016a:	68a2      	ldr	r2, [r4, #8]
   1016c:	9001      	str	r0, [sp, #4]
   1016e:	4296      	cmp	r6, r2
   10170:	d81c      	bhi.n	101ac <am_hal_queue_item_get+0x54>
   10172:	b196      	cbz	r6, 1019a <am_hal_queue_item_get+0x42>
   10174:	6863      	ldr	r3, [r4, #4]
   10176:	b1dd      	cbz	r5, 101b0 <am_hal_queue_item_get+0x58>
   10178:	4629      	mov	r1, r5
   1017a:	19af      	adds	r7, r5, r6
   1017c:	6962      	ldr	r2, [r4, #20]
   1017e:	5cd3      	ldrb	r3, [r2, r3]
   10180:	f801 3b01 	strb.w	r3, [r1], #1
   10184:	6863      	ldr	r3, [r4, #4]
   10186:	68e5      	ldr	r5, [r4, #12]
   10188:	3301      	adds	r3, #1
   1018a:	428f      	cmp	r7, r1
   1018c:	fbb3 f0f5 	udiv	r0, r3, r5
   10190:	fb05 3310 	mls	r3, r5, r0, r3
   10194:	6063      	str	r3, [r4, #4]
   10196:	d1f1      	bne.n	1017c <am_hal_queue_item_get+0x24>
   10198:	68a2      	ldr	r2, [r4, #8]
   1019a:	1b92      	subs	r2, r2, r6
   1019c:	60a2      	str	r2, [r4, #8]
   1019e:	2401      	movs	r4, #1
   101a0:	9801      	ldr	r0, [sp, #4]
   101a2:	f7fe fbd1 	bl	e948 <am_hal_interrupt_master_set>
   101a6:	4620      	mov	r0, r4
   101a8:	b003      	add	sp, #12
   101aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ac:	2400      	movs	r4, #0
   101ae:	e7f7      	b.n	101a0 <am_hal_queue_item_get+0x48>
   101b0:	68e0      	ldr	r0, [r4, #12]
   101b2:	4629      	mov	r1, r5
   101b4:	3101      	adds	r1, #1
   101b6:	3301      	adds	r3, #1
   101b8:	428e      	cmp	r6, r1
   101ba:	fbb3 f5f0 	udiv	r5, r3, r0
   101be:	fb00 3315 	mls	r3, r0, r5, r3
   101c2:	d1f7      	bne.n	101b4 <am_hal_queue_item_get+0x5c>
   101c4:	6063      	str	r3, [r4, #4]
   101c6:	e7e8      	b.n	1019a <am_hal_queue_item_get+0x42>
   101c8:	72617053 	.word	0x72617053
   101cc:	6e75466b 	.word	0x6e75466b
   101d0:	67644520 	.word	0x67644520
   101d4:	6f422065 	.word	0x6f422065
   101d8:	20647261 	.word	0x20647261
   101dc:	74736554 	.word	0x74736554
   101e0:	0000000a 	.word	0x0000000a
   101e4:	323a3931 	.word	0x323a3931
   101e8:	30303a31 	.word	0x30303a31
   101ec:	00000000 	.word	0x00000000
   101f0:	2072614d 	.word	0x2072614d
   101f4:	32203031 	.word	0x32203031
   101f8:	00303230 	.word	0x00303230
   101fc:	706d6f43 	.word	0x706d6f43
   10200:	64656c69 	.word	0x64656c69
   10204:	206e6f20 	.word	0x206e6f20
   10208:	202c7325 	.word	0x202c7325
   1020c:	0a0a7325 	.word	0x0a0a7325
   10210:	00000000 	.word	0x00000000
   10214:	74696e49 	.word	0x74696e49
   10218:	696c6169 	.word	0x696c6169
   1021c:	676e697a 	.word	0x676e697a
   10220:	63636120 	.word	0x63636120
   10224:	72656c65 	.word	0x72656c65
   10228:	74656d6f 	.word	0x74656d6f
   1022c:	2e2e7265 	.word	0x2e2e7265
   10230:	0a0d202e 	.word	0x0a0d202e
   10234:	00000000 	.word	0x00000000
   10238:	65636341 	.word	0x65636341
   1023c:	6f72656c 	.word	0x6f72656c
   10240:	6574656d 	.word	0x6574656d
   10244:	6e692072 	.word	0x6e692072
   10248:	72207469 	.word	0x72207469
   1024c:	72757465 	.word	0x72757465
   10250:	2064656e 	.word	0x2064656e
   10254:	0d783825 	.word	0x0d783825
   10258:	00000a0a 	.word	0x00000a0a
   1025c:	58636341 	.word	0x58636341
   10260:	676d5b20 	.word	0x676d5b20
   10264:	41202c5d 	.word	0x41202c5d
   10268:	20596363 	.word	0x20596363
   1026c:	5d676d5b 	.word	0x5d676d5b
   10270:	6341202c 	.word	0x6341202c
   10274:	5b205a63 	.word	0x5b205a63
   10278:	0d5d676d 	.word	0x0d5d676d
   1027c:	0000000a 	.word	0x0000000a
   10280:	2e343025 	.word	0x2e343025
   10284:	2c206632 	.word	0x2c206632
   10288:	2e343025 	.word	0x2e343025
   1028c:	2c206632 	.word	0x2c206632
   10290:	2e343025 	.word	0x2e343025
   10294:	0d206632 	.word	0x0d206632
   10298:	0000000a 	.word	0x0000000a
   1029c:	0a0a0a0a 	.word	0x0a0a0a0a
   102a0:	0a0a0a0a 	.word	0x0a0a0a0a
   102a4:	0a0a0a0a 	.word	0x0a0a0a0a
   102a8:	0a0a0a0a 	.word	0x0a0a0a0a
   102ac:	00000a0a 	.word	0x00000a0a
   102b0:	6f727245 	.word	0x6f727245
   102b4:	202d2072 	.word	0x202d2072
   102b8:	65736572 	.word	0x65736572
   102bc:	74617672 	.word	0x74617672
   102c0:	206e6f69 	.word	0x206e6f69
   102c4:	7420666f 	.word	0x7420666f
   102c8:	41206568 	.word	0x41206568
   102cc:	69204344 	.word	0x69204344
   102d0:	6174736e 	.word	0x6174736e
   102d4:	2065636e 	.word	0x2065636e
   102d8:	6c696166 	.word	0x6c696166
   102dc:	0a2e6465 	.word	0x0a2e6465
   102e0:	00000000 	.word	0x00000000
   102e4:	6f727245 	.word	0x6f727245
   102e8:	202d2072 	.word	0x202d2072
   102ec:	20434441 	.word	0x20434441
   102f0:	65776f70 	.word	0x65776f70
   102f4:	6e6f2072 	.word	0x6e6f2072
   102f8:	69616620 	.word	0x69616620
   102fc:	2e64656c 	.word	0x2e64656c
   10300:	0000000a 	.word	0x0000000a
   10304:	6f727245 	.word	0x6f727245
   10308:	202d2072 	.word	0x202d2072
   1030c:	666e6f63 	.word	0x666e6f63
   10310:	72756769 	.word	0x72756769
   10314:	20676e69 	.word	0x20676e69
   10318:	20434441 	.word	0x20434441
   1031c:	6c696166 	.word	0x6c696166
   10320:	0a2e6465 	.word	0x0a2e6465
   10324:	00000000 	.word	0x00000000
   10328:	6f727245 	.word	0x6f727245
   1032c:	202d2072 	.word	0x202d2072
   10330:	666e6f63 	.word	0x666e6f63
   10334:	72756769 	.word	0x72756769
   10338:	20676e69 	.word	0x20676e69
   1033c:	20434441 	.word	0x20434441
   10340:	746f6c53 	.word	0x746f6c53
   10344:	66203020 	.word	0x66203020
   10348:	656c6961 	.word	0x656c6961
   1034c:	000a2e64 	.word	0x000a2e64
   10350:	6f727245 	.word	0x6f727245
   10354:	202d2072 	.word	0x202d2072
   10358:	62616e65 	.word	0x62616e65
   1035c:	676e696c 	.word	0x676e696c
   10360:	43444120 	.word	0x43444120
   10364:	69616620 	.word	0x69616620
   10368:	2e64656c 	.word	0x2e64656c
   1036c:	0000000a 	.word	0x0000000a
   10370:	6f727245 	.word	0x6f727245
   10374:	65722072 	.word	0x65722072
   10378:	6e696461 	.word	0x6e696461
   1037c:	44412067 	.word	0x44412067
   10380:	6e692043 	.word	0x6e692043
   10384:	72726574 	.word	0x72726574
   10388:	20747075 	.word	0x20747075
   1038c:	74617473 	.word	0x74617473
   10390:	000a7375 	.word	0x000a7375
   10394:	6f727245 	.word	0x6f727245
   10398:	6c632072 	.word	0x6c632072
   1039c:	69726165 	.word	0x69726165
   103a0:	4120676e 	.word	0x4120676e
   103a4:	69204344 	.word	0x69204344
   103a8:	7265746e 	.word	0x7265746e
   103ac:	74707572 	.word	0x74707572
   103b0:	61747320 	.word	0x61747320
   103b4:	0a737574 	.word	0x0a737574
   103b8:	00000000 	.word	0x00000000
   103bc:	6f727245 	.word	0x6f727245
   103c0:	202d2072 	.word	0x202d2072
   103c4:	20434441 	.word	0x20434441
   103c8:	706d6173 	.word	0x706d6173
   103cc:	7220656c 	.word	0x7220656c
   103d0:	20646165 	.word	0x20646165
   103d4:	6d6f7266 	.word	0x6d6f7266
   103d8:	46494620 	.word	0x46494620
   103dc:	6166204f 	.word	0x6166204f
   103e0:	64656c69 	.word	0x64656c69
   103e4:	00000a2e 	.word	0x00000a2e
   103e8:	6f727245 	.word	0x6f727245
   103ec:	202d2072 	.word	0x202d2072
   103f0:	61736964 	.word	0x61736964
   103f4:	20656c62 	.word	0x20656c62
   103f8:	20434441 	.word	0x20434441
   103fc:	6c696166 	.word	0x6c696166
   10400:	0a2e6465 	.word	0x0a2e6465
   10404:	00000000 	.word	0x00000000
   10408:	6f727245 	.word	0x6f727245
   1040c:	202d2072 	.word	0x202d2072
   10410:	61736964 	.word	0x61736964
   10414:	6e696c62 	.word	0x6e696c62
   10418:	68742067 	.word	0x68742067
   1041c:	44412065 	.word	0x44412065
   10420:	6f702043 	.word	0x6f702043
   10424:	20726577 	.word	0x20726577
   10428:	616d6f64 	.word	0x616d6f64
   1042c:	66206e69 	.word	0x66206e69
   10430:	656c6961 	.word	0x656c6961
   10434:	000a2e64 	.word	0x000a2e64
   10438:	6f727245 	.word	0x6f727245
   1043c:	202d2072 	.word	0x202d2072
   10440:	75746572 	.word	0x75746572
   10444:	6f206e72 	.word	0x6f206e72
   10448:	68742066 	.word	0x68742066
   1044c:	44412065 	.word	0x44412065
   10450:	6e692043 	.word	0x6e692043
   10454:	6e617473 	.word	0x6e617473
   10458:	66206563 	.word	0x66206563
   1045c:	656c6961 	.word	0x656c6961
   10460:	000a2e64 	.word	0x000a2e64

00010464 <g_AM_PIN_11_ADCSE2>:
   10464:	00000000 52206f4e 75622058 72656666     ....No RX buffer
   10474:	6f727020 65646976 00000a64 646e6553      provided...Send
   10484:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   10494:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   104a4:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   104b4:	65646976 00000a64 646e6553 72726520     vided...Send err
   104c4:	68702820 20657361 203a2931 000a6425      (phase 1): %d..
   104d4:	616f6857 2820696d 756f6873 6220646c     Whoami (should b
   104e4:	78302065 3a293333 25783020 000a7832     e 0x33): 0x%2x..

000104f4 <g_sBspUartConfig>:
   104f4:	0001c200 00000060 00000000 00000000     ....`...........
   10504:	00000000 00000012 00000000 00000000     ................
	...

0001051c <g_AM_BSP_GPIO_COM_UART_RX>:
   1051c:	00000000                                ....

00010520 <g_AM_BSP_GPIO_COM_UART_TX>:
   10520:	00000000                                ....

00010524 <g_AM_BSP_GPIO_IOM4_SCL>:
   10524:	00040b44                                D...

00010528 <g_AM_BSP_GPIO_IOM4_SDA>:
   10528:	00040b44                                D...

0001052c <am_hal_cachectrl_defaults>:
   1052c:	00000308                                ....

00010530 <g_AM_HAL_GPIO_INPUT>:
   10530:	00001003                                ....

00010534 <g_ui8Bit76Capabilities>:
   10534:	02800101 80010180 80800101 80808080     ................
   10544:	80808080 80808008 01800180 80808080     ................
   10554:	80808080 01800402 01010401 80808080     ................
   10564:	00000101                                ....

00010568 <g_ui8NCEtable>:
   10568:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10578:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10588:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10598:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   105a8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   105b8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   105c8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   105d8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   105e8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   105f8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10608:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10618:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10628:	32221202 43231303                       .."2..#C

00010630 <g_ui8Inpen>:
   10630:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   10640:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   10650:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   10660:	00003130                                01..

00010664 <g_AM_HAL_GPIO_DISABLE>:
   10664:	00000003                                ....

00010668 <g_AM_HAL_GPIO_OUTPUT>:
   10668:	00000403                                ....

0001066c <g_ui8nCEpins>:
   1066c:	02070707 00080802 01020202 01010101     ................
   1067c:	01010101 01010101 01010101 01010101     ................
   1068c:	01010101 08010101 01010008 01010101     ................
   1069c:	00000101                                ....

000106a0 <g_AM_HAL_GPIO_OUTPUT_12>:
   106a0:	00000703                                ....

000106a4 <g_am_hal_mcuctrl_flash_size>:
   106a4:	00004000 00008000 00010000 00020000     .@..............
   106b4:	00040000 00080000 00100000 00200000     .............. .
   106c4:	00180000 00000000 00000000 00000000     ................
	...

000106e4 <g_am_hal_mcuctrl_sram_size>:
   106e4:	00004000 00008000 00010000 00020000     .@..............
   106f4:	00040000 00080000 00100000 00060000     ................
   10704:	000c0000 00000000 00000000 00000000     ................
	...

00010724 <am_hal_pwrctrl_peripheral_control>:
	...
   10730:	00000001 00000004 00000004 00000002     ................
   10740:	00000008 00000008 00000004 00000008     ................
   10750:	00000008 00000008 00000008 00000008     ................
   10760:	00000010 00000010 00000010 00000020     ............ ...
   10770:	00000010 00000010 00000040 00000010     ........@.......
   10780:	00000010 00000080 00000004 00000004     ................
   10790:	00000100 00000004 00000004 00000200     ................
   107a0:	00000020 00000020 00000400 00000004      ... ...........
   107b0:	00000004 00000800 00000040 00000040     ........@...@...
   107c0:	00001000 00000080 00000080 00002000     ............. ..
   107d0:	00000100 00000100                       ........

000107d8 <gAmHalCmdQReg>:
   107d8:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   107e8:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   107f8:	00000004 00000002 50005294 50005298     .........R.P.R.P
   10808:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   10818:	5000529c 00000001 00000004 00000002     .R.P............
   10828:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   10838:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   10848:	00000004 00000002 50007294 50007298     .........r.P.r.P
   10858:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10868:	5000729c 00000001 00000004 00000002     .r.P............
   10878:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10888:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10898:	00000004 00000002 50009294 50009298     ...........P...P
   108a8:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   108b8:	5000929c 00000001 00000004 00000002     ...P............
   108c8:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   108d8:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   108e8:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   108f8:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   10908:	5000c250 00000001 00000004 00000002     P..P............
