
bin/example1_edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 c5 d2 00 00 bd d2 00 00 05 c7 00 00     ................
    c010:	05 c7 00 00 05 c7 00 00 05 c7 00 00 00 00 00 00     ................
	...
    c02c:	c1 d2 00 00 c1 d2 00 00 00 00 00 00 c1 d2 00 00     ................
    c03c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c04c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c05c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c06c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 2d d3 00 00     ............-...
    c07c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 e9 d3 00 00     ................
    c08c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c09c:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c0ac:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c0bc:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 c1 d2 00 00     ................
    c0cc:	c1 d2 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	3c01      	subs	r4, #1
    c23c:	bf28      	it	cs
    c23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c242:	d2e9      	bcs.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c3ea:	bf08      	it	eq
    c3ec:	4770      	bxeq	lr
    c3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c3f2:	bf04      	itt	eq
    c3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c3f8:	4770      	bxeq	lr
    c3fa:	b530      	push	{r4, r5, lr}
    c3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c408:	e71c      	b.n	c244 <__adddf3+0x138>
    c40a:	bf00      	nop

0000c40c <__aeabi_ul2d>:
    c40c:	ea50 0201 	orrs.w	r2, r0, r1
    c410:	bf08      	it	eq
    c412:	4770      	bxeq	lr
    c414:	b530      	push	{r4, r5, lr}
    c416:	f04f 0500 	mov.w	r5, #0
    c41a:	e00a      	b.n	c432 <__aeabi_l2d+0x16>

0000c41c <__aeabi_l2d>:
    c41c:	ea50 0201 	orrs.w	r2, r0, r1
    c420:	bf08      	it	eq
    c422:	4770      	bxeq	lr
    c424:	b530      	push	{r4, r5, lr}
    c426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c42a:	d502      	bpl.n	c432 <__aeabi_l2d+0x16>
    c42c:	4240      	negs	r0, r0
    c42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c43e:	f43f aed8 	beq.w	c1f2 <__adddf3+0xe6>
    c442:	f04f 0203 	mov.w	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c452:	bf18      	it	ne
    c454:	3203      	addne	r2, #3
    c456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c45a:	f1c2 0320 	rsb	r3, r2, #32
    c45e:	fa00 fc03 	lsl.w	ip, r0, r3
    c462:	fa20 f002 	lsr.w	r0, r0, r2
    c466:	fa01 fe03 	lsl.w	lr, r1, r3
    c46a:	ea40 000e 	orr.w	r0, r0, lr
    c46e:	fa21 f102 	lsr.w	r1, r1, r2
    c472:	4414      	add	r4, r2
    c474:	e6bd      	b.n	c1f2 <__adddf3+0xe6>
    c476:	bf00      	nop

0000c478 <__aeabi_d2f>:
    c478:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c47c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c480:	bf24      	itt	cs
    c482:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c486:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c48a:	d90d      	bls.n	c4a8 <__aeabi_d2f+0x30>
    c48c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c490:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c494:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c498:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c49c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c4a0:	bf08      	it	eq
    c4a2:	f020 0001 	biceq.w	r0, r0, #1
    c4a6:	4770      	bx	lr
    c4a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4ac:	d121      	bne.n	c4f2 <__aeabi_d2f+0x7a>
    c4ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4b2:	bfbc      	itt	lt
    c4b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b8:	4770      	bxlt	lr
    c4ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4be:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4c2:	f1c2 0218 	rsb	r2, r2, #24
    c4c6:	f1c2 0c20 	rsb	ip, r2, #32
    c4ca:	fa10 f30c 	lsls.w	r3, r0, ip
    c4ce:	fa20 f002 	lsr.w	r0, r0, r2
    c4d2:	bf18      	it	ne
    c4d4:	f040 0001 	orrne.w	r0, r0, #1
    c4d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4e0:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4e4:	ea40 000c 	orr.w	r0, r0, ip
    c4e8:	fa23 f302 	lsr.w	r3, r3, r2
    c4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4f0:	e7cc      	b.n	c48c <__aeabi_d2f+0x14>
    c4f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4f6:	d107      	bne.n	c508 <__aeabi_d2f+0x90>
    c4f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4fc:	bf1e      	ittt	ne
    c4fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c502:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c506:	4770      	bxne	lr
    c508:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c50c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c510:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c514:	4770      	bx	lr
    c516:	bf00      	nop

0000c518 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c518:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c51c:	2100      	movs	r1, #0
{
    c51e:	b08c      	sub	sp, #48	; 0x30
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c520:	4608      	mov	r0, r1
    c522:	f001 feaf 	bl	e284 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c526:	4864      	ldr	r0, [pc, #400]	; (c6b8 <main+0x1a0>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c528:	4c64      	ldr	r4, [pc, #400]	; (c6bc <main+0x1a4>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c52a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c6f4 <main+0x1dc>
            acceleration_mg[0] =
    c52e:	4f64      	ldr	r7, [pc, #400]	; (c6c0 <main+0x1a8>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c530:	f001 fd06 	bl	df40 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c534:	f001 fd2a 	bl	df8c <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c538:	f001 fa3e 	bl	d9b8 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c53c:	f001 faa4 	bl	da88 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c540:	4b60      	ldr	r3, [pc, #384]	; (c6c4 <main+0x1ac>)
    c542:	681d      	ldr	r5, [r3, #0]
    c544:	202e      	movs	r0, #46	; 0x2e
    c546:	4629      	mov	r1, r5
    c548:	f002 f860 	bl	e60c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c54c:	4629      	mov	r1, r5
    c54e:	2025      	movs	r0, #37	; 0x25
    c550:	f002 f85c 	bl	e60c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c554:	4629      	mov	r1, r5
    c556:	202c      	movs	r0, #44	; 0x2c
    c558:	f002 f858 	bl	e60c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c55c:	4629      	mov	r1, r5
    c55e:	202f      	movs	r0, #47	; 0x2f
    c560:	f002 f854 	bl	e60c <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c564:	4b58      	ldr	r3, [pc, #352]	; (c6c8 <main+0x1b0>)
    c566:	200e      	movs	r0, #14
    c568:	6819      	ldr	r1, [r3, #0]
    c56a:	f002 f84f 	bl	e60c <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c56e:	4b57      	ldr	r3, [pc, #348]	; (c6cc <main+0x1b4>)
    c570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c574:	2220      	movs	r2, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c576:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c578:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c57a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c57e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c582:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c584:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c586:	f000 fe93 	bl	d2b0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c58a:	4851      	ldr	r0, [pc, #324]	; (c6d0 <main+0x1b8>)
    c58c:	f000 fe76 	bl	d27c <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c590:	4a50      	ldr	r2, [pc, #320]	; (c6d4 <main+0x1bc>)
    c592:	4951      	ldr	r1, [pc, #324]	; (c6d8 <main+0x1c0>)
    c594:	4851      	ldr	r0, [pc, #324]	; (c6dc <main+0x1c4>)
    c596:	f000 fe71 	bl	d27c <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c59a:	4851      	ldr	r0, [pc, #324]	; (c6e0 <main+0x1c8>)
    c59c:	f000 fe6e 	bl	d27c <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c5a0:	4850      	ldr	r0, [pc, #320]	; (c6e4 <main+0x1cc>)
    c5a2:	f001 f9e5 	bl	d970 <am_bsp_uart_string_print>
    int accInitRes = initAccelerometer();
    c5a6:	f001 f871 	bl	d68c <initAccelerometer>
    c5aa:	4601      	mov	r1, r0
    am_util_stdio_printf("Accelerometer init returned %8x\r\n", accInitRes);
    c5ac:	484e      	ldr	r0, [pc, #312]	; (c6e8 <main+0x1d0>)
    c5ae:	f000 fe65 	bl	d27c <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
}

static int testADC(void)
{
    initADC();
    c5b2:	f000 ff7f 	bl	d4b4 <initADC>
    enableAdcInterrupts();
    c5b6:	f000 ff9d 	bl	d4f4 <enableAdcInterrupts>
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5ba:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c5bc:	2601      	movs	r6, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5be:	aa0b      	add	r2, sp, #44	; 0x2c
    c5c0:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c5c2:	960b      	str	r6, [sp, #44]	; 0x2c
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5c4:	f002 f95e 	bl	e884 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c5c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5ca:	a90a      	add	r1, sp, #40	; 0x28
    c5cc:	4620      	mov	r0, r4
        if( pin14Val == 0 ){ break; }
    c5ce:	2d00      	cmp	r5, #0
    c5d0:	d05c      	beq.n	c68c <main+0x174>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5d2:	f001 f9a9 	bl	d928 <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c5d6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    c5da:	b9b3      	cbnz	r3, c60a <main+0xf2>
        lis2dh12_temp_data_ready_get(&dev_ctx, &reg.byte);      
    c5dc:	a90a      	add	r1, sp, #40	; 0x28
    c5de:	4620      	mov	r0, r4
    c5e0:	f001 f8d4 	bl	d78c <lis2dh12_temp_data_ready_get>
        if (reg.byte)    
    c5e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d0e6      	beq.n	c5ba <main+0xa2>
            memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
    c5ec:	4d3f      	ldr	r5, [pc, #252]	; (c6ec <main+0x1d4>)
    c5ee:	2300      	movs	r3, #0
    c5f0:	802b      	strh	r3, [r5, #0]
            lis2dh12_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
    c5f2:	4629      	mov	r1, r5
    c5f4:	4620      	mov	r0, r4
    c5f6:	f001 f8d9 	bl	d7ac <lis2dh12_temperature_raw_get>
            lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature.i16bit);
    c5fa:	f9b5 0000 	ldrsh.w	r0, [r5]
    c5fe:	f001 f8b7 	bl	d770 <lis2dh12_from_lsb_hr_to_celsius>
            temperature_degC =
    c602:	4b3b      	ldr	r3, [pc, #236]	; (c6f0 <main+0x1d8>)
    c604:	ed83 0a00 	vstr	s0, [r3]
    {
    c608:	e7d7      	b.n	c5ba <main+0xa2>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c60a:	2300      	movs	r3, #0
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c60c:	4939      	ldr	r1, [pc, #228]	; (c6f4 <main+0x1dc>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c60e:	f8c8 3000 	str.w	r3, [r8]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c612:	4620      	mov	r0, r4
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c614:	f8a8 3004 	strh.w	r3, [r8, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c618:	f001 f996 	bl	d948 <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c61c:	f9b8 0000 	ldrsh.w	r0, [r8]
    c620:	f001 f8a0 	bl	d764 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c624:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
            acceleration_mg[0] =
    c628:	ed87 0a00 	vstr	s0, [r7]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c62c:	f001 f89a 	bl	d764 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c630:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
            acceleration_mg[1] =
    c634:	ed87 0a01 	vstr	s0, [r7, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c638:	f001 f894 	bl	d764 <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c63c:	4b2e      	ldr	r3, [pc, #184]	; (c6f8 <main+0x1e0>)
            acceleration_mg[2] =
    c63e:	ed87 0a02 	vstr	s0, [r7, #8]
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c642:	6838      	ldr	r0, [r7, #0]
    c644:	681e      	ldr	r6, [r3, #0]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c646:	ee10 5a10 	vmov	r5, s0
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c64a:	f7ff febd 	bl	c3c8 <__aeabi_f2d>
    c64e:	460b      	mov	r3, r1
    c650:	4927      	ldr	r1, [pc, #156]	; (c6f0 <main+0x1d8>)
    c652:	9606      	str	r6, [sp, #24]
    c654:	4602      	mov	r2, r0
    c656:	6808      	ldr	r0, [r1, #0]
    c658:	e9cd 2308 	strd	r2, r3, [sp, #32]
    c65c:	f7ff feb4 	bl	c3c8 <__aeabi_f2d>
    c660:	4682      	mov	sl, r0
    c662:	468b      	mov	fp, r1
    c664:	4628      	mov	r0, r5
    c666:	e9cd ab04 	strd	sl, fp, [sp, #16]
    c66a:	f7ff fead 	bl	c3c8 <__aeabi_f2d>
    c66e:	4682      	mov	sl, r0
    c670:	468b      	mov	fp, r1
    c672:	6878      	ldr	r0, [r7, #4]
    c674:	e9cd ab02 	strd	sl, fp, [sp, #8]
    c678:	f7ff fea6 	bl	c3c8 <__aeabi_f2d>
    c67c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    c680:	e9cd 0100 	strd	r0, r1, [sp]
    c684:	481d      	ldr	r0, [pc, #116]	; (c6fc <main+0x1e4>)
    c686:	f000 fdf9 	bl	d27c <am_util_stdio_printf>
    c68a:	e7a7      	b.n	c5dc <main+0xc4>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c68c:	4b1c      	ldr	r3, [pc, #112]	; (c700 <main+0x1e8>)
    c68e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c692:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c698:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c69c:	2020      	movs	r0, #32
    c69e:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c6a0:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c6a2:	601a      	str	r2, [r3, #0]
    am_bsp_debug_printf_disable();
    c6a4:	f001 f9ba 	bl	da1c <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c6a8:	4630      	mov	r0, r6
    c6aa:	f003 f83d 	bl	f728 <am_hal_sysctrl_sleep>
}
    c6ae:	4628      	mov	r0, r5
    c6b0:	b00c      	add	sp, #48	; 0x30
    c6b2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    c6b6:	bf00      	nop
    c6b8:	00010594 	.word	0x00010594
    c6bc:	10001314 	.word	0x10001314
    c6c0:	10001304 	.word	0x10001304
    c6c4:	00010708 	.word	0x00010708
    c6c8:	00010598 	.word	0x00010598
    c6cc:	40010094 	.word	0x40010094
    c6d0:	00010200 	.word	0x00010200
    c6d4:	0001021c 	.word	0x0001021c
    c6d8:	00010228 	.word	0x00010228
    c6dc:	00010234 	.word	0x00010234
    c6e0:	0001024c 	.word	0x0001024c
    c6e4:	00010278 	.word	0x00010278
    c6e8:	00010288 	.word	0x00010288
    c6ec:	10001300 	.word	0x10001300
    c6f0:	100012f4 	.word	0x100012f4
    c6f4:	100012f8 	.word	0x100012f8
    c6f8:	10001168 	.word	0x10001168
    c6fc:	000102ac 	.word	0x000102ac
    c700:	4001009c 	.word	0x4001009c

0000c704 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c704:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c706:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c70a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c70c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c710:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c714:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c718:	f000 f806 	bl	c728 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c71c:	bd01      	pop	{r0, pc}
    c71e:	bf00      	nop

0000c720 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c720:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c722:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c724:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c726:	4770      	bx	lr

0000c728 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c728:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c72a:	2300      	movs	r3, #0
{
    c72c:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c72e:	e9cd 3300 	strd	r3, r3, [sp]
    c732:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c736:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c73a:	4a2b      	ldr	r2, [pc, #172]	; (c7e8 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c73c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c73e:	6813      	ldr	r3, [r2, #0]
    c740:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c742:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c744:	b2db      	uxtb	r3, r3
    c746:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c74a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c74c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c750:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c754:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c756:	0c1b      	lsrs	r3, r3, #16
    c758:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c75c:	6913      	ldr	r3, [r2, #16]
    c75e:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c760:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    c764:	079b      	lsls	r3, r3, #30
{
    c766:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c768:	d437      	bmi.n	c7da <am_util_faultisr_collect_data+0xb2>
    c76a:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c76e:	4621      	mov	r1, r4
    c770:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c772:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c774:	f7ff ffd4 	bl	c720 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c778:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c77a:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c77c:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c77e:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c780:	f7ff ffce 	bl	c720 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c784:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c786:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c788:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c78a:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c78c:	f7ff ffc8 	bl	c720 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c790:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c792:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c794:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c796:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c798:	f7ff ffc2 	bl	c720 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c79c:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c79e:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7a0:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c7a2:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7a4:	f7ff ffbc 	bl	c720 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7a8:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7aa:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7ac:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c7ae:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7b0:	f7ff ffb6 	bl	c720 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7b4:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7b6:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7b8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7ba:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7bc:	f7ff ffb0 	bl	c720 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7c0:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7c2:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7c4:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7c6:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7c8:	f7ff ffaa 	bl	c720 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7cc:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7ce:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7d0:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7d2:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7d4:	f002 fe38 	bl	f448 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c7d8:	e7fe      	b.n	c7d8 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7da:	4601      	mov	r1, r0
    c7dc:	2006      	movs	r0, #6
    c7de:	f7ff ff9f 	bl	c720 <getStackedReg>
    c7e2:	4603      	mov	r3, r0
    c7e4:	e7c3      	b.n	c76e <am_util_faultisr_collect_data+0x46>
    c7e6:	bf00      	nop
    c7e8:	e000ed28 	.word	0xe000ed28

0000c7ec <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c7ec:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c7ee:	460e      	mov	r6, r1
    c7f0:	2700      	movs	r7, #0
    c7f2:	ea56 0307 	orrs.w	r3, r6, r7
    c7f6:	d045      	beq.n	c884 <divu64_10+0x98>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7f8:	0844      	lsrs	r4, r0, #1
    c7fa:	0883      	lsrs	r3, r0, #2
    c7fc:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c800:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
    c804:	18e4      	adds	r4, r4, r3
    c806:	ea4f 0251 	mov.w	r2, r1, lsr #1
    c80a:	ea4f 0391 	mov.w	r3, r1, lsr #2
    c80e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 4);
    c812:	0923      	lsrs	r3, r4, #4
    c814:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c818:	18e4      	adds	r4, r4, r3
    c81a:	ea4f 1312 	mov.w	r3, r2, lsr #4
    c81e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 8);
    c822:	0a23      	lsrs	r3, r4, #8
    c824:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    c828:	18e4      	adds	r4, r4, r3
    c82a:	ea4f 2312 	mov.w	r3, r2, lsr #8
    c82e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 16);
    c832:	0c23      	lsrs	r3, r4, #16
    c834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c838:	18e4      	adds	r4, r4, r3
    c83a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c83e:	eb43 0202 	adc.w	r2, r3, r2
        q64 += (q64 >> 32);
    c842:	18a4      	adds	r4, r4, r2
    c844:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c848:	08e3      	lsrs	r3, r4, #3
    c84a:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c84e:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c850:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c852:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c856:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c85a:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c85c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c860:	18e4      	adds	r4, r4, r3
    c862:	eb42 0505 	adc.w	r5, r2, r5
    c866:	1924      	adds	r4, r4, r4
    c868:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c86a:	1b00      	subs	r0, r0, r4
    c86c:	eb61 0105 	sbc.w	r1, r1, r5
    c870:	0900      	lsrs	r0, r0, #4
    c872:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c876:	18c0      	adds	r0, r0, r3
    c878:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c87c:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c880:	bcf0      	pop	{r4, r5, r6, r7}
    c882:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c884:	0882      	lsrs	r2, r0, #2
    c886:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c88a:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c88e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c892:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c896:	08d2      	lsrs	r2, r2, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c898:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c89a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c89e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
    c8a2:	eb02 1010 	add.w	r0, r2, r0, lsr #4
    c8a6:	2100      	movs	r1, #0
}
    c8a8:	bcf0      	pop	{r4, r5, r6, r7}
    c8aa:	4770      	bx	lr

0000c8ac <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8b0:	b08b      	sub	sp, #44	; 0x2c
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c8b2:	f10d 0e0c 	add.w	lr, sp, #12
{
    c8b6:	9201      	str	r2, [sp, #4]
        tbuf[ix++] = uMod + '0';
    c8b8:	f04f 0800 	mov.w	r8, #0
    c8bc:	e049      	b.n	c952 <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c8be:	eb16 0309 	adds.w	r3, r6, r9
    c8c2:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 4);
    c8c6:	091c      	lsrs	r4, r3, #4
    c8c8:	ea44 7407 	orr.w	r4, r4, r7, lsl #28
    c8cc:	191b      	adds	r3, r3, r4
    c8ce:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    c8d2:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 8);
    c8d6:	0a1c      	lsrs	r4, r3, #8
    c8d8:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
    c8dc:	191b      	adds	r3, r3, r4
    c8de:	ea4f 2c17 	mov.w	ip, r7, lsr #8
    c8e2:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 16);
    c8e6:	0c1c      	lsrs	r4, r3, #16
    c8e8:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    c8ec:	191b      	adds	r3, r3, r4
    c8ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c8f2:	eb47 070c 	adc.w	r7, r7, ip
        q64 += (q64 >> 32);
    c8f6:	19db      	adds	r3, r3, r7
    c8f8:	eb47 0202 	adc.w	r2, r7, r2
        q64 >>= 3;
    c8fc:	08db      	lsrs	r3, r3, #3
    c8fe:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c902:	08d2      	lsrs	r2, r2, #3
        return q64 + ((r64 + 6) >> 4);
    c904:	1d84      	adds	r4, r0, #6
        r64 = ui64Val - q64*10;
    c906:	ea4f 0583 	mov.w	r5, r3, lsl #2
    c90a:	ea4f 0682 	mov.w	r6, r2, lsl #2
    c90e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
        return q64 + ((r64 + 6) >> 4);
    c912:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
    c916:	18ed      	adds	r5, r5, r3
    c918:	eb42 0606 	adc.w	r6, r2, r6
    c91c:	196d      	adds	r5, r5, r5
    c91e:	4176      	adcs	r6, r6
        return q64 + ((r64 + 6) >> 4);
    c920:	1b64      	subs	r4, r4, r5
    c922:	eb61 0106 	sbc.w	r1, r1, r6
    c926:	0924      	lsrs	r4, r4, #4
    c928:	ea44 7401 	orr.w	r4, r4, r1, lsl #28
    c92c:	18e3      	adds	r3, r4, r3
        uMod = ui64Val - (u64Tmp * 10);
    c92e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    c932:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
        tbuf[ix++] = uMod + '0';
    c936:	f100 0030 	add.w	r0, r0, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c93a:	ea4f 1111 	mov.w	r1, r1, lsr #4
        tbuf[ix++] = uMod + '0';
    c93e:	f88e 0000 	strb.w	r0, [lr]
        return q64 + ((r64 + 6) >> 4);
    c942:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c946:	f108 0401 	add.w	r4, r8, #1
    c94a:	4618      	mov	r0, r3
    c94c:	46a0      	mov	r8, r4
    c94e:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c952:	0882      	lsrs	r2, r0, #2
    c954:	eb02 0250 	add.w	r2, r2, r0, lsr #1
        q32 += (q32 >> 4);
    c958:	eb02 1212 	add.w	r2, r2, r2, lsr #4
        q32 += (q32 >> 8);
    c95c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
        q32 += (q32 >> 16);
    c960:	eb02 4212 	add.w	r2, r2, r2, lsr #16
        q32 >>= 3;
    c964:	08d3      	lsrs	r3, r2, #3
        r32 = ui32Val - q32*10;
    c966:	eb03 0483 	add.w	r4, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c96a:	1d82      	adds	r2, r0, #6
    c96c:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
    c970:	eb03 1312 	add.w	r3, r3, r2, lsr #4
    if ( ui64Val >> 32 )
    c974:	2500      	movs	r5, #0
    c976:	460c      	mov	r4, r1
        uMod = ui64Val - (u64Tmp * 10);
    c978:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c97c:	0846      	lsrs	r6, r0, #1
    c97e:	ea4f 0990 	mov.w	r9, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c982:	eba0 0a4b 	sub.w	sl, r0, fp, lsl #1
    if ( ui64Val >> 32 )
    c986:	432c      	orrs	r4, r5
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c988:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
    c98c:	ea49 7981 	orr.w	r9, r9, r1, lsl #30
    c990:	ea4f 0751 	mov.w	r7, r1, lsr #1
    c994:	ea4f 0c91 	mov.w	ip, r1, lsr #2
        q64 += (q64 >> 32);
    c998:	462a      	mov	r2, r5
        tbuf[ix++] = uMod + '0';
    c99a:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
    if ( ui64Val >> 32 )
    c99e:	d18e      	bne.n	c8be <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c9a0:	f88e a000 	strb.w	sl, [lr]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9a4:	4618      	mov	r0, r3
    c9a6:	2100      	movs	r1, #0
        tbuf[ix++] = uMod + '0';
    c9a8:	f108 0401 	add.w	r4, r8, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d1cd      	bne.n	c94c <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c9b0:	9a01      	ldr	r2, [sp, #4]
    c9b2:	b17a      	cbz	r2, c9d4 <uint64_to_str+0x128>
    c9b4:	ab03      	add	r3, sp, #12
    c9b6:	4423      	add	r3, r4
    c9b8:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c9ba:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c9be:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c9c2:	a903      	add	r1, sp, #12
    c9c4:	4299      	cmp	r1, r3
    c9c6:	d1f8      	bne.n	c9ba <uint64_to_str+0x10e>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c9c8:	9b01      	ldr	r3, [sp, #4]
    c9ca:	4443      	add	r3, r8
    c9cc:	4698      	mov	r8, r3
    c9ce:	2300      	movs	r3, #0
    c9d0:	f888 3001 	strb.w	r3, [r8, #1]
    }

    return iNumDig;
}
    c9d4:	4620      	mov	r0, r4
    c9d6:	b00b      	add	sp, #44	; 0x2c
    c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c9dc <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c9dc:	4b01      	ldr	r3, [pc, #4]	; (c9e4 <am_util_stdio_printf_init+0x8>)
    c9de:	6018      	str	r0, [r3, #0]
}
    c9e0:	4770      	bx	lr
    c9e2:	bf00      	nop
    c9e4:	10001310 	.word	0x10001310

0000c9e8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c9ec:	780b      	ldrb	r3, [r1, #0]
{
    c9ee:	b089      	sub	sp, #36	; 0x24
    c9f0:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	f000 8092 	beq.w	cb1c <am_util_stdio_vsprintf+0x134>
    c9f8:	4693      	mov	fp, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c9fa:	f04f 0a00 	mov.w	sl, #0
    c9fe:	e00b      	b.n	ca18 <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ca00:	b11d      	cbz	r5, ca0a <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ca02:	2b0a      	cmp	r3, #10
    ca04:	d07e      	beq.n	cb04 <am_util_stdio_vsprintf+0x11c>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    ca06:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
    ca0a:	3101      	adds	r1, #1
            ++ui32CharCnt;
    ca0c:	f10a 0a01 	add.w	sl, sl, #1
    while ( *pcFmt != 0x0 )
    ca10:	780b      	ldrb	r3, [r1, #0]
    ca12:	2b00      	cmp	r3, #0
    ca14:	f000 8083 	beq.w	cb1e <am_util_stdio_vsprintf+0x136>
        if ( *pcFmt != '%' )
    ca18:	2b25      	cmp	r3, #37	; 0x25
    ca1a:	d1f1      	bne.n	ca00 <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    ca1c:	784b      	ldrb	r3, [r1, #1]
    ca1e:	2b30      	cmp	r3, #48	; 0x30
    ca20:	f000 8090 	beq.w	cb44 <am_util_stdio_vsprintf+0x15c>
        ++pcFmt;
    ca24:	1c4e      	adds	r6, r1, #1
        ui8PadChar = ' ';
    ca26:	f04f 0820 	mov.w	r8, #32
    if ( *pcStr == '-')
    ca2a:	2b2d      	cmp	r3, #45	; 0x2d
    ca2c:	d07e      	beq.n	cb2c <am_util_stdio_vsprintf+0x144>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    ca32:	2000      	movs	r0, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca34:	2a09      	cmp	r2, #9
    bool bNeg = false;
    ca36:	4607      	mov	r7, r0
    ca38:	4634      	mov	r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca3a:	f200 8081 	bhi.w	cb40 <am_util_stdio_vsprintf+0x158>
    ca3e:	3001      	adds	r0, #1
    ca40:	1b00      	subs	r0, r0, r4
    ca42:	2100      	movs	r1, #0
        ui32Val *= 10;
    ca44:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    ca48:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    ca4c:	eb04 0c00 	add.w	ip, r4, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca50:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ca54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ca58:	2a09      	cmp	r2, #9
        ui32Val += (*pcStr - '0');
    ca5a:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca5e:	d9f1      	bls.n	ca44 <am_util_stdio_vsprintf+0x5c>
    ca60:	f816 300c 	ldrb.w	r3, [r6, ip]
    ca64:	eb06 040c 	add.w	r4, r6, ip
    return bNeg ? -ui32Val : ui32Val;
    ca68:	b107      	cbz	r7, ca6c <am_util_stdio_vsprintf+0x84>
    ca6a:	4249      	negs	r1, r1
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca6c:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ca6e:	460a      	mov	r2, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca70:	f000 8146 	beq.w	cd00 <am_util_stdio_vsprintf+0x318>
    ca74:	ea81 79e1 	eor.w	r9, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ca78:	2b2e      	cmp	r3, #46	; 0x2e
    ca7a:	eba9 79e1 	sub.w	r9, r9, r1, asr #31
    ca7e:	f000 8116 	beq.w	ccae <am_util_stdio_vsprintf+0x2c6>
        iPrecision = 6;             // printf() default precision for %f is 6
    ca82:	2606      	movs	r6, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ca84:	2b6c      	cmp	r3, #108	; 0x6c
    ca86:	d104      	bne.n	ca92 <am_util_stdio_vsprintf+0xaa>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ca88:	7863      	ldrb	r3, [r4, #1]
    ca8a:	2b6c      	cmp	r3, #108	; 0x6c
    ca8c:	f000 8186 	beq.w	cd9c <am_util_stdio_vsprintf+0x3b4>
            pcFmt++;
    ca90:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    ca92:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
    ca96:	2a32      	cmp	r2, #50	; 0x32
    ca98:	d858      	bhi.n	cb4c <am_util_stdio_vsprintf+0x164>
    ca9a:	e8df f012 	tbh	[pc, r2, lsl #1]
    ca9e:	005e      	.short	0x005e
    caa0:	00570057 	.word	0x00570057
    caa4:	00570057 	.word	0x00570057
    caa8:	00570057 	.word	0x00570057
    caac:	00570057 	.word	0x00570057
    cab0:	00570057 	.word	0x00570057
    cab4:	00570057 	.word	0x00570057
    cab8:	00570057 	.word	0x00570057
    cabc:	00570057 	.word	0x00570057
    cac0:	01fe0057 	.word	0x01fe0057
    cac4:	00570057 	.word	0x00570057
    cac8:	00570057 	.word	0x00570057
    cacc:	00570057 	.word	0x00570057
    cad0:	00570057 	.word	0x00570057
    cad4:	00570057 	.word	0x00570057
    cad8:	009700e9 	.word	0x009700e9
    cadc:	005e0057 	.word	0x005e0057
    cae0:	00570057 	.word	0x00570057
    cae4:	00570097 	.word	0x00570097
    cae8:	00570057 	.word	0x00570057
    caec:	00570057 	.word	0x00570057
    caf0:	00570057 	.word	0x00570057
    caf4:	00570057 	.word	0x00570057
    caf8:	00570130 	.word	0x00570130
    cafc:	005700f5 	.word	0x005700f5
    cb00:	03330057 	.word	0x03330057
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cb04:	4aa4      	ldr	r2, [pc, #656]	; (cd98 <am_util_stdio_vsprintf+0x3b0>)
    cb06:	7812      	ldrb	r2, [r2, #0]
    cb08:	2a00      	cmp	r2, #0
    cb0a:	f43f af7c 	beq.w	ca06 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
    cb0e:	230d      	movs	r3, #13
    cb10:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
    cb14:	f10a 0a01 	add.w	sl, sl, #1
    cb18:	780b      	ldrb	r3, [r1, #0]
    cb1a:	e774      	b.n	ca06 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb1c:	469a      	mov	sl, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    cb1e:	b10d      	cbz	r5, cb24 <am_util_stdio_vsprintf+0x13c>
    {
        *pcBuf = 0x0;
    cb20:	2300      	movs	r3, #0
    cb22:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
    cb24:	4650      	mov	r0, sl
    cb26:	b009      	add	sp, #36	; 0x24
    cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pcStr++;
    cb2c:	7873      	ldrb	r3, [r6, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        uCnt++;
    cb32:	2001      	movs	r0, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb34:	2a09      	cmp	r2, #9
        bNeg = true;
    cb36:	4607      	mov	r7, r0
        pcStr++;
    cb38:	eb06 0400 	add.w	r4, r6, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb3c:	f67f af7f 	bls.w	ca3e <am_util_stdio_vsprintf+0x56>
    cb40:	2100      	movs	r1, #0
    cb42:	e791      	b.n	ca68 <am_util_stdio_vsprintf+0x80>
            ui8PadChar = '0';
    cb44:	4698      	mov	r8, r3
            ++pcFmt;
    cb46:	1c8e      	adds	r6, r1, #2
    cb48:	788b      	ldrb	r3, [r1, #2]
    cb4a:	e76e      	b.n	ca2a <am_util_stdio_vsprintf+0x42>
                if ( pcBuf )
    cb4c:	b10d      	cbz	r5, cb52 <am_util_stdio_vsprintf+0x16a>
                    *pcBuf++ = *pcFmt;
    cb4e:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
    cb52:	f10a 0a01 	add.w	sl, sl, #1
        ++pcFmt;
    cb56:	1c61      	adds	r1, r4, #1
    cb58:	e75a      	b.n	ca10 <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
    cb5a:	2d00      	cmp	r5, #0
    cb5c:	d0fb      	beq.n	cb56 <am_util_stdio_vsprintf+0x16e>
                    float fValue = va_arg(pArgs, double);
    cb5e:	f10b 0b07 	add.w	fp, fp, #7
    cb62:	f02b 0b07 	bic.w	fp, fp, #7
    cb66:	e8fb 0102 	ldrd	r0, r1, [fp], #8
    cb6a:	f7ff fc85 	bl	c478 <__aeabi_d2f>
    cb6e:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    cb72:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    cb76:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    cb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    cb7c:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
    cb7e:	f000 833d 	beq.w	d1fc <am_util_stdio_vsprintf+0x814>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb82:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    cb86:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    cb8a:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    cb8c:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb8e:	f3c0 0016 	ubfx	r0, r0, #0, #23
    cb92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    cb96:	f300 8353 	bgt.w	d240 <am_util_stdio_vsprintf+0x858>
    else if (iExp2 < -23)
    cb9a:	f112 0f17 	cmn.w	r2, #23
    cb9e:	f2c0 834b 	blt.w	d238 <am_util_stdio_vsprintf+0x850>
    else if (iExp2 >= 23)
    cba2:	2a16      	cmp	r2, #22
    cba4:	f340 8262 	ble.w	d06c <am_util_stdio_vsprintf+0x684>
        i32IntPart = i32Significand << (iExp2 - 23);
    cba8:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    cbaa:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    cbac:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    cbb0:	f2c0 82bc 	blt.w	d12c <am_util_stdio_vsprintf+0x744>
    cbb4:	462b      	mov	r3, r5
    i32FracPart = 0;
    cbb6:	2700      	movs	r7, #0
    if (i32IntPart == 0)
    cbb8:	2800      	cmp	r0, #0
    cbba:	f000 82b2 	beq.w	d122 <am_util_stdio_vsprintf+0x73a>
            *pcBuf++ = '-';
    cbbe:	4698      	mov	r8, r3
    cbc0:	bfde      	ittt	le
    cbc2:	232d      	movle	r3, #45	; 0x2d
    cbc4:	f808 3b01 	strble.w	r3, [r8], #1
            uint64_to_str(-i32IntPart, pcBuf);
    cbc8:	4240      	negle	r0, r0
    cbca:	e25e      	b.n	d08a <am_util_stdio_vsprintf+0x6a2>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cbcc:	f85b 6b04 	ldr.w	r6, [fp], #4
    cbd0:	17f7      	asrs	r7, r6, #31
                if ( i64Val < 0 )
    cbd2:	2e00      	cmp	r6, #0
    cbd4:	f177 0300 	sbcs.w	r3, r7, #0
    cbd8:	f2c0 8150 	blt.w	ce7c <am_util_stdio_vsprintf+0x494>
                    ui64Val = i64Val;
    cbdc:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    cbe0:	2900      	cmp	r1, #0
    cbe2:	d05a      	beq.n	cc9a <am_util_stdio_vsprintf+0x2b2>
    int iNDigits = ui64Val ? 0 : 1;
    cbe4:	4633      	mov	r3, r6
    cbe6:	4630      	mov	r0, r6
    cbe8:	433b      	orrs	r3, r7
    cbea:	4639      	mov	r1, r7
    cbec:	bf0c      	ite	eq
    cbee:	2601      	moveq	r6, #1
    cbf0:	2600      	movne	r6, #0
    while ( ui64Val )
    cbf2:	ea50 0301 	orrs.w	r3, r0, r1
    cbf6:	f000 8336 	beq.w	d266 <am_util_stdio_vsprintf+0x87e>
                    bNeg = false;
    cbfa:	2300      	movs	r3, #0
    cbfc:	461f      	mov	r7, r3
    cbfe:	e9dd 0100 	ldrd	r0, r1, [sp]
        ui64Val = divu64_10(ui64Val);
    cc02:	f7ff fdf3 	bl	c7ec <divu64_10>
    while ( ui64Val )
    cc06:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cc0a:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cc0e:	d1f8      	bne.n	cc02 <am_util_stdio_vsprintf+0x21a>
                    iWidth -= ndigits_in_i64(ui64Val);
    cc10:	eba9 0906 	sub.w	r9, r9, r6
                    if ( bNeg )
    cc14:	b12f      	cbz	r7, cc22 <am_util_stdio_vsprintf+0x23a>
                        if ( ui8PadChar == '0' )
    cc16:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
                        --iWidth;
    cc1a:	f109 39ff 	add.w	r9, r9, #4294967295
                        if ( ui8PadChar == '0' )
    cc1e:	f000 8314 	beq.w	d24a <am_util_stdio_vsprintf+0x862>
    if ( i32NumChars <= 0 )
    cc22:	f1b9 0f00 	cmp.w	r9, #0
    cc26:	f340 8305 	ble.w	d234 <am_util_stdio_vsprintf+0x84c>
    while ( i32NumChars-- )
    cc2a:	f109 33ff 	add.w	r3, r9, #4294967295
    int32_t i32Cnt = 0;
    cc2e:	2100      	movs	r1, #0
    cc30:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    cc32:	4632      	mov	r2, r6
        if ( pcBuf )
    cc34:	2e00      	cmp	r6, #0
    cc36:	f000 829a 	beq.w	d16e <am_util_stdio_vsprintf+0x786>
            *pcBuf++ = cPadChar;
    cc3a:	f802 8b01 	strb.w	r8, [r2], #1
    cc3e:	4618      	mov	r0, r3
    cc40:	4616      	mov	r6, r2
        i32Cnt++;
    cc42:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cc44:	1e43      	subs	r3, r0, #1
    cc46:	2800      	cmp	r0, #0
    cc48:	d1f3      	bne.n	cc32 <am_util_stdio_vsprintf+0x24a>
    cc4a:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    cc4c:	2d00      	cmp	r5, #0
    cc4e:	f000 82dd 	beq.w	d20c <am_util_stdio_vsprintf+0x824>
    cc52:	440d      	add	r5, r1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cc54:	b11f      	cbz	r7, cc5e <am_util_stdio_vsprintf+0x276>
    cc56:	f1b8 0f20 	cmp.w	r8, #32
    cc5a:	f000 8118 	beq.w	ce8e <am_util_stdio_vsprintf+0x4a6>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc5e:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc62:	462a      	mov	r2, r5
    cc64:	f7ff fe22 	bl	c8ac <uint64_to_str>
                    pcBuf += iVal;
    cc68:	4405      	add	r5, r0
                ui32CharCnt += iVal;
    cc6a:	4482      	add	sl, r0
        ++pcFmt;
    cc6c:	1c61      	adds	r1, r4, #1
    cc6e:	e6cf      	b.n	ca10 <am_util_stdio_vsprintf+0x28>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc70:	f10b 0304 	add.w	r3, fp, #4
                if ( pcBuf )
    cc74:	b11d      	cbz	r5, cc7e <am_util_stdio_vsprintf+0x296>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc76:	f8db 2000 	ldr.w	r2, [fp]
    cc7a:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
    cc7e:	f10a 0a01 	add.w	sl, sl, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc82:	469b      	mov	fp, r3
        ++pcFmt;
    cc84:	1c61      	adds	r1, r4, #1
    cc86:	e6c3      	b.n	ca10 <am_util_stdio_vsprintf+0x28>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc88:	f85b 6b04 	ldr.w	r6, [fp], #4
    cc8c:	2300      	movs	r3, #0
    cc8e:	4632      	mov	r2, r6
    cc90:	e9cd 2300 	strd	r2, r3, [sp]
                if ( iWidth )
    cc94:	2900      	cmp	r1, #0
    cc96:	f040 81b4 	bne.w	d002 <am_util_stdio_vsprintf+0x61a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cc9a:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc9e:	462a      	mov	r2, r5
    cca0:	f7ff fe04 	bl	c8ac <uint64_to_str>
                if ( pcBuf )
    cca4:	2d00      	cmp	r5, #0
    cca6:	d1df      	bne.n	cc68 <am_util_stdio_vsprintf+0x280>
                if ( pcBuf )
    cca8:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
    ccaa:	4482      	add	sl, r0
                break;
    ccac:	e7de      	b.n	cc6c <am_util_stdio_vsprintf+0x284>
    if ( *pcStr == '-')
    ccae:	7862      	ldrb	r2, [r4, #1]
    ccb0:	2a2d      	cmp	r2, #45	; 0x2d
            ++pcFmt;
    ccb2:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    ccb6:	f000 8197 	beq.w	cfe8 <am_util_stdio_vsprintf+0x600>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    ccbe:	2b09      	cmp	r3, #9
    ccc0:	f200 82af 	bhi.w	d222 <am_util_stdio_vsprintf+0x83a>
    uint32_t ui32Val = 0, uCnt = 0;
    ccc4:	2300      	movs	r3, #0
    bool bNeg = false;
    ccc6:	469e      	mov	lr, r3
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccc8:	4664      	mov	r4, ip
    ccca:	3301      	adds	r3, #1
    cccc:	1b1e      	subs	r6, r3, r4
    bool bNeg = false;
    ccce:	2300      	movs	r3, #0
        ui32Val *= 10;
    ccd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    ccd4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ccd8:	19a7      	adds	r7, r4, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccda:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    ccde:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    cce2:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    cce4:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cce8:	d9f2      	bls.n	ccd0 <am_util_stdio_vsprintf+0x2e8>
    return bNeg ? -ui32Val : ui32Val;
    ccea:	f1be 0f00 	cmp.w	lr, #0
    ccee:	d000      	beq.n	ccf2 <am_util_stdio_vsprintf+0x30a>
    ccf0:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ccf2:	461e      	mov	r6, r3
            pcFmt += ui32NumChars;
    ccf4:	eb0c 0407 	add.w	r4, ip, r7
    ccf8:	f81c 3007 	ldrb.w	r3, [ip, r7]
    ccfc:	e6c2      	b.n	ca84 <am_util_stdio_vsprintf+0x9c>
        switch ( *pcFmt )
    ccfe:	464a      	mov	r2, r9
                pcStr = va_arg(pArgs, char *);
    cd00:	f85b 3b04 	ldr.w	r3, [fp], #4
    if ( !pcBuf )
    cd04:	2b00      	cmp	r3, #0
    cd06:	f000 81e0 	beq.w	d0ca <am_util_stdio_vsprintf+0x6e2>
    while ( *pcBuf++ )
    cd0a:	461e      	mov	r6, r3
    cd0c:	f816 1b01 	ldrb.w	r1, [r6], #1
    cd10:	2900      	cmp	r1, #0
    cd12:	f000 8289 	beq.w	d228 <am_util_stdio_vsprintf+0x840>
    uint32_t ui32RetVal = 0;
    cd16:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    cd18:	f816 0b01 	ldrb.w	r0, [r6], #1
        ui32RetVal++;
    cd1c:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    cd1e:	2800      	cmp	r0, #0
    cd20:	d1fa      	bne.n	cd18 <am_util_stdio_vsprintf+0x330>
                if ( iWidth > 0 )
    cd22:	2a00      	cmp	r2, #0
    cd24:	dd02      	ble.n	cd2c <am_util_stdio_vsprintf+0x344>
                    if ( ui32strlen < iWidth )
    cd26:	42ba      	cmp	r2, r7
    cd28:	f200 81ee 	bhi.w	d108 <am_util_stdio_vsprintf+0x720>
    cd2c:	f1c3 0c01 	rsb	ip, r3, #1
                while (*pcStr != 0x0)
    cd30:	46d6      	mov	lr, sl
    cd32:	4628      	mov	r0, r5
    cd34:	eb0c 060a 	add.w	r6, ip, sl
    cd38:	e000      	b.n	cd3c <am_util_stdio_vsprintf+0x354>
                        *pcBuf++ = *pcStr;
    cd3a:	4628      	mov	r0, r5
    cd3c:	eb06 0a03 	add.w	sl, r6, r3
                    if ( pcBuf )
    cd40:	2d00      	cmp	r5, #0
    cd42:	f000 8102 	beq.w	cf4a <am_util_stdio_vsprintf+0x562>
                        *pcBuf++ = *pcStr;
    cd46:	7001      	strb	r1, [r0, #0]
                while (*pcStr != 0x0)
    cd48:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    cd4c:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
    cd4e:	2900      	cmp	r1, #0
    cd50:	d1f3      	bne.n	cd3a <am_util_stdio_vsprintf+0x352>
                if ( iWidth )
    cd52:	2a00      	cmp	r2, #0
    cd54:	f43f aeff 	beq.w	cb56 <am_util_stdio_vsprintf+0x16e>
                    iWidth = -iWidth;
    cd58:	f1c2 0900 	rsb	r9, r2, #0
                    if ( ui32strlen < iWidth )
    cd5c:	45b9      	cmp	r9, r7
    cd5e:	f67f aefa 	bls.w	cb56 <am_util_stdio_vsprintf+0x16e>
                        iWidth -= ui32strlen;
    cd62:	eba9 0307 	sub.w	r3, r9, r7
    if ( i32NumChars <= 0 )
    cd66:	2b00      	cmp	r3, #0
    cd68:	f340 8268 	ble.w	d23c <am_util_stdio_vsprintf+0x854>
    while ( i32NumChars-- )
    cd6c:	3b01      	subs	r3, #1
    cd6e:	462e      	mov	r6, r5
    int32_t i32Cnt = 0;
    cd70:	2100      	movs	r1, #0
            *pcBuf++ = cPadChar;
    cd72:	4632      	mov	r2, r6
        if ( pcBuf )
    cd74:	2e00      	cmp	r6, #0
    cd76:	f000 8130 	beq.w	cfda <am_util_stdio_vsprintf+0x5f2>
            *pcBuf++ = cPadChar;
    cd7a:	f802 8b01 	strb.w	r8, [r2], #1
    cd7e:	4618      	mov	r0, r3
    cd80:	4616      	mov	r6, r2
        i32Cnt++;
    cd82:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cd84:	1e43      	subs	r3, r0, #1
    cd86:	2800      	cmp	r0, #0
    cd88:	d1f3      	bne.n	cd72 <am_util_stdio_vsprintf+0x38a>
    cd8a:	448a      	add	sl, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cd8c:	2d00      	cmp	r5, #0
    cd8e:	f43f aee2 	beq.w	cb56 <am_util_stdio_vsprintf+0x16e>
    cd92:	440d      	add	r5, r1
                        iWidth = 0;
    cd94:	e6df      	b.n	cb56 <am_util_stdio_vsprintf+0x16e>
    cd96:	bf00      	nop
    cd98:	10001064 	.word	0x10001064
        switch ( *pcFmt )
    cd9c:	78a3      	ldrb	r3, [r4, #2]
    cd9e:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
                pcFmt++;
    cda2:	3402      	adds	r4, #2
        switch ( *pcFmt )
    cda4:	2a32      	cmp	r2, #50	; 0x32
    cda6:	f63f aed1 	bhi.w	cb4c <am_util_stdio_vsprintf+0x164>
    cdaa:	a001      	add	r0, pc, #4	; (adr r0, cdb0 <am_util_stdio_vsprintf+0x3c8>)
    cdac:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    cdb0:	0000cb5b 	.word	0x0000cb5b
    cdb4:	0000cb4d 	.word	0x0000cb4d
    cdb8:	0000cb4d 	.word	0x0000cb4d
    cdbc:	0000cb4d 	.word	0x0000cb4d
    cdc0:	0000cb4d 	.word	0x0000cb4d
    cdc4:	0000cb4d 	.word	0x0000cb4d
    cdc8:	0000cb4d 	.word	0x0000cb4d
    cdcc:	0000cb4d 	.word	0x0000cb4d
    cdd0:	0000cb4d 	.word	0x0000cb4d
    cdd4:	0000cb4d 	.word	0x0000cb4d
    cdd8:	0000cb4d 	.word	0x0000cb4d
    cddc:	0000cb4d 	.word	0x0000cb4d
    cde0:	0000cb4d 	.word	0x0000cb4d
    cde4:	0000cb4d 	.word	0x0000cb4d
    cde8:	0000cb4d 	.word	0x0000cb4d
    cdec:	0000cb4d 	.word	0x0000cb4d
    cdf0:	0000cb4d 	.word	0x0000cb4d
    cdf4:	0000cb4d 	.word	0x0000cb4d
    cdf8:	0000d14d 	.word	0x0000d14d
    cdfc:	0000cb4d 	.word	0x0000cb4d
    ce00:	0000cb4d 	.word	0x0000cb4d
    ce04:	0000cb4d 	.word	0x0000cb4d
    ce08:	0000cb4d 	.word	0x0000cb4d
    ce0c:	0000cb4d 	.word	0x0000cb4d
    ce10:	0000cb4d 	.word	0x0000cb4d
    ce14:	0000cb4d 	.word	0x0000cb4d
    ce18:	0000cb4d 	.word	0x0000cb4d
    ce1c:	0000cb4d 	.word	0x0000cb4d
    ce20:	0000cb4d 	.word	0x0000cb4d
    ce24:	0000cc71 	.word	0x0000cc71
    ce28:	0000cec7 	.word	0x0000cec7
    ce2c:	0000cb4d 	.word	0x0000cb4d
    ce30:	0000cb5b 	.word	0x0000cb5b
    ce34:	0000cb4d 	.word	0x0000cb4d
    ce38:	0000cb4d 	.word	0x0000cb4d
    ce3c:	0000cec7 	.word	0x0000cec7
    ce40:	0000cb4d 	.word	0x0000cb4d
    ce44:	0000cb4d 	.word	0x0000cb4d
    ce48:	0000cb4d 	.word	0x0000cb4d
    ce4c:	0000cb4d 	.word	0x0000cb4d
    ce50:	0000cb4d 	.word	0x0000cb4d
    ce54:	0000cb4d 	.word	0x0000cb4d
    ce58:	0000cb4d 	.word	0x0000cb4d
    ce5c:	0000cb4d 	.word	0x0000cb4d
    ce60:	0000cb4d 	.word	0x0000cb4d
    ce64:	0000ccff 	.word	0x0000ccff
    ce68:	0000cb4d 	.word	0x0000cb4d
    ce6c:	0000ced5 	.word	0x0000ced5
    ce70:	0000cb4d 	.word	0x0000cb4d
    ce74:	0000cb4d 	.word	0x0000cb4d
    ce78:	0000d15d 	.word	0x0000d15d
                    ui64Val = -i64Val;          // Get absolute value
    ce7c:	4276      	negs	r6, r6
    ce7e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
    ce82:	e9cd 6700 	strd	r6, r7, [sp]
                if ( iWidth )
    ce86:	2900      	cmp	r1, #0
    ce88:	f040 81bc 	bne.w	d204 <am_util_stdio_vsprintf+0x81c>
                        if ( pcBuf )
    ce8c:	b115      	cbz	r5, ce94 <am_util_stdio_vsprintf+0x4ac>
                            *pcBuf++ = '-';
    ce8e:	232d      	movs	r3, #45	; 0x2d
    ce90:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
    ce94:	f10a 0a01 	add.w	sl, sl, #1
    ce98:	e6ff      	b.n	cc9a <am_util_stdio_vsprintf+0x2b2>
        bLower = bLongLong = false;
    ce9a:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce9c:	f85b 2b04 	ldr.w	r2, [fp], #4
    cea0:	2300      	movs	r3, #0
                if ( iWidth )
    cea2:	2900      	cmp	r1, #0
    cea4:	d15d      	bne.n	cf62 <am_util_stdio_vsprintf+0x57a>
    if ( ui64Val == 0 )
    cea6:	ea52 0103 	orrs.w	r1, r2, r3
    ceaa:	d120      	bne.n	ceee <am_util_stdio_vsprintf+0x506>
    if (pcBuf)
    ceac:	2d00      	cmp	r5, #0
    ceae:	f000 80a6 	beq.w	cffe <am_util_stdio_vsprintf+0x616>
            *pcBuf++ = tbuf[ix];
    ceb2:	462b      	mov	r3, r5
    ceb4:	2230      	movs	r2, #48	; 0x30
    ceb6:	f803 2b01 	strb.w	r2, [r3], #1
    ceba:	2001      	movs	r0, #1
    cebc:	461d      	mov	r5, r3
        *pcBuf = 0;
    cebe:	2200      	movs	r2, #0
    cec0:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    cec2:	4482      	add	sl, r0
                break;
    cec4:	e6d2      	b.n	cc6c <am_util_stdio_vsprintf+0x284>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cec6:	f10b 0b07 	add.w	fp, fp, #7
    ceca:	f02b 0b07 	bic.w	fp, fp, #7
    cece:	e8fb 6702 	ldrd	r6, r7, [fp], #8
    ced2:	e67e      	b.n	cbd2 <am_util_stdio_vsprintf+0x1ea>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ced4:	f10b 0b07 	add.w	fp, fp, #7
    ced8:	f02b 0b07 	bic.w	fp, fp, #7
    cedc:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    cee0:	e9cd 2300 	strd	r2, r3, [sp]
    cee4:	e6d6      	b.n	cc94 <am_util_stdio_vsprintf+0x2ac>
    if ( ui64Val == 0 )
    cee6:	ea52 0103 	orrs.w	r1, r2, r3
    ceea:	f000 8088 	beq.w	cffe <am_util_stdio_vsprintf+0x616>
    ceee:	2f00      	cmp	r7, #0
    cef0:	f10d 0c0c 	add.w	ip, sp, #12
    cef4:	bf14      	ite	ne
    cef6:	f04f 0e27 	movne.w	lr, #39	; 0x27
    cefa:	f04f 0e07 	moveq.w	lr, #7
    cefe:	4667      	mov	r7, ip
    int iNumDig, ix = 0;
    cf00:	2000      	movs	r0, #0
        cCh = ui64Val & 0xf;
    cf02:	f002 010f 	and.w	r1, r2, #15
        if ( cCh > 9 )
    cf06:	2909      	cmp	r1, #9
        ui64Val >>= 4;
    cf08:	ea4f 1612 	mov.w	r6, r2, lsr #4
    cf0c:	ea46 7603 	orr.w	r6, r6, r3, lsl #28
            cCh += bLower ? 0x27 : 0x7;
    cf10:	bf88      	it	hi
    cf12:	4471      	addhi	r1, lr
        ui64Val >>= 4;
    cf14:	ea4f 1813 	mov.w	r8, r3, lsr #4
        tbuf[ix++] = cCh + '0';
    cf18:	3130      	adds	r1, #48	; 0x30
        ui64Val >>= 4;
    cf1a:	4632      	mov	r2, r6
    cf1c:	4643      	mov	r3, r8
        tbuf[ix++] = cCh + '0';
    cf1e:	f807 1b01 	strb.w	r1, [r7], #1
    while ( ui64Val )
    cf22:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    cf26:	f100 0001 	add.w	r0, r0, #1
    while ( ui64Val )
    cf2a:	d1ea      	bne.n	cf02 <am_util_stdio_vsprintf+0x51a>
    if (pcBuf)
    cf2c:	2d00      	cmp	r5, #0
    cf2e:	f43f aebb 	beq.w	cca8 <am_util_stdio_vsprintf+0x2c0>
    cf32:	eb0c 0300 	add.w	r3, ip, r0
    cf36:	1e6a      	subs	r2, r5, #1
            *pcBuf++ = tbuf[ix];
    cf38:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cf3c:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cf40:	4563      	cmp	r3, ip
    cf42:	d1f9      	bne.n	cf38 <am_util_stdio_vsprintf+0x550>
    cf44:	182b      	adds	r3, r5, r0
    cf46:	461d      	mov	r5, r3
    cf48:	e7b9      	b.n	cebe <am_util_stdio_vsprintf+0x4d6>
    cf4a:	eb0c 010e 	add.w	r1, ip, lr
                    ++ui32CharCnt;
    cf4e:	eb01 0a03 	add.w	sl, r1, r3
                while (*pcStr != 0x0)
    cf52:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    cf56:	2800      	cmp	r0, #0
    cf58:	d1f9      	bne.n	cf4e <am_util_stdio_vsprintf+0x566>
                if ( iWidth )
    cf5a:	2a00      	cmp	r2, #0
    cf5c:	f43f adfb 	beq.w	cb56 <am_util_stdio_vsprintf+0x16e>
    cf60:	e6fa      	b.n	cd58 <am_util_stdio_vsprintf+0x370>
    int iDigits = ui64Val ? 0 : 1;
    cf62:	ea52 0103 	orrs.w	r1, r2, r3
    cf66:	bf0c      	ite	eq
    cf68:	2601      	moveq	r6, #1
    cf6a:	2600      	movne	r6, #0
    while ( ui64Val )
    cf6c:	ea52 0103 	orrs.w	r1, r2, r3
    cf70:	d00e      	beq.n	cf90 <am_util_stdio_vsprintf+0x5a8>
    cf72:	4610      	mov	r0, r2
    cf74:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cf76:	ea4f 1c10 	mov.w	ip, r0, lsr #4
    cf7a:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
    cf7e:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cf82:	4660      	mov	r0, ip
    cf84:	4671      	mov	r1, lr
    while ( ui64Val )
    cf86:	ea50 0c01 	orrs.w	ip, r0, r1
        ++iDigits;
    cf8a:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    cf8e:	d1f2      	bne.n	cf76 <am_util_stdio_vsprintf+0x58e>
                    iWidth -= ndigits_in_hex(ui64Val);
    cf90:	eba9 0106 	sub.w	r1, r9, r6
    if ( i32NumChars <= 0 )
    cf94:	2900      	cmp	r1, #0
    cf96:	f340 812f 	ble.w	d1f8 <am_util_stdio_vsprintf+0x810>
    while ( i32NumChars-- )
    cf9a:	3901      	subs	r1, #1
    cf9c:	46ae      	mov	lr, r5
    int32_t i32Cnt = 0;
    cf9e:	46a4      	mov	ip, r4
    cfa0:	2600      	movs	r6, #0
    cfa2:	462c      	mov	r4, r5
    cfa4:	460d      	mov	r5, r1
            *pcBuf++ = cPadChar;
    cfa6:	4620      	mov	r0, r4
        if ( pcBuf )
    cfa8:	b194      	cbz	r4, cfd0 <am_util_stdio_vsprintf+0x5e8>
            *pcBuf++ = cPadChar;
    cfaa:	f800 8b01 	strb.w	r8, [r0], #1
    cfae:	4629      	mov	r1, r5
    cfb0:	4604      	mov	r4, r0
        i32Cnt++;
    cfb2:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cfb4:	1e4d      	subs	r5, r1, #1
    cfb6:	2900      	cmp	r1, #0
    cfb8:	d1f5      	bne.n	cfa6 <am_util_stdio_vsprintf+0x5be>
    cfba:	4664      	mov	r4, ip
    cfbc:	4675      	mov	r5, lr
    cfbe:	44b2      	add	sl, r6
                    pcBuf += pcBuf ? iWidth : 0;
    cfc0:	2d00      	cmp	r5, #0
    cfc2:	d090      	beq.n	cee6 <am_util_stdio_vsprintf+0x4fe>
    if ( ui64Val == 0 )
    cfc4:	ea52 0103 	orrs.w	r1, r2, r3
    cfc8:	4435      	add	r5, r6
    cfca:	f43f af72 	beq.w	ceb2 <am_util_stdio_vsprintf+0x4ca>
    cfce:	e78e      	b.n	ceee <am_util_stdio_vsprintf+0x506>
        i32Cnt++;
    cfd0:	3601      	adds	r6, #1
    while ( i32NumChars-- )
    cfd2:	1e69      	subs	r1, r5, #1
    cfd4:	2d00      	cmp	r5, #0
    cfd6:	d1ec      	bne.n	cfb2 <am_util_stdio_vsprintf+0x5ca>
    cfd8:	e7ef      	b.n	cfba <am_util_stdio_vsprintf+0x5d2>
        i32Cnt++;
    cfda:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    cfdc:	1e58      	subs	r0, r3, #1
    cfde:	2b00      	cmp	r3, #0
    cfe0:	f47f aecf 	bne.w	cd82 <am_util_stdio_vsprintf+0x39a>
    cfe4:	448a      	add	sl, r1
    cfe6:	e6d1      	b.n	cd8c <am_util_stdio_vsprintf+0x3a4>
        pcStr++;
    cfe8:	78a2      	ldrb	r2, [r4, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cfee:	2b09      	cmp	r3, #9
        pcStr++;
    cff0:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cff4:	f200 8126 	bhi.w	d244 <am_util_stdio_vsprintf+0x85c>
        uCnt++;
    cff8:	2301      	movs	r3, #1
        bNeg = true;
    cffa:	469e      	mov	lr, r3
    cffc:	e665      	b.n	ccca <am_util_stdio_vsprintf+0x2e2>
    if ( ui64Val == 0 )
    cffe:	2001      	movs	r0, #1
    d000:	e652      	b.n	cca8 <am_util_stdio_vsprintf+0x2c0>
    int iNDigits = ui64Val ? 0 : 1;
    d002:	e9dd 0100 	ldrd	r0, r1, [sp]
    d006:	4603      	mov	r3, r0
    d008:	430b      	orrs	r3, r1
    d00a:	bf0c      	ite	eq
    d00c:	2601      	moveq	r6, #1
    d00e:	2600      	movne	r6, #0
    while ( ui64Val )
    d010:	ea50 0301 	orrs.w	r3, r0, r1
    d014:	d006      	beq.n	d024 <am_util_stdio_vsprintf+0x63c>
        ui64Val = divu64_10(ui64Val);
    d016:	f7ff fbe9 	bl	c7ec <divu64_10>
    while ( ui64Val )
    d01a:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    d01e:	f106 0601 	add.w	r6, r6, #1
    while ( ui64Val )
    d022:	d1f8      	bne.n	d016 <am_util_stdio_vsprintf+0x62e>
                    iWidth -= ndigits_in_u64(ui64Val);
    d024:	eba9 0306 	sub.w	r3, r9, r6
    if ( i32NumChars <= 0 )
    d028:	2b00      	cmp	r3, #0
    d02a:	f340 8101 	ble.w	d230 <am_util_stdio_vsprintf+0x848>
    while ( i32NumChars-- )
    d02e:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
    d030:	2100      	movs	r1, #0
    d032:	462e      	mov	r6, r5
            *pcBuf++ = cPadChar;
    d034:	4632      	mov	r2, r6
        if ( pcBuf )
    d036:	b19e      	cbz	r6, d060 <am_util_stdio_vsprintf+0x678>
            *pcBuf++ = cPadChar;
    d038:	f802 8b01 	strb.w	r8, [r2], #1
    d03c:	4618      	mov	r0, r3
    d03e:	4616      	mov	r6, r2
        i32Cnt++;
    d040:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d042:	1e43      	subs	r3, r0, #1
    d044:	2800      	cmp	r0, #0
    d046:	d1f5      	bne.n	d034 <am_util_stdio_vsprintf+0x64c>
    d048:	448a      	add	sl, r1
                    pcBuf += pcBuf ? iWidth : 0;
    d04a:	2d00      	cmp	r5, #0
    d04c:	f000 80e3 	beq.w	d216 <am_util_stdio_vsprintf+0x82e>
    d050:	440d      	add	r5, r1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d052:	462a      	mov	r2, r5
    d054:	e9dd 0100 	ldrd	r0, r1, [sp]
    d058:	f7ff fc28 	bl	c8ac <uint64_to_str>
                    pcBuf += iVal;
    d05c:	4405      	add	r5, r0
    d05e:	e604      	b.n	cc6a <am_util_stdio_vsprintf+0x282>
        i32Cnt++;
    d060:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d062:	1e58      	subs	r0, r3, #1
    d064:	2b00      	cmp	r3, #0
    d066:	d1eb      	bne.n	d040 <am_util_stdio_vsprintf+0x658>
    d068:	448a      	add	sl, r1
    d06a:	e7ee      	b.n	d04a <am_util_stdio_vsprintf+0x662>
    else if (iExp2 >= 0)
    d06c:	2a00      	cmp	r2, #0
    d06e:	db4f      	blt.n	d110 <am_util_stdio_vsprintf+0x728>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d070:	f1a1 077e 	sub.w	r7, r1, #126	; 0x7e
    d074:	fa00 f707 	lsl.w	r7, r0, r7
        i32IntPart = i32Significand >> (23 - iExp2);
    d078:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d07c:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d07e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d082:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d086:	db52      	blt.n	d12e <am_util_stdio_vsprintf+0x746>
    d088:	46a8      	mov	r8, r5
            uint64_to_str(-i32IntPart, pcBuf);
    d08a:	4642      	mov	r2, r8
    d08c:	17c1      	asrs	r1, r0, #31
    d08e:	f7ff fc0d 	bl	c8ac <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d092:	f898 3000 	ldrb.w	r3, [r8]
    d096:	b11b      	cbz	r3, d0a0 <am_util_stdio_vsprintf+0x6b8>
    d098:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    d09c:	2b00      	cmp	r3, #0
    d09e:	d1fb      	bne.n	d098 <am_util_stdio_vsprintf+0x6b0>
    *pcBuf++ = '.';
    d0a0:	232e      	movs	r3, #46	; 0x2e
    d0a2:	f888 3000 	strb.w	r3, [r8]
    if (i32FracPart == 0)
    d0a6:	2f00      	cmp	r7, #0
    d0a8:	d168      	bne.n	d17c <am_util_stdio_vsprintf+0x794>
        *pcBuf++ = '0';
    d0aa:	f108 0102 	add.w	r1, r8, #2
    d0ae:	2330      	movs	r3, #48	; 0x30
    d0b0:	1b4a      	subs	r2, r1, r5
    d0b2:	f888 3001 	strb.w	r3, [r8, #1]
    *pcBuf = 0x00;
    d0b6:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    d0b8:	429a      	cmp	r2, r3
    *pcBuf = 0x00;
    d0ba:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    d0bc:	f2c0 8094 	blt.w	d1e8 <am_util_stdio_vsprintf+0x800>
    d0c0:	4613      	mov	r3, r2
                    ui32CharCnt += iVal;
    d0c2:	449a      	add	sl, r3
                    pcBuf += iVal;
    d0c4:	441d      	add	r5, r3
        ++pcFmt;
    d0c6:	1c61      	adds	r1, r4, #1
    d0c8:	e4a2      	b.n	ca10 <am_util_stdio_vsprintf+0x28>
                if ( iWidth > 0 )
    d0ca:	2a00      	cmp	r2, #0
    d0cc:	dd34      	ble.n	d138 <am_util_stdio_vsprintf+0x750>
        return ui32RetVal;
    d0ce:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    d0d0:	f102 39ff 	add.w	r9, r2, #4294967295
    int32_t i32Cnt = 0;
    d0d4:	2100      	movs	r1, #0
    while ( i32NumChars-- )
    d0d6:	462a      	mov	r2, r5
            *pcBuf++ = cPadChar;
    d0d8:	4610      	mov	r0, r2
        if ( pcBuf )
    d0da:	2a00      	cmp	r2, #0
    d0dc:	d040      	beq.n	d160 <am_util_stdio_vsprintf+0x778>
            *pcBuf++ = cPadChar;
    d0de:	f800 8b01 	strb.w	r8, [r0], #1
    d0e2:	464e      	mov	r6, r9
    d0e4:	4602      	mov	r2, r0
        i32Cnt++;
    d0e6:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d0e8:	f106 39ff 	add.w	r9, r6, #4294967295
    d0ec:	2e00      	cmp	r6, #0
    d0ee:	d1f3      	bne.n	d0d8 <am_util_stdio_vsprintf+0x6f0>
    d0f0:	4608      	mov	r0, r1
    d0f2:	448a      	add	sl, r1
    d0f4:	7819      	ldrb	r1, [r3, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    d0f6:	b105      	cbz	r5, d0fa <am_util_stdio_vsprintf+0x712>
    d0f8:	4405      	add	r5, r0
                while (*pcStr != 0x0)
    d0fa:	2900      	cmp	r1, #0
    d0fc:	f43f ad2b 	beq.w	cb56 <am_util_stdio_vsprintf+0x16e>
                        iWidth = 0;
    d100:	2200      	movs	r2, #0
    d102:	e613      	b.n	cd2c <am_util_stdio_vsprintf+0x344>
        bLower = bLongLong = false;
    d104:	2701      	movs	r7, #1
    d106:	e6c9      	b.n	ce9c <am_util_stdio_vsprintf+0x4b4>
    d108:	1bd2      	subs	r2, r2, r7
    if ( i32NumChars <= 0 )
    d10a:	2a00      	cmp	r2, #0
    d10c:	ddf3      	ble.n	d0f6 <am_util_stdio_vsprintf+0x70e>
    d10e:	e7df      	b.n	d0d0 <am_util_stdio_vsprintf+0x6e8>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d110:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d112:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d114:	fa40 f702 	asr.w	r7, r0, r2
        *pcBuf++ = '-';
    d118:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
    d11a:	da02      	bge.n	d122 <am_util_stdio_vsprintf+0x73a>
        *pcBuf++ = '-';
    d11c:	222d      	movs	r2, #45	; 0x2d
    d11e:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
    d122:	4698      	mov	r8, r3
    d124:	2330      	movs	r3, #48	; 0x30
    d126:	f808 3b01 	strb.w	r3, [r8], #1
    d12a:	e7b9      	b.n	d0a0 <am_util_stdio_vsprintf+0x6b8>
    i32FracPart = 0;
    d12c:	2700      	movs	r7, #0
        *pcBuf++ = '-';
    d12e:	462b      	mov	r3, r5
    d130:	222d      	movs	r2, #45	; 0x2d
    d132:	f803 2b01 	strb.w	r2, [r3], #1
    d136:	e53f      	b.n	cbb8 <am_util_stdio_vsprintf+0x1d0>
    d138:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
    d13a:	461f      	mov	r7, r3
    d13c:	2900      	cmp	r1, #0
    d13e:	f47f adf5 	bne.w	cd2c <am_util_stdio_vsprintf+0x344>
    d142:	460f      	mov	r7, r1
                if ( iWidth )
    d144:	2a00      	cmp	r2, #0
    d146:	f43f ad06 	beq.w	cb56 <am_util_stdio_vsprintf+0x16e>
    d14a:	e605      	b.n	cd58 <am_util_stdio_vsprintf+0x370>
        bLower = bLongLong = false;
    d14c:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d14e:	f10b 0b07 	add.w	fp, fp, #7
    d152:	f02b 0b07 	bic.w	fp, fp, #7
    d156:	e8fb 2302 	ldrd	r2, r3, [fp], #8
    d15a:	e6a2      	b.n	cea2 <am_util_stdio_vsprintf+0x4ba>
        switch ( *pcFmt )
    d15c:	2701      	movs	r7, #1
    d15e:	e7f6      	b.n	d14e <am_util_stdio_vsprintf+0x766>
        i32Cnt++;
    d160:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d162:	f109 36ff 	add.w	r6, r9, #4294967295
    d166:	f1b9 0f00 	cmp.w	r9, #0
    d16a:	d1bc      	bne.n	d0e6 <am_util_stdio_vsprintf+0x6fe>
    d16c:	e7c0      	b.n	d0f0 <am_util_stdio_vsprintf+0x708>
        i32Cnt++;
    d16e:	3101      	adds	r1, #1
    while ( i32NumChars-- )
    d170:	1e58      	subs	r0, r3, #1
    d172:	2b00      	cmp	r3, #0
    d174:	f47f ad65 	bne.w	cc42 <am_util_stdio_vsprintf+0x25a>
    d178:	448a      	add	sl, r1
    d17a:	e567      	b.n	cc4c <am_util_stdio_vsprintf+0x264>
    *pcBuf++ = '.';
    d17c:	f108 0101 	add.w	r1, r8, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d180:	1b4a      	subs	r2, r1, r5
    d182:	f1c2 0313 	rsb	r3, r2, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d186:	42b3      	cmp	r3, r6
    d188:	bfa8      	it	ge
    d18a:	4633      	movge	r3, r6
        for (jx = 0; jx < iMax; jx++)
    d18c:	2b00      	cmp	r3, #0
    d18e:	dd10      	ble.n	d1b2 <am_util_stdio_vsprintf+0x7ca>
    d190:	1c5e      	adds	r6, r3, #1
    d192:	4446      	add	r6, r8
    *pcBuf++ = '.';
    d194:	4608      	mov	r0, r1
            i32FracPart *= 10;
    d196:	eb07 0787 	add.w	r7, r7, r7, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d19a:	15fa      	asrs	r2, r7, #23
    d19c:	3230      	adds	r2, #48	; 0x30
    d19e:	f800 2b01 	strb.w	r2, [r0], #1
            i32FracPart *= 10;
    d1a2:	007f      	lsls	r7, r7, #1
        for (jx = 0; jx < iMax; jx++)
    d1a4:	4286      	cmp	r6, r0
            i32FracPart &= 0x00FFFFFF;
    d1a6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d1aa:	d1f4      	bne.n	d196 <am_util_stdio_vsprintf+0x7ae>
    d1ac:	4419      	add	r1, r3
    d1ae:	4498      	add	r8, r3
    d1b0:	1b4a      	subs	r2, r1, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d1b2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    d1b6:	f347 53c7 	sbfx	r3, r7, #23, #8
    d1ba:	2b04      	cmp	r3, #4
    d1bc:	f77f af7b 	ble.w	d0b6 <am_util_stdio_vsprintf+0x6ce>
            while ( pcBuftmp >= pcBufInitial )
    d1c0:	45a8      	cmp	r8, r5
    d1c2:	f4ff af78 	bcc.w	d0b6 <am_util_stdio_vsprintf+0x6ce>
    d1c6:	4643      	mov	r3, r8
                    *pcBuftmp = '0';
    d1c8:	2730      	movs	r7, #48	; 0x30
    d1ca:	e003      	b.n	d1d4 <am_util_stdio_vsprintf+0x7ec>
    d1cc:	705f      	strb	r7, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    d1ce:	429d      	cmp	r5, r3
    d1d0:	f63f af71 	bhi.w	d0b6 <am_util_stdio_vsprintf+0x6ce>
                    *pcBuftmp = '0';
    d1d4:	461e      	mov	r6, r3
                if ( *pcBuftmp == '.' )
    d1d6:	f813 0901 	ldrb.w	r0, [r3], #-1
    d1da:	282e      	cmp	r0, #46	; 0x2e
    d1dc:	d0f7      	beq.n	d1ce <am_util_stdio_vsprintf+0x7e6>
                else if ( *pcBuftmp == '9' )
    d1de:	2839      	cmp	r0, #57	; 0x39
    d1e0:	d0f4      	beq.n	d1cc <am_util_stdio_vsprintf+0x7e4>
                    *pcBuftmp += 1;
    d1e2:	3001      	adds	r0, #1
    d1e4:	7030      	strb	r0, [r6, #0]
                    break;
    d1e6:	e766      	b.n	d0b6 <am_util_stdio_vsprintf+0x6ce>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d1e8:	1c53      	adds	r3, r2, #1
    d1ea:	d025      	beq.n	d238 <am_util_stdio_vsprintf+0x850>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d1ec:	3202      	adds	r2, #2
    d1ee:	d027      	beq.n	d240 <am_util_stdio_vsprintf+0x858>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d1f0:	4b1f      	ldr	r3, [pc, #124]	; (d270 <am_util_stdio_vsprintf+0x888>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d1f2:	602b      	str	r3, [r5, #0]
    d1f4:	2303      	movs	r3, #3
    d1f6:	e764      	b.n	d0c2 <am_util_stdio_vsprintf+0x6da>
    d1f8:	2600      	movs	r6, #0
    d1fa:	e6e1      	b.n	cfc0 <am_util_stdio_vsprintf+0x5d8>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d1fc:	4b1d      	ldr	r3, [pc, #116]	; (d274 <am_util_stdio_vsprintf+0x88c>)
    d1fe:	602b      	str	r3, [r5, #0]
    d200:	2303      	movs	r3, #3
    d202:	e75e      	b.n	d0c2 <am_util_stdio_vsprintf+0x6da>
                    bNeg = true;
    d204:	2301      	movs	r3, #1
    d206:	461f      	mov	r7, r3
    int iNDigits = ui64Val ? 0 : 1;
    d208:	2600      	movs	r6, #0
    d20a:	e4f8      	b.n	cbfe <am_util_stdio_vsprintf+0x216>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d20c:	b327      	cbz	r7, d258 <am_util_stdio_vsprintf+0x870>
    d20e:	f1b8 0f20 	cmp.w	r8, #32
    d212:	f43f ae3f 	beq.w	ce94 <am_util_stdio_vsprintf+0x4ac>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d216:	e9dd 0100 	ldrd	r0, r1, [sp]
    d21a:	462a      	mov	r2, r5
    d21c:	f7ff fb46 	bl	c8ac <uint64_to_str>
                if ( pcBuf )
    d220:	e542      	b.n	cca8 <am_util_stdio_vsprintf+0x2c0>
    uint32_t ui32Val = 0, uCnt = 0;
    d222:	2700      	movs	r7, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d224:	463b      	mov	r3, r7
    d226:	e564      	b.n	ccf2 <am_util_stdio_vsprintf+0x30a>
                if ( iWidth > 0 )
    d228:	2a00      	cmp	r2, #0
    d22a:	dd8a      	ble.n	d142 <am_util_stdio_vsprintf+0x75a>
    uint32_t ui32RetVal = 0;
    d22c:	460f      	mov	r7, r1
    d22e:	e74f      	b.n	d0d0 <am_util_stdio_vsprintf+0x6e8>
    d230:	2100      	movs	r1, #0
    d232:	e70a      	b.n	d04a <am_util_stdio_vsprintf+0x662>
    d234:	2100      	movs	r1, #0
    d236:	e509      	b.n	cc4c <am_util_stdio_vsprintf+0x264>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d238:	4b0e      	ldr	r3, [pc, #56]	; (d274 <am_util_stdio_vsprintf+0x88c>)
    d23a:	e7da      	b.n	d1f2 <am_util_stdio_vsprintf+0x80a>
    d23c:	2100      	movs	r1, #0
    d23e:	e5a5      	b.n	cd8c <am_util_stdio_vsprintf+0x3a4>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d240:	4b0d      	ldr	r3, [pc, #52]	; (d278 <am_util_stdio_vsprintf+0x890>)
    d242:	e7d6      	b.n	d1f2 <am_util_stdio_vsprintf+0x80a>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d244:	2300      	movs	r3, #0
        uCnt++;
    d246:	2701      	movs	r7, #1
    d248:	e552      	b.n	ccf0 <am_util_stdio_vsprintf+0x308>
                            if ( pcBuf )
    d24a:	b115      	cbz	r5, d252 <am_util_stdio_vsprintf+0x86a>
                                *pcBuf++ = '-';
    d24c:	232d      	movs	r3, #45	; 0x2d
    d24e:	f805 3b01 	strb.w	r3, [r5], #1
                            ++ui32CharCnt;
    d252:	f10a 0a01 	add.w	sl, sl, #1
    d256:	e4e4      	b.n	cc22 <am_util_stdio_vsprintf+0x23a>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d258:	e9dd 0100 	ldrd	r0, r1, [sp]
    d25c:	462a      	mov	r2, r5
    d25e:	f7ff fb25 	bl	c8ac <uint64_to_str>
                ui32CharCnt += iVal;
    d262:	4482      	add	sl, r0
                break;
    d264:	e502      	b.n	cc6c <am_util_stdio_vsprintf+0x284>
                    bNeg = false;
    d266:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    d268:	eba9 0906 	sub.w	r9, r9, r6
                    bNeg = false;
    d26c:	461f      	mov	r7, r3
    d26e:	e4d8      	b.n	cc22 <am_util_stdio_vsprintf+0x23a>
    d270:	003f2e3f 	.word	0x003f2e3f
    d274:	00302e30 	.word	0x00302e30
    d278:	00232e23 	.word	0x00232e23

0000d27c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d27c:	b40f      	push	{r0, r1, r2, r3}
    d27e:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d280:	4d09      	ldr	r5, [pc, #36]	; (d2a8 <am_util_stdio_printf+0x2c>)
    d282:	682c      	ldr	r4, [r5, #0]
{
    d284:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d286:	b14c      	cbz	r4, d29c <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d288:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d28a:	9906      	ldr	r1, [sp, #24]
    d28c:	4807      	ldr	r0, [pc, #28]	; (d2ac <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
    d28e:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d290:	f7ff fbaa 	bl	c9e8 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d294:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d296:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d298:	4804      	ldr	r0, [pc, #16]	; (d2ac <am_util_stdio_printf+0x30>)
    d29a:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d29c:	4620      	mov	r0, r4
    d29e:	b003      	add	sp, #12
    d2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d2a4:	b004      	add	sp, #16
    d2a6:	4770      	bx	lr
    d2a8:	10001310 	.word	0x10001310
    d2ac:	10001068 	.word	0x10001068

0000d2b0 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d2b0:	4801      	ldr	r0, [pc, #4]	; (d2b8 <am_util_stdio_terminal_clear+0x8>)
    d2b2:	f7ff bfe3 	b.w	d27c <am_util_stdio_printf>
    d2b6:	bf00      	nop
    d2b8:	00010304 	.word	0x00010304

0000d2bc <NMI_Handler>:
#endif // AM_CMSIS_REGS
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2bc:	e7fe      	b.n	d2bc <NMI_Handler>
    d2be:	bf00      	nop

0000d2c0 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2c0:	e7fe      	b.n	d2c0 <DebugMon_Handler>
    d2c2:	bf00      	nop

0000d2c4 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d2c4:	4811      	ldr	r0, [pc, #68]	; (d30c <zero_loop+0x12>)
    d2c6:	4912      	ldr	r1, [pc, #72]	; (d310 <zero_loop+0x16>)
    d2c8:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d2ca:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d2ce:	4811      	ldr	r0, [pc, #68]	; (d314 <zero_loop+0x1a>)
    d2d0:	6801      	ldr	r1, [r0, #0]
    d2d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d2d6:	6001      	str	r1, [r0, #0]
    d2d8:	f3bf 8f4f 	dsb	sy
    d2dc:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d2e0:	480d      	ldr	r0, [pc, #52]	; (d318 <zero_loop+0x1e>)
    d2e2:	490e      	ldr	r1, [pc, #56]	; (d31c <zero_loop+0x22>)
    d2e4:	4a0e      	ldr	r2, [pc, #56]	; (d320 <zero_loop+0x26>)

0000d2e6 <copy_loop>:
    d2e6:	f850 3b04 	ldr.w	r3, [r0], #4
    d2ea:	f841 3b04 	str.w	r3, [r1], #4
    d2ee:	4291      	cmp	r1, r2
    d2f0:	dbf9      	blt.n	d2e6 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d2f2:	480c      	ldr	r0, [pc, #48]	; (d324 <zero_loop+0x2a>)
    d2f4:	490c      	ldr	r1, [pc, #48]	; (d328 <zero_loop+0x2e>)
    d2f6:	f04f 0200 	mov.w	r2, #0

0000d2fa <zero_loop>:
    d2fa:	4288      	cmp	r0, r1
    d2fc:	bfb8      	it	lt
    d2fe:	f840 2b04 	strlt.w	r2, [r0], #4
    d302:	dbfa      	blt.n	d2fa <zero_loop>
    main();
    d304:	f7ff f908 	bl	c518 <main>
    __asm("    bkpt     ");
    d308:	be00      	bkpt	0x0000
}
    d30a:	0000      	.short	0x0000
    d30c:	e000ed08 	.word	0xe000ed08
    d310:	0000c000 	.word	0x0000c000
    d314:	e000ed88 	.word	0xe000ed88
    d318:	00010980 	.word	0x00010980
    d31c:	10001000 	.word	0x10001000
    d320:	10001064 	.word	0x10001064
    d324:	10001064 	.word	0x10001064
    d328:	10004bd8 	.word	0x10004bd8

0000d32c <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d32c:	b530      	push	{r4, r5, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d32e:	2001      	movs	r0, #1
{
    d330:	b085      	sub	sp, #20
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d332:	f001 f907 	bl	e544 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d336:	4925      	ldr	r1, [pc, #148]	; (d3cc <am_ctimer_isr+0xa0>)
    d338:	2000      	movs	r0, #0
    d33a:	f000 fbd3 	bl	dae4 <am_hal_adc_initialize>
    d33e:	bb68      	cbnz	r0, d39c <am_ctimer_isr+0x70>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d340:	4c22      	ldr	r4, [pc, #136]	; (d3cc <am_ctimer_isr+0xa0>)
    d342:	2200      	movs	r2, #0
    d344:	6820      	ldr	r0, [r4, #0]
    d346:	4611      	mov	r1, r2
    d348:	f000 fd96 	bl	de78 <am_hal_adc_power_control>
    d34c:	2800      	cmp	r0, #0
    d34e:	d139      	bne.n	d3c4 <am_ctimer_isr+0x98>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d350:	4b1f      	ldr	r3, [pc, #124]	; (d3d0 <am_ctimer_isr+0xa4>)
    d352:	9302      	str	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d354:	2200      	movs	r2, #0
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d356:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d358:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d35a:	f8ad 200c 	strh.w	r2, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d35e:	a902      	add	r1, sp, #8
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d360:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d364:	f000 fc2e 	bl	dbc4 <am_hal_adc_configure>
    d368:	bb40      	cbnz	r0, d3bc <am_ctimer_isr+0x90>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d36a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d36e:	2301      	movs	r3, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d370:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d372:	9500      	str	r5, [sp, #0]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d374:	466a      	mov	r2, sp
    d376:	2100      	movs	r1, #0
    ADCSlotConfig.bEnabled        = true;
    d378:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d37c:	f000 fc5a 	bl	dc34 <am_hal_adc_configure_slot>
    d380:	b9c0      	cbnz	r0, d3b4 <am_ctimer_isr+0x88>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d382:	6820      	ldr	r0, [r4, #0]
    d384:	2101      	movs	r1, #1
    d386:	f000 fcc3 	bl	dd10 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d38a:	6820      	ldr	r0, [r4, #0]
    d38c:	f000 fc88 	bl	dca0 <am_hal_adc_enable>
    d390:	b940      	cbnz	r0, d3a4 <am_ctimer_isr+0x78>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d392:	6820      	ldr	r0, [r4, #0]
    d394:	f000 fd5e 	bl	de54 <am_hal_adc_sw_trigger>
}
    d398:	b005      	add	sp, #20
    d39a:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d39c:	480d      	ldr	r0, [pc, #52]	; (d3d4 <am_ctimer_isr+0xa8>)
    d39e:	f7ff ff6d 	bl	d27c <am_util_stdio_printf>
    d3a2:	e7cd      	b.n	d340 <am_ctimer_isr+0x14>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d3a4:	480c      	ldr	r0, [pc, #48]	; (d3d8 <am_ctimer_isr+0xac>)
    d3a6:	f7ff ff69 	bl	d27c <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d3aa:	6820      	ldr	r0, [r4, #0]
    d3ac:	f000 fd52 	bl	de54 <am_hal_adc_sw_trigger>
}
    d3b0:	b005      	add	sp, #20
    d3b2:	bd30      	pop	{r4, r5, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d3b4:	4809      	ldr	r0, [pc, #36]	; (d3dc <am_ctimer_isr+0xb0>)
    d3b6:	f7ff ff61 	bl	d27c <am_util_stdio_printf>
    d3ba:	e7e2      	b.n	d382 <am_ctimer_isr+0x56>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d3bc:	4808      	ldr	r0, [pc, #32]	; (d3e0 <am_ctimer_isr+0xb4>)
    d3be:	f7ff ff5d 	bl	d27c <am_util_stdio_printf>
    d3c2:	e7d2      	b.n	d36a <am_ctimer_isr+0x3e>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d3c4:	4807      	ldr	r0, [pc, #28]	; (d3e4 <am_ctimer_isr+0xb8>)
    d3c6:	f7ff ff59 	bl	d27c <am_util_stdio_printf>
    d3ca:	e7c1      	b.n	d350 <am_ctimer_isr+0x24>
    d3cc:	1000116c 	.word	0x1000116c
    d3d0:	00070001 	.word	0x00070001
    d3d4:	00010318 	.word	0x00010318
    d3d8:	000103b8 	.word	0x000103b8
    d3dc:	00010390 	.word	0x00010390
    d3e0:	0001036c 	.word	0x0001036c
    d3e4:	0001034c 	.word	0x0001034c

0000d3e8 <am_adc_isr>:
{
    d3e8:	b510      	push	{r4, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d3ea:	4c2a      	ldr	r4, [pc, #168]	; (d494 <am_adc_isr+0xac>)
{
    d3ec:	b086      	sub	sp, #24
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d3ee:	6820      	ldr	r0, [r4, #0]
    d3f0:	2200      	movs	r2, #0
    d3f2:	a902      	add	r1, sp, #8
    d3f4:	f000 fca2 	bl	dd3c <am_hal_adc_interrupt_status>
    d3f8:	b9e8      	cbnz	r0, d436 <am_adc_isr+0x4e>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d3fa:	9902      	ldr	r1, [sp, #8]
    d3fc:	6820      	ldr	r0, [r4, #0]
    d3fe:	f000 fcbb 	bl	dd78 <am_hal_adc_interrupt_clear>
    d402:	bb08      	cbnz	r0, d448 <am_adc_isr+0x60>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d404:	9b02      	ldr	r3, [sp, #8]
    d406:	07db      	lsls	r3, r3, #31
    d408:	d424      	bmi.n	d454 <am_adc_isr+0x6c>
    audioSample = Sample.ui32Sample;
    d40a:	4b23      	ldr	r3, [pc, #140]	; (d498 <am_adc_isr+0xb0>)
    d40c:	9a04      	ldr	r2, [sp, #16]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d40e:	6820      	ldr	r0, [r4, #0]
    audioSample = Sample.ui32Sample;
    d410:	601a      	str	r2, [r3, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d412:	f000 fc65 	bl	dce0 <am_hal_adc_disable>
    d416:	2800      	cmp	r0, #0
    d418:	d137      	bne.n	d48a <am_adc_isr+0xa2>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d41a:	200a      	movs	r0, #10
    d41c:	f002 f8d4 	bl	f5c8 <am_hal_pwrctrl_periph_disable>
    d420:	2800      	cmp	r0, #0
    d422:	d12e      	bne.n	d482 <am_adc_isr+0x9a>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d424:	6820      	ldr	r0, [r4, #0]
    d426:	f000 fbad 	bl	db84 <am_hal_adc_deinitialize>
    d42a:	bb10      	cbnz	r0, d472 <am_adc_isr+0x8a>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d42c:	6820      	ldr	r0, [r4, #0]
    d42e:	f000 fd11 	bl	de54 <am_hal_adc_sw_trigger>
}
    d432:	b006      	add	sp, #24
    d434:	bd10      	pop	{r4, pc}
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d436:	4819      	ldr	r0, [pc, #100]	; (d49c <am_adc_isr+0xb4>)
    d438:	f7ff ff20 	bl	d27c <am_util_stdio_printf>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d43c:	9902      	ldr	r1, [sp, #8]
    d43e:	6820      	ldr	r0, [r4, #0]
    d440:	f000 fc9a 	bl	dd78 <am_hal_adc_interrupt_clear>
    d444:	2800      	cmp	r0, #0
    d446:	d0dd      	beq.n	d404 <am_adc_isr+0x1c>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d448:	4815      	ldr	r0, [pc, #84]	; (d4a0 <am_adc_isr+0xb8>)
    d44a:	f7ff ff17 	bl	d27c <am_util_stdio_printf>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d44e:	9b02      	ldr	r3, [sp, #8]
    d450:	07db      	lsls	r3, r3, #31
    d452:	d5da      	bpl.n	d40a <am_adc_isr+0x22>
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d454:	ab04      	add	r3, sp, #16
        uint32_t    ui32NumSamples = 1;
    d456:	2101      	movs	r1, #1
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d458:	9300      	str	r3, [sp, #0]
    d45a:	6820      	ldr	r0, [r4, #0]
        uint32_t    ui32NumSamples = 1;
    d45c:	9103      	str	r1, [sp, #12]
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d45e:	ab03      	add	r3, sp, #12
    d460:	2200      	movs	r2, #0
    d462:	f000 fc9b 	bl	dd9c <am_hal_adc_samples_read>
    d466:	2800      	cmp	r0, #0
    d468:	d0cf      	beq.n	d40a <am_adc_isr+0x22>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d46a:	480e      	ldr	r0, [pc, #56]	; (d4a4 <am_adc_isr+0xbc>)
    d46c:	f7ff ff06 	bl	d27c <am_util_stdio_printf>
    d470:	e7cb      	b.n	d40a <am_adc_isr+0x22>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d472:	480d      	ldr	r0, [pc, #52]	; (d4a8 <am_adc_isr+0xc0>)
    d474:	f7ff ff02 	bl	d27c <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d478:	6820      	ldr	r0, [r4, #0]
    d47a:	f000 fceb 	bl	de54 <am_hal_adc_sw_trigger>
}
    d47e:	b006      	add	sp, #24
    d480:	bd10      	pop	{r4, pc}
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d482:	480a      	ldr	r0, [pc, #40]	; (d4ac <am_adc_isr+0xc4>)
    d484:	f7ff fefa 	bl	d27c <am_util_stdio_printf>
    d488:	e7cc      	b.n	d424 <am_adc_isr+0x3c>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d48a:	4809      	ldr	r0, [pc, #36]	; (d4b0 <am_adc_isr+0xc8>)
    d48c:	f7ff fef6 	bl	d27c <am_util_stdio_printf>
    d490:	e7c3      	b.n	d41a <am_adc_isr+0x32>
    d492:	bf00      	nop
    d494:	1000116c 	.word	0x1000116c
    d498:	10001168 	.word	0x10001168
    d49c:	000103d8 	.word	0x000103d8
    d4a0:	000103fc 	.word	0x000103fc
    d4a4:	00010424 	.word	0x00010424
    d4a8:	000104a0 	.word	0x000104a0
    d4ac:	00010470 	.word	0x00010470
    d4b0:	00010450 	.word	0x00010450

0000d4b4 <initADC>:
{
    d4b4:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d4b6:	4b0e      	ldr	r3, [pc, #56]	; (d4f0 <initADC+0x3c>)
    d4b8:	200b      	movs	r0, #11
    d4ba:	6819      	ldr	r1, [r3, #0]
    d4bc:	f001 f8a6 	bl	e60c <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d4c0:	f44f 7215 	mov.w	r2, #596	; 0x254
    d4c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4c8:	2000      	movs	r0, #0
    d4ca:	f000 ff67 	bl	e39c <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d4ce:	2001      	movs	r0, #1
    d4d0:	f001 f824 	bl	e51c <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d4d4:	2300      	movs	r3, #0
    d4d6:	4618      	mov	r0, r3
    d4d8:	2201      	movs	r2, #1
    d4da:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4de:	f000 ffc7 	bl	e470 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d4e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4e6:	2000      	movs	r0, #0
    d4e8:	f000 ff98 	bl	e41c <am_hal_ctimer_start>
}
    d4ec:	2000      	movs	r0, #0
    d4ee:	bd08      	pop	{r3, pc}
    d4f0:	000104cc 	.word	0x000104cc

0000d4f4 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4f4:	4b04      	ldr	r3, [pc, #16]	; (d508 <enableAdcInterrupts+0x14>)
    d4f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d4fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d4fe:	6019      	str	r1, [r3, #0]
    d500:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d502:	f001 ba35 	b.w	e970 <am_hal_interrupt_master_enable>
    d506:	bf00      	nop
    d508:	e000e100 	.word	0xe000e100

0000d50c <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d50c:	2b80      	cmp	r3, #128	; 0x80
    d50e:	d840      	bhi.n	d592 <platform_read+0x86>
{
    d510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d514:	4690      	mov	r8, r2
    d516:	b08a      	sub	sp, #40	; 0x28
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d518:	2a00      	cmp	r2, #0
    d51a:	d044      	beq.n	d5a6 <platform_read+0x9a>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d51c:	4d28      	ldr	r5, [pc, #160]	; (d5c0 <platform_read+0xb4>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d51e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d5d0 <platform_read+0xc4>
    d522:	460e      	mov	r6, r1
    d524:	461f      	mov	r7, r3
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d528:	466c      	mov	r4, sp
    d52a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d530:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d534:	2300      	movs	r3, #0
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d536:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d53a:	f04f 0a01 	mov.w	sl, #1
    iomTransfer.ui32PauseCondition = 0;     // ?
    d53e:	2400      	movs	r4, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d540:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d544:	f8cd a004 	str.w	sl, [sp, #4]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d548:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d54c:	4669      	mov	r1, sp
    iomTransfer.ui32PauseCondition = 0;     // ?
    d54e:	2500      	movs	r5, #0
    d550:	e9cd 4508 	strd	r4, r5, [sp, #32]
    iomTransfer.pui32RxBuffer = NULL;
    d554:	e9cd 3305 	strd	r3, r3, [sp, #20]
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d558:	9602      	str	r6, [sp, #8]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d55a:	f8ad a01c 	strh.w	sl, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d55e:	f88d a01e 	strb.w	sl, [sp, #30]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d562:	9303      	str	r3, [sp, #12]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d564:	f88d 3010 	strb.w	r3, [sp, #16]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d568:	f001 fd5c 	bl	f024 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d56c:	4604      	mov	r4, r0
    d56e:	b990      	cbnz	r0, d596 <platform_read+0x8a>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d570:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d574:	f88d 401c 	strb.w	r4, [sp, #28]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d578:	4669      	mov	r1, sp
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d57a:	f88d a010 	strb.w	sl, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d57e:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d582:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d584:	f001 fd4e 	bl	f024 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d588:	4604      	mov	r4, r0
    d58a:	b998      	cbnz	r0, d5b4 <platform_read+0xa8>
        am_util_stdio_printf("Receive err: %d\n", retVal32);
        return retVal32;
    }
    
    return 0;
}
    d58c:	b00a      	add	sp, #40	; 0x28
    d58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d592:	2001      	movs	r0, #1
}
    d594:	4770      	bx	lr
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d596:	4601      	mov	r1, r0
    d598:	480a      	ldr	r0, [pc, #40]	; (d5c4 <platform_read+0xb8>)
    d59a:	f7ff fe6f 	bl	d27c <am_util_stdio_printf>
        return retVal32;
    d59e:	4620      	mov	r0, r4
}
    d5a0:	b00a      	add	sp, #40	; 0x28
    d5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d5a6:	4808      	ldr	r0, [pc, #32]	; (d5c8 <platform_read+0xbc>)
    d5a8:	f7ff fe68 	bl	d27c <am_util_stdio_printf>
    d5ac:	2001      	movs	r0, #1
}
    d5ae:	b00a      	add	sp, #40	; 0x28
    d5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d5b4:	4601      	mov	r1, r0
    d5b6:	4805      	ldr	r0, [pc, #20]	; (d5cc <platform_read+0xc0>)
    d5b8:	f7ff fe60 	bl	d27c <am_util_stdio_printf>
        return retVal32;
    d5bc:	4620      	mov	r0, r4
    d5be:	e7e5      	b.n	d58c <platform_read+0x80>
    d5c0:	10001000 	.word	0x10001000
    d5c4:	000104e8 	.word	0x000104e8
    d5c8:	000104d0 	.word	0x000104d0
    d5cc:	000104f8 	.word	0x000104f8
    d5d0:	10001520 	.word	0x10001520

0000d5d4 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d5d4:	2b80      	cmp	r3, #128	; 0x80
    d5d6:	d83e      	bhi.n	d656 <platform_write+0x82>
{
    d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5da:	4e26      	ldr	r6, [pc, #152]	; (d674 <platform_write+0xa0>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d5dc:	4f26      	ldr	r7, [pc, #152]	; (d678 <platform_write+0xa4>)
    d5de:	468e      	mov	lr, r1
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5e0:	469c      	mov	ip, r3
    d5e2:	4614      	mov	r4, r2
    d5e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    d5e6:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5e8:	466d      	mov	r5, sp
    d5ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d5ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d5ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d5f0:	e896 0003 	ldmia.w	r6, {r0, r1}
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d5f4:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
    iomTransfer.pui32RxBuffer = i2cRX;
    d5f8:	f8df e08c 	ldr.w	lr, [pc, #140]	; d688 <platform_write+0xb4>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d5fc:	e885 0003 	stmia.w	r5, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d600:	2601      	movs	r6, #1
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d602:	2200      	movs	r2, #0
    iomTransfer.ui32PauseCondition = 0;     // ?
    d604:	2000      	movs	r0, #0
    d606:	2100      	movs	r1, #0
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d608:	e9cd 3c02 	strd	r3, ip, [sp, #8]
    iomTransfer.pui32RxBuffer = i2cRX;
    d60c:	e9cd 7e05 	strd	r7, lr, [sp, #20]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d610:	e9cd 0108 	strd	r0, r1, [sp, #32]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d614:	9601      	str	r6, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d616:	f88d 601e 	strb.w	r6, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d61a:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d61e:	f8ad 201c 	strh.w	r2, [sp, #28]
    if(bufp == NULL){
    d622:	b30c      	cbz	r4, d668 <platform_write+0x94>
    while(len--){
    d624:	f10c 31ff 	add.w	r1, ip, #4294967295
    d628:	b289      	uxth	r1, r1
    d62a:	f1bc 0f00 	cmp.w	ip, #0
    d62e:	d009      	beq.n	d644 <platform_write+0x70>
    d630:	1c4b      	adds	r3, r1, #1
    d632:	18e2      	adds	r2, r4, r3
    d634:	eb07 0383 	add.w	r3, r7, r3, lsl #2
        *(i2cTX + len) = *(bufp + len);
    d638:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    d63c:	f843 1d04 	str.w	r1, [r3, #-4]!
    while(len--){
    d640:	42bb      	cmp	r3, r7
    d642:	d1f9      	bne.n	d638 <platform_write+0x64>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d644:	4b0d      	ldr	r3, [pc, #52]	; (d67c <platform_write+0xa8>)
    d646:	4669      	mov	r1, sp
    d648:	6818      	ldr	r0, [r3, #0]
    d64a:	f001 fceb 	bl	f024 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d64e:	4606      	mov	r6, r0
    d650:	b918      	cbnz	r0, d65a <platform_write+0x86>
}
    d652:	b00b      	add	sp, #44	; 0x2c
    d654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d656:	2001      	movs	r0, #1
}
    d658:	4770      	bx	lr
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d65a:	4601      	mov	r1, r0
    d65c:	4808      	ldr	r0, [pc, #32]	; (d680 <platform_write+0xac>)
    d65e:	f7ff fe0d 	bl	d27c <am_util_stdio_printf>
        return retVal32;
    d662:	4630      	mov	r0, r6
}
    d664:	b00b      	add	sp, #44	; 0x2c
    d666:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("No TX buffer provided\n");
    d668:	4806      	ldr	r0, [pc, #24]	; (d684 <platform_write+0xb0>)
    d66a:	f7ff fe07 	bl	d27c <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d66e:	4630      	mov	r0, r6
    d670:	e7ef      	b.n	d652 <platform_write+0x7e>
    d672:	bf00      	nop
    d674:	10001000 	.word	0x10001000
    d678:	10001320 	.word	0x10001320
    d67c:	10001520 	.word	0x10001520
    d680:	00010524 	.word	0x00010524
    d684:	0001050c 	.word	0x0001050c
    d688:	10001524 	.word	0x10001524

0000d68c <initAccelerometer>:
{
    d68c:	b530      	push	{r4, r5, lr}
    dev_ctx.write_reg = platform_write;
    d68e:	4a2c      	ldr	r2, [pc, #176]	; (d740 <initAccelerometer+0xb4>)
    d690:	4b2c      	ldr	r3, [pc, #176]	; (d744 <initAccelerometer+0xb8>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d692:	4c2d      	ldr	r4, [pc, #180]	; (d748 <initAccelerometer+0xbc>)
    dev_ctx.write_reg = platform_write;
    d694:	6013      	str	r3, [r2, #0]
{
    d696:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d698:	2300      	movs	r3, #0
    d69a:	2001      	movs	r0, #1
    d69c:	9301      	str	r3, [sp, #4]
    d69e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    dev_ctx.read_reg = platform_read;
    d6a2:	4d2a      	ldr	r5, [pc, #168]	; (d74c <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d6a4:	9305      	str	r3, [sp, #20]
    d6a6:	f88d 0004 	strb.w	r0, [sp, #4]
    d6aa:	4b29      	ldr	r3, [pc, #164]	; (d750 <initAccelerometer+0xc4>)
    dev_ctx.read_reg = platform_read;
    d6ac:	6055      	str	r5, [r2, #4]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d6ae:	4621      	mov	r1, r4
    d6b0:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d6b2:	9302      	str	r3, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d6b4:	f001 f9e0 	bl	ea78 <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d6b8:	b140      	cbz	r0, d6cc <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d6ba:	4c26      	ldr	r4, [pc, #152]	; (d754 <initAccelerometer+0xc8>)
    d6bc:	4820      	ldr	r0, [pc, #128]	; (d740 <initAccelerometer+0xb4>)
    d6be:	4621      	mov	r1, r4
    d6c0:	f000 f94c 	bl	d95c <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d6c4:	7821      	ldrb	r1, [r4, #0]
    d6c6:	2933      	cmp	r1, #51	; 0x33
    d6c8:	d01b      	beq.n	d702 <initAccelerometer+0x76>
        while(1)
    d6ca:	e7fe      	b.n	d6ca <initAccelerometer+0x3e>

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d6cc:	4602      	mov	r2, r0
    d6ce:	4601      	mov	r1, r0
    d6d0:	6820      	ldr	r0, [r4, #0]
    d6d2:	f001 fa69 	bl	eba8 <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d6d6:	2800      	cmp	r0, #0
    d6d8:	d1ef      	bne.n	d6ba <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d6da:	6820      	ldr	r0, [r4, #0]
    d6dc:	a901      	add	r1, sp, #4
    d6de:	f001 fb73 	bl	edc8 <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d6e2:	2800      	cmp	r0, #0
    d6e4:	d1e9      	bne.n	d6ba <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d6e6:	4b1c      	ldr	r3, [pc, #112]	; (d758 <initAccelerometer+0xcc>)
    d6e8:	202b      	movs	r0, #43	; 0x2b
    d6ea:	6819      	ldr	r1, [r3, #0]
    d6ec:	f000 ff8e 	bl	e60c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d6f0:	4b1a      	ldr	r3, [pc, #104]	; (d75c <initAccelerometer+0xd0>)
    d6f2:	202a      	movs	r0, #42	; 0x2a
    d6f4:	6819      	ldr	r1, [r3, #0]
    d6f6:	f000 ff89 	bl	e60c <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d6fa:	6820      	ldr	r0, [r4, #0]
    d6fc:	f001 f9e4 	bl	eac8 <am_hal_iom_enable>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -4;
    d700:	e7db      	b.n	d6ba <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d702:	4817      	ldr	r0, [pc, #92]	; (d760 <initAccelerometer+0xd4>)
    d704:	f7ff fdba 	bl	d27c <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d708:	2101      	movs	r1, #1
    d70a:	480d      	ldr	r0, [pc, #52]	; (d740 <initAccelerometer+0xb4>)
    d70c:	f000 f8f2 	bl	d8f4 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d710:	2103      	movs	r1, #3
    d712:	480b      	ldr	r0, [pc, #44]	; (d740 <initAccelerometer+0xb4>)
    d714:	f000 f854 	bl	d7c0 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d718:	2103      	movs	r1, #3
    d71a:	4809      	ldr	r0, [pc, #36]	; (d740 <initAccelerometer+0xb4>)
    d71c:	f000 f8b6 	bl	d88c <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d720:	2100      	movs	r1, #0
    d722:	4807      	ldr	r0, [pc, #28]	; (d740 <initAccelerometer+0xb4>)
    d724:	f000 f8cc 	bl	d8c0 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d728:	2103      	movs	r1, #3
    d72a:	4805      	ldr	r0, [pc, #20]	; (d740 <initAccelerometer+0xb4>)
    d72c:	f000 f848 	bl	d7c0 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d730:	2100      	movs	r1, #0
    d732:	4803      	ldr	r0, [pc, #12]	; (d740 <initAccelerometer+0xb4>)
    d734:	f000 f85e 	bl	d7f4 <lis2dh12_operating_mode_set>
}
    d738:	2000      	movs	r0, #0
    d73a:	b007      	add	sp, #28
    d73c:	bd30      	pop	{r4, r5, pc}
    d73e:	bf00      	nop
    d740:	10001314 	.word	0x10001314
    d744:	0000d5d5 	.word	0x0000d5d5
    d748:	10001520 	.word	0x10001520
    d74c:	0000d50d 	.word	0x0000d50d
    d750:	000186a0 	.word	0x000186a0
    d754:	10001170 	.word	0x10001170
    d758:	0001058c 	.word	0x0001058c
    d75c:	00010590 	.word	0x00010590
    d760:	0001053c 	.word	0x0001053c

0000d764 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
    d764:	ee00 0a10 	vmov	s0, r0
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d768:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d76c:	4770      	bx	lr
    d76e:	bf00      	nop

0000d770 <lis2dh12_from_lsb_hr_to_celsius>:
  return ( (float)lsb / 16.0f ) * 12.0f;
}

float lis2dh12_from_lsb_hr_to_celsius(int16_t lsb)
{
  return ( ( (float)lsb / 64.0f ) / 4.0f ) + 25.0f;
    d770:	ee07 0a90 	vmov	s15, r0
    d774:	eefa 7acd 	vcvt.f32.s32	s15, s15, #6
    d778:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    d77c:	ee67 7a80 	vmul.f32	s15, s15, s0
    d780:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
}
    d784:	ee37 0a80 	vadd.f32	s0, s15, s0
    d788:	4770      	bx	lr
    d78a:	bf00      	nop

0000d78c <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d78c:	b530      	push	{r4, r5, lr}
    d78e:	b083      	sub	sp, #12
    d790:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d792:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d796:	2301      	movs	r3, #1
    d798:	aa01      	add	r2, sp, #4
    d79a:	2107      	movs	r1, #7
    d79c:	47a8      	blx	r5
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
                          (uint8_t*)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
    d79e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d7a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d7a6:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d7a8:	b003      	add	sp, #12
    d7aa:	bd30      	pop	{r4, r5, pc}

0000d7ac <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d7ac:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7ae:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d7b2:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7b4:	46a4      	mov	ip, r4
    d7b6:	2302      	movs	r3, #2
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
  return ret;
}
    d7b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7bc:	210c      	movs	r1, #12
    d7be:	4760      	bx	ip

0000d7c0 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d7c0:	b570      	push	{r4, r5, r6, lr}
    d7c2:	b082      	sub	sp, #8
    d7c4:	4604      	mov	r4, r0
    d7c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7c8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d7cc:	aa01      	add	r2, sp, #4
    d7ce:	2301      	movs	r3, #1
    d7d0:	211f      	movs	r1, #31
    d7d2:	47b0      	blx	r6
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d7d4:	b958      	cbnz	r0, d7ee <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d7d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d7da:	6826      	ldr	r6, [r4, #0]
    d7dc:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d7de:	f365 1387 	bfi	r3, r5, #6, #2
    d7e2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d7e6:	aa01      	add	r2, sp, #4
    d7e8:	2301      	movs	r3, #1
    d7ea:	211f      	movs	r1, #31
    d7ec:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d7ee:	b002      	add	sp, #8
    d7f0:	bd70      	pop	{r4, r5, r6, pc}
    d7f2:	bf00      	nop

0000d7f4 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d7f4:	b570      	push	{r4, r5, r6, lr}
    d7f6:	b082      	sub	sp, #8
    d7f8:	4604      	mov	r4, r0
    d7fa:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d7fc:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d800:	466a      	mov	r2, sp
    d802:	2301      	movs	r3, #1
    d804:	2120      	movs	r1, #32
    d806:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d808:	bb00      	cbnz	r0, d84c <lis2dh12_operating_mode_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d80a:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
    d80e:	aa01      	add	r2, sp, #4
    d810:	2301      	movs	r3, #1
    d812:	2123      	movs	r1, #35	; 0x23
    d814:	47b0      	blx	r6
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
    d816:	b9c8      	cbnz	r0, d84c <lis2dh12_operating_mode_set+0x58>
    if ( val == LIS2DH12_HR_12bit ) {
    d818:	b9d5      	cbnz	r5, d850 <lis2dh12_operating_mode_set+0x5c>
      ctrl_reg1.lpen = 0;
    d81a:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d81e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d822:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d826:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d82a:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d82e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d832:	6825      	ldr	r5, [r4, #0]
    d834:	68a0      	ldr	r0, [r4, #8]
    d836:	466a      	mov	r2, sp
    d838:	2301      	movs	r3, #1
    d83a:	2120      	movs	r1, #32
    d83c:	47a8      	blx	r5
      ctrl_reg1.lpen = 1;
      ctrl_reg4.hr   = 0;
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  } 
  if (ret == 0) {
    d83e:	b928      	cbnz	r0, d84c <lis2dh12_operating_mode_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d840:	6825      	ldr	r5, [r4, #0]
    d842:	68a0      	ldr	r0, [r4, #8]
    d844:	aa01      	add	r2, sp, #4
    d846:	2301      	movs	r3, #1
    d848:	2123      	movs	r1, #35	; 0x23
    d84a:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d84c:	b002      	add	sp, #8
    d84e:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d850:	2d01      	cmp	r5, #1
    d852:	d10c      	bne.n	d86e <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 0;
    d854:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d858:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d85c:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d860:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d864:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d868:	f88d 3004 	strb.w	r3, [sp, #4]
    if (val == LIS2DH12_LP_8bit) {
    d86c:	e7e1      	b.n	d832 <lis2dh12_operating_mode_set+0x3e>
    d86e:	2d02      	cmp	r5, #2
    d870:	d1df      	bne.n	d832 <lis2dh12_operating_mode_set+0x3e>
      ctrl_reg1.lpen = 1;
    d872:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d876:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d87a:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d87e:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d882:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d886:	f88d 2004 	strb.w	r2, [sp, #4]
    d88a:	e7d2      	b.n	d832 <lis2dh12_operating_mode_set+0x3e>

0000d88c <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d88c:	b570      	push	{r4, r5, r6, lr}
    d88e:	b082      	sub	sp, #8
    d890:	4604      	mov	r4, r0
    d892:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d894:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d898:	aa01      	add	r2, sp, #4
    d89a:	2301      	movs	r3, #1
    d89c:	2120      	movs	r1, #32
    d89e:	47b0      	blx	r6
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d8a0:	b958      	cbnz	r0, d8ba <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d8a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8a6:	6826      	ldr	r6, [r4, #0]
    d8a8:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d8aa:	f365 1307 	bfi	r3, r5, #4, #4
    d8ae:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8b2:	aa01      	add	r2, sp, #4
    d8b4:	2301      	movs	r3, #1
    d8b6:	2120      	movs	r1, #32
    d8b8:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d8ba:	b002      	add	sp, #8
    d8bc:	bd70      	pop	{r4, r5, r6, pc}
    d8be:	bf00      	nop

0000d8c0 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d8c0:	b570      	push	{r4, r5, r6, lr}
    d8c2:	b082      	sub	sp, #8
    d8c4:	4604      	mov	r4, r0
    d8c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8c8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d8cc:	aa01      	add	r2, sp, #4
    d8ce:	2301      	movs	r3, #1
    d8d0:	2123      	movs	r1, #35	; 0x23
    d8d2:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d8d4:	b958      	cbnz	r0, d8ee <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d8d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8da:	6826      	ldr	r6, [r4, #0]
    d8dc:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d8de:	f365 1305 	bfi	r3, r5, #4, #2
    d8e2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d8e6:	aa01      	add	r2, sp, #4
    d8e8:	2301      	movs	r3, #1
    d8ea:	2123      	movs	r1, #35	; 0x23
    d8ec:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d8ee:	b002      	add	sp, #8
    d8f0:	bd70      	pop	{r4, r5, r6, pc}
    d8f2:	bf00      	nop

0000d8f4 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d8f4:	b570      	push	{r4, r5, r6, lr}
    d8f6:	b082      	sub	sp, #8
    d8f8:	4604      	mov	r4, r0
    d8fa:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d8fc:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
    d900:	aa01      	add	r2, sp, #4
    d902:	2301      	movs	r3, #1
    d904:	2123      	movs	r1, #35	; 0x23
    d906:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d908:	b958      	cbnz	r0, d922 <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d90a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d90e:	6826      	ldr	r6, [r4, #0]
    d910:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d912:	f365 13c7 	bfi	r3, r5, #7, #1
    d916:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d91a:	aa01      	add	r2, sp, #4
    d91c:	2301      	movs	r3, #1
    d91e:	2123      	movs	r1, #35	; 0x23
    d920:	47b0      	blx	r6
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d922:	b002      	add	sp, #8
    d924:	bd70      	pop	{r4, r5, r6, pc}
    d926:	bf00      	nop

0000d928 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    d928:	b530      	push	{r4, r5, lr}
    d92a:	b083      	sub	sp, #12
    d92c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d92e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
    d932:	2301      	movs	r3, #1
    d934:	aa01      	add	r2, sp, #4
    d936:	2127      	movs	r1, #39	; 0x27
    d938:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    d93a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d93e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    d942:	7023      	strb	r3, [r4, #0]

  return ret;
}
    d944:	b003      	add	sp, #12
    d946:	bd30      	pop	{r4, r5, pc}

0000d948 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d948:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d94a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d94e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d950:	46a4      	mov	ip, r4
    d952:	2306      	movs	r3, #6
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    d954:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d958:	2128      	movs	r1, #40	; 0x28
    d95a:	4760      	bx	ip

0000d95c <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d95c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d95e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
    d962:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d964:	46a4      	mov	ip, r4
    d966:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d968:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d96c:	210f      	movs	r1, #15
    d96e:	4760      	bx	ip

0000d970 <am_bsp_uart_string_print>:
    d970:	b510      	push	{r4, lr}
    d972:	b086      	sub	sp, #24
    d974:	7804      	ldrb	r4, [r0, #0]
    d976:	2300      	movs	r3, #0
    d978:	9300      	str	r3, [sp, #0]
    d97a:	b13c      	cbz	r4, d98c <am_bsp_uart_string_print+0x1c>
    d97c:	4603      	mov	r3, r0
    d97e:	f1c0 0201 	rsb	r2, r0, #1
    d982:	18d4      	adds	r4, r2, r3
    d984:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d988:	2900      	cmp	r1, #0
    d98a:	d1fa      	bne.n	d982 <am_bsp_uart_string_print+0x12>
    d98c:	4b09      	ldr	r3, [pc, #36]	; (d9b4 <am_bsp_uart_string_print+0x44>)
    d98e:	9002      	str	r0, [sp, #8]
    d990:	2200      	movs	r2, #0
    d992:	6818      	ldr	r0, [r3, #0]
    d994:	9403      	str	r4, [sp, #12]
    d996:	f04f 33ff 	mov.w	r3, #4294967295
    d99a:	a901      	add	r1, sp, #4
    d99c:	9304      	str	r3, [sp, #16]
    d99e:	9201      	str	r2, [sp, #4]
    d9a0:	f8cd d014 	str.w	sp, [sp, #20]
    d9a4:	f002 f8ca 	bl	fb3c <am_hal_uart_transfer>
    d9a8:	9b00      	ldr	r3, [sp, #0]
    d9aa:	42a3      	cmp	r3, r4
    d9ac:	d000      	beq.n	d9b0 <am_bsp_uart_string_print+0x40>
    d9ae:	e7fe      	b.n	d9ae <am_bsp_uart_string_print+0x3e>
    d9b0:	b006      	add	sp, #24
    d9b2:	bd10      	pop	{r4, pc}
    d9b4:	10001174 	.word	0x10001174

0000d9b8 <am_bsp_low_power_init>:
    d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9ba:	f001 fcef 	bl	f39c <am_hal_itm_disable>
    d9be:	2000      	movs	r0, #0
    d9c0:	f7ff f80c 	bl	c9dc <am_util_stdio_printf_init>
    d9c4:	4b12      	ldr	r3, [pc, #72]	; (da10 <am_bsp_low_power_init+0x58>)
    d9c6:	4f13      	ldr	r7, [pc, #76]	; (da14 <am_bsp_low_power_init+0x5c>)
    d9c8:	6819      	ldr	r1, [r3, #0]
    d9ca:	2021      	movs	r0, #33	; 0x21
    d9cc:	f000 fe1e 	bl	e60c <am_hal_gpio_pinconfig>
    d9d0:	f001 fe26 	bl	f620 <am_hal_pwrctrl_low_power_init>
    d9d4:	2001      	movs	r0, #1
    d9d6:	f001 fe95 	bl	f704 <am_hal_rtc_osc_select>
    d9da:	2100      	movs	r1, #0
    d9dc:	2003      	movs	r0, #3
    d9de:	f000 fc51 	bl	e284 <am_hal_clkgen_control>
    d9e2:	f001 fe97 	bl	f714 <am_hal_rtc_osc_disable>
    d9e6:	4b0c      	ldr	r3, [pc, #48]	; (da18 <am_bsp_low_power_init+0x60>)
    d9e8:	681e      	ldr	r6, [r3, #0]
    d9ea:	2400      	movs	r4, #0
    d9ec:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d9f0:	4631      	mov	r1, r6
    d9f2:	4628      	mov	r0, r5
    d9f4:	f000 fe0a 	bl	e60c <am_hal_gpio_pinconfig>
    d9f8:	2103      	movs	r1, #3
    d9fa:	4628      	mov	r0, r5
    d9fc:	f000 ff74 	bl	e8e8 <am_hal_gpio_state_write>
    da00:	3401      	adds	r4, #1
    da02:	4628      	mov	r0, r5
    da04:	2100      	movs	r1, #0
    da06:	f000 ff6f 	bl	e8e8 <am_hal_gpio_state_write>
    da0a:	2c04      	cmp	r4, #4
    da0c:	d1ee      	bne.n	d9ec <am_bsp_low_power_init+0x34>
    da0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da10:	000106cc 	.word	0x000106cc
    da14:	10001028 	.word	0x10001028
    da18:	000106d0 	.word	0x000106d0

0000da1c <am_bsp_debug_printf_disable>:
    da1c:	b538      	push	{r3, r4, r5, lr}
    da1e:	4b17      	ldr	r3, [pc, #92]	; (da7c <am_bsp_debug_printf_disable+0x60>)
    da20:	681c      	ldr	r4, [r3, #0]
    da22:	2c01      	cmp	r4, #1
    da24:	d002      	beq.n	da2c <am_bsp_debug_printf_disable+0x10>
    da26:	2c02      	cmp	r4, #2
    da28:	d00c      	beq.n	da44 <am_bsp_debug_printf_disable+0x28>
    da2a:	bd38      	pop	{r3, r4, r5, pc}
    da2c:	f001 fcb6 	bl	f39c <am_hal_itm_disable>
    da30:	2000      	movs	r0, #0
    da32:	f7fe ffd3 	bl	c9dc <am_util_stdio_printf_init>
    da36:	4b12      	ldr	r3, [pc, #72]	; (da80 <am_bsp_debug_printf_disable+0x64>)
    da38:	2021      	movs	r0, #33	; 0x21
    da3a:	6819      	ldr	r1, [r3, #0]
    da3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da40:	f000 bde4 	b.w	e60c <am_hal_gpio_pinconfig>
    da44:	4d0f      	ldr	r5, [pc, #60]	; (da84 <am_bsp_debug_printf_disable+0x68>)
    da46:	6828      	ldr	r0, [r5, #0]
    da48:	f002 fab2 	bl	ffb0 <am_hal_uart_tx_flush>
    da4c:	2000      	movs	r0, #0
    da4e:	f7fe ffc5 	bl	c9dc <am_util_stdio_printf_init>
    da52:	4621      	mov	r1, r4
    da54:	2200      	movs	r2, #0
    da56:	6828      	ldr	r0, [r5, #0]
    da58:	f001 feda 	bl	f810 <am_hal_uart_power_control>
    da5c:	6828      	ldr	r0, [r5, #0]
    da5e:	f001 fec3 	bl	f7e8 <am_hal_uart_deinitialize>
    da62:	4b07      	ldr	r3, [pc, #28]	; (da80 <am_bsp_debug_printf_disable+0x64>)
    da64:	681c      	ldr	r4, [r3, #0]
    da66:	2030      	movs	r0, #48	; 0x30
    da68:	4621      	mov	r1, r4
    da6a:	f000 fdcf 	bl	e60c <am_hal_gpio_pinconfig>
    da6e:	4621      	mov	r1, r4
    da70:	2031      	movs	r0, #49	; 0x31
    da72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da76:	f000 bdc9 	b.w	e60c <am_hal_gpio_pinconfig>
    da7a:	bf00      	nop
    da7c:	10001178 	.word	0x10001178
    da80:	000106cc 	.word	0x000106cc
    da84:	10001174 	.word	0x10001174

0000da88 <am_bsp_uart_printf_enable>:
    da88:	b510      	push	{r4, lr}
    da8a:	4c10      	ldr	r4, [pc, #64]	; (dacc <am_bsp_uart_printf_enable+0x44>)
    da8c:	4b10      	ldr	r3, [pc, #64]	; (dad0 <am_bsp_uart_printf_enable+0x48>)
    da8e:	4621      	mov	r1, r4
    da90:	2202      	movs	r2, #2
    da92:	2000      	movs	r0, #0
    da94:	601a      	str	r2, [r3, #0]
    da96:	f001 fe7f 	bl	f798 <am_hal_uart_initialize>
    da9a:	2200      	movs	r2, #0
    da9c:	4611      	mov	r1, r2
    da9e:	6820      	ldr	r0, [r4, #0]
    daa0:	f001 feb6 	bl	f810 <am_hal_uart_power_control>
    daa4:	6820      	ldr	r0, [r4, #0]
    daa6:	490b      	ldr	r1, [pc, #44]	; (dad4 <am_bsp_uart_printf_enable+0x4c>)
    daa8:	f001 ff24 	bl	f8f4 <am_hal_uart_configure>
    daac:	4b0a      	ldr	r3, [pc, #40]	; (dad8 <am_bsp_uart_printf_enable+0x50>)
    daae:	2030      	movs	r0, #48	; 0x30
    dab0:	6819      	ldr	r1, [r3, #0]
    dab2:	f000 fdab 	bl	e60c <am_hal_gpio_pinconfig>
    dab6:	4b09      	ldr	r3, [pc, #36]	; (dadc <am_bsp_uart_printf_enable+0x54>)
    dab8:	2031      	movs	r0, #49	; 0x31
    daba:	6819      	ldr	r1, [r3, #0]
    dabc:	f000 fda6 	bl	e60c <am_hal_gpio_pinconfig>
    dac0:	4807      	ldr	r0, [pc, #28]	; (dae0 <am_bsp_uart_printf_enable+0x58>)
    dac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dac6:	f7fe bf89 	b.w	c9dc <am_util_stdio_printf_init>
    daca:	bf00      	nop
    dacc:	10001174 	.word	0x10001174
    dad0:	10001178 	.word	0x10001178
    dad4:	0001055c 	.word	0x0001055c
    dad8:	00010588 	.word	0x00010588
    dadc:	00010584 	.word	0x00010584
    dae0:	0000d971 	.word	0x0000d971

0000dae4 <am_hal_adc_initialize>:
    dae4:	b108      	cbz	r0, daea <am_hal_adc_initialize+0x6>
    dae6:	2005      	movs	r0, #5
    dae8:	4770      	bx	lr
    daea:	b139      	cbz	r1, dafc <am_hal_adc_initialize+0x18>
    daec:	4a1b      	ldr	r2, [pc, #108]	; (db5c <am_hal_adc_initialize+0x78>)
    daee:	b538      	push	{r3, r4, r5, lr}
    daf0:	78d3      	ldrb	r3, [r2, #3]
    daf2:	f013 0401 	ands.w	r4, r3, #1
    daf6:	d003      	beq.n	db00 <am_hal_adc_initialize+0x1c>
    daf8:	2007      	movs	r0, #7
    dafa:	bd38      	pop	{r3, r4, r5, pc}
    dafc:	2006      	movs	r0, #6
    dafe:	4770      	bx	lr
    db00:	f043 0301 	orr.w	r3, r3, #1
    db04:	70d3      	strb	r3, [r2, #3]
    db06:	6813      	ldr	r3, [r2, #0]
    db08:	4d15      	ldr	r5, [pc, #84]	; (db60 <am_hal_adc_initialize+0x7c>)
    db0a:	4816      	ldr	r0, [pc, #88]	; (db64 <am_hal_adc_initialize+0x80>)
    db0c:	6054      	str	r4, [r2, #4]
    db0e:	f365 0317 	bfi	r3, r5, #0, #24
    db12:	6013      	str	r3, [r2, #0]
    db14:	6004      	str	r4, [r0, #0]
    db16:	600a      	str	r2, [r1, #0]
    db18:	4813      	ldr	r0, [pc, #76]	; (db68 <am_hal_adc_initialize+0x84>)
    db1a:	4d14      	ldr	r5, [pc, #80]	; (db6c <am_hal_adc_initialize+0x88>)
    db1c:	f000 fd6c 	bl	e5f8 <am_hal_flash_load_ui32>
    db20:	6028      	str	r0, [r5, #0]
    db22:	4813      	ldr	r0, [pc, #76]	; (db70 <am_hal_adc_initialize+0x8c>)
    db24:	f000 fd68 	bl	e5f8 <am_hal_flash_load_ui32>
    db28:	6068      	str	r0, [r5, #4]
    db2a:	4812      	ldr	r0, [pc, #72]	; (db74 <am_hal_adc_initialize+0x90>)
    db2c:	f000 fd64 	bl	e5f8 <am_hal_flash_load_ui32>
    db30:	682b      	ldr	r3, [r5, #0]
    db32:	60a8      	str	r0, [r5, #8]
    db34:	3301      	adds	r3, #1
    db36:	d008      	beq.n	db4a <am_hal_adc_initialize+0x66>
    db38:	686b      	ldr	r3, [r5, #4]
    db3a:	3301      	adds	r3, #1
    db3c:	d005      	beq.n	db4a <am_hal_adc_initialize+0x66>
    db3e:	3001      	adds	r0, #1
    db40:	d003      	beq.n	db4a <am_hal_adc_initialize+0x66>
    db42:	2301      	movs	r3, #1
    db44:	732b      	strb	r3, [r5, #12]
    db46:	4620      	mov	r0, r4
    db48:	bd38      	pop	{r3, r4, r5, pc}
    db4a:	490b      	ldr	r1, [pc, #44]	; (db78 <am_hal_adc_initialize+0x94>)
    db4c:	4a0b      	ldr	r2, [pc, #44]	; (db7c <am_hal_adc_initialize+0x98>)
    db4e:	4b0c      	ldr	r3, [pc, #48]	; (db80 <am_hal_adc_initialize+0x9c>)
    db50:	6029      	str	r1, [r5, #0]
    db52:	2000      	movs	r0, #0
    db54:	606a      	str	r2, [r5, #4]
    db56:	60ab      	str	r3, [r5, #8]
    db58:	7328      	strb	r0, [r5, #12]
    db5a:	bd38      	pop	{r3, r4, r5, pc}
    db5c:	10001728 	.word	0x10001728
    db60:	00afafaf 	.word	0x00afafaf
    db64:	10001724 	.word	0x10001724
    db68:	50023840 	.word	0x50023840
    db6c:	1000117c 	.word	0x1000117c
    db70:	50023844 	.word	0x50023844
    db74:	50023848 	.word	0x50023848
    db78:	4395c000 	.word	0x4395c000
    db7c:	3f839874 	.word	0x3f839874
    db80:	bb8c47a1 	.word	0xbb8c47a1

0000db84 <am_hal_adc_deinitialize>:
    db84:	b128      	cbz	r0, db92 <am_hal_adc_deinitialize+0xe>
    db86:	6803      	ldr	r3, [r0, #0]
    db88:	4a0c      	ldr	r2, [pc, #48]	; (dbbc <am_hal_adc_deinitialize+0x38>)
    db8a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db8e:	4293      	cmp	r3, r2
    db90:	d001      	beq.n	db96 <am_hal_adc_deinitialize+0x12>
    db92:	2002      	movs	r0, #2
    db94:	4770      	bx	lr
    db96:	78c3      	ldrb	r3, [r0, #3]
    db98:	079b      	lsls	r3, r3, #30
    db9a:	d508      	bpl.n	dbae <am_hal_adc_deinitialize+0x2a>
    db9c:	4b08      	ldr	r3, [pc, #32]	; (dbc0 <am_hal_adc_deinitialize+0x3c>)
    db9e:	681a      	ldr	r2, [r3, #0]
    dba0:	f36f 0200 	bfc	r2, #0, #1
    dba4:	601a      	str	r2, [r3, #0]
    dba6:	78c3      	ldrb	r3, [r0, #3]
    dba8:	f36f 0341 	bfc	r3, #1, #1
    dbac:	70c3      	strb	r3, [r0, #3]
    dbae:	78c3      	ldrb	r3, [r0, #3]
    dbb0:	f36f 0300 	bfc	r3, #0, #1
    dbb4:	70c3      	strb	r3, [r0, #3]
    dbb6:	2000      	movs	r0, #0
    dbb8:	4770      	bx	lr
    dbba:	bf00      	nop
    dbbc:	01afafaf 	.word	0x01afafaf
    dbc0:	50010000 	.word	0x50010000

0000dbc4 <am_hal_adc_configure>:
    dbc4:	b128      	cbz	r0, dbd2 <am_hal_adc_configure+0xe>
    dbc6:	6803      	ldr	r3, [r0, #0]
    dbc8:	4a18      	ldr	r2, [pc, #96]	; (dc2c <am_hal_adc_configure+0x68>)
    dbca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dbce:	4293      	cmp	r3, r2
    dbd0:	d001      	beq.n	dbd6 <am_hal_adc_configure+0x12>
    dbd2:	2002      	movs	r0, #2
    dbd4:	4770      	bx	lr
    dbd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbd8:	7808      	ldrb	r0, [r1, #0]
    dbda:	784d      	ldrb	r5, [r1, #1]
    dbdc:	788c      	ldrb	r4, [r1, #2]
    dbde:	f891 e003 	ldrb.w	lr, [r1, #3]
    dbe2:	790f      	ldrb	r7, [r1, #4]
    dbe4:	794a      	ldrb	r2, [r1, #5]
    dbe6:	798b      	ldrb	r3, [r1, #6]
    dbe8:	4e11      	ldr	r6, [pc, #68]	; (dc30 <am_hal_adc_configure+0x6c>)
    dbea:	0600      	lsls	r0, r0, #24
    dbec:	04ed      	lsls	r5, r5, #19
    dbee:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    dbf2:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    dbf6:	4328      	orrs	r0, r5
    dbf8:	0424      	lsls	r4, r4, #16
    dbfa:	ea4f 210e 	mov.w	r1, lr, lsl #8
    dbfe:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dc02:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    dc06:	4304      	orrs	r4, r0
    dc08:	f401 7040 	and.w	r0, r1, #768	; 0x300
    dc0c:	0139      	lsls	r1, r7, #4
    dc0e:	4320      	orrs	r0, r4
    dc10:	f001 0110 	and.w	r1, r1, #16
    dc14:	00d2      	lsls	r2, r2, #3
    dc16:	4301      	orrs	r1, r0
    dc18:	f002 0208 	and.w	r2, r2, #8
    dc1c:	009b      	lsls	r3, r3, #2
    dc1e:	430a      	orrs	r2, r1
    dc20:	f003 0304 	and.w	r3, r3, #4
    dc24:	4313      	orrs	r3, r2
    dc26:	6033      	str	r3, [r6, #0]
    dc28:	2000      	movs	r0, #0
    dc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc2c:	01afafaf 	.word	0x01afafaf
    dc30:	50010000 	.word	0x50010000

0000dc34 <am_hal_adc_configure_slot>:
    dc34:	b128      	cbz	r0, dc42 <am_hal_adc_configure_slot+0xe>
    dc36:	6803      	ldr	r3, [r0, #0]
    dc38:	4816      	ldr	r0, [pc, #88]	; (dc94 <am_hal_adc_configure_slot+0x60>)
    dc3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc3e:	4283      	cmp	r3, r0
    dc40:	d001      	beq.n	dc46 <am_hal_adc_configure_slot+0x12>
    dc42:	2002      	movs	r0, #2
    dc44:	4770      	bx	lr
    dc46:	2907      	cmp	r1, #7
    dc48:	d901      	bls.n	dc4e <am_hal_adc_configure_slot+0x1a>
    dc4a:	2005      	movs	r0, #5
    dc4c:	4770      	bx	lr
    dc4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc50:	7813      	ldrb	r3, [r2, #0]
    dc52:	7854      	ldrb	r4, [r2, #1]
    dc54:	7890      	ldrb	r0, [r2, #2]
    dc56:	78d7      	ldrb	r7, [r2, #3]
    dc58:	f892 e004 	ldrb.w	lr, [r2, #4]
    dc5c:	4d0e      	ldr	r5, [pc, #56]	; (dc98 <am_hal_adc_configure_slot+0x64>)
    dc5e:	4e0f      	ldr	r6, [pc, #60]	; (dc9c <am_hal_adc_configure_slot+0x68>)
    dc60:	061b      	lsls	r3, r3, #24
    dc62:	0424      	lsls	r4, r4, #16
    dc64:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    dc68:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    dc6c:	4323      	orrs	r3, r4
    dc6e:	0202      	lsls	r2, r0, #8
    dc70:	ea43 0e0e 	orr.w	lr, r3, lr
    dc74:	440d      	add	r5, r1
    dc76:	007b      	lsls	r3, r7, #1
    dc78:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    dc7c:	ea4e 0202 	orr.w	r2, lr, r2
    dc80:	00ad      	lsls	r5, r5, #2
    dc82:	f003 0302 	and.w	r3, r3, #2
    dc86:	4313      	orrs	r3, r2
    dc88:	602b      	str	r3, [r5, #0]
    dc8a:	6833      	ldr	r3, [r6, #0]
    dc8c:	3301      	adds	r3, #1
    dc8e:	6033      	str	r3, [r6, #0]
    dc90:	2000      	movs	r0, #0
    dc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc94:	01afafaf 	.word	0x01afafaf
    dc98:	14004003 	.word	0x14004003
    dc9c:	10001724 	.word	0x10001724

0000dca0 <am_hal_adc_enable>:
    dca0:	4603      	mov	r3, r0
    dca2:	b128      	cbz	r0, dcb0 <am_hal_adc_enable+0x10>
    dca4:	6802      	ldr	r2, [r0, #0]
    dca6:	490c      	ldr	r1, [pc, #48]	; (dcd8 <am_hal_adc_enable+0x38>)
    dca8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dcac:	428a      	cmp	r2, r1
    dcae:	d001      	beq.n	dcb4 <am_hal_adc_enable+0x14>
    dcb0:	2002      	movs	r0, #2
    dcb2:	4770      	bx	lr
    dcb4:	78c2      	ldrb	r2, [r0, #3]
    dcb6:	f002 0202 	and.w	r2, r2, #2
    dcba:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    dcbe:	b94a      	cbnz	r2, dcd4 <am_hal_adc_enable+0x34>
    dcc0:	4906      	ldr	r1, [pc, #24]	; (dcdc <am_hal_adc_enable+0x3c>)
    dcc2:	680a      	ldr	r2, [r1, #0]
    dcc4:	f042 0201 	orr.w	r2, r2, #1
    dcc8:	600a      	str	r2, [r1, #0]
    dcca:	78da      	ldrb	r2, [r3, #3]
    dccc:	f042 0202 	orr.w	r2, r2, #2
    dcd0:	70da      	strb	r2, [r3, #3]
    dcd2:	4770      	bx	lr
    dcd4:	2000      	movs	r0, #0
    dcd6:	4770      	bx	lr
    dcd8:	01afafaf 	.word	0x01afafaf
    dcdc:	50010000 	.word	0x50010000

0000dce0 <am_hal_adc_disable>:
    dce0:	b128      	cbz	r0, dcee <am_hal_adc_disable+0xe>
    dce2:	6803      	ldr	r3, [r0, #0]
    dce4:	4a08      	ldr	r2, [pc, #32]	; (dd08 <am_hal_adc_disable+0x28>)
    dce6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dcea:	4293      	cmp	r3, r2
    dcec:	d001      	beq.n	dcf2 <am_hal_adc_disable+0x12>
    dcee:	2002      	movs	r0, #2
    dcf0:	4770      	bx	lr
    dcf2:	4b06      	ldr	r3, [pc, #24]	; (dd0c <am_hal_adc_disable+0x2c>)
    dcf4:	681a      	ldr	r2, [r3, #0]
    dcf6:	f36f 0200 	bfc	r2, #0, #1
    dcfa:	601a      	str	r2, [r3, #0]
    dcfc:	78c3      	ldrb	r3, [r0, #3]
    dcfe:	f36f 0341 	bfc	r3, #1, #1
    dd02:	70c3      	strb	r3, [r0, #3]
    dd04:	2000      	movs	r0, #0
    dd06:	4770      	bx	lr
    dd08:	01afafaf 	.word	0x01afafaf
    dd0c:	50010000 	.word	0x50010000

0000dd10 <am_hal_adc_interrupt_enable>:
    dd10:	b128      	cbz	r0, dd1e <am_hal_adc_interrupt_enable+0xe>
    dd12:	6803      	ldr	r3, [r0, #0]
    dd14:	4a07      	ldr	r2, [pc, #28]	; (dd34 <am_hal_adc_interrupt_enable+0x24>)
    dd16:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd1a:	4293      	cmp	r3, r2
    dd1c:	d001      	beq.n	dd22 <am_hal_adc_interrupt_enable+0x12>
    dd1e:	2002      	movs	r0, #2
    dd20:	4770      	bx	lr
    dd22:	4b05      	ldr	r3, [pc, #20]	; (dd38 <am_hal_adc_interrupt_enable+0x28>)
    dd24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd28:	4311      	orrs	r1, r2
    dd2a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dd2e:	2000      	movs	r0, #0
    dd30:	4770      	bx	lr
    dd32:	bf00      	nop
    dd34:	01afafaf 	.word	0x01afafaf
    dd38:	50010000 	.word	0x50010000

0000dd3c <am_hal_adc_interrupt_status>:
    dd3c:	b128      	cbz	r0, dd4a <am_hal_adc_interrupt_status+0xe>
    dd3e:	6803      	ldr	r3, [r0, #0]
    dd40:	480b      	ldr	r0, [pc, #44]	; (dd70 <am_hal_adc_interrupt_status+0x34>)
    dd42:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd46:	4283      	cmp	r3, r0
    dd48:	d001      	beq.n	dd4e <am_hal_adc_interrupt_status+0x12>
    dd4a:	2002      	movs	r0, #2
    dd4c:	4770      	bx	lr
    dd4e:	b92a      	cbnz	r2, dd5c <am_hal_adc_interrupt_status+0x20>
    dd50:	4b08      	ldr	r3, [pc, #32]	; (dd74 <am_hal_adc_interrupt_status+0x38>)
    dd52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    dd56:	600b      	str	r3, [r1, #0]
    dd58:	4610      	mov	r0, r2
    dd5a:	4770      	bx	lr
    dd5c:	4a05      	ldr	r2, [pc, #20]	; (dd74 <am_hal_adc_interrupt_status+0x38>)
    dd5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    dd62:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dd66:	4003      	ands	r3, r0
    dd68:	600b      	str	r3, [r1, #0]
    dd6a:	2000      	movs	r0, #0
    dd6c:	4770      	bx	lr
    dd6e:	bf00      	nop
    dd70:	01afafaf 	.word	0x01afafaf
    dd74:	50010000 	.word	0x50010000

0000dd78 <am_hal_adc_interrupt_clear>:
    dd78:	b128      	cbz	r0, dd86 <am_hal_adc_interrupt_clear+0xe>
    dd7a:	6803      	ldr	r3, [r0, #0]
    dd7c:	4a05      	ldr	r2, [pc, #20]	; (dd94 <am_hal_adc_interrupt_clear+0x1c>)
    dd7e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd82:	4293      	cmp	r3, r2
    dd84:	d001      	beq.n	dd8a <am_hal_adc_interrupt_clear+0x12>
    dd86:	2002      	movs	r0, #2
    dd88:	4770      	bx	lr
    dd8a:	4b03      	ldr	r3, [pc, #12]	; (dd98 <am_hal_adc_interrupt_clear+0x20>)
    dd8c:	2000      	movs	r0, #0
    dd8e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    dd92:	4770      	bx	lr
    dd94:	01afafaf 	.word	0x01afafaf
    dd98:	50010000 	.word	0x50010000

0000dd9c <am_hal_adc_samples_read>:
    dd9c:	b148      	cbz	r0, ddb2 <am_hal_adc_samples_read+0x16>
    dd9e:	6800      	ldr	r0, [r0, #0]
    dda0:	b470      	push	{r4, r5, r6}
    dda2:	4c2a      	ldr	r4, [pc, #168]	; (de4c <am_hal_adc_samples_read+0xb0>)
    dda4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    dda8:	42a0      	cmp	r0, r4
    ddaa:	d004      	beq.n	ddb6 <am_hal_adc_samples_read+0x1a>
    ddac:	2002      	movs	r0, #2
    ddae:	bc70      	pop	{r4, r5, r6}
    ddb0:	4770      	bx	lr
    ddb2:	2002      	movs	r0, #2
    ddb4:	4770      	bx	lr
    ddb6:	9803      	ldr	r0, [sp, #12]
    ddb8:	b1e0      	cbz	r0, ddf4 <am_hal_adc_samples_read+0x58>
    ddba:	2000      	movs	r0, #0
    ddbc:	681c      	ldr	r4, [r3, #0]
    ddbe:	6018      	str	r0, [r3, #0]
    ddc0:	b1d2      	cbz	r2, ddf8 <am_hal_adc_samples_read+0x5c>
    ddc2:	9903      	ldr	r1, [sp, #12]
    ddc4:	4d22      	ldr	r5, [pc, #136]	; (de50 <am_hal_adc_samples_read+0xb4>)
    ddc6:	3a04      	subs	r2, #4
    ddc8:	3108      	adds	r1, #8
    ddca:	f852 0f04 	ldr.w	r0, [r2, #4]!
    ddce:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    ddd0:	f3c0 7002 	ubfx	r0, r0, #28, #3
    ddd4:	f841 0c04 	str.w	r0, [r1, #-4]
    ddd8:	6810      	ldr	r0, [r2, #0]
    ddda:	f3c0 108d 	ubfx	r0, r0, #6, #14
    ddde:	f841 0c08 	str.w	r0, [r1, #-8]
    dde2:	6818      	ldr	r0, [r3, #0]
    dde4:	3001      	adds	r0, #1
    dde6:	4284      	cmp	r4, r0
    dde8:	f101 0108 	add.w	r1, r1, #8
    ddec:	6018      	str	r0, [r3, #0]
    ddee:	d8ec      	bhi.n	ddca <am_hal_adc_samples_read+0x2e>
    ddf0:	2000      	movs	r0, #0
    ddf2:	e7dc      	b.n	ddae <am_hal_adc_samples_read+0x12>
    ddf4:	2006      	movs	r0, #6
    ddf6:	e7da      	b.n	ddae <am_hal_adc_samples_read+0x12>
    ddf8:	9a03      	ldr	r2, [sp, #12]
    ddfa:	4e15      	ldr	r6, [pc, #84]	; (de50 <am_hal_adc_samples_read+0xb4>)
    ddfc:	f102 0008 	add.w	r0, r2, #8
    de00:	b9a1      	cbnz	r1, de2c <am_hal_adc_samples_read+0x90>
    de02:	e001      	b.n	de08 <am_hal_adc_samples_read+0x6c>
    de04:	428c      	cmp	r4, r1
    de06:	d9f3      	bls.n	ddf0 <am_hal_adc_samples_read+0x54>
    de08:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    de0a:	f3c2 118d 	ubfx	r1, r2, #6, #14
    de0e:	f3c2 7502 	ubfx	r5, r2, #28, #3
    de12:	e900 0022 	stmdb	r0, {r1, r5}
    de16:	6819      	ldr	r1, [r3, #0]
    de18:	f3c2 5207 	ubfx	r2, r2, #20, #8
    de1c:	3101      	adds	r1, #1
    de1e:	3008      	adds	r0, #8
    de20:	6019      	str	r1, [r3, #0]
    de22:	2a00      	cmp	r2, #0
    de24:	d1ee      	bne.n	de04 <am_hal_adc_samples_read+0x68>
    de26:	e7e3      	b.n	ddf0 <am_hal_adc_samples_read+0x54>
    de28:	428c      	cmp	r4, r1
    de2a:	d9e1      	bls.n	ddf0 <am_hal_adc_samples_read+0x54>
    de2c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    de2e:	f3c2 0113 	ubfx	r1, r2, #0, #20
    de32:	f3c2 7502 	ubfx	r5, r2, #28, #3
    de36:	e900 0022 	stmdb	r0, {r1, r5}
    de3a:	6819      	ldr	r1, [r3, #0]
    de3c:	f3c2 5207 	ubfx	r2, r2, #20, #8
    de40:	3101      	adds	r1, #1
    de42:	3008      	adds	r0, #8
    de44:	6019      	str	r1, [r3, #0]
    de46:	2a00      	cmp	r2, #0
    de48:	d1ee      	bne.n	de28 <am_hal_adc_samples_read+0x8c>
    de4a:	e7d1      	b.n	ddf0 <am_hal_adc_samples_read+0x54>
    de4c:	01afafaf 	.word	0x01afafaf
    de50:	50010000 	.word	0x50010000

0000de54 <am_hal_adc_sw_trigger>:
    de54:	b128      	cbz	r0, de62 <am_hal_adc_sw_trigger+0xe>
    de56:	6803      	ldr	r3, [r0, #0]
    de58:	4a05      	ldr	r2, [pc, #20]	; (de70 <am_hal_adc_sw_trigger+0x1c>)
    de5a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de5e:	4293      	cmp	r3, r2
    de60:	d001      	beq.n	de66 <am_hal_adc_sw_trigger+0x12>
    de62:	2002      	movs	r0, #2
    de64:	4770      	bx	lr
    de66:	4b03      	ldr	r3, [pc, #12]	; (de74 <am_hal_adc_sw_trigger+0x20>)
    de68:	2237      	movs	r2, #55	; 0x37
    de6a:	609a      	str	r2, [r3, #8]
    de6c:	2000      	movs	r0, #0
    de6e:	4770      	bx	lr
    de70:	01afafaf 	.word	0x01afafaf
    de74:	50010000 	.word	0x50010000

0000de78 <am_hal_adc_power_control>:
    de78:	b140      	cbz	r0, de8c <am_hal_adc_power_control+0x14>
    de7a:	6803      	ldr	r3, [r0, #0]
    de7c:	b570      	push	{r4, r5, r6, lr}
    de7e:	4c2e      	ldr	r4, [pc, #184]	; (df38 <am_hal_adc_power_control+0xc0>)
    de80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de84:	42a3      	cmp	r3, r4
    de86:	d003      	beq.n	de90 <am_hal_adc_power_control+0x18>
    de88:	2002      	movs	r0, #2
    de8a:	bd70      	pop	{r4, r5, r6, pc}
    de8c:	2002      	movs	r0, #2
    de8e:	4770      	bx	lr
    de90:	4604      	mov	r4, r0
    de92:	4615      	mov	r5, r2
    de94:	460e      	mov	r6, r1
    de96:	b329      	cbz	r1, dee4 <am_hal_adc_power_control+0x6c>
    de98:	2902      	cmp	r1, #2
    de9a:	d821      	bhi.n	dee0 <am_hal_adc_power_control+0x68>
    de9c:	b1da      	cbz	r2, ded6 <am_hal_adc_power_control+0x5e>
    de9e:	4b27      	ldr	r3, [pc, #156]	; (df3c <am_hal_adc_power_control+0xc4>)
    dea0:	68da      	ldr	r2, [r3, #12]
    dea2:	6142      	str	r2, [r0, #20]
    dea4:	691a      	ldr	r2, [r3, #16]
    dea6:	6182      	str	r2, [r0, #24]
    dea8:	695a      	ldr	r2, [r3, #20]
    deaa:	61c2      	str	r2, [r0, #28]
    deac:	699a      	ldr	r2, [r3, #24]
    deae:	6202      	str	r2, [r0, #32]
    deb0:	69da      	ldr	r2, [r3, #28]
    deb2:	6242      	str	r2, [r0, #36]	; 0x24
    deb4:	6a1a      	ldr	r2, [r3, #32]
    deb6:	6282      	str	r2, [r0, #40]	; 0x28
    deb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    deba:	62c2      	str	r2, [r0, #44]	; 0x2c
    debc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    debe:	6302      	str	r2, [r0, #48]	; 0x30
    dec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dec2:	6342      	str	r2, [r0, #52]	; 0x34
    dec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    dec6:	6382      	str	r2, [r0, #56]	; 0x38
    dec8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    decc:	63c2      	str	r2, [r0, #60]	; 0x3c
    dece:	681b      	ldr	r3, [r3, #0]
    ded0:	6103      	str	r3, [r0, #16]
    ded2:	2301      	movs	r3, #1
    ded4:	7303      	strb	r3, [r0, #12]
    ded6:	200a      	movs	r0, #10
    ded8:	f001 fb76 	bl	f5c8 <am_hal_pwrctrl_periph_disable>
    dedc:	2000      	movs	r0, #0
    dede:	bd70      	pop	{r4, r5, r6, pc}
    dee0:	2006      	movs	r0, #6
    dee2:	bd70      	pop	{r4, r5, r6, pc}
    dee4:	b11a      	cbz	r2, deee <am_hal_adc_power_control+0x76>
    dee6:	7b03      	ldrb	r3, [r0, #12]
    dee8:	b933      	cbnz	r3, def8 <am_hal_adc_power_control+0x80>
    deea:	2007      	movs	r0, #7
    deec:	bd70      	pop	{r4, r5, r6, pc}
    deee:	200a      	movs	r0, #10
    def0:	f001 fb40 	bl	f574 <am_hal_pwrctrl_periph_enable>
    def4:	4628      	mov	r0, r5
    def6:	bd70      	pop	{r4, r5, r6, pc}
    def8:	200a      	movs	r0, #10
    defa:	f001 fb3b 	bl	f574 <am_hal_pwrctrl_periph_enable>
    defe:	4b0f      	ldr	r3, [pc, #60]	; (df3c <am_hal_adc_power_control+0xc4>)
    df00:	6962      	ldr	r2, [r4, #20]
    df02:	60da      	str	r2, [r3, #12]
    df04:	69a2      	ldr	r2, [r4, #24]
    df06:	611a      	str	r2, [r3, #16]
    df08:	69e2      	ldr	r2, [r4, #28]
    df0a:	615a      	str	r2, [r3, #20]
    df0c:	6a22      	ldr	r2, [r4, #32]
    df0e:	619a      	str	r2, [r3, #24]
    df10:	6a62      	ldr	r2, [r4, #36]	; 0x24
    df12:	61da      	str	r2, [r3, #28]
    df14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    df16:	621a      	str	r2, [r3, #32]
    df18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    df1a:	625a      	str	r2, [r3, #36]	; 0x24
    df1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    df1e:	629a      	str	r2, [r3, #40]	; 0x28
    df20:	6b62      	ldr	r2, [r4, #52]	; 0x34
    df22:	62da      	str	r2, [r3, #44]	; 0x2c
    df24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df26:	631a      	str	r2, [r3, #48]	; 0x30
    df28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    df2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    df2e:	6922      	ldr	r2, [r4, #16]
    df30:	601a      	str	r2, [r3, #0]
    df32:	4630      	mov	r0, r6
    df34:	7326      	strb	r6, [r4, #12]
    df36:	bd70      	pop	{r4, r5, r6, pc}
    df38:	01afafaf 	.word	0x01afafaf
    df3c:	50010000 	.word	0x50010000

0000df40 <am_hal_cachectrl_config>:
    df40:	b530      	push	{r4, r5, lr}
    df42:	b083      	sub	sp, #12
    df44:	4605      	mov	r5, r0
    df46:	f000 fd17 	bl	e978 <am_hal_interrupt_master_disable>
    df4a:	4c0f      	ldr	r4, [pc, #60]	; (df88 <am_hal_cachectrl_config+0x48>)
    df4c:	9001      	str	r0, [sp, #4]
    df4e:	6823      	ldr	r3, [r4, #0]
    df50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    df54:	6023      	str	r3, [r4, #0]
    df56:	9801      	ldr	r0, [sp, #4]
    df58:	f000 fd12 	bl	e980 <am_hal_interrupt_master_set>
    df5c:	78ab      	ldrb	r3, [r5, #2]
    df5e:	782a      	ldrb	r2, [r5, #0]
    df60:	7869      	ldrb	r1, [r5, #1]
    df62:	005b      	lsls	r3, r3, #1
    df64:	0112      	lsls	r2, r2, #4
    df66:	b2d2      	uxtb	r2, r2
    df68:	f003 0302 	and.w	r3, r3, #2
    df6c:	4313      	orrs	r3, r2
    df6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    df72:	020a      	lsls	r2, r1, #8
    df74:	f402 7240 	and.w	r2, r2, #768	; 0x300
    df78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    df7c:	4313      	orrs	r3, r2
    df7e:	2000      	movs	r0, #0
    df80:	6023      	str	r3, [r4, #0]
    df82:	b003      	add	sp, #12
    df84:	bd30      	pop	{r4, r5, pc}
    df86:	bf00      	nop
    df88:	40018000 	.word	0x40018000

0000df8c <am_hal_cachectrl_enable>:
    df8c:	4a03      	ldr	r2, [pc, #12]	; (df9c <am_hal_cachectrl_enable+0x10>)
    df8e:	6813      	ldr	r3, [r2, #0]
    df90:	f043 0301 	orr.w	r3, r3, #1
    df94:	6013      	str	r3, [r2, #0]
    df96:	2000      	movs	r0, #0
    df98:	4770      	bx	lr
    df9a:	bf00      	nop
    df9c:	40018000 	.word	0x40018000

0000dfa0 <am_hal_cachectrl_control>:
    dfa0:	b510      	push	{r4, lr}
    dfa2:	3801      	subs	r0, #1
    dfa4:	b08e      	sub	sp, #56	; 0x38
    dfa6:	2810      	cmp	r0, #16
    dfa8:	f200 8143 	bhi.w	e232 <am_hal_cachectrl_control+0x292>
    dfac:	e8df f010 	tbh	[pc, r0, lsl #1]
    dfb0:	01380136 	.word	0x01380136
    dfb4:	0011013e 	.word	0x0011013e
    dfb8:	001a0018 	.word	0x001a0018
    dfbc:	001f001c 	.word	0x001f001c
    dfc0:	00300022 	.word	0x00300022
    dfc4:	0074003c 	.word	0x0074003c
    dfc8:	00e400ac 	.word	0x00e400ac
    dfcc:	011a00ff 	.word	0x011a00ff
    dfd0:	0120      	.short	0x0120
    dfd2:	f44f 7208 	mov.w	r2, #544	; 0x220
    dfd6:	4ba8      	ldr	r3, [pc, #672]	; (e278 <am_hal_cachectrl_control+0x2d8>)
    dfd8:	2000      	movs	r0, #0
    dfda:	609a      	str	r2, [r3, #8]
    dfdc:	b00e      	add	sp, #56	; 0x38
    dfde:	bd10      	pop	{r4, pc}
    dfe0:	2240      	movs	r2, #64	; 0x40
    dfe2:	e7f8      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    dfe4:	2220      	movs	r2, #32
    dfe6:	e7f6      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    dfe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dfec:	e7f3      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    dfee:	f44f 7200 	mov.w	r2, #512	; 0x200
    dff2:	e7f0      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    dff4:	f000 fcc0 	bl	e978 <am_hal_interrupt_master_disable>
    dff8:	4a9f      	ldr	r2, [pc, #636]	; (e278 <am_hal_cachectrl_control+0x2d8>)
    dffa:	9000      	str	r0, [sp, #0]
    dffc:	6813      	ldr	r3, [r2, #0]
    dffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e002:	6013      	str	r3, [r2, #0]
    e004:	9800      	ldr	r0, [sp, #0]
    e006:	f000 fcbb 	bl	e980 <am_hal_interrupt_master_set>
    e00a:	2000      	movs	r0, #0
    e00c:	b00e      	add	sp, #56	; 0x38
    e00e:	bd10      	pop	{r4, pc}
    e010:	f000 fcb2 	bl	e978 <am_hal_interrupt_master_disable>
    e014:	4a98      	ldr	r2, [pc, #608]	; (e278 <am_hal_cachectrl_control+0x2d8>)
    e016:	9001      	str	r0, [sp, #4]
    e018:	6813      	ldr	r3, [r2, #0]
    e01a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e01e:	6013      	str	r3, [r2, #0]
    e020:	9801      	ldr	r0, [sp, #4]
    e022:	f000 fcad 	bl	e980 <am_hal_interrupt_master_set>
    e026:	e7f0      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e028:	f000 fca6 	bl	e978 <am_hal_interrupt_master_disable>
    e02c:	4603      	mov	r3, r0
    e02e:	4893      	ldr	r0, [pc, #588]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e030:	9302      	str	r3, [sp, #8]
    e032:	f000 fae1 	bl	e5f8 <am_hal_flash_load_ui32>
    e036:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e03a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e03e:	488f      	ldr	r0, [pc, #572]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e040:	f000 fade 	bl	e600 <am_hal_flash_store_ui32>
    e044:	9802      	ldr	r0, [sp, #8]
    e046:	f000 fc9b 	bl	e980 <am_hal_interrupt_master_set>
    e04a:	f000 fc95 	bl	e978 <am_hal_interrupt_master_disable>
    e04e:	4603      	mov	r3, r0
    e050:	488a      	ldr	r0, [pc, #552]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e052:	9303      	str	r3, [sp, #12]
    e054:	f000 fad0 	bl	e5f8 <am_hal_flash_load_ui32>
    e058:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e05c:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    e060:	4886      	ldr	r0, [pc, #536]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e062:	f000 facd 	bl	e600 <am_hal_flash_store_ui32>
    e066:	9803      	ldr	r0, [sp, #12]
    e068:	f000 fc8a 	bl	e980 <am_hal_interrupt_master_set>
    e06c:	f000 fc84 	bl	e978 <am_hal_interrupt_master_disable>
    e070:	4603      	mov	r3, r0
    e072:	4882      	ldr	r0, [pc, #520]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e074:	9304      	str	r3, [sp, #16]
    e076:	f000 fabf 	bl	e5f8 <am_hal_flash_load_ui32>
    e07a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e07e:	f021 010f 	bic.w	r1, r1, #15
    e082:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e086:	f041 0103 	orr.w	r1, r1, #3
    e08a:	487c      	ldr	r0, [pc, #496]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e08c:	f000 fab8 	bl	e600 <am_hal_flash_store_ui32>
    e090:	9804      	ldr	r0, [sp, #16]
    e092:	f000 fc75 	bl	e980 <am_hal_interrupt_master_set>
    e096:	e7b8      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e098:	f000 fc6e 	bl	e978 <am_hal_interrupt_master_disable>
    e09c:	4603      	mov	r3, r0
    e09e:	4877      	ldr	r0, [pc, #476]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e0a0:	9305      	str	r3, [sp, #20]
    e0a2:	f000 faa9 	bl	e5f8 <am_hal_flash_load_ui32>
    e0a6:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e0aa:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e0ae:	4873      	ldr	r0, [pc, #460]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e0b0:	f000 faa6 	bl	e600 <am_hal_flash_store_ui32>
    e0b4:	9805      	ldr	r0, [sp, #20]
    e0b6:	f000 fc63 	bl	e980 <am_hal_interrupt_master_set>
    e0ba:	f000 fc5d 	bl	e978 <am_hal_interrupt_master_disable>
    e0be:	4603      	mov	r3, r0
    e0c0:	486e      	ldr	r0, [pc, #440]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e0c2:	9306      	str	r3, [sp, #24]
    e0c4:	f000 fa98 	bl	e5f8 <am_hal_flash_load_ui32>
    e0c8:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e0cc:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    e0d0:	486a      	ldr	r0, [pc, #424]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e0d2:	f000 fa95 	bl	e600 <am_hal_flash_store_ui32>
    e0d6:	9806      	ldr	r0, [sp, #24]
    e0d8:	f000 fc52 	bl	e980 <am_hal_interrupt_master_set>
    e0dc:	f000 fc4c 	bl	e978 <am_hal_interrupt_master_disable>
    e0e0:	4603      	mov	r3, r0
    e0e2:	4866      	ldr	r0, [pc, #408]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e0e4:	9307      	str	r3, [sp, #28]
    e0e6:	f000 fa87 	bl	e5f8 <am_hal_flash_load_ui32>
    e0ea:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e0ee:	f021 010f 	bic.w	r1, r1, #15
    e0f2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e0f6:	f041 0101 	orr.w	r1, r1, #1
    e0fa:	4860      	ldr	r0, [pc, #384]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e0fc:	f000 fa80 	bl	e600 <am_hal_flash_store_ui32>
    e100:	9807      	ldr	r0, [sp, #28]
    e102:	f000 fc3d 	bl	e980 <am_hal_interrupt_master_set>
    e106:	e780      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e108:	f000 fc36 	bl	e978 <am_hal_interrupt_master_disable>
    e10c:	4603      	mov	r3, r0
    e10e:	485b      	ldr	r0, [pc, #364]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e110:	9308      	str	r3, [sp, #32]
    e112:	f000 fa71 	bl	e5f8 <am_hal_flash_load_ui32>
    e116:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e11a:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e11e:	4857      	ldr	r0, [pc, #348]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e120:	f000 fa6e 	bl	e600 <am_hal_flash_store_ui32>
    e124:	9808      	ldr	r0, [sp, #32]
    e126:	f000 fc2b 	bl	e980 <am_hal_interrupt_master_set>
    e12a:	f000 fc25 	bl	e978 <am_hal_interrupt_master_disable>
    e12e:	4603      	mov	r3, r0
    e130:	4852      	ldr	r0, [pc, #328]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e132:	9309      	str	r3, [sp, #36]	; 0x24
    e134:	f000 fa60 	bl	e5f8 <am_hal_flash_load_ui32>
    e138:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e13c:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    e140:	484e      	ldr	r0, [pc, #312]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e142:	f000 fa5d 	bl	e600 <am_hal_flash_store_ui32>
    e146:	9809      	ldr	r0, [sp, #36]	; 0x24
    e148:	f000 fc1a 	bl	e980 <am_hal_interrupt_master_set>
    e14c:	f000 fc14 	bl	e978 <am_hal_interrupt_master_disable>
    e150:	4603      	mov	r3, r0
    e152:	484a      	ldr	r0, [pc, #296]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e154:	930a      	str	r3, [sp, #40]	; 0x28
    e156:	f000 fa4f 	bl	e5f8 <am_hal_flash_load_ui32>
    e15a:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e15e:	f021 010f 	bic.w	r1, r1, #15
    e162:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e166:	f041 0101 	orr.w	r1, r1, #1
    e16a:	4844      	ldr	r0, [pc, #272]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e16c:	f000 fa48 	bl	e600 <am_hal_flash_store_ui32>
    e170:	980a      	ldr	r0, [sp, #40]	; 0x28
    e172:	f000 fc05 	bl	e980 <am_hal_interrupt_master_set>
    e176:	e748      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e178:	2900      	cmp	r1, #0
    e17a:	d05a      	beq.n	e232 <am_hal_cachectrl_control+0x292>
    e17c:	680c      	ldr	r4, [r1, #0]
    e17e:	2c03      	cmp	r4, #3
    e180:	d834      	bhi.n	e1ec <am_hal_cachectrl_control+0x24c>
    e182:	f000 fbf9 	bl	e978 <am_hal_interrupt_master_disable>
    e186:	4603      	mov	r3, r0
    e188:	483c      	ldr	r0, [pc, #240]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e18a:	930b      	str	r3, [sp, #44]	; 0x2c
    e18c:	f000 fa34 	bl	e5f8 <am_hal_flash_load_ui32>
    e190:	0323      	lsls	r3, r4, #12
    e192:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    e196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e19a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e19e:	4319      	orrs	r1, r3
    e1a0:	4836      	ldr	r0, [pc, #216]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e1a2:	f000 fa2d 	bl	e600 <am_hal_flash_store_ui32>
    e1a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e1a8:	f000 fbea 	bl	e980 <am_hal_interrupt_master_set>
    e1ac:	e72d      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e1ae:	2900      	cmp	r1, #0
    e1b0:	d03f      	beq.n	e232 <am_hal_cachectrl_control+0x292>
    e1b2:	680c      	ldr	r4, [r1, #0]
    e1b4:	2c07      	cmp	r4, #7
    e1b6:	d819      	bhi.n	e1ec <am_hal_cachectrl_control+0x24c>
    e1b8:	f000 fbde 	bl	e978 <am_hal_interrupt_master_disable>
    e1bc:	4603      	mov	r3, r0
    e1be:	482f      	ldr	r0, [pc, #188]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e1c0:	930c      	str	r3, [sp, #48]	; 0x30
    e1c2:	f000 fa19 	bl	e5f8 <am_hal_flash_load_ui32>
    e1c6:	0123      	lsls	r3, r4, #4
    e1c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e1cc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e1d0:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e1d4:	4319      	orrs	r1, r3
    e1d6:	4829      	ldr	r0, [pc, #164]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e1d8:	f000 fa12 	bl	e600 <am_hal_flash_store_ui32>
    e1dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    e1de:	f000 fbcf 	bl	e980 <am_hal_interrupt_master_set>
    e1e2:	e712      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e1e4:	b329      	cbz	r1, e232 <am_hal_cachectrl_control+0x292>
    e1e6:	680c      	ldr	r4, [r1, #0]
    e1e8:	2c0f      	cmp	r4, #15
    e1ea:	d926      	bls.n	e23a <am_hal_cachectrl_control+0x29a>
    e1ec:	2001      	movs	r0, #1
    e1ee:	e6f5      	b.n	dfdc <am_hal_cachectrl_control+0x3c>
    e1f0:	b1f9      	cbz	r1, e232 <am_hal_cachectrl_control+0x292>
    e1f2:	684a      	ldr	r2, [r1, #4]
    e1f4:	4b22      	ldr	r3, [pc, #136]	; (e280 <am_hal_cachectrl_control+0x2e0>)
    e1f6:	4013      	ands	r3, r2
    e1f8:	b9db      	cbnz	r3, e232 <am_hal_cachectrl_control+0x292>
    e1fa:	688b      	ldr	r3, [r1, #8]
    e1fc:	4820      	ldr	r0, [pc, #128]	; (e280 <am_hal_cachectrl_control+0x2e0>)
    e1fe:	4018      	ands	r0, r3
    e200:	b9b8      	cbnz	r0, e232 <am_hal_cachectrl_control+0x292>
    e202:	780c      	ldrb	r4, [r1, #0]
    e204:	b374      	cbz	r4, e264 <am_hal_cachectrl_control+0x2c4>
    e206:	2c01      	cmp	r4, #1
    e208:	d113      	bne.n	e232 <am_hal_cachectrl_control+0x292>
    e20a:	4c1b      	ldr	r4, [pc, #108]	; (e278 <am_hal_cachectrl_control+0x2d8>)
    e20c:	61a2      	str	r2, [r4, #24]
    e20e:	61e3      	str	r3, [r4, #28]
    e210:	784a      	ldrb	r2, [r1, #1]
    e212:	6823      	ldr	r3, [r4, #0]
    e214:	f362 03c3 	bfi	r3, r2, #3, #1
    e218:	6023      	str	r3, [r4, #0]
    e21a:	e6df      	b.n	dfdc <am_hal_cachectrl_control+0x3c>
    e21c:	2201      	movs	r2, #1
    e21e:	e6da      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    e220:	4b15      	ldr	r3, [pc, #84]	; (e278 <am_hal_cachectrl_control+0x2d8>)
    e222:	681b      	ldr	r3, [r3, #0]
    e224:	01db      	lsls	r3, r3, #7
    e226:	d406      	bmi.n	e236 <am_hal_cachectrl_control+0x296>
    e228:	2007      	movs	r0, #7
    e22a:	e6d7      	b.n	dfdc <am_hal_cachectrl_control+0x3c>
    e22c:	f44f 6288 	mov.w	r2, #1088	; 0x440
    e230:	e6d1      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    e232:	2006      	movs	r0, #6
    e234:	e6d2      	b.n	dfdc <am_hal_cachectrl_control+0x3c>
    e236:	2202      	movs	r2, #2
    e238:	e6cd      	b.n	dfd6 <am_hal_cachectrl_control+0x36>
    e23a:	f000 fb9d 	bl	e978 <am_hal_interrupt_master_disable>
    e23e:	4603      	mov	r3, r0
    e240:	480e      	ldr	r0, [pc, #56]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e242:	930d      	str	r3, [sp, #52]	; 0x34
    e244:	f000 f9d8 	bl	e5f8 <am_hal_flash_load_ui32>
    e248:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e24c:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    e250:	f021 010f 	bic.w	r1, r1, #15
    e254:	4321      	orrs	r1, r4
    e256:	4809      	ldr	r0, [pc, #36]	; (e27c <am_hal_cachectrl_control+0x2dc>)
    e258:	f000 f9d2 	bl	e600 <am_hal_flash_store_ui32>
    e25c:	980d      	ldr	r0, [sp, #52]	; 0x34
    e25e:	f000 fb8f 	bl	e980 <am_hal_interrupt_master_set>
    e262:	e6d2      	b.n	e00a <am_hal_cachectrl_control+0x6a>
    e264:	4c04      	ldr	r4, [pc, #16]	; (e278 <am_hal_cachectrl_control+0x2d8>)
    e266:	6122      	str	r2, [r4, #16]
    e268:	6163      	str	r3, [r4, #20]
    e26a:	784a      	ldrb	r2, [r1, #1]
    e26c:	6823      	ldr	r3, [r4, #0]
    e26e:	f362 0382 	bfi	r3, r2, #2, #1
    e272:	6023      	str	r3, [r4, #0]
    e274:	e6b2      	b.n	dfdc <am_hal_cachectrl_control+0x3c>
    e276:	bf00      	nop
    e278:	40018000 	.word	0x40018000
    e27c:	40018004 	.word	0x40018004
    e280:	f800000f 	.word	0xf800000f

0000e284 <am_hal_clkgen_control>:
    e284:	4b41      	ldr	r3, [pc, #260]	; (e38c <am_hal_clkgen_control+0x108>)
    e286:	681a      	ldr	r2, [r3, #0]
    e288:	b912      	cbnz	r2, e290 <am_hal_clkgen_control+0xc>
    e28a:	4a41      	ldr	r2, [pc, #260]	; (e390 <am_hal_clkgen_control+0x10c>)
    e28c:	6812      	ldr	r2, [r2, #0]
    e28e:	601a      	str	r2, [r3, #0]
    e290:	2809      	cmp	r0, #9
    e292:	d878      	bhi.n	e386 <am_hal_clkgen_control+0x102>
    e294:	e8df f000 	tbb	[pc, r0]
    e298:	261e160d 	.word	0x261e160d
    e29c:	524c423a 	.word	0x524c423a
    e2a0:	055a      	.short	0x055a
    e2a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2a6:	2000      	movs	r0, #0
    e2a8:	6a1a      	ldr	r2, [r3, #32]
    e2aa:	f36f 0200 	bfc	r2, #0, #1
    e2ae:	621a      	str	r2, [r3, #32]
    e2b0:	4770      	bx	lr
    e2b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2b6:	2200      	movs	r2, #0
    e2b8:	2147      	movs	r1, #71	; 0x47
    e2ba:	6159      	str	r1, [r3, #20]
    e2bc:	4610      	mov	r0, r2
    e2be:	619a      	str	r2, [r3, #24]
    e2c0:	615a      	str	r2, [r3, #20]
    e2c2:	4770      	bx	lr
    e2c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2c8:	2000      	movs	r0, #0
    e2ca:	68d3      	ldr	r3, [r2, #12]
    e2cc:	f023 0301 	bic.w	r3, r3, #1
    e2d0:	60d3      	str	r3, [r2, #12]
    e2d2:	4770      	bx	lr
    e2d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e2d8:	2000      	movs	r0, #0
    e2da:	68d3      	ldr	r3, [r2, #12]
    e2dc:	f023 0302 	bic.w	r3, r3, #2
    e2e0:	60d3      	str	r3, [r2, #12]
    e2e2:	4770      	bx	lr
    e2e4:	4a2b      	ldr	r2, [pc, #172]	; (e394 <am_hal_clkgen_control+0x110>)
    e2e6:	68d3      	ldr	r3, [r2, #12]
    e2e8:	b2db      	uxtb	r3, r3
    e2ea:	2b21      	cmp	r3, #33	; 0x21
    e2ec:	d106      	bne.n	e2fc <am_hal_clkgen_control+0x78>
    e2ee:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e2f2:	2101      	movs	r1, #1
    e2f4:	f361 2309 	bfi	r3, r1, #8, #2
    e2f8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e2fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e300:	2000      	movs	r0, #0
    e302:	68d3      	ldr	r3, [r2, #12]
    e304:	f043 0301 	orr.w	r3, r3, #1
    e308:	60d3      	str	r3, [r2, #12]
    e30a:	4770      	bx	lr
    e30c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e310:	2000      	movs	r0, #0
    e312:	68d3      	ldr	r3, [r2, #12]
    e314:	f043 0302 	orr.w	r3, r3, #2
    e318:	60d3      	str	r3, [r2, #12]
    e31a:	4770      	bx	lr
    e31c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e320:	2200      	movs	r2, #0
    e322:	2047      	movs	r0, #71	; 0x47
    e324:	2101      	movs	r1, #1
    e326:	6158      	str	r0, [r3, #20]
    e328:	6199      	str	r1, [r3, #24]
    e32a:	4610      	mov	r0, r2
    e32c:	615a      	str	r2, [r3, #20]
    e32e:	4770      	bx	lr
    e330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e334:	2000      	movs	r0, #0
    e336:	68da      	ldr	r2, [r3, #12]
    e338:	60da      	str	r2, [r3, #12]
    e33a:	4770      	bx	lr
    e33c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e340:	2000      	movs	r0, #0
    e342:	68d3      	ldr	r3, [r2, #12]
    e344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e348:	60d3      	str	r3, [r2, #12]
    e34a:	4770      	bx	lr
    e34c:	b510      	push	{r4, lr}
    e34e:	4a11      	ldr	r2, [pc, #68]	; (e394 <am_hal_clkgen_control+0x110>)
    e350:	68d3      	ldr	r3, [r2, #12]
    e352:	b2db      	uxtb	r3, r3
    e354:	2b21      	cmp	r3, #33	; 0x21
    e356:	460c      	mov	r4, r1
    e358:	d008      	beq.n	e36c <am_hal_clkgen_control+0xe8>
    e35a:	b194      	cbz	r4, e382 <am_hal_clkgen_control+0xfe>
    e35c:	6823      	ldr	r3, [r4, #0]
    e35e:	f043 0301 	orr.w	r3, r3, #1
    e362:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e366:	2000      	movs	r0, #0
    e368:	6213      	str	r3, [r2, #32]
    e36a:	bd10      	pop	{r4, pc}
    e36c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e370:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e374:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e378:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e37c:	f000 f8f2 	bl	e564 <am_hal_flash_delay>
    e380:	e7eb      	b.n	e35a <am_hal_clkgen_control+0xd6>
    e382:	4b05      	ldr	r3, [pc, #20]	; (e398 <am_hal_clkgen_control+0x114>)
    e384:	e7ed      	b.n	e362 <am_hal_clkgen_control+0xde>
    e386:	2006      	movs	r0, #6
    e388:	4770      	bx	lr
    e38a:	bf00      	nop
    e38c:	1000118c 	.word	0x1000118c
    e390:	4ffff000 	.word	0x4ffff000
    e394:	40020000 	.word	0x40020000
    e398:	0025b801 	.word	0x0025b801

0000e39c <am_hal_ctimer_config_single>:
    e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e39e:	b083      	sub	sp, #12
    e3a0:	460e      	mov	r6, r1
    e3a2:	4614      	mov	r4, r2
    e3a4:	0147      	lsls	r7, r0, #5
    e3a6:	4605      	mov	r5, r0
    e3a8:	f000 fae6 	bl	e978 <am_hal_interrupt_master_disable>
    e3ac:	4a19      	ldr	r2, [pc, #100]	; (e414 <am_hal_ctimer_config_single+0x78>)
    e3ae:	9001      	str	r0, [sp, #4]
    e3b0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e3b4:	58bb      	ldr	r3, [r7, r2]
    e3b6:	d021      	beq.n	e3fc <am_hal_ctimer_config_single+0x60>
    e3b8:	ea23 0306 	bic.w	r3, r3, r6
    e3bc:	1c71      	adds	r1, r6, #1
    e3be:	ea43 0304 	orr.w	r3, r3, r4
    e3c2:	d00c      	beq.n	e3de <am_hal_ctimer_config_single+0x42>
    e3c4:	50bb      	str	r3, [r7, r2]
    e3c6:	9801      	ldr	r0, [sp, #4]
    e3c8:	f000 fada 	bl	e980 <am_hal_interrupt_master_set>
    e3cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e3d0:	429e      	cmp	r6, r3
    e3d2:	d01c      	beq.n	e40e <am_hal_ctimer_config_single+0x72>
    e3d4:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e3d8:	d017      	beq.n	e40a <am_hal_ctimer_config_single+0x6e>
    e3da:	b003      	add	sp, #12
    e3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e3e2:	50bb      	str	r3, [r7, r2]
    e3e4:	9801      	ldr	r0, [sp, #4]
    e3e6:	f000 facb 	bl	e980 <am_hal_interrupt_master_set>
    e3ea:	2200      	movs	r2, #0
    e3ec:	4b0a      	ldr	r3, [pc, #40]	; (e418 <am_hal_ctimer_config_single+0x7c>)
    e3ee:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e3f2:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e3f6:	54ac      	strb	r4, [r5, r2]
    e3f8:	b003      	add	sp, #12
    e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3fc:	0424      	lsls	r4, r4, #16
    e3fe:	b29b      	uxth	r3, r3
    e400:	4323      	orrs	r3, r4
    e402:	50bb      	str	r3, [r7, r2]
    e404:	9801      	ldr	r0, [sp, #4]
    e406:	f000 fabb 	bl	e980 <am_hal_interrupt_master_set>
    e40a:	2201      	movs	r2, #1
    e40c:	e7ee      	b.n	e3ec <am_hal_ctimer_config_single+0x50>
    e40e:	2200      	movs	r2, #0
    e410:	e7ec      	b.n	e3ec <am_hal_ctimer_config_single+0x50>
    e412:	bf00      	nop
    e414:	4000800c 	.word	0x4000800c
    e418:	10001048 	.word	0x10001048

0000e41c <am_hal_ctimer_start>:
    e41c:	b570      	push	{r4, r5, r6, lr}
    e41e:	b082      	sub	sp, #8
    e420:	460c      	mov	r4, r1
    e422:	0146      	lsls	r6, r0, #5
    e424:	4605      	mov	r5, r0
    e426:	f000 faa7 	bl	e978 <am_hal_interrupt_master_disable>
    e42a:	4a0f      	ldr	r2, [pc, #60]	; (e468 <am_hal_ctimer_start+0x4c>)
    e42c:	9001      	str	r0, [sp, #4]
    e42e:	58b3      	ldr	r3, [r6, r2]
    e430:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e434:	ea23 0301 	bic.w	r3, r3, r1
    e438:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e43c:	430b      	orrs	r3, r1
    e43e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e442:	bf0c      	ite	eq
    e444:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e448:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e44c:	50b3      	str	r3, [r6, r2]
    e44e:	4b07      	ldr	r3, [pc, #28]	; (e46c <am_hal_ctimer_start+0x50>)
    e450:	9801      	ldr	r0, [sp, #4]
    e452:	bf0c      	ite	eq
    e454:	2101      	moveq	r1, #1
    e456:	2100      	movne	r1, #0
    e458:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e45c:	545c      	strb	r4, [r3, r1]
    e45e:	f000 fa8f 	bl	e980 <am_hal_interrupt_master_set>
    e462:	b002      	add	sp, #8
    e464:	bd70      	pop	{r4, r5, r6, pc}
    e466:	bf00      	nop
    e468:	4000800c 	.word	0x4000800c
    e46c:	10001048 	.word	0x10001048

0000e470 <am_hal_ctimer_period_set>:
    e470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e474:	b082      	sub	sp, #8
    e476:	4689      	mov	r9, r1
    e478:	4698      	mov	r8, r3
    e47a:	0147      	lsls	r7, r0, #5
    e47c:	4614      	mov	r4, r2
    e47e:	f000 fa7b 	bl	e978 <am_hal_interrupt_master_disable>
    e482:	f8df a094 	ldr.w	sl, [pc, #148]	; e518 <am_hal_ctimer_period_set+0xa8>
    e486:	9001      	str	r0, [sp, #4]
    e488:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e48c:	4d20      	ldr	r5, [pc, #128]	; (e510 <am_hal_ctimer_period_set+0xa0>)
    e48e:	4e21      	ldr	r6, [pc, #132]	; (e514 <am_hal_ctimer_period_set+0xa4>)
    e490:	f857 300a 	ldr.w	r3, [r7, sl]
    e494:	d01a      	beq.n	e4cc <am_hal_ctimer_period_set+0x5c>
    e496:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e49a:	2b80      	cmp	r3, #128	; 0x80
    e49c:	d01b      	beq.n	e4d6 <am_hal_ctimer_period_set+0x66>
    e49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4a2:	2000      	movs	r0, #0
    e4a4:	4591      	cmp	r9, r2
    e4a6:	4603      	mov	r3, r0
    e4a8:	d01e      	beq.n	e4e8 <am_hal_ctimer_period_set+0x78>
    e4aa:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e4ae:	d025      	beq.n	e4fc <am_hal_ctimer_period_set+0x8c>
    e4b0:	0c1b      	lsrs	r3, r3, #16
    e4b2:	b2a2      	uxth	r2, r4
    e4b4:	041b      	lsls	r3, r3, #16
    e4b6:	4310      	orrs	r0, r2
    e4b8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e4bc:	5178      	str	r0, [r7, r5]
    e4be:	51bb      	str	r3, [r7, r6]
    e4c0:	9801      	ldr	r0, [sp, #4]
    e4c2:	f000 fa5d 	bl	e980 <am_hal_interrupt_master_set>
    e4c6:	b002      	add	sp, #8
    e4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4cc:	0c1b      	lsrs	r3, r3, #16
    e4ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e4d2:	2b80      	cmp	r3, #128	; 0x80
    e4d4:	d111      	bne.n	e4fa <am_hal_ctimer_period_set+0x8a>
    e4d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e4da:	4591      	cmp	r9, r2
    e4dc:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e4e0:	4623      	mov	r3, r4
    e4e2:	ebc8 0404 	rsb	r4, r8, r4
    e4e6:	d1e0      	bne.n	e4aa <am_hal_ctimer_period_set+0x3a>
    e4e8:	b2a3      	uxth	r3, r4
    e4ea:	4318      	orrs	r0, r3
    e4ec:	5178      	str	r0, [r7, r5]
    e4ee:	9801      	ldr	r0, [sp, #4]
    e4f0:	f000 fa46 	bl	e980 <am_hal_interrupt_master_set>
    e4f4:	b002      	add	sp, #8
    e4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4fa:	2000      	movs	r0, #0
    e4fc:	b2a3      	uxth	r3, r4
    e4fe:	4318      	orrs	r0, r3
    e500:	51b8      	str	r0, [r7, r6]
    e502:	9801      	ldr	r0, [sp, #4]
    e504:	f000 fa3c 	bl	e980 <am_hal_interrupt_master_set>
    e508:	b002      	add	sp, #8
    e50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e50e:	bf00      	nop
    e510:	40008004 	.word	0x40008004
    e514:	40008008 	.word	0x40008008
    e518:	4000800c 	.word	0x4000800c

0000e51c <am_hal_ctimer_int_enable>:
    e51c:	b510      	push	{r4, lr}
    e51e:	b082      	sub	sp, #8
    e520:	4604      	mov	r4, r0
    e522:	f000 fa29 	bl	e978 <am_hal_interrupt_master_disable>
    e526:	4b06      	ldr	r3, [pc, #24]	; (e540 <am_hal_ctimer_int_enable+0x24>)
    e528:	9001      	str	r0, [sp, #4]
    e52a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e52e:	4314      	orrs	r4, r2
    e530:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e534:	9801      	ldr	r0, [sp, #4]
    e536:	f000 fa23 	bl	e980 <am_hal_interrupt_master_set>
    e53a:	b002      	add	sp, #8
    e53c:	bd10      	pop	{r4, pc}
    e53e:	bf00      	nop
    e540:	40008000 	.word	0x40008000

0000e544 <am_hal_ctimer_int_clear>:
    e544:	b510      	push	{r4, lr}
    e546:	b082      	sub	sp, #8
    e548:	4604      	mov	r4, r0
    e54a:	f000 fa15 	bl	e978 <am_hal_interrupt_master_disable>
    e54e:	4b04      	ldr	r3, [pc, #16]	; (e560 <am_hal_ctimer_int_clear+0x1c>)
    e550:	9001      	str	r0, [sp, #4]
    e552:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e556:	9801      	ldr	r0, [sp, #4]
    e558:	f000 fa12 	bl	e980 <am_hal_interrupt_master_set>
    e55c:	b002      	add	sp, #8
    e55e:	bd10      	pop	{r4, pc}
    e560:	40008000 	.word	0x40008000

0000e564 <am_hal_flash_delay>:
    e564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e56a:	075b      	lsls	r3, r3, #29
    e56c:	bf46      	itte	mi
    e56e:	0040      	lslmi	r0, r0, #1
    e570:	230e      	movmi	r3, #14
    e572:	230b      	movpl	r3, #11
    e574:	4298      	cmp	r0, r3
    e576:	d800      	bhi.n	e57a <am_hal_flash_delay+0x16>
    e578:	4770      	bx	lr
    e57a:	1ac0      	subs	r0, r0, r3
    e57c:	4b00      	ldr	r3, [pc, #0]	; (e580 <am_hal_flash_delay+0x1c>)
    e57e:	4718      	bx	r3
    e580:	0800009d 	.word	0x0800009d

0000e584 <am_hal_flash_delay_status_check>:
    e584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e588:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e58c:	460d      	mov	r5, r1
    e58e:	4616      	mov	r6, r2
    e590:	461f      	mov	r7, r3
    e592:	b1b4      	cbz	r4, e5c2 <am_hal_flash_delay_status_check+0x3e>
    e594:	4604      	mov	r4, r0
    e596:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e59a:	f8df 8058 	ldr.w	r8, [pc, #88]	; e5f4 <am_hal_flash_delay_status_check+0x70>
    e59e:	e009      	b.n	e5b4 <am_hal_flash_delay_status_check+0x30>
    e5a0:	b324      	cbz	r4, e5ec <am_hal_flash_delay_status_check+0x68>
    e5a2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e5a6:	f013 0f04 	tst.w	r3, #4
    e5aa:	bf14      	ite	ne
    e5ac:	2012      	movne	r0, #18
    e5ae:	2005      	moveq	r0, #5
    e5b0:	3c01      	subs	r4, #1
    e5b2:	47c0      	blx	r8
    e5b4:	682b      	ldr	r3, [r5, #0]
    e5b6:	4033      	ands	r3, r6
    e5b8:	429f      	cmp	r7, r3
    e5ba:	d1f1      	bne.n	e5a0 <am_hal_flash_delay_status_check+0x1c>
    e5bc:	2000      	movs	r0, #0
    e5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e5c2:	f8df 8030 	ldr.w	r8, [pc, #48]	; e5f4 <am_hal_flash_delay_status_check+0x70>
    e5c6:	4604      	mov	r4, r0
    e5c8:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e5cc:	e009      	b.n	e5e2 <am_hal_flash_delay_status_check+0x5e>
    e5ce:	b16c      	cbz	r4, e5ec <am_hal_flash_delay_status_check+0x68>
    e5d0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e5d4:	f013 0f04 	tst.w	r3, #4
    e5d8:	bf14      	ite	ne
    e5da:	2012      	movne	r0, #18
    e5dc:	2005      	moveq	r0, #5
    e5de:	3c01      	subs	r4, #1
    e5e0:	47c0      	blx	r8
    e5e2:	682b      	ldr	r3, [r5, #0]
    e5e4:	4033      	ands	r3, r6
    e5e6:	429f      	cmp	r7, r3
    e5e8:	d0f1      	beq.n	e5ce <am_hal_flash_delay_status_check+0x4a>
    e5ea:	e7e7      	b.n	e5bc <am_hal_flash_delay_status_check+0x38>
    e5ec:	2004      	movs	r0, #4
    e5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e5f2:	bf00      	nop
    e5f4:	0800009d 	.word	0x0800009d

0000e5f8 <am_hal_flash_load_ui32>:
    e5f8:	4b00      	ldr	r3, [pc, #0]	; (e5fc <am_hal_flash_load_ui32+0x4>)
    e5fa:	4718      	bx	r3
    e5fc:	08000075 	.word	0x08000075

0000e600 <am_hal_flash_store_ui32>:
    e600:	4b01      	ldr	r3, [pc, #4]	; (e608 <am_hal_flash_store_ui32+0x8>)
    e602:	f043 0301 	orr.w	r3, r3, #1
    e606:	4718      	bx	r3
    e608:	10001058 	.word	0x10001058

0000e60c <am_hal_gpio_pinconfig>:
    e60c:	2831      	cmp	r0, #49	; 0x31
    e60e:	d901      	bls.n	e614 <am_hal_gpio_pinconfig+0x8>
    e610:	2006      	movs	r0, #6
    e612:	4770      	bx	lr
    e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e618:	f001 0307 	and.w	r3, r1, #7
    e61c:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    e620:	b085      	sub	sp, #20
    e622:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e626:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e62a:	d014      	beq.n	e656 <am_hal_gpio_pinconfig+0x4a>
    e62c:	f3c1 1742 	ubfx	r7, r1, #5, #3
    e630:	1dbd      	adds	r5, r7, #6
    e632:	f005 0507 	and.w	r5, r5, #7
    e636:	2d03      	cmp	r5, #3
    e638:	f042 0201 	orr.w	r2, r2, #1
    e63c:	f200 80a7 	bhi.w	e78e <am_hal_gpio_pinconfig+0x182>
    e640:	4d82      	ldr	r5, [pc, #520]	; (e84c <am_hal_gpio_pinconfig+0x240>)
    e642:	5c2d      	ldrb	r5, [r5, r0]
    e644:	07ee      	lsls	r6, r5, #31
    e646:	d403      	bmi.n	e650 <am_hal_gpio_pinconfig+0x44>
    e648:	4881      	ldr	r0, [pc, #516]	; (e850 <am_hal_gpio_pinconfig+0x244>)
    e64a:	b005      	add	sp, #20
    e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e650:	3f02      	subs	r7, #2
    e652:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    e656:	2c00      	cmp	r4, #0
    e658:	f040 8091 	bne.w	e77e <am_hal_gpio_pinconfig+0x172>
    e65c:	4c7d      	ldr	r4, [pc, #500]	; (e854 <am_hal_gpio_pinconfig+0x248>)
    e65e:	4d7e      	ldr	r5, [pc, #504]	; (e858 <am_hal_gpio_pinconfig+0x24c>)
    e660:	5c24      	ldrb	r4, [r4, r0]
    e662:	5c2d      	ldrb	r5, [r5, r0]
    e664:	411c      	asrs	r4, r3
    e666:	f014 0f01 	tst.w	r4, #1
    e66a:	bf0c      	ite	eq
    e66c:	2400      	moveq	r4, #0
    e66e:	2402      	movne	r4, #2
    e670:	42ab      	cmp	r3, r5
    e672:	ea42 0204 	orr.w	r2, r2, r4
    e676:	f000 8096 	beq.w	e7a6 <am_hal_gpio_pinconfig+0x19a>
    e67a:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e67e:	105d      	asrs	r5, r3, #1
    e680:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e684:	00db      	lsls	r3, r3, #3
    e686:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    e68a:	f003 0408 	and.w	r4, r3, #8
    e68e:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e692:	f00e 060c 	and.w	r6, lr, #12
    e696:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e69a:	2e04      	cmp	r6, #4
    e69c:	ea43 0304 	orr.w	r3, r3, r4
    e6a0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e6a4:	462c      	mov	r4, r5
    e6a6:	f000 808b 	beq.w	e7c0 <am_hal_gpio_pinconfig+0x1b4>
    e6aa:	4c6c      	ldr	r4, [pc, #432]	; (e85c <am_hal_gpio_pinconfig+0x250>)
    e6ac:	6827      	ldr	r7, [r4, #0]
    e6ae:	1bcf      	subs	r7, r1, r7
    e6b0:	fab7 f787 	clz	r7, r7
    e6b4:	097f      	lsrs	r7, r7, #5
    e6b6:	f01e 0f60 	tst.w	lr, #96	; 0x60
    e6ba:	bf04      	itt	eq
    e6bc:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e6c0:	f364 0300 	bfieq	r3, r4, #0, #1
    e6c4:	0084      	lsls	r4, r0, #2
    e6c6:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e6ca:	2902      	cmp	r1, #2
    e6cc:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e6d0:	d078      	beq.n	e7c4 <am_hal_gpio_pinconfig+0x1b8>
    e6d2:	d87f      	bhi.n	e7d4 <am_hal_gpio_pinconfig+0x1c8>
    e6d4:	2901      	cmp	r1, #1
    e6d6:	f04f 0100 	mov.w	r1, #0
    e6da:	bf08      	it	eq
    e6dc:	f042 0204 	orreq.w	r2, r2, #4
    e6e0:	f005 0518 	and.w	r5, r5, #24
    e6e4:	9101      	str	r1, [sp, #4]
    e6e6:	f004 041c 	and.w	r4, r4, #28
    e6ea:	f020 0a03 	bic.w	sl, r0, #3
    e6ee:	f04f 090f 	mov.w	r9, #15
    e6f2:	fa09 f904 	lsl.w	r9, r9, r4
    e6f6:	0841      	lsrs	r1, r0, #1
    e6f8:	26ff      	movs	r6, #255	; 0xff
    e6fa:	fa03 f404 	lsl.w	r4, r3, r4
    e6fe:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e702:	40ae      	lsls	r6, r5
    e704:	9300      	str	r3, [sp, #0]
    e706:	fa02 f505 	lsl.w	r5, r2, r5
    e70a:	4683      	mov	fp, r0
    e70c:	f021 0803 	bic.w	r8, r1, #3
    e710:	f000 f932 	bl	e978 <am_hal_interrupt_master_disable>
    e714:	9b00      	ldr	r3, [sp, #0]
    e716:	9003      	str	r0, [sp, #12]
    e718:	ea6f 0909 	mvn.w	r9, r9
    e71c:	43f6      	mvns	r6, r6
    e71e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e722:	f8df e15c 	ldr.w	lr, [pc, #348]	; e880 <am_hal_gpio_pinconfig+0x274>
    e726:	4a4e      	ldr	r2, [pc, #312]	; (e860 <am_hal_gpio_pinconfig+0x254>)
    e728:	b15f      	cbz	r7, e742 <am_hal_gpio_pinconfig+0x136>
    e72a:	ea4f 07db 	mov.w	r7, fp, lsr #3
    e72e:	f00b 001f 	and.w	r0, fp, #31
    e732:	f007 0704 	and.w	r7, r7, #4
    e736:	f04f 0b01 	mov.w	fp, #1
    e73a:	494a      	ldr	r1, [pc, #296]	; (e864 <am_hal_gpio_pinconfig+0x258>)
    e73c:	fa0b f000 	lsl.w	r0, fp, r0
    e740:	5078      	str	r0, [r7, r1]
    e742:	4849      	ldr	r0, [pc, #292]	; (e868 <am_hal_gpio_pinconfig+0x25c>)
    e744:	2773      	movs	r7, #115	; 0x73
    e746:	6607      	str	r7, [r0, #96]	; 0x60
    e748:	681f      	ldr	r7, [r3, #0]
    e74a:	4037      	ands	r7, r6
    e74c:	433d      	orrs	r5, r7
    e74e:	601d      	str	r5, [r3, #0]
    e750:	f858 300e 	ldr.w	r3, [r8, lr]
    e754:	ea09 0303 	and.w	r3, r9, r3
    e758:	4323      	orrs	r3, r4
    e75a:	f848 300e 	str.w	r3, [r8, lr]
    e75e:	f85a 3002 	ldr.w	r3, [sl, r2]
    e762:	401e      	ands	r6, r3
    e764:	9b01      	ldr	r3, [sp, #4]
    e766:	2400      	movs	r4, #0
    e768:	431e      	orrs	r6, r3
    e76a:	f84a 6002 	str.w	r6, [sl, r2]
    e76e:	6604      	str	r4, [r0, #96]	; 0x60
    e770:	9803      	ldr	r0, [sp, #12]
    e772:	f000 f905 	bl	e980 <am_hal_interrupt_master_set>
    e776:	4620      	mov	r0, r4
    e778:	b005      	add	sp, #20
    e77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e77e:	2c01      	cmp	r4, #1
    e780:	d017      	beq.n	e7b2 <am_hal_gpio_pinconfig+0x1a6>
    e782:	2c02      	cmp	r4, #2
    e784:	d035      	beq.n	e7f2 <am_hal_gpio_pinconfig+0x1e6>
    e786:	4839      	ldr	r0, [pc, #228]	; (e86c <am_hal_gpio_pinconfig+0x260>)
    e788:	b005      	add	sp, #20
    e78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e78e:	2ec0      	cmp	r6, #192	; 0xc0
    e790:	d02a      	beq.n	e7e8 <am_hal_gpio_pinconfig+0x1dc>
    e792:	2e20      	cmp	r6, #32
    e794:	f47f af5f 	bne.w	e656 <am_hal_gpio_pinconfig+0x4a>
    e798:	2814      	cmp	r0, #20
    e79a:	f43f af55 	beq.w	e648 <am_hal_gpio_pinconfig+0x3c>
    e79e:	2c00      	cmp	r4, #0
    e7a0:	f43f af5c 	beq.w	e65c <am_hal_gpio_pinconfig+0x50>
    e7a4:	e7eb      	b.n	e77e <am_hal_gpio_pinconfig+0x172>
    e7a6:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e7aa:	2c07      	cmp	r4, #7
    e7ac:	d128      	bne.n	e800 <am_hal_gpio_pinconfig+0x1f4>
    e7ae:	4830      	ldr	r0, [pc, #192]	; (e870 <am_hal_gpio_pinconfig+0x264>)
    e7b0:	e74b      	b.n	e64a <am_hal_gpio_pinconfig+0x3e>
    e7b2:	4c26      	ldr	r4, [pc, #152]	; (e84c <am_hal_gpio_pinconfig+0x240>)
    e7b4:	5c24      	ldrb	r4, [r4, r0]
    e7b6:	07a5      	lsls	r5, r4, #30
    e7b8:	d5e5      	bpl.n	e786 <am_hal_gpio_pinconfig+0x17a>
    e7ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e7be:	e74d      	b.n	e65c <am_hal_gpio_pinconfig+0x50>
    e7c0:	2701      	movs	r7, #1
    e7c2:	e778      	b.n	e6b6 <am_hal_gpio_pinconfig+0xaa>
    e7c4:	f005 0518 	and.w	r5, r5, #24
    e7c8:	f04f 0801 	mov.w	r8, #1
    e7cc:	fa08 f105 	lsl.w	r1, r8, r5
    e7d0:	9101      	str	r1, [sp, #4]
    e7d2:	e788      	b.n	e6e6 <am_hal_gpio_pinconfig+0xda>
    e7d4:	f005 0518 	and.w	r5, r5, #24
    e7d8:	f04f 0801 	mov.w	r8, #1
    e7dc:	fa08 f105 	lsl.w	r1, r8, r5
    e7e0:	f042 0204 	orr.w	r2, r2, #4
    e7e4:	9101      	str	r1, [sp, #4]
    e7e6:	e77e      	b.n	e6e6 <am_hal_gpio_pinconfig+0xda>
    e7e8:	2814      	cmp	r0, #20
    e7ea:	f43f af34 	beq.w	e656 <am_hal_gpio_pinconfig+0x4a>
    e7ee:	4821      	ldr	r0, [pc, #132]	; (e874 <am_hal_gpio_pinconfig+0x268>)
    e7f0:	e72b      	b.n	e64a <am_hal_gpio_pinconfig+0x3e>
    e7f2:	4c16      	ldr	r4, [pc, #88]	; (e84c <am_hal_gpio_pinconfig+0x240>)
    e7f4:	5c24      	ldrb	r4, [r4, r0]
    e7f6:	0764      	lsls	r4, r4, #29
    e7f8:	d5c5      	bpl.n	e786 <am_hal_gpio_pinconfig+0x17a>
    e7fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e7fe:	e72d      	b.n	e65c <am_hal_gpio_pinconfig+0x50>
    e800:	4d1d      	ldr	r5, [pc, #116]	; (e878 <am_hal_gpio_pinconfig+0x26c>)
    e802:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e806:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e80a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e80e:	429e      	cmp	r6, r3
    e810:	d00c      	beq.n	e82c <am_hal_gpio_pinconfig+0x220>
    e812:	0084      	lsls	r4, r0, #2
    e814:	4425      	add	r5, r4
    e816:	786e      	ldrb	r6, [r5, #1]
    e818:	429e      	cmp	r6, r3
    e81a:	d012      	beq.n	e842 <am_hal_gpio_pinconfig+0x236>
    e81c:	78ae      	ldrb	r6, [r5, #2]
    e81e:	429e      	cmp	r6, r3
    e820:	d00d      	beq.n	e83e <am_hal_gpio_pinconfig+0x232>
    e822:	78ed      	ldrb	r5, [r5, #3]
    e824:	429d      	cmp	r5, r3
    e826:	d00e      	beq.n	e846 <am_hal_gpio_pinconfig+0x23a>
    e828:	4814      	ldr	r0, [pc, #80]	; (e87c <am_hal_gpio_pinconfig+0x270>)
    e82a:	e70e      	b.n	e64a <am_hal_gpio_pinconfig+0x3e>
    e82c:	2300      	movs	r3, #0
    e82e:	0084      	lsls	r4, r0, #2
    e830:	005b      	lsls	r3, r3, #1
    e832:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e836:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e83a:	2700      	movs	r7, #0
    e83c:	e743      	b.n	e6c6 <am_hal_gpio_pinconfig+0xba>
    e83e:	2302      	movs	r3, #2
    e840:	e7f6      	b.n	e830 <am_hal_gpio_pinconfig+0x224>
    e842:	2301      	movs	r3, #1
    e844:	e7f4      	b.n	e830 <am_hal_gpio_pinconfig+0x224>
    e846:	2303      	movs	r3, #3
    e848:	e7f2      	b.n	e830 <am_hal_gpio_pinconfig+0x224>
    e84a:	bf00      	nop
    e84c:	0001059c 	.word	0x0001059c
    e850:	08000100 	.word	0x08000100
    e854:	00010698 	.word	0x00010698
    e858:	000106d4 	.word	0x000106d4
    e85c:	000106cc 	.word	0x000106cc
    e860:	400100e0 	.word	0x400100e0
    e864:	400100b4 	.word	0x400100b4
    e868:	40010000 	.word	0x40010000
    e86c:	08000102 	.word	0x08000102
    e870:	08000103 	.word	0x08000103
    e874:	08000101 	.word	0x08000101
    e878:	000105d0 	.word	0x000105d0
    e87c:	08000104 	.word	0x08000104
    e880:	40010040 	.word	0x40010040

0000e884 <am_hal_gpio_state_read>:
    e884:	b1ca      	cbz	r2, e8ba <am_hal_gpio_state_read+0x36>
    e886:	2831      	cmp	r0, #49	; 0x31
    e888:	d904      	bls.n	e894 <am_hal_gpio_state_read+0x10>
    e88a:	f04f 33ff 	mov.w	r3, #4294967295
    e88e:	6013      	str	r3, [r2, #0]
    e890:	2005      	movs	r0, #5
    e892:	4770      	bx	lr
    e894:	08c3      	lsrs	r3, r0, #3
    e896:	2901      	cmp	r1, #1
    e898:	f003 0304 	and.w	r3, r3, #4
    e89c:	f000 001f 	and.w	r0, r0, #31
    e8a0:	d00d      	beq.n	e8be <am_hal_gpio_state_read+0x3a>
    e8a2:	d313      	bcc.n	e8cc <am_hal_gpio_state_read+0x48>
    e8a4:	2902      	cmp	r1, #2
    e8a6:	d108      	bne.n	e8ba <am_hal_gpio_state_read+0x36>
    e8a8:	490c      	ldr	r1, [pc, #48]	; (e8dc <am_hal_gpio_state_read+0x58>)
    e8aa:	585b      	ldr	r3, [r3, r1]
    e8ac:	fa23 f000 	lsr.w	r0, r3, r0
    e8b0:	f000 0001 	and.w	r0, r0, #1
    e8b4:	6010      	str	r0, [r2, #0]
    e8b6:	2000      	movs	r0, #0
    e8b8:	4770      	bx	lr
    e8ba:	2006      	movs	r0, #6
    e8bc:	4770      	bx	lr
    e8be:	4908      	ldr	r1, [pc, #32]	; (e8e0 <am_hal_gpio_state_read+0x5c>)
    e8c0:	585b      	ldr	r3, [r3, r1]
    e8c2:	fa23 f000 	lsr.w	r0, r3, r0
    e8c6:	f000 0001 	and.w	r0, r0, #1
    e8ca:	e7f3      	b.n	e8b4 <am_hal_gpio_state_read+0x30>
    e8cc:	4905      	ldr	r1, [pc, #20]	; (e8e4 <am_hal_gpio_state_read+0x60>)
    e8ce:	585b      	ldr	r3, [r3, r1]
    e8d0:	fa23 f000 	lsr.w	r0, r3, r0
    e8d4:	f000 0001 	and.w	r0, r0, #1
    e8d8:	e7ec      	b.n	e8b4 <am_hal_gpio_state_read+0x30>
    e8da:	bf00      	nop
    e8dc:	400100a0 	.word	0x400100a0
    e8e0:	40010088 	.word	0x40010088
    e8e4:	40010080 	.word	0x40010080

0000e8e8 <am_hal_gpio_state_write>:
    e8e8:	2831      	cmp	r0, #49	; 0x31
    e8ea:	d901      	bls.n	e8f0 <am_hal_gpio_state_write+0x8>
    e8ec:	2005      	movs	r0, #5
    e8ee:	4770      	bx	lr
    e8f0:	2905      	cmp	r1, #5
    e8f2:	d901      	bls.n	e8f8 <am_hal_gpio_state_write+0x10>
    e8f4:	2006      	movs	r0, #6
    e8f6:	4770      	bx	lr
    e8f8:	b570      	push	{r4, r5, r6, lr}
    e8fa:	f000 031f 	and.w	r3, r0, #31
    e8fe:	b082      	sub	sp, #8
    e900:	08c0      	lsrs	r0, r0, #3
    e902:	2201      	movs	r2, #1
    e904:	460d      	mov	r5, r1
    e906:	f000 0404 	and.w	r4, r0, #4
    e90a:	fa02 f603 	lsl.w	r6, r2, r3
    e90e:	f000 f833 	bl	e978 <am_hal_interrupt_master_disable>
    e912:	1e69      	subs	r1, r5, #1
    e914:	9001      	str	r0, [sp, #4]
    e916:	2904      	cmp	r1, #4
    e918:	d817      	bhi.n	e94a <am_hal_gpio_state_write+0x62>
    e91a:	e8df f001 	tbb	[pc, r1]
    e91e:	0e13      	.short	0x0e13
    e920:	030b      	.short	0x030b
    e922:	19          	.byte	0x19
    e923:	00          	.byte	0x00
    e924:	4b0d      	ldr	r3, [pc, #52]	; (e95c <am_hal_gpio_state_write+0x74>)
    e926:	50e6      	str	r6, [r4, r3]
    e928:	9801      	ldr	r0, [sp, #4]
    e92a:	f000 f829 	bl	e980 <am_hal_interrupt_master_set>
    e92e:	2000      	movs	r0, #0
    e930:	b002      	add	sp, #8
    e932:	bd70      	pop	{r4, r5, r6, pc}
    e934:	4b0a      	ldr	r3, [pc, #40]	; (e960 <am_hal_gpio_state_write+0x78>)
    e936:	50e6      	str	r6, [r4, r3]
    e938:	e7f6      	b.n	e928 <am_hal_gpio_state_write+0x40>
    e93a:	4a0a      	ldr	r2, [pc, #40]	; (e964 <am_hal_gpio_state_write+0x7c>)
    e93c:	58a3      	ldr	r3, [r4, r2]
    e93e:	4073      	eors	r3, r6
    e940:	50a3      	str	r3, [r4, r2]
    e942:	e7f1      	b.n	e928 <am_hal_gpio_state_write+0x40>
    e944:	4b08      	ldr	r3, [pc, #32]	; (e968 <am_hal_gpio_state_write+0x80>)
    e946:	50e6      	str	r6, [r4, r3]
    e948:	e7ee      	b.n	e928 <am_hal_gpio_state_write+0x40>
    e94a:	4b08      	ldr	r3, [pc, #32]	; (e96c <am_hal_gpio_state_write+0x84>)
    e94c:	50e6      	str	r6, [r4, r3]
    e94e:	e7eb      	b.n	e928 <am_hal_gpio_state_write+0x40>
    e950:	4a03      	ldr	r2, [pc, #12]	; (e960 <am_hal_gpio_state_write+0x78>)
    e952:	58a3      	ldr	r3, [r4, r2]
    e954:	4073      	eors	r3, r6
    e956:	50a3      	str	r3, [r4, r2]
    e958:	e7e6      	b.n	e928 <am_hal_gpio_state_write+0x40>
    e95a:	bf00      	nop
    e95c:	400100a8 	.word	0x400100a8
    e960:	400100b4 	.word	0x400100b4
    e964:	40010088 	.word	0x40010088
    e968:	40010090 	.word	0x40010090
    e96c:	40010098 	.word	0x40010098

0000e970 <am_hal_interrupt_master_enable>:
    e970:	f3ef 8010 	mrs	r0, PRIMASK
    e974:	b662      	cpsie	i
    e976:	4770      	bx	lr

0000e978 <am_hal_interrupt_master_disable>:
    e978:	f3ef 8010 	mrs	r0, PRIMASK
    e97c:	b672      	cpsid	i
    e97e:	4770      	bx	lr

0000e980 <am_hal_interrupt_master_set>:
    e980:	f380 8810 	msr	PRIMASK, r0
    e984:	4770      	bx	lr
    e986:	bf00      	nop

0000e988 <internal_iom_reset_on_error>:
    e988:	b570      	push	{r4, r5, r6, lr}
    e98a:	6844      	ldr	r4, [r0, #4]
    e98c:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e990:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e994:	3404      	adds	r4, #4
    e996:	0324      	lsls	r4, r4, #12
    e998:	2300      	movs	r3, #0
    e99a:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e99e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e9a2:	050b      	lsls	r3, r1, #20
    e9a4:	d52a      	bpl.n	e9fc <internal_iom_reset_on_error+0x74>
    e9a6:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e9aa:	079e      	lsls	r6, r3, #30
    e9ac:	d450      	bmi.n	ea50 <internal_iom_reset_on_error+0xc8>
    e9ae:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9b2:	079a      	lsls	r2, r3, #30
    e9b4:	d508      	bpl.n	e9c8 <internal_iom_reset_on_error+0x40>
    e9b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e9ba:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e9be:	2b03      	cmp	r3, #3
    e9c0:	d9f5      	bls.n	e9ae <internal_iom_reset_on_error+0x26>
    e9c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9c6:	e7f6      	b.n	e9b6 <internal_iom_reset_on_error+0x2e>
    e9c8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9cc:	f003 0306 	and.w	r3, r3, #6
    e9d0:	2b04      	cmp	r3, #4
    e9d2:	d1f9      	bne.n	e9c8 <internal_iom_reset_on_error+0x40>
    e9d4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e9d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e9dc:	b173      	cbz	r3, e9fc <internal_iom_reset_on_error+0x74>
    e9de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e9e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e9e6:	2b03      	cmp	r3, #3
    e9e8:	d9f4      	bls.n	e9d4 <internal_iom_reset_on_error+0x4c>
    e9ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e9ee:	e7f6      	b.n	e9de <internal_iom_reset_on_error+0x56>
    e9f0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e9f4:	f003 0306 	and.w	r3, r3, #6
    e9f8:	2b04      	cmp	r3, #4
    e9fa:	d1f9      	bne.n	e9f0 <internal_iom_reset_on_error+0x68>
    e9fc:	06cb      	lsls	r3, r1, #27
    e9fe:	d520      	bpl.n	ea42 <internal_iom_reset_on_error+0xba>
    ea00:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ea04:	f003 0306 	and.w	r3, r3, #6
    ea08:	2b04      	cmp	r3, #4
    ea0a:	d1f9      	bne.n	ea00 <internal_iom_reset_on_error+0x78>
    ea0c:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ea10:	f36f 1304 	bfc	r3, #4, #1
    ea14:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ea18:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    ea1c:	f36f 0341 	bfc	r3, #1, #1
    ea20:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    ea24:	0040      	lsls	r0, r0, #1
    ea26:	f7ff fd9d 	bl	e564 <am_hal_flash_delay>
    ea2a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    ea2e:	f043 0302 	orr.w	r3, r3, #2
    ea32:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    ea36:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ea3a:	f043 0310 	orr.w	r3, r3, #16
    ea3e:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ea42:	f04f 33ff 	mov.w	r3, #4294967295
    ea46:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ea4a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    ea4e:	bd70      	pop	{r4, r5, r6, pc}
    ea50:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    ea54:	4e07      	ldr	r6, [pc, #28]	; (ea74 <internal_iom_reset_on_error+0xec>)
    ea56:	2a00      	cmp	r2, #0
    ea58:	d0ca      	beq.n	e9f0 <internal_iom_reset_on_error+0x68>
    ea5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ea5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ea62:	2b03      	cmp	r3, #3
    ea64:	d9f9      	bls.n	ea5a <internal_iom_reset_on_error+0xd2>
    ea66:	2a04      	cmp	r2, #4
    ea68:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    ea6c:	d9c0      	bls.n	e9f0 <internal_iom_reset_on_error+0x68>
    ea6e:	3a04      	subs	r2, #4
    ea70:	e7f1      	b.n	ea56 <internal_iom_reset_on_error+0xce>
    ea72:	bf00      	nop
    ea74:	deadbeef 	.word	0xdeadbeef

0000ea78 <am_hal_iom_initialize>:
    ea78:	2805      	cmp	r0, #5
    ea7a:	d901      	bls.n	ea80 <am_hal_iom_initialize+0x8>
    ea7c:	2005      	movs	r0, #5
    ea7e:	4770      	bx	lr
    ea80:	b1e1      	cbz	r1, eabc <am_hal_iom_initialize+0x44>
    ea82:	b4f0      	push	{r4, r5, r6, r7}
    ea84:	f640 049c 	movw	r4, #2204	; 0x89c
    ea88:	4e0d      	ldr	r6, [pc, #52]	; (eac0 <am_hal_iom_initialize+0x48>)
    ea8a:	fb04 f400 	mul.w	r4, r4, r0
    ea8e:	1935      	adds	r5, r6, r4
    ea90:	4602      	mov	r2, r0
    ea92:	78e8      	ldrb	r0, [r5, #3]
    ea94:	f010 0301 	ands.w	r3, r0, #1
    ea98:	d002      	beq.n	eaa0 <am_hal_iom_initialize+0x28>
    ea9a:	2007      	movs	r0, #7
    ea9c:	bcf0      	pop	{r4, r5, r6, r7}
    ea9e:	4770      	bx	lr
    eaa0:	f040 0001 	orr.w	r0, r0, #1
    eaa4:	f363 0041 	bfi	r0, r3, #1, #1
    eaa8:	70e8      	strb	r0, [r5, #3]
    eaaa:	5937      	ldr	r7, [r6, r4]
    eaac:	4805      	ldr	r0, [pc, #20]	; (eac4 <am_hal_iom_initialize+0x4c>)
    eaae:	f360 0717 	bfi	r7, r0, #0, #24
    eab2:	5137      	str	r7, [r6, r4]
    eab4:	4618      	mov	r0, r3
    eab6:	606a      	str	r2, [r5, #4]
    eab8:	600d      	str	r5, [r1, #0]
    eaba:	e7ef      	b.n	ea9c <am_hal_iom_initialize+0x24>
    eabc:	2006      	movs	r0, #6
    eabe:	4770      	bx	lr
    eac0:	10001768 	.word	0x10001768
    eac4:	00123456 	.word	0x00123456

0000eac8 <am_hal_iom_enable>:
    eac8:	b128      	cbz	r0, ead6 <am_hal_iom_enable+0xe>
    eaca:	6803      	ldr	r3, [r0, #0]
    eacc:	4a34      	ldr	r2, [pc, #208]	; (eba0 <am_hal_iom_enable+0xd8>)
    eace:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ead2:	4293      	cmp	r3, r2
    ead4:	d001      	beq.n	eada <am_hal_iom_enable+0x12>
    ead6:	2002      	movs	r0, #2
    ead8:	4770      	bx	lr
    eada:	78c3      	ldrb	r3, [r0, #3]
    eadc:	079b      	lsls	r3, r3, #30
    eade:	d45d      	bmi.n	eb9c <am_hal_iom_enable+0xd4>
    eae0:	6843      	ldr	r3, [r0, #4]
    eae2:	7a01      	ldrb	r1, [r0, #8]
    eae4:	b570      	push	{r4, r5, r6, lr}
    eae6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eaea:	3304      	adds	r3, #4
    eaec:	031b      	lsls	r3, r3, #12
    eaee:	3100      	adds	r1, #0
    eaf0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    eaf4:	bf18      	it	ne
    eaf6:	2101      	movne	r1, #1
    eaf8:	f3c2 0242 	ubfx	r2, r2, #1, #3
    eafc:	4291      	cmp	r1, r2
    eafe:	bf0c      	ite	eq
    eb00:	2201      	moveq	r2, #1
    eb02:	2210      	movne	r2, #16
    eb04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    eb08:	68c3      	ldr	r3, [r0, #12]
    eb0a:	b084      	sub	sp, #16
    eb0c:	4604      	mov	r4, r0
    eb0e:	2b00      	cmp	r3, #0
    eb10:	d039      	beq.n	eb86 <am_hal_iom_enable+0xbe>
    eb12:	6843      	ldr	r3, [r0, #4]
    eb14:	4923      	ldr	r1, [pc, #140]	; (eba4 <am_hal_iom_enable+0xdc>)
    eb16:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb1a:	3304      	adds	r3, #4
    eb1c:	031a      	lsls	r2, r3, #12
    eb1e:	2300      	movs	r3, #0
    eb20:	6243      	str	r3, [r0, #36]	; 0x24
    eb22:	61c3      	str	r3, [r0, #28]
    eb24:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    eb28:	6902      	ldr	r2, [r0, #16]
    eb2a:	6840      	ldr	r0, [r0, #4]
    eb2c:	68e6      	ldr	r6, [r4, #12]
    eb2e:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    eb32:	2501      	movs	r5, #1
    eb34:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    eb38:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    eb3c:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    eb40:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    eb44:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    eb48:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    eb4c:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    eb50:	6223      	str	r3, [r4, #32]
    eb52:	b2c0      	uxtb	r0, r0
    eb54:	fa22 f305 	lsr.w	r3, r2, r5
    eb58:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    eb5c:	f604 0228 	addw	r2, r4, #2088	; 0x828
    eb60:	a901      	add	r1, sp, #4
    eb62:	9301      	str	r3, [sp, #4]
    eb64:	9602      	str	r6, [sp, #8]
    eb66:	f88d 500c 	strb.w	r5, [sp, #12]
    eb6a:	f001 fa49 	bl	10000 <am_hal_cmdq_init>
    eb6e:	6863      	ldr	r3, [r4, #4]
    eb70:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb74:	3304      	adds	r3, #4
    eb76:	031b      	lsls	r3, r3, #12
    eb78:	b960      	cbnz	r0, eb94 <am_hal_iom_enable+0xcc>
    eb7a:	f44f 7180 	mov.w	r1, #256	; 0x100
    eb7e:	2202      	movs	r2, #2
    eb80:	6221      	str	r1, [r4, #32]
    eb82:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    eb86:	78e3      	ldrb	r3, [r4, #3]
    eb88:	f043 0302 	orr.w	r3, r3, #2
    eb8c:	70e3      	strb	r3, [r4, #3]
    eb8e:	2000      	movs	r0, #0
    eb90:	b004      	add	sp, #16
    eb92:	bd70      	pop	{r4, r5, r6, pc}
    eb94:	2202      	movs	r2, #2
    eb96:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    eb9a:	e7f9      	b.n	eb90 <am_hal_iom_enable+0xc8>
    eb9c:	2000      	movs	r0, #0
    eb9e:	4770      	bx	lr
    eba0:	01123456 	.word	0x01123456
    eba4:	00800040 	.word	0x00800040

0000eba8 <am_hal_iom_power_ctrl>:
    eba8:	b140      	cbz	r0, ebbc <am_hal_iom_power_ctrl+0x14>
    ebaa:	b538      	push	{r3, r4, r5, lr}
    ebac:	6803      	ldr	r3, [r0, #0]
    ebae:	4c85      	ldr	r4, [pc, #532]	; (edc4 <am_hal_iom_power_ctrl+0x21c>)
    ebb0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ebb4:	42a3      	cmp	r3, r4
    ebb6:	d003      	beq.n	ebc0 <am_hal_iom_power_ctrl+0x18>
    ebb8:	2002      	movs	r0, #2
    ebba:	bd38      	pop	{r3, r4, r5, pc}
    ebbc:	2002      	movs	r0, #2
    ebbe:	4770      	bx	lr
    ebc0:	4604      	mov	r4, r0
    ebc2:	4615      	mov	r5, r2
    ebc4:	b199      	cbz	r1, ebee <am_hal_iom_power_ctrl+0x46>
    ebc6:	2902      	cmp	r1, #2
    ebc8:	d80f      	bhi.n	ebea <am_hal_iom_power_ctrl+0x42>
    ebca:	78c3      	ldrb	r3, [r0, #3]
    ebcc:	6840      	ldr	r0, [r0, #4]
    ebce:	079a      	lsls	r2, r3, #30
    ebd0:	d519      	bpl.n	ec06 <am_hal_iom_power_ctrl+0x5e>
    ebd2:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ebd6:	3304      	adds	r3, #4
    ebd8:	031b      	lsls	r3, r3, #12
    ebda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    ebde:	f003 0306 	and.w	r3, r3, #6
    ebe2:	2b04      	cmp	r3, #4
    ebe4:	d00c      	beq.n	ec00 <am_hal_iom_power_ctrl+0x58>
    ebe6:	2003      	movs	r0, #3
    ebe8:	bd38      	pop	{r3, r4, r5, pc}
    ebea:	2006      	movs	r0, #6
    ebec:	bd38      	pop	{r3, r4, r5, pc}
    ebee:	2a00      	cmp	r2, #0
    ebf0:	f000 80cf 	beq.w	ed92 <am_hal_iom_power_ctrl+0x1ea>
    ebf4:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d146      	bne.n	ec8a <am_hal_iom_power_ctrl+0xe2>
    ebfc:	2007      	movs	r0, #7
    ebfe:	bd38      	pop	{r3, r4, r5, pc}
    ec00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ec02:	2b00      	cmp	r3, #0
    ec04:	d1ef      	bne.n	ebe6 <am_hal_iom_power_ctrl+0x3e>
    ec06:	b3d5      	cbz	r5, ec7e <am_hal_iom_power_ctrl+0xd6>
    ec08:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ec0c:	3304      	adds	r3, #4
    ec0e:	031b      	lsls	r3, r3, #12
    ec10:	2201      	movs	r2, #1
    ec12:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    ec16:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    ec1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ec1e:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    ec22:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    ec26:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    ec2a:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    ec2e:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    ec32:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    ec36:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    ec3a:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    ec3e:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    ec42:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    ec46:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    ec4a:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    ec4e:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    ec52:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    ec56:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    ec5a:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    ec5e:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    ec62:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    ec66:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    ec6a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    ec6e:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    ec72:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    ec76:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    ec7a:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    ec7e:	3002      	adds	r0, #2
    ec80:	b2c0      	uxtb	r0, r0
    ec82:	f000 fca1 	bl	f5c8 <am_hal_pwrctrl_periph_disable>
    ec86:	2000      	movs	r0, #0
    ec88:	bd38      	pop	{r3, r4, r5, pc}
    ec8a:	6843      	ldr	r3, [r0, #4]
    ec8c:	1c98      	adds	r0, r3, #2
    ec8e:	b2c0      	uxtb	r0, r0
    ec90:	f000 fc70 	bl	f574 <am_hal_pwrctrl_periph_enable>
    ec94:	6863      	ldr	r3, [r4, #4]
    ec96:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    ec9a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ec9e:	3304      	adds	r3, #4
    eca0:	031b      	lsls	r3, r3, #12
    eca2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    eca6:	6863      	ldr	r3, [r4, #4]
    eca8:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    ecac:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecb0:	3304      	adds	r3, #4
    ecb2:	031b      	lsls	r3, r3, #12
    ecb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ecb8:	6863      	ldr	r3, [r4, #4]
    ecba:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    ecbe:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecc2:	3304      	adds	r3, #4
    ecc4:	031b      	lsls	r3, r3, #12
    ecc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ecca:	6863      	ldr	r3, [r4, #4]
    eccc:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    ecd0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecd4:	3304      	adds	r3, #4
    ecd6:	031b      	lsls	r3, r3, #12
    ecd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    ecdc:	6863      	ldr	r3, [r4, #4]
    ecde:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    ece2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ece6:	3304      	adds	r3, #4
    ece8:	031b      	lsls	r3, r3, #12
    ecea:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    ecee:	6863      	ldr	r3, [r4, #4]
    ecf0:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    ecf4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ecf8:	3304      	adds	r3, #4
    ecfa:	031b      	lsls	r3, r3, #12
    ecfc:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    ed00:	6863      	ldr	r3, [r4, #4]
    ed02:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    ed06:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed0a:	3304      	adds	r3, #4
    ed0c:	031b      	lsls	r3, r3, #12
    ed0e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    ed12:	6863      	ldr	r3, [r4, #4]
    ed14:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    ed18:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed1c:	3304      	adds	r3, #4
    ed1e:	031b      	lsls	r3, r3, #12
    ed20:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    ed24:	6863      	ldr	r3, [r4, #4]
    ed26:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    ed2a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed2e:	3304      	adds	r3, #4
    ed30:	031b      	lsls	r3, r3, #12
    ed32:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ed36:	6863      	ldr	r3, [r4, #4]
    ed38:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    ed3c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed40:	3304      	adds	r3, #4
    ed42:	031b      	lsls	r3, r3, #12
    ed44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ed48:	6863      	ldr	r3, [r4, #4]
    ed4a:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    ed4e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed52:	3304      	adds	r3, #4
    ed54:	031b      	lsls	r3, r3, #12
    ed56:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ed5a:	6863      	ldr	r3, [r4, #4]
    ed5c:	f894 287c 	ldrb.w	r2, [r4, #2172]	; 0x87c
    ed60:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed64:	3304      	adds	r3, #4
    ed66:	031b      	lsls	r3, r3, #12
    ed68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    ed6c:	6863      	ldr	r3, [r4, #4]
    ed6e:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    ed72:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed76:	3304      	adds	r3, #4
    ed78:	031b      	lsls	r3, r3, #12
    ed7a:	f022 0201 	bic.w	r2, r2, #1
    ed7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ed82:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    ed86:	07db      	lsls	r3, r3, #31
    ed88:	d40a      	bmi.n	eda0 <am_hal_iom_power_ctrl+0x1f8>
    ed8a:	2000      	movs	r0, #0
    ed8c:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    ed90:	bd38      	pop	{r3, r4, r5, pc}
    ed92:	6840      	ldr	r0, [r0, #4]
    ed94:	3002      	adds	r0, #2
    ed96:	b2c0      	uxtb	r0, r0
    ed98:	f000 fbec 	bl	f574 <am_hal_pwrctrl_periph_enable>
    ed9c:	4628      	mov	r0, r5
    ed9e:	bd38      	pop	{r3, r4, r5, pc}
    eda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    eda2:	b953      	cbnz	r3, edba <am_hal_iom_power_ctrl+0x212>
    eda4:	6863      	ldr	r3, [r4, #4]
    eda6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edaa:	3304      	adds	r3, #4
    edac:	031b      	lsls	r3, r3, #12
    edae:	f503 7226 	add.w	r2, r3, #664	; 0x298
    edb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    edb6:	e883 000c 	stmia.w	r3, {r2, r3}
    edba:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    edbe:	f001 f983 	bl	100c8 <am_hal_cmdq_enable>
    edc2:	e7e2      	b.n	ed8a <am_hal_iom_power_ctrl+0x1e2>
    edc4:	01123456 	.word	0x01123456

0000edc8 <am_hal_iom_configure>:
    edc8:	b128      	cbz	r0, edd6 <am_hal_iom_configure+0xe>
    edca:	6803      	ldr	r3, [r0, #0]
    edcc:	4a88      	ldr	r2, [pc, #544]	; (eff0 <am_hal_iom_configure+0x228>)
    edce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    edd2:	4293      	cmp	r3, r2
    edd4:	d001      	beq.n	edda <am_hal_iom_configure+0x12>
    edd6:	2002      	movs	r0, #2
    edd8:	4770      	bx	lr
    edda:	b111      	cbz	r1, ede2 <am_hal_iom_configure+0x1a>
    eddc:	6843      	ldr	r3, [r0, #4]
    edde:	2b05      	cmp	r3, #5
    ede0:	d901      	bls.n	ede6 <am_hal_iom_configure+0x1e>
    ede2:	2006      	movs	r0, #6
    ede4:	4770      	bx	lr
    ede6:	78c2      	ldrb	r2, [r0, #3]
    ede8:	0792      	lsls	r2, r2, #30
    edea:	d501      	bpl.n	edf0 <am_hal_iom_configure+0x28>
    edec:	2007      	movs	r0, #7
    edee:	4770      	bx	lr
    edf0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edf4:	3304      	adds	r3, #4
    edf6:	780a      	ldrb	r2, [r1, #0]
    edf8:	031b      	lsls	r3, r3, #12
    edfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edfe:	f241 0410 	movw	r4, #4112	; 0x1010
    ee02:	7202      	strb	r2, [r0, #8]
    ee04:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    ee08:	b92a      	cbnz	r2, ee16 <am_hal_iom_configure+0x4e>
    ee0a:	7a0e      	ldrb	r6, [r1, #8]
    ee0c:	2e03      	cmp	r6, #3
    ee0e:	d907      	bls.n	ee20 <am_hal_iom_configure+0x58>
    ee10:	2006      	movs	r0, #6
    ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee16:	2a01      	cmp	r2, #1
    ee18:	d06a      	beq.n	eef0 <am_hal_iom_configure+0x128>
    ee1a:	2005      	movs	r0, #5
    ee1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee20:	f8d1 a004 	ldr.w	sl, [r1, #4]
    ee24:	4a73      	ldr	r2, [pc, #460]	; (eff4 <am_hal_iom_configure+0x22c>)
    ee26:	4592      	cmp	sl, r2
    ee28:	d8f2      	bhi.n	ee10 <am_hal_iom_configure+0x48>
    ee2a:	f1ba 0f00 	cmp.w	sl, #0
    ee2e:	d03e      	beq.n	eeae <am_hal_iom_configure+0xe6>
    ee30:	fbb2 f2fa 	udiv	r2, r2, sl
    ee34:	fb0a f402 	mul.w	r4, sl, r2
    ee38:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    ee3c:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    ee40:	2c00      	cmp	r4, #0
    ee42:	bf0c      	ite	eq
    ee44:	4614      	moveq	r4, r2
    ee46:	1c54      	addne	r4, r2, #1
    ee48:	4262      	negs	r2, r4
    ee4a:	4022      	ands	r2, r4
    ee4c:	fab2 f282 	clz	r2, r2
    ee50:	f1c2 021f 	rsb	r2, r2, #31
    ee54:	2a06      	cmp	r2, #6
    ee56:	bfa8      	it	ge
    ee58:	2206      	movge	r2, #6
    ee5a:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    ee5e:	f240 80c0 	bls.w	efe2 <am_hal_iom_configure+0x21a>
    ee62:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    ee66:	4f64      	ldr	r7, [pc, #400]	; (eff8 <am_hal_iom_configure+0x230>)
    ee68:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    ee6c:	42bd      	cmp	r5, r7
    ee6e:	bf8c      	ite	hi
    ee70:	f04f 0800 	movhi.w	r8, #0
    ee74:	f04f 0801 	movls.w	r8, #1
    ee78:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    ee7c:	f10e 0e01 	add.w	lr, lr, #1
    ee80:	fa0e f702 	lsl.w	r7, lr, r2
    ee84:	fbb4 f5f7 	udiv	r5, r4, r7
    ee88:	fb07 4715 	mls	r7, r7, r5, r4
    ee8c:	2f00      	cmp	r7, #0
    ee8e:	bf18      	it	ne
    ee90:	3501      	addne	r5, #1
    ee92:	fab5 f785 	clz	r7, r5
    ee96:	f1c7 071f 	rsb	r7, r7, #31
    ee9a:	2f07      	cmp	r7, #7
    ee9c:	f240 809e 	bls.w	efdc <am_hal_iom_configure+0x214>
    eea0:	3a07      	subs	r2, #7
    eea2:	443a      	add	r2, r7
    eea4:	f102 0901 	add.w	r9, r2, #1
    eea8:	f1b9 0f07 	cmp.w	r9, #7
    eeac:	d934      	bls.n	ef18 <am_hal_iom_configure+0x150>
    eeae:	2400      	movs	r4, #0
    eeb0:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    eeb4:	f044 0401 	orr.w	r4, r4, #1
    eeb8:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    eebc:	68cb      	ldr	r3, [r1, #12]
    eebe:	684d      	ldr	r5, [r1, #4]
    eec0:	690c      	ldr	r4, [r1, #16]
    eec2:	60c3      	str	r3, [r0, #12]
    eec4:	2300      	movs	r3, #0
    eec6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eeca:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    eece:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    eed2:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    eed6:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    eeda:	6104      	str	r4, [r0, #16]
    eedc:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    eee0:	4a44      	ldr	r2, [pc, #272]	; (eff4 <am_hal_iom_configure+0x22c>)
    eee2:	fbb2 f2f5 	udiv	r2, r2, r5
    eee6:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    eeea:	4618      	mov	r0, r3
    eeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eef0:	684a      	ldr	r2, [r1, #4]
    eef2:	4c42      	ldr	r4, [pc, #264]	; (effc <am_hal_iom_configure+0x234>)
    eef4:	42a2      	cmp	r2, r4
    eef6:	d06c      	beq.n	efd2 <am_hal_iom_configure+0x20a>
    eef8:	4c41      	ldr	r4, [pc, #260]	; (f000 <am_hal_iom_configure+0x238>)
    eefa:	42a2      	cmp	r2, r4
    eefc:	d064      	beq.n	efc8 <am_hal_iom_configure+0x200>
    eefe:	4c41      	ldr	r4, [pc, #260]	; (f004 <am_hal_iom_configure+0x23c>)
    ef00:	42a2      	cmp	r2, r4
    ef02:	d185      	bne.n	ee10 <am_hal_iom_configure+0x48>
    ef04:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    ef08:	4a3f      	ldr	r2, [pc, #252]	; (f008 <am_hal_iom_configure+0x240>)
    ef0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ef0e:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    ef12:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    ef16:	e7cd      	b.n	eeb4 <am_hal_iom_configure+0xec>
    ef18:	3f07      	subs	r7, #7
    ef1a:	f04f 0c01 	mov.w	ip, #1
    ef1e:	fa0c fc07 	lsl.w	ip, ip, r7
    ef22:	f10c 3cff 	add.w	ip, ip, #4294967295
    ef26:	ea0c 0c05 	and.w	ip, ip, r5
    ef2a:	40fd      	lsrs	r5, r7
    ef2c:	f1bc 0f00 	cmp.w	ip, #0
    ef30:	bf18      	it	ne
    ef32:	3501      	addne	r5, #1
    ef34:	4f35      	ldr	r7, [pc, #212]	; (f00c <am_hal_iom_configure+0x244>)
    ef36:	45ba      	cmp	sl, r7
    ef38:	d843      	bhi.n	efc2 <am_hal_iom_configure+0x1fa>
    ef3a:	f04f 0c01 	mov.w	ip, #1
    ef3e:	fa0c fc02 	lsl.w	ip, ip, r2
    ef42:	ebbc 0c04 	subs.w	ip, ip, r4
    ef46:	bf18      	it	ne
    ef48:	f04f 0c01 	movne.w	ip, #1
    ef4c:	1074      	asrs	r4, r6, #1
    ef4e:	2c01      	cmp	r4, #1
    ef50:	d04a      	beq.n	efe8 <am_hal_iom_configure+0x220>
    ef52:	3d01      	subs	r5, #1
    ef54:	086f      	lsrs	r7, r5, #1
    ef56:	fa0e f402 	lsl.w	r4, lr, r2
    ef5a:	fb05 fe0c 	mul.w	lr, r5, ip
    ef5e:	fb0e 4404 	mla	r4, lr, r4, r4
    ef62:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    ef66:	f8df 908c 	ldr.w	r9, [pc, #140]	; eff4 <am_hal_iom_configure+0x22c>
    ef6a:	fbb9 fbf4 	udiv	fp, r9, r4
    ef6e:	fb04 fa0b 	mul.w	sl, r4, fp
    ef72:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    ef76:	0864      	lsrs	r4, r4, #1
    ef78:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    ef7c:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    ef80:	4554      	cmp	r4, sl
    ef82:	bf2c      	ite	cs
    ef84:	46da      	movcs	sl, fp
    ef86:	f10b 0a01 	addcc.w	sl, fp, #1
    ef8a:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    ef8e:	f8df b090 	ldr.w	fp, [pc, #144]	; f020 <am_hal_iom_configure+0x258>
    ef92:	fbba f4fb 	udiv	r4, sl, fp
    ef96:	043f      	lsls	r7, r7, #16
    ef98:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    ef9c:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    efa0:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    efa4:	fb0b ab14 	mls	fp, fp, r4, sl
    efa8:	432f      	orrs	r7, r5
    efaa:	f1bb 0f00 	cmp.w	fp, #0
    efae:	d105      	bne.n	efbc <am_hal_iom_configure+0x1f4>
    efb0:	b124      	cbz	r4, efbc <am_hal_iom_configure+0x1f4>
    efb2:	1e65      	subs	r5, r4, #1
    efb4:	4225      	tst	r5, r4
    efb6:	d101      	bne.n	efbc <am_hal_iom_configure+0x1f4>
    efb8:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    efbc:	2400      	movs	r4, #0
    efbe:	433c      	orrs	r4, r7
    efc0:	e776      	b.n	eeb0 <am_hal_iom_configure+0xe8>
    efc2:	f04f 0c00 	mov.w	ip, #0
    efc6:	e7c1      	b.n	ef4c <am_hal_iom_configure+0x184>
    efc8:	4a11      	ldr	r2, [pc, #68]	; (f010 <am_hal_iom_configure+0x248>)
    efca:	4c12      	ldr	r4, [pc, #72]	; (f014 <am_hal_iom_configure+0x24c>)
    efcc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    efd0:	e770      	b.n	eeb4 <am_hal_iom_configure+0xec>
    efd2:	4a11      	ldr	r2, [pc, #68]	; (f018 <am_hal_iom_configure+0x250>)
    efd4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    efd8:	4c10      	ldr	r4, [pc, #64]	; (f01c <am_hal_iom_configure+0x254>)
    efda:	e76b      	b.n	eeb4 <am_hal_iom_configure+0xec>
    efdc:	f102 0901 	add.w	r9, r2, #1
    efe0:	e7a8      	b.n	ef34 <am_hal_iom_configure+0x16c>
    efe2:	f04f 0801 	mov.w	r8, #1
    efe6:	e747      	b.n	ee78 <am_hal_iom_configure+0xb0>
    efe8:	1eaf      	subs	r7, r5, #2
    efea:	087f      	lsrs	r7, r7, #1
    efec:	3d01      	subs	r5, #1
    efee:	e7b2      	b.n	ef56 <am_hal_iom_configure+0x18e>
    eff0:	01123456 	.word	0x01123456
    eff4:	02dc6c00 	.word	0x02dc6c00
    eff8:	007a11ff 	.word	0x007a11ff
    effc:	00061a80 	.word	0x00061a80
    f000:	000f4240 	.word	0x000f4240
    f004:	000186a0 	.word	0x000186a0
    f008:	0003f070 	.word	0x0003f070
    f00c:	00b71aff 	.word	0x00b71aff
    f010:	00213040 	.word	0x00213040
    f014:	06031301 	.word	0x06031301
    f018:	0003f270 	.word	0x0003f270
    f01c:	1d0e1201 	.word	0x1d0e1201
    f020:	0003d090 	.word	0x0003d090

0000f024 <am_hal_iom_blocking_transfer>:
    f024:	b128      	cbz	r0, f032 <am_hal_iom_blocking_transfer+0xe>
    f026:	6803      	ldr	r3, [r0, #0]
    f028:	4ac8      	ldr	r2, [pc, #800]	; (f34c <am_hal_iom_blocking_transfer+0x328>)
    f02a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f02e:	4293      	cmp	r3, r2
    f030:	d001      	beq.n	f036 <am_hal_iom_blocking_transfer+0x12>
    f032:	2002      	movs	r0, #2
    f034:	4770      	bx	lr
    f036:	b159      	cbz	r1, f050 <am_hal_iom_blocking_transfer+0x2c>
    f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f03c:	f891 8010 	ldrb.w	r8, [r1, #16]
    f040:	f1b8 0f01 	cmp.w	r8, #1
    f044:	b087      	sub	sp, #28
    f046:	d905      	bls.n	f054 <am_hal_iom_blocking_transfer+0x30>
    f048:	2007      	movs	r0, #7
    f04a:	b007      	add	sp, #28
    f04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f050:	2006      	movs	r0, #6
    f052:	4770      	bx	lr
    f054:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    f058:	f1ba 0f00 	cmp.w	sl, #0
    f05c:	d102      	bne.n	f064 <am_hal_iom_blocking_transfer+0x40>
    f05e:	f881 a010 	strb.w	sl, [r1, #16]
    f062:	46d0      	mov	r8, sl
    f064:	f8d1 9004 	ldr.w	r9, [r1, #4]
    f068:	f1b9 0f03 	cmp.w	r9, #3
    f06c:	d901      	bls.n	f072 <am_hal_iom_blocking_transfer+0x4e>
    f06e:	2006      	movs	r0, #6
    f070:	e7eb      	b.n	f04a <am_hal_iom_blocking_transfer+0x26>
    f072:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    f076:	f04f 33ff 	mov.w	r3, #4294967295
    f07a:	f8d1 b008 	ldr.w	fp, [r1, #8]
    f07e:	4093      	lsls	r3, r2
    f080:	ea13 0f0b 	tst.w	r3, fp
    f084:	d1f3      	bne.n	f06e <am_hal_iom_blocking_transfer+0x4a>
    f086:	f1ba 0f00 	cmp.w	sl, #0
    f08a:	f000 80c5 	beq.w	f218 <am_hal_iom_blocking_transfer+0x1f4>
    f08e:	f1b8 0f00 	cmp.w	r8, #0
    f092:	f000 80d3 	beq.w	f23c <am_hal_iom_blocking_transfer+0x218>
    f096:	698b      	ldr	r3, [r1, #24]
    f098:	2b00      	cmp	r3, #0
    f09a:	d0e8      	beq.n	f06e <am_hal_iom_blocking_transfer+0x4a>
    f09c:	7a03      	ldrb	r3, [r0, #8]
    f09e:	2b01      	cmp	r3, #1
    f0a0:	f040 80be 	bne.w	f220 <am_hal_iom_blocking_transfer+0x1fc>
    f0a4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f0a8:	d8e1      	bhi.n	f06e <am_hal_iom_blocking_transfer+0x4a>
    f0aa:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    f0ae:	2b02      	cmp	r3, #2
    f0b0:	d0ca      	beq.n	f048 <am_hal_iom_blocking_transfer+0x24>
    f0b2:	7f0b      	ldrb	r3, [r1, #28]
    f0b4:	694f      	ldr	r7, [r1, #20]
    f0b6:	f8d1 e018 	ldr.w	lr, [r1, #24]
    f0ba:	9303      	str	r3, [sp, #12]
    f0bc:	4604      	mov	r4, r0
    f0be:	2301      	movs	r3, #1
    f0c0:	460d      	mov	r5, r1
    f0c2:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    f0c6:	6866      	ldr	r6, [r4, #4]
    f0c8:	9300      	str	r3, [sp, #0]
    f0ca:	f04f 32ff 	mov.w	r2, #4294967295
    f0ce:	2300      	movs	r3, #0
    f0d0:	f104 0124 	add.w	r1, r4, #36	; 0x24
    f0d4:	4598      	cmp	r8, r3
    f0d6:	bf18      	it	ne
    f0d8:	4677      	movne	r7, lr
    f0da:	f7ff fa53 	bl	e584 <am_hal_flash_delay_status_check>
    f0de:	2800      	cmp	r0, #0
    f0e0:	d1b3      	bne.n	f04a <am_hal_iom_blocking_transfer+0x26>
    f0e2:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    f0e6:	3604      	adds	r6, #4
    f0e8:	2301      	movs	r3, #1
    f0ea:	0336      	lsls	r6, r6, #12
    f0ec:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    f0f0:	9300      	str	r3, [sp, #0]
    f0f2:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    f0f6:	9304      	str	r3, [sp, #16]
    f0f8:	4619      	mov	r1, r3
    f0fa:	2206      	movs	r2, #6
    f0fc:	2304      	movs	r3, #4
    f0fe:	f7ff fa41 	bl	e584 <am_hal_flash_delay_status_check>
    f102:	2800      	cmp	r0, #0
    f104:	d1a1      	bne.n	f04a <am_hal_iom_blocking_transfer+0x26>
    f106:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    f10a:	9305      	str	r3, [sp, #20]
    f10c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f110:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    f114:	f04f 32ff 	mov.w	r2, #4294967295
    f118:	f360 0300 	bfi	r3, r0, #0, #1
    f11c:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    f120:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    f124:	682b      	ldr	r3, [r5, #0]
    f126:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    f12a:	7a23      	ldrb	r3, [r4, #8]
    f12c:	b91b      	cbnz	r3, f136 <am_hal_iom_blocking_transfer+0x112>
    f12e:	682b      	ldr	r3, [r5, #0]
    f130:	4423      	add	r3, r4
    f132:	f893 0898 	ldrb.w	r0, [r3, #2200]	; 0x898
    f136:	f8c6 021c 	str.w	r0, [r6, #540]	; 0x21c
    f13a:	7a23      	ldrb	r3, [r4, #8]
    f13c:	2b00      	cmp	r3, #0
    f13e:	d17b      	bne.n	f238 <am_hal_iom_blocking_transfer+0x214>
    f140:	682b      	ldr	r3, [r5, #0]
    f142:	4a83      	ldr	r2, [pc, #524]	; (f350 <am_hal_iom_blocking_transfer+0x32c>)
    f144:	051b      	lsls	r3, r3, #20
    f146:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    f14a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    f14e:	ea0a 0202 	and.w	r2, sl, r2
    f152:	f1b8 0f01 	cmp.w	r8, #1
    f156:	ea42 0203 	orr.w	r2, r2, r3
    f15a:	d074      	beq.n	f246 <am_hal_iom_blocking_transfer+0x222>
    f15c:	f3cb 230f 	ubfx	r3, fp, #8, #16
    f160:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    f164:	ea4f 1149 	mov.w	r1, r9, lsl #5
    f168:	ea4f 600b 	mov.w	r0, fp, lsl #24
    f16c:	f040 0001 	orr.w	r0, r0, #1
    f170:	f001 0160 	and.w	r1, r1, #96	; 0x60
    f174:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f178:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f17c:	4301      	orrs	r1, r0
    f17e:	9803      	ldr	r0, [sp, #12]
    f180:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f184:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    f188:	2b03      	cmp	r3, #3
    f18a:	ea42 0201 	orr.w	r2, r2, r1
    f18e:	f240 80b8 	bls.w	f302 <am_hal_iom_blocking_transfer+0x2de>
    f192:	f1b8 0f00 	cmp.w	r8, #0
    f196:	d00a      	beq.n	f1ae <am_hal_iom_blocking_transfer+0x18a>
    f198:	4641      	mov	r1, r8
    f19a:	f857 0b04 	ldr.w	r0, [r7], #4
    f19e:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    f1a2:	2903      	cmp	r1, #3
    f1a4:	f1a3 0304 	sub.w	r3, r3, #4
    f1a8:	f1a1 0104 	sub.w	r1, r1, #4
    f1ac:	d82f      	bhi.n	f20e <am_hal_iom_blocking_transfer+0x1ea>
    f1ae:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f1b2:	f04f 0800 	mov.w	r8, #0
    f1b6:	2701      	movs	r7, #1
    f1b8:	9904      	ldr	r1, [sp, #16]
    f1ba:	9700      	str	r7, [sp, #0]
    f1bc:	2304      	movs	r3, #4
    f1be:	2206      	movs	r2, #6
    f1c0:	4864      	ldr	r0, [pc, #400]	; (f354 <am_hal_iom_blocking_transfer+0x330>)
    f1c2:	f7ff f9df 	bl	e584 <am_hal_flash_delay_status_check>
    f1c6:	4605      	mov	r5, r0
    f1c8:	b978      	cbnz	r0, f1ea <am_hal_iom_blocking_transfer+0x1c6>
    f1ca:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f1ce:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    f1d2:	f040 8090 	bne.w	f2f6 <am_hal_iom_blocking_transfer+0x2d2>
    f1d6:	0599      	lsls	r1, r3, #22
    f1d8:	f100 8090 	bmi.w	f2fc <am_hal_iom_blocking_transfer+0x2d8>
    f1dc:	06da      	lsls	r2, r3, #27
    f1de:	f100 80d2 	bmi.w	f386 <am_hal_iom_blocking_transfer+0x362>
    f1e2:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    f1e6:	d00e      	beq.n	f206 <am_hal_iom_blocking_transfer+0x1e2>
    f1e8:	463d      	mov	r5, r7
    f1ea:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    f1ee:	4620      	mov	r0, r4
    f1f0:	f7ff fbca 	bl	e988 <internal_iom_reset_on_error>
    f1f4:	f04f 33ff 	mov.w	r3, #4294967295
    f1f8:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    f1fc:	9b05      	ldr	r3, [sp, #20]
    f1fe:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    f202:	4628      	mov	r0, r5
    f204:	e721      	b.n	f04a <am_hal_iom_blocking_transfer+0x26>
    f206:	f1b8 0f00 	cmp.w	r8, #0
    f20a:	d0f3      	beq.n	f1f4 <am_hal_iom_blocking_transfer+0x1d0>
    f20c:	e7ec      	b.n	f1e8 <am_hal_iom_blocking_transfer+0x1c4>
    f20e:	2b03      	cmp	r3, #3
    f210:	d976      	bls.n	f300 <am_hal_iom_blocking_transfer+0x2dc>
    f212:	2900      	cmp	r1, #0
    f214:	d1c1      	bne.n	f19a <am_hal_iom_blocking_transfer+0x176>
    f216:	e7ca      	b.n	f1ae <am_hal_iom_blocking_transfer+0x18a>
    f218:	7a03      	ldrb	r3, [r0, #8]
    f21a:	2b01      	cmp	r3, #1
    f21c:	f43f af45 	beq.w	f0aa <am_hal_iom_blocking_transfer+0x86>
    f220:	2b00      	cmp	r3, #0
    f222:	f47f af42 	bne.w	f0aa <am_hal_iom_blocking_transfer+0x86>
    f226:	680b      	ldr	r3, [r1, #0]
    f228:	2b03      	cmp	r3, #3
    f22a:	f63f af20 	bhi.w	f06e <am_hal_iom_blocking_transfer+0x4a>
    f22e:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    f232:	f4bf af1c 	bcs.w	f06e <am_hal_iom_blocking_transfer+0x4a>
    f236:	e738      	b.n	f0aa <am_hal_iom_blocking_transfer+0x86>
    f238:	2300      	movs	r3, #0
    f23a:	e782      	b.n	f142 <am_hal_iom_blocking_transfer+0x11e>
    f23c:	694b      	ldr	r3, [r1, #20]
    f23e:	2b00      	cmp	r3, #0
    f240:	f47f af2c 	bne.w	f09c <am_hal_iom_blocking_transfer+0x78>
    f244:	e713      	b.n	f06e <am_hal_iom_blocking_transfer+0x4a>
    f246:	ea4f 1349 	mov.w	r3, r9, lsl #5
    f24a:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    f24e:	ea4f 610b 	mov.w	r1, fp, lsl #24
    f252:	9b03      	ldr	r3, [sp, #12]
    f254:	f041 0102 	orr.w	r1, r1, #2
    f258:	f3cb 200f 	ubfx	r0, fp, #8, #16
    f25c:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    f260:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f264:	ea4e 0301 	orr.w	r3, lr, r1
    f268:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f26c:	431a      	orrs	r2, r3
    f26e:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f272:	2200      	movs	r2, #0
    f274:	f1b8 0f00 	cmp.w	r8, #0
    f278:	d09b      	beq.n	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f27a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f27e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f282:	2b03      	cmp	r3, #3
    f284:	d81e      	bhi.n	f2c4 <am_hal_iom_blocking_transfer+0x2a0>
    f286:	4d33      	ldr	r5, [pc, #204]	; (f354 <am_hal_iom_blocking_transfer+0x330>)
    f288:	e001      	b.n	f28e <am_hal_iom_blocking_transfer+0x26a>
    f28a:	3d01      	subs	r5, #1
    f28c:	d093      	beq.n	f1b6 <am_hal_iom_blocking_transfer+0x192>
    f28e:	2010      	movs	r0, #16
    f290:	b10a      	cbz	r2, f296 <am_hal_iom_blocking_transfer+0x272>
    f292:	4598      	cmp	r8, r3
    f294:	d88f      	bhi.n	f1b6 <am_hal_iom_blocking_transfer+0x192>
    f296:	f7ff f965 	bl	e564 <am_hal_flash_delay>
    f29a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    f29e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f2a2:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f2a6:	2b03      	cmp	r3, #3
    f2a8:	f002 0201 	and.w	r2, r2, #1
    f2ac:	d9ed      	bls.n	f28a <am_hal_iom_blocking_transfer+0x266>
    f2ae:	e009      	b.n	f2c4 <am_hal_iom_blocking_transfer+0x2a0>
    f2b0:	2b03      	cmp	r3, #3
    f2b2:	6039      	str	r1, [r7, #0]
    f2b4:	f1a8 0804 	sub.w	r8, r8, #4
    f2b8:	d967      	bls.n	f38a <am_hal_iom_blocking_transfer+0x366>
    f2ba:	f1b8 0f00 	cmp.w	r8, #0
    f2be:	f43f af78 	beq.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f2c2:	4607      	mov	r7, r0
    f2c4:	f1b8 0f03 	cmp.w	r8, #3
    f2c8:	f1a3 0304 	sub.w	r3, r3, #4
    f2cc:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    f2d0:	f107 0004 	add.w	r0, r7, #4
    f2d4:	d8ec      	bhi.n	f2b0 <am_hal_iom_blocking_transfer+0x28c>
    f2d6:	f1b8 0f01 	cmp.w	r8, #1
    f2da:	7039      	strb	r1, [r7, #0]
    f2dc:	ea4f 2311 	mov.w	r3, r1, lsr #8
    f2e0:	f43f af67 	beq.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f2e4:	f1b8 0f02 	cmp.w	r8, #2
    f2e8:	707b      	strb	r3, [r7, #1]
    f2ea:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f2ee:	f43f af60 	beq.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f2f2:	70b9      	strb	r1, [r7, #2]
    f2f4:	e75d      	b.n	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f2f6:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f2fa:	e776      	b.n	f1ea <am_hal_iom_blocking_transfer+0x1c6>
    f2fc:	4d16      	ldr	r5, [pc, #88]	; (f358 <am_hal_iom_blocking_transfer+0x334>)
    f2fe:	e774      	b.n	f1ea <am_hal_iom_blocking_transfer+0x1c6>
    f300:	4688      	mov	r8, r1
    f302:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f306:	f1b8 0f00 	cmp.w	r8, #0
    f30a:	f43f af52 	beq.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f30e:	463b      	mov	r3, r7
    f310:	4647      	mov	r7, r8
    f312:	4698      	mov	r8, r3
    f314:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f318:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f31c:	2b03      	cmp	r3, #3
    f31e:	d820      	bhi.n	f362 <am_hal_iom_blocking_transfer+0x33e>
    f320:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f324:	07d8      	lsls	r0, r3, #31
    f326:	d42c      	bmi.n	f382 <am_hal_iom_blocking_transfer+0x35e>
    f328:	4d0a      	ldr	r5, [pc, #40]	; (f354 <am_hal_iom_blocking_transfer+0x330>)
    f32a:	e005      	b.n	f338 <am_hal_iom_blocking_transfer+0x314>
    f32c:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f330:	07db      	lsls	r3, r3, #31
    f332:	d426      	bmi.n	f382 <am_hal_iom_blocking_transfer+0x35e>
    f334:	3d01      	subs	r5, #1
    f336:	d024      	beq.n	f382 <am_hal_iom_blocking_transfer+0x35e>
    f338:	2010      	movs	r0, #16
    f33a:	f7ff f913 	bl	e564 <am_hal_flash_delay>
    f33e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f342:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f346:	2b03      	cmp	r3, #3
    f348:	d9f0      	bls.n	f32c <am_hal_iom_blocking_transfer+0x308>
    f34a:	e00a      	b.n	f362 <am_hal_iom_blocking_transfer+0x33e>
    f34c:	01123456 	.word	0x01123456
    f350:	000fff00 	.word	0x000fff00
    f354:	0007a120 	.word	0x0007a120
    f358:	08000001 	.word	0x08000001
    f35c:	2f00      	cmp	r7, #0
    f35e:	f43f af28 	beq.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f362:	f858 2b04 	ldr.w	r2, [r8], #4
    f366:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f36a:	2f03      	cmp	r7, #3
    f36c:	f1a3 0304 	sub.w	r3, r3, #4
    f370:	f1a7 0704 	sub.w	r7, r7, #4
    f374:	f67f af1d 	bls.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f378:	2b03      	cmp	r3, #3
    f37a:	d8ef      	bhi.n	f35c <am_hal_iom_blocking_transfer+0x338>
    f37c:	2f00      	cmp	r7, #0
    f37e:	d1c9      	bne.n	f314 <am_hal_iom_blocking_transfer+0x2f0>
    f380:	e717      	b.n	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f382:	46b8      	mov	r8, r7
    f384:	e717      	b.n	f1b6 <am_hal_iom_blocking_transfer+0x192>
    f386:	4d04      	ldr	r5, [pc, #16]	; (f398 <am_hal_iom_blocking_transfer+0x374>)
    f388:	e72f      	b.n	f1ea <am_hal_iom_blocking_transfer+0x1c6>
    f38a:	f1b8 0f00 	cmp.w	r8, #0
    f38e:	f43f af10 	beq.w	f1b2 <am_hal_iom_blocking_transfer+0x18e>
    f392:	4607      	mov	r7, r0
    f394:	e771      	b.n	f27a <am_hal_iom_blocking_transfer+0x256>
    f396:	bf00      	nop
    f398:	08000002 	.word	0x08000002

0000f39c <am_hal_itm_disable>:
    f39c:	b510      	push	{r4, lr}
    f39e:	4b25      	ldr	r3, [pc, #148]	; (f434 <am_hal_itm_disable+0x98>)
    f3a0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f3a4:	b9b3      	cbnz	r3, f3d4 <am_hal_itm_disable+0x38>
    f3a6:	4b24      	ldr	r3, [pc, #144]	; (f438 <am_hal_itm_disable+0x9c>)
    f3a8:	68da      	ldr	r2, [r3, #12]
    f3aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f3ae:	60da      	str	r2, [r3, #12]
    f3b0:	68da      	ldr	r2, [r3, #12]
    f3b2:	01d2      	lsls	r2, r2, #7
    f3b4:	d5fc      	bpl.n	f3b0 <am_hal_itm_disable+0x14>
    f3b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f3ba:	4920      	ldr	r1, [pc, #128]	; (f43c <am_hal_itm_disable+0xa0>)
    f3bc:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f3c0:	4a1f      	ldr	r2, [pc, #124]	; (f440 <am_hal_itm_disable+0xa4>)
    f3c2:	200f      	movs	r0, #15
    f3c4:	f04f 31ff 	mov.w	r1, #4294967295
    f3c8:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f3cc:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f3d0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f3d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f3d8:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f3dc:	021b      	lsls	r3, r3, #8
    f3de:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f3e2:	d4f9      	bmi.n	f3d8 <am_hal_itm_disable+0x3c>
    f3e4:	f44f 7048 	mov.w	r0, #800	; 0x320
    f3e8:	f7ff f8bc 	bl	e564 <am_hal_flash_delay>
    f3ec:	4b13      	ldr	r3, [pc, #76]	; (f43c <am_hal_itm_disable+0xa0>)
    f3ee:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f3f2:	4621      	mov	r1, r4
    f3f4:	2064      	movs	r0, #100	; 0x64
    f3f6:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f3fa:	f023 0301 	bic.w	r3, r3, #1
    f3fe:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f402:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f406:	4b0f      	ldr	r3, [pc, #60]	; (f444 <am_hal_itm_disable+0xa8>)
    f408:	4013      	ands	r3, r2
    f40a:	2b00      	cmp	r3, #0
    f40c:	d1f9      	bne.n	f402 <am_hal_itm_disable+0x66>
    f40e:	3801      	subs	r0, #1
    f410:	d1f1      	bne.n	f3f6 <am_hal_itm_disable+0x5a>
    f412:	4a09      	ldr	r2, [pc, #36]	; (f438 <am_hal_itm_disable+0x9c>)
    f414:	68d3      	ldr	r3, [r2, #12]
    f416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f41a:	60d3      	str	r3, [r2, #12]
    f41c:	68d3      	ldr	r3, [r2, #12]
    f41e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f422:	d1fb      	bne.n	f41c <am_hal_itm_disable+0x80>
    f424:	4a03      	ldr	r2, [pc, #12]	; (f434 <am_hal_itm_disable+0x98>)
    f426:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f42a:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f42e:	2b00      	cmp	r3, #0
    f430:	d1fb      	bne.n	f42a <am_hal_itm_disable+0x8e>
    f432:	bd10      	pop	{r4, pc}
    f434:	40020000 	.word	0x40020000
    f438:	e000edf0 	.word	0xe000edf0
    f43c:	c5acce55 	.word	0xc5acce55
    f440:	00150511 	.word	0x00150511
    f444:	00800001 	.word	0x00800001

0000f448 <am_hal_mcuctrl_info_get>:
    f448:	b4f0      	push	{r4, r5, r6, r7}
    f44a:	b121      	cbz	r1, f456 <am_hal_mcuctrl_info_get+0xe>
    f44c:	2801      	cmp	r0, #1
    f44e:	d038      	beq.n	f4c2 <am_hal_mcuctrl_info_get+0x7a>
    f450:	d320      	bcc.n	f494 <am_hal_mcuctrl_info_get+0x4c>
    f452:	2802      	cmp	r0, #2
    f454:	d002      	beq.n	f45c <am_hal_mcuctrl_info_get+0x14>
    f456:	2006      	movs	r0, #6
    f458:	bcf0      	pop	{r4, r5, r6, r7}
    f45a:	4770      	bx	lr
    f45c:	4a41      	ldr	r2, [pc, #260]	; (f564 <am_hal_mcuctrl_info_get+0x11c>)
    f45e:	684d      	ldr	r5, [r1, #4]
    f460:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f464:	694c      	ldr	r4, [r1, #20]
    f466:	f003 0601 	and.w	r6, r3, #1
    f46a:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f46e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f472:	700e      	strb	r6, [r1, #0]
    f474:	7208      	strb	r0, [r1, #8]
    f476:	740b      	strb	r3, [r1, #16]
    f478:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f47c:	60cb      	str	r3, [r1, #12]
    f47e:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f482:	4328      	orrs	r0, r5
    f484:	6048      	str	r0, [r1, #4]
    f486:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f48a:	4323      	orrs	r3, r4
    f48c:	2000      	movs	r0, #0
    f48e:	614b      	str	r3, [r1, #20]
    f490:	bcf0      	pop	{r4, r5, r6, r7}
    f492:	4770      	bx	lr
    f494:	4a33      	ldr	r2, [pc, #204]	; (f564 <am_hal_mcuctrl_info_get+0x11c>)
    f496:	6993      	ldr	r3, [r2, #24]
    f498:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f49c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f4a0:	7008      	strb	r0, [r1, #0]
    f4a2:	704b      	strb	r3, [r1, #1]
    f4a4:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f4a8:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f4ac:	710b      	strb	r3, [r1, #4]
    f4ae:	6953      	ldr	r3, [r2, #20]
    f4b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f4b4:	f003 0301 	and.w	r3, r3, #1
    f4b8:	2000      	movs	r0, #0
    f4ba:	708a      	strb	r2, [r1, #2]
    f4bc:	70cb      	strb	r3, [r1, #3]
    f4be:	bcf0      	pop	{r4, r5, r6, r7}
    f4c0:	4770      	bx	lr
    f4c2:	4b28      	ldr	r3, [pc, #160]	; (f564 <am_hal_mcuctrl_info_get+0x11c>)
    f4c4:	4c28      	ldr	r4, [pc, #160]	; (f568 <am_hal_mcuctrl_info_get+0x120>)
    f4c6:	681a      	ldr	r2, [r3, #0]
    f4c8:	600a      	str	r2, [r1, #0]
    f4ca:	6858      	ldr	r0, [r3, #4]
    f4cc:	6048      	str	r0, [r1, #4]
    f4ce:	6898      	ldr	r0, [r3, #8]
    f4d0:	6088      	str	r0, [r1, #8]
    f4d2:	68d8      	ldr	r0, [r3, #12]
    f4d4:	60c8      	str	r0, [r1, #12]
    f4d6:	691d      	ldr	r5, [r3, #16]
    f4d8:	4824      	ldr	r0, [pc, #144]	; (f56c <am_hal_mcuctrl_info_get+0x124>)
    f4da:	610d      	str	r5, [r1, #16]
    f4dc:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f4e0:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f4e4:	695d      	ldr	r5, [r3, #20]
    f4e6:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f4ea:	4b21      	ldr	r3, [pc, #132]	; (f570 <am_hal_mcuctrl_info_get+0x128>)
    f4ec:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f4f0:	6208      	str	r0, [r1, #32]
    f4f2:	f002 0201 	and.w	r2, r2, #1
    f4f6:	614d      	str	r5, [r1, #20]
    f4f8:	61cc      	str	r4, [r1, #28]
    f4fa:	618a      	str	r2, [r1, #24]
    f4fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f500:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f504:	b2d0      	uxtb	r0, r2
    f506:	f004 020f 	and.w	r2, r4, #15
    f50a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f50e:	624a      	str	r2, [r1, #36]	; 0x24
    f510:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f514:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f518:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f51c:	f004 020f 	and.w	r2, r4, #15
    f520:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f524:	628a      	str	r2, [r1, #40]	; 0x28
    f526:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f52a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f52e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f532:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f536:	4302      	orrs	r2, r0
    f538:	62ca      	str	r2, [r1, #44]	; 0x2c
    f53a:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f53e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f542:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f546:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f54a:	b2c0      	uxtb	r0, r0
    f54c:	0400      	lsls	r0, r0, #16
    f54e:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f552:	b2d2      	uxtb	r2, r2
    f554:	431a      	orrs	r2, r3
    f556:	b2e3      	uxtb	r3, r4
    f558:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f55c:	630b      	str	r3, [r1, #48]	; 0x30
    f55e:	2000      	movs	r0, #0
    f560:	bcf0      	pop	{r4, r5, r6, r7}
    f562:	4770      	bx	lr
    f564:	40020000 	.word	0x40020000
    f568:	0001070c 	.word	0x0001070c
    f56c:	0001074c 	.word	0x0001074c
    f570:	f0000f00 	.word	0xf0000f00

0000f574 <am_hal_pwrctrl_periph_enable>:
    f574:	b570      	push	{r4, r5, r6, lr}
    f576:	b082      	sub	sp, #8
    f578:	4604      	mov	r4, r0
    f57a:	f7ff f9fd 	bl	e978 <am_hal_interrupt_master_disable>
    f57e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f582:	4d0f      	ldr	r5, [pc, #60]	; (f5c0 <am_hal_pwrctrl_periph_enable+0x4c>)
    f584:	4e0f      	ldr	r6, [pc, #60]	; (f5c4 <am_hal_pwrctrl_periph_enable+0x50>)
    f586:	9001      	str	r0, [sp, #4]
    f588:	00a4      	lsls	r4, r4, #2
    f58a:	68aa      	ldr	r2, [r5, #8]
    f58c:	5933      	ldr	r3, [r6, r4]
    f58e:	4313      	orrs	r3, r2
    f590:	60ab      	str	r3, [r5, #8]
    f592:	9801      	ldr	r0, [sp, #4]
    f594:	4434      	add	r4, r6
    f596:	f7ff f9f3 	bl	e980 <am_hal_interrupt_master_set>
    f59a:	20a0      	movs	r0, #160	; 0xa0
    f59c:	f7fe ffe2 	bl	e564 <am_hal_flash_delay>
    f5a0:	69ab      	ldr	r3, [r5, #24]
    f5a2:	6864      	ldr	r4, [r4, #4]
    f5a4:	4223      	tst	r3, r4
    f5a6:	d103      	bne.n	f5b0 <am_hal_pwrctrl_periph_enable+0x3c>
    f5a8:	20a0      	movs	r0, #160	; 0xa0
    f5aa:	f7fe ffdb 	bl	e564 <am_hal_flash_delay>
    f5ae:	69ab      	ldr	r3, [r5, #24]
    f5b0:	4b03      	ldr	r3, [pc, #12]	; (f5c0 <am_hal_pwrctrl_periph_enable+0x4c>)
    f5b2:	699b      	ldr	r3, [r3, #24]
    f5b4:	4223      	tst	r3, r4
    f5b6:	bf0c      	ite	eq
    f5b8:	2001      	moveq	r0, #1
    f5ba:	2000      	movne	r0, #0
    f5bc:	b002      	add	sp, #8
    f5be:	bd70      	pop	{r4, r5, r6, pc}
    f5c0:	40021000 	.word	0x40021000
    f5c4:	0001078c 	.word	0x0001078c

0000f5c8 <am_hal_pwrctrl_periph_disable>:
    f5c8:	b570      	push	{r4, r5, r6, lr}
    f5ca:	b082      	sub	sp, #8
    f5cc:	4604      	mov	r4, r0
    f5ce:	f7ff f9d3 	bl	e978 <am_hal_interrupt_master_disable>
    f5d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f5d6:	4d10      	ldr	r5, [pc, #64]	; (f618 <am_hal_pwrctrl_periph_disable+0x50>)
    f5d8:	4e10      	ldr	r6, [pc, #64]	; (f61c <am_hal_pwrctrl_periph_disable+0x54>)
    f5da:	9001      	str	r0, [sp, #4]
    f5dc:	00a4      	lsls	r4, r4, #2
    f5de:	68ab      	ldr	r3, [r5, #8]
    f5e0:	5932      	ldr	r2, [r6, r4]
    f5e2:	ea23 0302 	bic.w	r3, r3, r2
    f5e6:	60ab      	str	r3, [r5, #8]
    f5e8:	9801      	ldr	r0, [sp, #4]
    f5ea:	4434      	add	r4, r6
    f5ec:	f7ff f9c8 	bl	e980 <am_hal_interrupt_master_set>
    f5f0:	20a0      	movs	r0, #160	; 0xa0
    f5f2:	f7fe ffb7 	bl	e564 <am_hal_flash_delay>
    f5f6:	69ab      	ldr	r3, [r5, #24]
    f5f8:	6864      	ldr	r4, [r4, #4]
    f5fa:	4223      	tst	r3, r4
    f5fc:	d003      	beq.n	f606 <am_hal_pwrctrl_periph_disable+0x3e>
    f5fe:	20a0      	movs	r0, #160	; 0xa0
    f600:	f7fe ffb0 	bl	e564 <am_hal_flash_delay>
    f604:	69ab      	ldr	r3, [r5, #24]
    f606:	4b04      	ldr	r3, [pc, #16]	; (f618 <am_hal_pwrctrl_periph_disable+0x50>)
    f608:	699b      	ldr	r3, [r3, #24]
    f60a:	4223      	tst	r3, r4
    f60c:	bf14      	ite	ne
    f60e:	2001      	movne	r0, #1
    f610:	2000      	moveq	r0, #0
    f612:	b002      	add	sp, #8
    f614:	bd70      	pop	{r4, r5, r6, pc}
    f616:	bf00      	nop
    f618:	40021000 	.word	0x40021000
    f61c:	0001078c 	.word	0x0001078c

0000f620 <am_hal_pwrctrl_low_power_init>:
    f620:	b530      	push	{r4, r5, lr}
    f622:	4b33      	ldr	r3, [pc, #204]	; (f6f0 <am_hal_pwrctrl_low_power_init+0xd0>)
    f624:	681a      	ldr	r2, [r3, #0]
    f626:	b085      	sub	sp, #20
    f628:	b912      	cbnz	r2, f630 <am_hal_pwrctrl_low_power_init+0x10>
    f62a:	4a32      	ldr	r2, [pc, #200]	; (f6f4 <am_hal_pwrctrl_low_power_init+0xd4>)
    f62c:	6812      	ldr	r2, [r2, #0]
    f62e:	601a      	str	r2, [r3, #0]
    f630:	4b31      	ldr	r3, [pc, #196]	; (f6f8 <am_hal_pwrctrl_low_power_init+0xd8>)
    f632:	68db      	ldr	r3, [r3, #12]
    f634:	b2db      	uxtb	r3, r3
    f636:	2b12      	cmp	r3, #18
    f638:	d00a      	beq.n	f650 <am_hal_pwrctrl_low_power_init+0x30>
    f63a:	4c30      	ldr	r4, [pc, #192]	; (f6fc <am_hal_pwrctrl_low_power_init+0xdc>)
    f63c:	2100      	movs	r1, #0
    f63e:	200c      	movs	r0, #12
    f640:	f7fe fcae 	bl	dfa0 <am_hal_cachectrl_control>
    f644:	69a3      	ldr	r3, [r4, #24]
    f646:	05d8      	lsls	r0, r3, #23
    f648:	d520      	bpl.n	f68c <am_hal_pwrctrl_low_power_init+0x6c>
    f64a:	2000      	movs	r0, #0
    f64c:	b005      	add	sp, #20
    f64e:	bd30      	pop	{r4, r5, pc}
    f650:	4c2a      	ldr	r4, [pc, #168]	; (f6fc <am_hal_pwrctrl_low_power_init+0xdc>)
    f652:	6863      	ldr	r3, [r4, #4]
    f654:	07d9      	lsls	r1, r3, #31
    f656:	d5f0      	bpl.n	f63a <am_hal_pwrctrl_low_power_init+0x1a>
    f658:	f7ff f98e 	bl	e978 <am_hal_interrupt_master_disable>
    f65c:	9003      	str	r0, [sp, #12]
    f65e:	68a3      	ldr	r3, [r4, #8]
    f660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f664:	60a3      	str	r3, [r4, #8]
    f666:	9803      	ldr	r0, [sp, #12]
    f668:	f7ff f98a 	bl	e980 <am_hal_interrupt_master_set>
    f66c:	20a0      	movs	r0, #160	; 0xa0
    f66e:	f7fe ff79 	bl	e564 <am_hal_flash_delay>
    f672:	69a3      	ldr	r3, [r4, #24]
    f674:	061a      	lsls	r2, r3, #24
    f676:	d403      	bmi.n	f680 <am_hal_pwrctrl_low_power_init+0x60>
    f678:	20a0      	movs	r0, #160	; 0xa0
    f67a:	f7fe ff73 	bl	e564 <am_hal_flash_delay>
    f67e:	69a3      	ldr	r3, [r4, #24]
    f680:	4b1e      	ldr	r3, [pc, #120]	; (f6fc <am_hal_pwrctrl_low_power_init+0xdc>)
    f682:	699b      	ldr	r3, [r3, #24]
    f684:	061b      	lsls	r3, r3, #24
    f686:	d4d8      	bmi.n	f63a <am_hal_pwrctrl_low_power_init+0x1a>
    f688:	2001      	movs	r0, #1
    f68a:	e7df      	b.n	f64c <am_hal_pwrctrl_low_power_init+0x2c>
    f68c:	4d1a      	ldr	r5, [pc, #104]	; (f6f8 <am_hal_pwrctrl_low_power_init+0xd8>)
    f68e:	491c      	ldr	r1, [pc, #112]	; (f700 <am_hal_pwrctrl_low_power_init+0xe0>)
    f690:	7e2a      	ldrb	r2, [r5, #24]
    f692:	2001      	movs	r0, #1
    f694:	4302      	orrs	r2, r0
    f696:	2307      	movs	r3, #7
    f698:	762a      	strb	r2, [r5, #24]
    f69a:	9000      	str	r0, [sp, #0]
    f69c:	461a      	mov	r2, r3
    f69e:	f242 7010 	movw	r0, #10000	; 0x2710
    f6a2:	f7fe ff6f 	bl	e584 <am_hal_flash_delay_status_check>
    f6a6:	b110      	cbz	r0, f6ae <am_hal_pwrctrl_low_power_init+0x8e>
    f6a8:	2004      	movs	r0, #4
    f6aa:	b005      	add	sp, #20
    f6ac:	bd30      	pop	{r4, r5, pc}
    f6ae:	6823      	ldr	r3, [r4, #0]
    f6b0:	f043 0301 	orr.w	r3, r3, #1
    f6b4:	6023      	str	r3, [r4, #0]
    f6b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f6bc:	6263      	str	r3, [r4, #36]	; 0x24
    f6be:	68eb      	ldr	r3, [r5, #12]
    f6c0:	b2db      	uxtb	r3, r3
    f6c2:	2b11      	cmp	r3, #17
    f6c4:	d1c1      	bne.n	f64a <am_hal_pwrctrl_low_power_init+0x2a>
    f6c6:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f6ca:	f360 5356 	bfi	r3, r0, #21, #2
    f6ce:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f6d2:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f6d6:	220f      	movs	r2, #15
    f6d8:	f362 138b 	bfi	r3, r2, #6, #6
    f6dc:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f6e0:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f6e4:	f362 0305 	bfi	r3, r2, #0, #6
    f6e8:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f6ec:	e7ae      	b.n	f64c <am_hal_pwrctrl_low_power_init+0x2c>
    f6ee:	bf00      	nop
    f6f0:	1000118c 	.word	0x1000118c
    f6f4:	4ffff000 	.word	0x4ffff000
    f6f8:	40020000 	.word	0x40020000
    f6fc:	40021000 	.word	0x40021000
    f700:	40020018 	.word	0x40020018

0000f704 <am_hal_rtc_osc_select>:
    f704:	b928      	cbnz	r0, f712 <am_hal_rtc_osc_select+0xe>
    f706:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f70a:	68d3      	ldr	r3, [r2, #12]
    f70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f710:	60d3      	str	r3, [r2, #12]
    f712:	4770      	bx	lr

0000f714 <am_hal_rtc_osc_disable>:
    f714:	4a03      	ldr	r2, [pc, #12]	; (f724 <am_hal_rtc_osc_disable+0x10>)
    f716:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f71a:	f043 0310 	orr.w	r3, r3, #16
    f71e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f722:	4770      	bx	lr
    f724:	40004200 	.word	0x40004200

0000f728 <am_hal_sysctrl_sleep>:
    f728:	b510      	push	{r4, lr}
    f72a:	b082      	sub	sp, #8
    f72c:	4604      	mov	r4, r0
    f72e:	f7ff f923 	bl	e978 <am_hal_interrupt_master_disable>
    f732:	9001      	str	r0, [sp, #4]
    f734:	b124      	cbz	r4, f740 <am_hal_sysctrl_sleep+0x18>
    f736:	4b12      	ldr	r3, [pc, #72]	; (f780 <am_hal_sysctrl_sleep+0x58>)
    f738:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f73c:	07db      	lsls	r3, r3, #31
    f73e:	d512      	bpl.n	f766 <am_hal_sysctrl_sleep+0x3e>
    f740:	4a10      	ldr	r2, [pc, #64]	; (f784 <am_hal_sysctrl_sleep+0x5c>)
    f742:	6913      	ldr	r3, [r2, #16]
    f744:	f023 0304 	bic.w	r3, r3, #4
    f748:	6113      	str	r3, [r2, #16]
    f74a:	f3bf 8f4f 	dsb	sy
    f74e:	4a0e      	ldr	r2, [pc, #56]	; (f788 <am_hal_sysctrl_sleep+0x60>)
    f750:	4b0e      	ldr	r3, [pc, #56]	; (f78c <am_hal_sysctrl_sleep+0x64>)
    f752:	6812      	ldr	r2, [r2, #0]
    f754:	601a      	str	r2, [r3, #0]
    f756:	bf30      	wfi
    f758:	f3bf 8f6f 	isb	sy
    f75c:	9801      	ldr	r0, [sp, #4]
    f75e:	f7ff f90f 	bl	e980 <am_hal_interrupt_master_set>
    f762:	b002      	add	sp, #8
    f764:	bd10      	pop	{r4, pc}
    f766:	4b0a      	ldr	r3, [pc, #40]	; (f790 <am_hal_sysctrl_sleep+0x68>)
    f768:	681a      	ldr	r2, [r3, #0]
    f76a:	b912      	cbnz	r2, f772 <am_hal_sysctrl_sleep+0x4a>
    f76c:	4a09      	ldr	r2, [pc, #36]	; (f794 <am_hal_sysctrl_sleep+0x6c>)
    f76e:	6812      	ldr	r2, [r2, #0]
    f770:	601a      	str	r2, [r3, #0]
    f772:	4a04      	ldr	r2, [pc, #16]	; (f784 <am_hal_sysctrl_sleep+0x5c>)
    f774:	6913      	ldr	r3, [r2, #16]
    f776:	f043 0304 	orr.w	r3, r3, #4
    f77a:	6113      	str	r3, [r2, #16]
    f77c:	e7e5      	b.n	f74a <am_hal_sysctrl_sleep+0x22>
    f77e:	bf00      	nop
    f780:	40020000 	.word	0x40020000
    f784:	e000ed00 	.word	0xe000ed00
    f788:	5fff0000 	.word	0x5fff0000
    f78c:	10001190 	.word	0x10001190
    f790:	1000118c 	.word	0x1000118c
    f794:	4ffff000 	.word	0x4ffff000

0000f798 <am_hal_uart_initialize>:
    f798:	2801      	cmp	r0, #1
    f79a:	d901      	bls.n	f7a0 <am_hal_uart_initialize+0x8>
    f79c:	2005      	movs	r0, #5
    f79e:	4770      	bx	lr
    f7a0:	b169      	cbz	r1, f7be <am_hal_uart_initialize+0x26>
    f7a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7a4:	2264      	movs	r2, #100	; 0x64
    f7a6:	4e0e      	ldr	r6, [pc, #56]	; (f7e0 <am_hal_uart_initialize+0x48>)
    f7a8:	fb02 f200 	mul.w	r2, r2, r0
    f7ac:	18b4      	adds	r4, r6, r2
    f7ae:	4603      	mov	r3, r0
    f7b0:	78e0      	ldrb	r0, [r4, #3]
    f7b2:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f7b6:	b2fd      	uxtb	r5, r7
    f7b8:	b11d      	cbz	r5, f7c2 <am_hal_uart_initialize+0x2a>
    f7ba:	2007      	movs	r0, #7
    f7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7be:	2006      	movs	r0, #6
    f7c0:	4770      	bx	lr
    f7c2:	f040 0001 	orr.w	r0, r0, #1
    f7c6:	70e0      	strb	r0, [r4, #3]
    f7c8:	58b0      	ldr	r0, [r6, r2]
    f7ca:	f8df e018 	ldr.w	lr, [pc, #24]	; f7e4 <am_hal_uart_initialize+0x4c>
    f7ce:	f36e 0017 	bfi	r0, lr, #0, #24
    f7d2:	50b0      	str	r0, [r6, r2]
    f7d4:	6263      	str	r3, [r4, #36]	; 0x24
    f7d6:	7127      	strb	r7, [r4, #4]
    f7d8:	6625      	str	r5, [r4, #96]	; 0x60
    f7da:	4628      	mov	r0, r5
    f7dc:	600c      	str	r4, [r1, #0]
    f7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7e0:	10004b10 	.word	0x10004b10
    f7e4:	00ea9e06 	.word	0x00ea9e06

0000f7e8 <am_hal_uart_deinitialize>:
    f7e8:	b128      	cbz	r0, f7f6 <am_hal_uart_deinitialize+0xe>
    f7ea:	6803      	ldr	r3, [r0, #0]
    f7ec:	4a07      	ldr	r2, [pc, #28]	; (f80c <am_hal_uart_deinitialize+0x24>)
    f7ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f7f2:	4293      	cmp	r3, r2
    f7f4:	d001      	beq.n	f7fa <am_hal_uart_deinitialize+0x12>
    f7f6:	2002      	movs	r0, #2
    f7f8:	4770      	bx	lr
    f7fa:	78c2      	ldrb	r2, [r0, #3]
    f7fc:	2300      	movs	r3, #0
    f7fe:	f36f 0200 	bfc	r2, #0, #1
    f802:	70c2      	strb	r2, [r0, #3]
    f804:	6243      	str	r3, [r0, #36]	; 0x24
    f806:	7103      	strb	r3, [r0, #4]
    f808:	4618      	mov	r0, r3
    f80a:	4770      	bx	lr
    f80c:	01ea9e06 	.word	0x01ea9e06

0000f810 <am_hal_uart_power_control>:
    f810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f814:	6804      	ldr	r4, [r0, #0]
    f816:	4b36      	ldr	r3, [pc, #216]	; (f8f0 <am_hal_uart_power_control+0xe0>)
    f818:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f81c:	429c      	cmp	r4, r3
    f81e:	b083      	sub	sp, #12
    f820:	d003      	beq.n	f82a <am_hal_uart_power_control+0x1a>
    f822:	2002      	movs	r0, #2
    f824:	b003      	add	sp, #12
    f826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f82a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f82c:	4605      	mov	r5, r0
    f82e:	f107 0008 	add.w	r0, r7, #8
    f832:	4691      	mov	r9, r2
    f834:	460e      	mov	r6, r1
    f836:	fa5f f880 	uxtb.w	r8, r0
    f83a:	b181      	cbz	r1, f85e <am_hal_uart_power_control+0x4e>
    f83c:	2902      	cmp	r1, #2
    f83e:	d80c      	bhi.n	f85a <am_hal_uart_power_control+0x4a>
    f840:	b992      	cbnz	r2, f868 <am_hal_uart_power_control+0x58>
    f842:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f846:	371c      	adds	r7, #28
    f848:	033f      	lsls	r7, r7, #12
    f84a:	f04f 33ff 	mov.w	r3, #4294967295
    f84e:	647b      	str	r3, [r7, #68]	; 0x44
    f850:	4640      	mov	r0, r8
    f852:	f7ff feb9 	bl	f5c8 <am_hal_pwrctrl_periph_disable>
    f856:	2000      	movs	r0, #0
    f858:	e7e4      	b.n	f824 <am_hal_uart_power_control+0x14>
    f85a:	2006      	movs	r0, #6
    f85c:	e7e2      	b.n	f824 <am_hal_uart_power_control+0x14>
    f85e:	b322      	cbz	r2, f8aa <am_hal_uart_power_control+0x9a>
    f860:	792b      	ldrb	r3, [r5, #4]
    f862:	bb3b      	cbnz	r3, f8b4 <am_hal_uart_power_control+0xa4>
    f864:	2007      	movs	r0, #7
    f866:	e7dd      	b.n	f824 <am_hal_uart_power_control+0x14>
    f868:	f7ff f886 	bl	e978 <am_hal_interrupt_master_disable>
    f86c:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f870:	331c      	adds	r3, #28
    f872:	031b      	lsls	r3, r3, #12
    f874:	9001      	str	r0, [sp, #4]
    f876:	6a1a      	ldr	r2, [r3, #32]
    f878:	60aa      	str	r2, [r5, #8]
    f87a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f87c:	60ea      	str	r2, [r5, #12]
    f87e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f880:	612a      	str	r2, [r5, #16]
    f882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f884:	616a      	str	r2, [r5, #20]
    f886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f888:	61aa      	str	r2, [r5, #24]
    f88a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f88c:	61ea      	str	r2, [r5, #28]
    f88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f890:	622b      	str	r3, [r5, #32]
    f892:	2301      	movs	r3, #1
    f894:	712b      	strb	r3, [r5, #4]
    f896:	9801      	ldr	r0, [sp, #4]
    f898:	f7ff f872 	bl	e980 <am_hal_interrupt_master_set>
    f89c:	682b      	ldr	r3, [r5, #0]
    f89e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f8a2:	42a3      	cmp	r3, r4
    f8a4:	d1d4      	bne.n	f850 <am_hal_uart_power_control+0x40>
    f8a6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f8a8:	e7cb      	b.n	f842 <am_hal_uart_power_control+0x32>
    f8aa:	4640      	mov	r0, r8
    f8ac:	f7ff fe62 	bl	f574 <am_hal_pwrctrl_periph_enable>
    f8b0:	4648      	mov	r0, r9
    f8b2:	e7b7      	b.n	f824 <am_hal_uart_power_control+0x14>
    f8b4:	4640      	mov	r0, r8
    f8b6:	f7ff fe5d 	bl	f574 <am_hal_pwrctrl_periph_enable>
    f8ba:	f7ff f85d 	bl	e978 <am_hal_interrupt_master_disable>
    f8be:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f8c2:	331c      	adds	r3, #28
    f8c4:	031b      	lsls	r3, r3, #12
    f8c6:	68aa      	ldr	r2, [r5, #8]
    f8c8:	9000      	str	r0, [sp, #0]
    f8ca:	621a      	str	r2, [r3, #32]
    f8cc:	68ea      	ldr	r2, [r5, #12]
    f8ce:	625a      	str	r2, [r3, #36]	; 0x24
    f8d0:	692a      	ldr	r2, [r5, #16]
    f8d2:	629a      	str	r2, [r3, #40]	; 0x28
    f8d4:	696a      	ldr	r2, [r5, #20]
    f8d6:	62da      	str	r2, [r3, #44]	; 0x2c
    f8d8:	69aa      	ldr	r2, [r5, #24]
    f8da:	631a      	str	r2, [r3, #48]	; 0x30
    f8dc:	69ea      	ldr	r2, [r5, #28]
    f8de:	635a      	str	r2, [r3, #52]	; 0x34
    f8e0:	6a2a      	ldr	r2, [r5, #32]
    f8e2:	639a      	str	r2, [r3, #56]	; 0x38
    f8e4:	9800      	ldr	r0, [sp, #0]
    f8e6:	712e      	strb	r6, [r5, #4]
    f8e8:	f7ff f84a 	bl	e980 <am_hal_interrupt_master_set>
    f8ec:	4630      	mov	r0, r6
    f8ee:	e799      	b.n	f824 <am_hal_uart_power_control+0x14>
    f8f0:	01ea9e06 	.word	0x01ea9e06

0000f8f4 <am_hal_uart_configure>:
    f8f4:	6803      	ldr	r3, [r0, #0]
    f8f6:	4a84      	ldr	r2, [pc, #528]	; (fb08 <am_hal_uart_configure+0x214>)
    f8f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f8fc:	4293      	cmp	r3, r2
    f8fe:	d001      	beq.n	f904 <am_hal_uart_configure+0x10>
    f900:	2002      	movs	r0, #2
    f902:	4770      	bx	lr
    f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f908:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f90a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f90e:	351c      	adds	r5, #28
    f910:	032d      	lsls	r5, r5, #12
    f912:	2700      	movs	r7, #0
    f914:	b084      	sub	sp, #16
    f916:	632f      	str	r7, [r5, #48]	; 0x30
    f918:	460e      	mov	r6, r1
    f91a:	4604      	mov	r4, r0
    f91c:	f7ff f82c 	bl	e978 <am_hal_interrupt_master_disable>
    f920:	9001      	str	r0, [sp, #4]
    f922:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f924:	f043 0308 	orr.w	r3, r3, #8
    f928:	862b      	strh	r3, [r5, #48]	; 0x30
    f92a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f92c:	2201      	movs	r2, #1
    f92e:	f362 1306 	bfi	r3, r2, #4, #3
    f932:	862b      	strh	r3, [r5, #48]	; 0x30
    f934:	9801      	ldr	r0, [sp, #4]
    f936:	f7ff f823 	bl	e980 <am_hal_interrupt_master_set>
    f93a:	f7ff f81d 	bl	e978 <am_hal_interrupt_master_disable>
    f93e:	9002      	str	r0, [sp, #8]
    f940:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f942:	f367 0300 	bfi	r3, r7, #0, #1
    f946:	862b      	strh	r3, [r5, #48]	; 0x30
    f948:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f94a:	f367 2349 	bfi	r3, r7, #9, #1
    f94e:	862b      	strh	r3, [r5, #48]	; 0x30
    f950:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f952:	f367 2308 	bfi	r3, r7, #8, #1
    f956:	862b      	strh	r3, [r5, #48]	; 0x30
    f958:	9802      	ldr	r0, [sp, #8]
    f95a:	f7ff f811 	bl	e980 <am_hal_interrupt_master_set>
    f95e:	4a6b      	ldr	r2, [pc, #428]	; (fb0c <am_hal_uart_configure+0x218>)
    f960:	6833      	ldr	r3, [r6, #0]
    f962:	68d2      	ldr	r2, [r2, #12]
    f964:	b2d2      	uxtb	r2, r2
    f966:	2a12      	cmp	r2, #18
    f968:	d00b      	beq.n	f982 <am_hal_uart_configure+0x8e>
    f96a:	4a68      	ldr	r2, [pc, #416]	; (fb0c <am_hal_uart_configure+0x218>)
    f96c:	68d2      	ldr	r2, [r2, #12]
    f96e:	b2d2      	uxtb	r2, r2
    f970:	2a20      	cmp	r2, #32
    f972:	d90a      	bls.n	f98a <am_hal_uart_configure+0x96>
    f974:	4a66      	ldr	r2, [pc, #408]	; (fb10 <am_hal_uart_configure+0x21c>)
    f976:	4293      	cmp	r3, r2
    f978:	d907      	bls.n	f98a <am_hal_uart_configure+0x96>
    f97a:	4866      	ldr	r0, [pc, #408]	; (fb14 <am_hal_uart_configure+0x220>)
    f97c:	b004      	add	sp, #16
    f97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f982:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f986:	d8f8      	bhi.n	f97a <am_hal_uart_configure+0x86>
    f988:	e7ef      	b.n	f96a <am_hal_uart_configure+0x76>
    f98a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f98c:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f990:	3a01      	subs	r2, #1
    f992:	2a03      	cmp	r2, #3
    f994:	d852      	bhi.n	fa3c <am_hal_uart_configure+0x148>
    f996:	e8df f002 	tbb	[pc, r2]
    f99a:	020f      	.short	0x020f
    f99c:	1215      	.short	0x1215
    f99e:	4a5e      	ldr	r2, [pc, #376]	; (fb18 <am_hal_uart_configure+0x224>)
    f9a0:	495e      	ldr	r1, [pc, #376]	; (fb1c <am_hal_uart_configure+0x228>)
    f9a2:	011b      	lsls	r3, r3, #4
    f9a4:	fbb2 f2f3 	udiv	r2, r2, r3
    f9a8:	fbb1 f3f3 	udiv	r3, r1, r3
    f9ac:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f9b0:	b95b      	cbnz	r3, f9ca <am_hal_uart_configure+0xd6>
    f9b2:	6623      	str	r3, [r4, #96]	; 0x60
    f9b4:	4857      	ldr	r0, [pc, #348]	; (fb14 <am_hal_uart_configure+0x220>)
    f9b6:	e7e1      	b.n	f97c <am_hal_uart_configure+0x88>
    f9b8:	4a59      	ldr	r2, [pc, #356]	; (fb20 <am_hal_uart_configure+0x22c>)
    f9ba:	495a      	ldr	r1, [pc, #360]	; (fb24 <am_hal_uart_configure+0x230>)
    f9bc:	e7f1      	b.n	f9a2 <am_hal_uart_configure+0xae>
    f9be:	4a5a      	ldr	r2, [pc, #360]	; (fb28 <am_hal_uart_configure+0x234>)
    f9c0:	495a      	ldr	r1, [pc, #360]	; (fb2c <am_hal_uart_configure+0x238>)
    f9c2:	e7ee      	b.n	f9a2 <am_hal_uart_configure+0xae>
    f9c4:	4a5a      	ldr	r2, [pc, #360]	; (fb30 <am_hal_uart_configure+0x23c>)
    f9c6:	495b      	ldr	r1, [pc, #364]	; (fb34 <am_hal_uart_configure+0x240>)
    f9c8:	e7eb      	b.n	f9a2 <am_hal_uart_configure+0xae>
    f9ca:	0890      	lsrs	r0, r2, #2
    f9cc:	626b      	str	r3, [r5, #36]	; 0x24
    f9ce:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    f9d2:	626b      	str	r3, [r5, #36]	; 0x24
    f9d4:	fbb1 f1f0 	udiv	r1, r1, r0
    f9d8:	62aa      	str	r2, [r5, #40]	; 0x28
    f9da:	6621      	str	r1, [r4, #96]	; 0x60
    f9dc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9de:	f36f 338e 	bfc	r3, #14, #1
    f9e2:	862b      	strh	r3, [r5, #48]	; 0x30
    f9e4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f9e6:	f36f 33cf 	bfc	r3, #15, #1
    f9ea:	862b      	strh	r3, [r5, #48]	; 0x30
    f9ec:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f9ee:	6933      	ldr	r3, [r6, #16]
    f9f0:	4313      	orrs	r3, r2
    f9f2:	632b      	str	r3, [r5, #48]	; 0x30
    f9f4:	6973      	ldr	r3, [r6, #20]
    f9f6:	636b      	str	r3, [r5, #52]	; 0x34
    f9f8:	6871      	ldr	r1, [r6, #4]
    f9fa:	68b3      	ldr	r3, [r6, #8]
    f9fc:	68f2      	ldr	r2, [r6, #12]
    f9fe:	430b      	orrs	r3, r1
    fa00:	f043 0310 	orr.w	r3, r3, #16
    fa04:	4313      	orrs	r3, r2
    fa06:	62eb      	str	r3, [r5, #44]	; 0x2c
    fa08:	f7fe ffb6 	bl	e978 <am_hal_interrupt_master_disable>
    fa0c:	9003      	str	r0, [sp, #12]
    fa0e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa10:	f043 0301 	orr.w	r3, r3, #1
    fa14:	862b      	strh	r3, [r5, #48]	; 0x30
    fa16:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fa1c:	862b      	strh	r3, [r5, #48]	; 0x30
    fa1e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fa20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fa24:	862b      	strh	r3, [r5, #48]	; 0x30
    fa26:	9803      	ldr	r0, [sp, #12]
    fa28:	f7fe ffaa 	bl	e980 <am_hal_interrupt_master_set>
    fa2c:	6825      	ldr	r5, [r4, #0]
    fa2e:	4b36      	ldr	r3, [pc, #216]	; (fb08 <am_hal_uart_configure+0x214>)
    fa30:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    fa34:	429d      	cmp	r5, r3
    fa36:	d005      	beq.n	fa44 <am_hal_uart_configure+0x150>
    fa38:	2000      	movs	r0, #0
    fa3a:	e79f      	b.n	f97c <am_hal_uart_configure+0x88>
    fa3c:	2300      	movs	r3, #0
    fa3e:	6623      	str	r3, [r4, #96]	; 0x60
    fa40:	483d      	ldr	r0, [pc, #244]	; (fb38 <am_hal_uart_configure+0x244>)
    fa42:	e79b      	b.n	f97c <am_hal_uart_configure+0x88>
    fa44:	69b1      	ldr	r1, [r6, #24]
    fa46:	6a37      	ldr	r7, [r6, #32]
    fa48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    fa4c:	b109      	cbz	r1, fa52 <am_hal_uart_configure+0x15e>
    fa4e:	69f3      	ldr	r3, [r6, #28]
    fa50:	bb3b      	cbnz	r3, faa2 <am_hal_uart_configure+0x1ae>
    fa52:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa54:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fa58:	f103 021c 	add.w	r2, r3, #28
    fa5c:	0312      	lsls	r2, r2, #12
    fa5e:	2100      	movs	r1, #0
    fa60:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fa64:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fa66:	f021 0120 	bic.w	r1, r1, #32
    fa6a:	6391      	str	r1, [r2, #56]	; 0x38
    fa6c:	b1b7      	cbz	r7, fa9c <am_hal_uart_configure+0x1a8>
    fa6e:	f1b8 0f00 	cmp.w	r8, #0
    fa72:	d12e      	bne.n	fad2 <am_hal_uart_configure+0x1de>
    fa74:	6823      	ldr	r3, [r4, #0]
    fa76:	4a24      	ldr	r2, [pc, #144]	; (fb08 <am_hal_uart_configure+0x214>)
    fa78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa7c:	2100      	movs	r1, #0
    fa7e:	4293      	cmp	r3, r2
    fa80:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fa84:	d1d8      	bne.n	fa38 <am_hal_uart_configure+0x144>
    fa86:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa88:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fa8c:	331c      	adds	r3, #28
    fa8e:	031b      	lsls	r3, r3, #12
    fa90:	2000      	movs	r0, #0
    fa92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fa94:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fa98:	639a      	str	r2, [r3, #56]	; 0x38
    fa9a:	e76f      	b.n	f97c <am_hal_uart_configure+0x88>
    fa9c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    faa0:	e7f4      	b.n	fa8c <am_hal_uart_configure+0x198>
    faa2:	2201      	movs	r2, #1
    faa4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    faa8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    faac:	f000 fb2c 	bl	10108 <am_hal_queue_init>
    fab0:	6823      	ldr	r3, [r4, #0]
    fab2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fab6:	42ab      	cmp	r3, r5
    fab8:	d1be      	bne.n	fa38 <am_hal_uart_configure+0x144>
    faba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fabc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fac0:	331c      	adds	r3, #28
    fac2:	031b      	lsls	r3, r3, #12
    fac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fac6:	f042 0220 	orr.w	r2, r2, #32
    faca:	639a      	str	r2, [r3, #56]	; 0x38
    facc:	2f00      	cmp	r7, #0
    face:	d1ce      	bne.n	fa6e <am_hal_uart_configure+0x17a>
    fad0:	e7d0      	b.n	fa74 <am_hal_uart_configure+0x180>
    fad2:	2201      	movs	r2, #1
    fad4:	4643      	mov	r3, r8
    fad6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    fada:	4639      	mov	r1, r7
    fadc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    fae0:	f000 fb12 	bl	10108 <am_hal_queue_init>
    fae4:	6823      	ldr	r3, [r4, #0]
    fae6:	4a08      	ldr	r2, [pc, #32]	; (fb08 <am_hal_uart_configure+0x214>)
    fae8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    faec:	4293      	cmp	r3, r2
    faee:	d1a3      	bne.n	fa38 <am_hal_uart_configure+0x144>
    faf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    faf2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    faf6:	331c      	adds	r3, #28
    faf8:	031b      	lsls	r3, r3, #12
    fafa:	2000      	movs	r0, #0
    fafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fafe:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fb02:	639a      	str	r2, [r3, #56]	; 0x38
    fb04:	e73a      	b.n	f97c <am_hal_uart_configure+0x88>
    fb06:	bf00      	nop
    fb08:	01ea9e06 	.word	0x01ea9e06
    fb0c:	40020000 	.word	0x40020000
    fb10:	0016e360 	.word	0x0016e360
    fb14:	08000003 	.word	0x08000003
    fb18:	2dc6c000 	.word	0x2dc6c000
    fb1c:	00b71b00 	.word	0x00b71b00
    fb20:	5b8d8000 	.word	0x5b8d8000
    fb24:	016e3600 	.word	0x016e3600
    fb28:	0b71b000 	.word	0x0b71b000
    fb2c:	002dc6c0 	.word	0x002dc6c0
    fb30:	16e36000 	.word	0x16e36000
    fb34:	005b8d80 	.word	0x005b8d80
    fb38:	08000002 	.word	0x08000002

0000fb3c <am_hal_uart_transfer>:
    fb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb40:	680f      	ldr	r7, [r1, #0]
    fb42:	b091      	sub	sp, #68	; 0x44
    fb44:	4605      	mov	r5, r0
    fb46:	b13f      	cbz	r7, fb58 <am_hal_uart_transfer+0x1c>
    fb48:	2f01      	cmp	r7, #1
    fb4a:	bf18      	it	ne
    fb4c:	2707      	movne	r7, #7
    fb4e:	d024      	beq.n	fb9a <am_hal_uart_transfer+0x5e>
    fb50:	4638      	mov	r0, r7
    fb52:	b011      	add	sp, #68	; 0x44
    fb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb58:	f8d1 900c 	ldr.w	r9, [r1, #12]
    fb5c:	690b      	ldr	r3, [r1, #16]
    fb5e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    fb62:	688e      	ldr	r6, [r1, #8]
    fb64:	9300      	str	r3, [sp, #0]
    fb66:	f1b9 0f00 	cmp.w	r9, #0
    fb6a:	d031      	beq.n	fbd0 <am_hal_uart_transfer+0x94>
    fb6c:	2e00      	cmp	r6, #0
    fb6e:	f000 819c 	beq.w	feaa <am_hal_uart_transfer+0x36e>
    fb72:	2800      	cmp	r0, #0
    fb74:	f000 8097 	beq.w	fca6 <am_hal_uart_transfer+0x16a>
    fb78:	6803      	ldr	r3, [r0, #0]
    fb7a:	4aa9      	ldr	r2, [pc, #676]	; (fe20 <am_hal_uart_transfer+0x2e4>)
    fb7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb80:	4293      	cmp	r3, r2
    fb82:	f000 8092 	beq.w	fcaa <am_hal_uart_transfer+0x16e>
    fb86:	46b8      	mov	r8, r7
    fb88:	9b00      	ldr	r3, [sp, #0]
    fb8a:	b10b      	cbz	r3, fb90 <am_hal_uart_transfer+0x54>
    fb8c:	f8c3 8000 	str.w	r8, [r3]
    fb90:	2702      	movs	r7, #2
    fb92:	4638      	mov	r0, r7
    fb94:	b011      	add	sp, #68	; 0x44
    fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb9a:	1d0b      	adds	r3, r1, #4
    fb9c:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    fba0:	f1b9 0f00 	cmp.w	r9, #0
    fba4:	d043      	beq.n	fc2e <am_hal_uart_transfer+0xf2>
    fba6:	2f00      	cmp	r7, #0
    fba8:	f000 8185 	beq.w	feb6 <am_hal_uart_transfer+0x37a>
    fbac:	2800      	cmp	r0, #0
    fbae:	f000 80eb 	beq.w	fd88 <am_hal_uart_transfer+0x24c>
    fbb2:	6802      	ldr	r2, [r0, #0]
    fbb4:	499a      	ldr	r1, [pc, #616]	; (fe20 <am_hal_uart_transfer+0x2e4>)
    fbb6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fbba:	428a      	cmp	r2, r1
    fbbc:	f000 80e7 	beq.w	fd8e <am_hal_uart_transfer+0x252>
    fbc0:	2600      	movs	r6, #0
    fbc2:	2702      	movs	r7, #2
    fbc4:	f1bb 0f00 	cmp.w	fp, #0
    fbc8:	d0c2      	beq.n	fb50 <am_hal_uart_transfer+0x14>
    fbca:	f8cb 6000 	str.w	r6, [fp]
    fbce:	e7bf      	b.n	fb50 <am_hal_uart_transfer+0x14>
    fbd0:	2800      	cmp	r0, #0
    fbd2:	d0dd      	beq.n	fb90 <am_hal_uart_transfer+0x54>
    fbd4:	6803      	ldr	r3, [r0, #0]
    fbd6:	4a92      	ldr	r2, [pc, #584]	; (fe20 <am_hal_uart_transfer+0x2e4>)
    fbd8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fbdc:	4293      	cmp	r3, r2
    fbde:	d1d7      	bne.n	fb90 <am_hal_uart_transfer+0x54>
    fbe0:	9b00      	ldr	r3, [sp, #0]
    fbe2:	b10b      	cbz	r3, fbe8 <am_hal_uart_transfer+0xac>
    fbe4:	f8c3 9000 	str.w	r9, [r3]
    fbe8:	b1fe      	cbz	r6, fc2a <am_hal_uart_transfer+0xee>
    fbea:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    fbee:	2b00      	cmp	r3, #0
    fbf0:	f040 8165 	bne.w	febe <am_hal_uart_transfer+0x382>
    fbf4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fbf6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fbfa:	311c      	adds	r1, #28
    fbfc:	0309      	lsls	r1, r1, #12
    fbfe:	698a      	ldr	r2, [r1, #24]
    fc00:	f3c2 1240 	ubfx	r2, r2, #5, #1
    fc04:	2a00      	cmp	r2, #0
    fc06:	f040 818d 	bne.w	ff24 <am_hal_uart_transfer+0x3e8>
    fc0a:	f10a 33ff 	add.w	r3, sl, #4294967295
    fc0e:	e003      	b.n	fc18 <am_hal_uart_transfer+0xdc>
    fc10:	6988      	ldr	r0, [r1, #24]
    fc12:	0680      	lsls	r0, r0, #26
    fc14:	f100 8151 	bmi.w	feba <am_hal_uart_transfer+0x37e>
    fc18:	3201      	adds	r2, #1
    fc1a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fc1e:	6008      	str	r0, [r1, #0]
    fc20:	4296      	cmp	r6, r2
    fc22:	d1f5      	bne.n	fc10 <am_hal_uart_transfer+0xd4>
    fc24:	9b00      	ldr	r3, [sp, #0]
    fc26:	b103      	cbz	r3, fc2a <am_hal_uart_transfer+0xee>
    fc28:	601e      	str	r6, [r3, #0]
    fc2a:	2700      	movs	r7, #0
    fc2c:	e790      	b.n	fb50 <am_hal_uart_transfer+0x14>
    fc2e:	2800      	cmp	r0, #0
    fc30:	d0ae      	beq.n	fb90 <am_hal_uart_transfer+0x54>
    fc32:	6802      	ldr	r2, [r0, #0]
    fc34:	497a      	ldr	r1, [pc, #488]	; (fe20 <am_hal_uart_transfer+0x2e4>)
    fc36:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fc3a:	428a      	cmp	r2, r1
    fc3c:	d1a8      	bne.n	fb90 <am_hal_uart_transfer+0x54>
    fc3e:	f1bb 0f00 	cmp.w	fp, #0
    fc42:	d001      	beq.n	fc48 <am_hal_uart_transfer+0x10c>
    fc44:	f8cb 9000 	str.w	r9, [fp]
    fc48:	2f00      	cmp	r7, #0
    fc4a:	d0ee      	beq.n	fc2a <am_hal_uart_transfer+0xee>
    fc4c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fc50:	2c00      	cmp	r4, #0
    fc52:	f040 816c 	bne.w	ff2e <am_hal_uart_transfer+0x3f2>
    fc56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fc58:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fc5c:	321c      	adds	r2, #28
    fc5e:	0312      	lsls	r2, r2, #12
    fc60:	6990      	ldr	r0, [r2, #24]
    fc62:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fc66:	2800      	cmp	r0, #0
    fc68:	f040 819d 	bne.w	ffa6 <am_hal_uart_transfer+0x46a>
    fc6c:	6811      	ldr	r1, [r2, #0]
    fc6e:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fc72:	bf08      	it	eq
    fc74:	f103 33ff 	addeq.w	r3, r3, #4294967295
    fc78:	d008      	beq.n	fc8c <am_hal_uart_transfer+0x150>
    fc7a:	e190      	b.n	ff9e <am_hal_uart_transfer+0x462>
    fc7c:	6991      	ldr	r1, [r2, #24]
    fc7e:	06c8      	lsls	r0, r1, #27
    fc80:	d409      	bmi.n	fc96 <am_hal_uart_transfer+0x15a>
    fc82:	6811      	ldr	r1, [r2, #0]
    fc84:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fc88:	f040 814e 	bne.w	ff28 <am_hal_uart_transfer+0x3ec>
    fc8c:	3401      	adds	r4, #1
    fc8e:	42a7      	cmp	r7, r4
    fc90:	f803 1f01 	strb.w	r1, [r3, #1]!
    fc94:	d1f2      	bne.n	fc7c <am_hal_uart_transfer+0x140>
    fc96:	2700      	movs	r7, #0
    fc98:	f1bb 0f00 	cmp.w	fp, #0
    fc9c:	f43f af58 	beq.w	fb50 <am_hal_uart_transfer+0x14>
    fca0:	f8cb 4000 	str.w	r4, [fp]
    fca4:	e754      	b.n	fb50 <am_hal_uart_transfer+0x14>
    fca6:	4680      	mov	r8, r0
    fca8:	e76e      	b.n	fb88 <am_hal_uart_transfer+0x4c>
    fcaa:	9301      	str	r3, [sp, #4]
    fcac:	4651      	mov	r1, sl
    fcae:	46bb      	mov	fp, r7
    fcb0:	46b8      	mov	r8, r7
    fcb2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fcb6:	b9f2      	cbnz	r2, fcf6 <am_hal_uart_transfer+0x1ba>
    fcb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fcba:	b19e      	cbz	r6, fce4 <am_hal_uart_transfer+0x1a8>
    fcbc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fcc0:	321c      	adds	r2, #28
    fcc2:	0312      	lsls	r2, r2, #12
    fcc4:	3901      	subs	r1, #1
    fcc6:	6994      	ldr	r4, [r2, #24]
    fcc8:	f3c4 1440 	ubfx	r4, r4, #5, #1
    fccc:	b11c      	cbz	r4, fcd6 <am_hal_uart_transfer+0x19a>
    fcce:	e047      	b.n	fd60 <am_hal_uart_transfer+0x224>
    fcd0:	6993      	ldr	r3, [r2, #24]
    fcd2:	069b      	lsls	r3, r3, #26
    fcd4:	d441      	bmi.n	fd5a <am_hal_uart_transfer+0x21e>
    fcd6:	3401      	adds	r4, #1
    fcd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fcdc:	6013      	str	r3, [r2, #0]
    fcde:	42b4      	cmp	r4, r6
    fce0:	d1f6      	bne.n	fcd0 <am_hal_uart_transfer+0x194>
    fce2:	44a0      	add	r8, r4
    fce4:	9b00      	ldr	r3, [sp, #0]
    fce6:	2b00      	cmp	r3, #0
    fce8:	d09f      	beq.n	fc2a <am_hal_uart_transfer+0xee>
    fcea:	4638      	mov	r0, r7
    fcec:	f8c3 8000 	str.w	r8, [r3]
    fcf0:	b011      	add	sp, #68	; 0x44
    fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcf6:	6baa      	ldr	r2, [r5, #56]	; 0x38
    fcf8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    fcfa:	1b14      	subs	r4, r2, r4
    fcfc:	42b4      	cmp	r4, r6
    fcfe:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fd02:	bf28      	it	cs
    fd04:	4634      	movcs	r4, r6
    fd06:	4622      	mov	r2, r4
    fd08:	4618      	mov	r0, r3
    fd0a:	9302      	str	r3, [sp, #8]
    fd0c:	f000 fa08 	bl	10120 <am_hal_queue_item_add>
    fd10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd12:	9303      	str	r3, [sp, #12]
    fd14:	f7fe fe30 	bl	e978 <am_hal_interrupt_master_disable>
    fd18:	9b03      	ldr	r3, [sp, #12]
    fd1a:	9008      	str	r0, [sp, #32]
    fd1c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd20:	331c      	adds	r3, #28
    fd22:	031b      	lsls	r3, r3, #12
    fd24:	9303      	str	r3, [sp, #12]
    fd26:	e00d      	b.n	fd44 <am_hal_uart_transfer+0x208>
    fd28:	f000 fa32 	bl	10190 <am_hal_queue_item_get>
    fd2c:	b190      	cbz	r0, fd54 <am_hal_uart_transfer+0x218>
    fd2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fd30:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd34:	331c      	adds	r3, #28
    fd36:	031b      	lsls	r3, r3, #12
    fd38:	699a      	ldr	r2, [r3, #24]
    fd3a:	0692      	lsls	r2, r2, #26
    fd3c:	bf5c      	itt	pl
    fd3e:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    fd42:	601a      	strpl	r2, [r3, #0]
    fd44:	9b03      	ldr	r3, [sp, #12]
    fd46:	9802      	ldr	r0, [sp, #8]
    fd48:	699b      	ldr	r3, [r3, #24]
    fd4a:	069b      	lsls	r3, r3, #26
    fd4c:	f04f 0201 	mov.w	r2, #1
    fd50:	a907      	add	r1, sp, #28
    fd52:	d5e9      	bpl.n	fd28 <am_hal_uart_transfer+0x1ec>
    fd54:	9808      	ldr	r0, [sp, #32]
    fd56:	f7fe fe13 	bl	e980 <am_hal_interrupt_master_set>
    fd5a:	1b36      	subs	r6, r6, r4
    fd5c:	44a0      	add	r8, r4
    fd5e:	d0c1      	beq.n	fce4 <am_hal_uart_transfer+0x1a8>
    fd60:	2010      	movs	r0, #16
    fd62:	f7fe fbff 	bl	e564 <am_hal_flash_delay>
    fd66:	f1b9 3fff 	cmp.w	r9, #4294967295
    fd6a:	d001      	beq.n	fd70 <am_hal_uart_transfer+0x234>
    fd6c:	f10b 0b01 	add.w	fp, fp, #1
    fd70:	45d9      	cmp	r9, fp
    fd72:	d9b7      	bls.n	fce4 <am_hal_uart_transfer+0x1a8>
    fd74:	682a      	ldr	r2, [r5, #0]
    fd76:	9b01      	ldr	r3, [sp, #4]
    fd78:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fd7c:	429a      	cmp	r2, r3
    fd7e:	eb0a 0108 	add.w	r1, sl, r8
    fd82:	f47f af01 	bne.w	fb88 <am_hal_uart_transfer+0x4c>
    fd86:	e794      	b.n	fcb2 <am_hal_uart_transfer+0x176>
    fd88:	4606      	mov	r6, r0
    fd8a:	2702      	movs	r7, #2
    fd8c:	e71a      	b.n	fbc4 <am_hal_uart_transfer+0x88>
    fd8e:	9200      	str	r2, [sp, #0]
    fd90:	f100 0248 	add.w	r2, r0, #72	; 0x48
    fd94:	f04f 0a00 	mov.w	sl, #0
    fd98:	9202      	str	r2, [sp, #8]
    fd9a:	465a      	mov	r2, fp
    fd9c:	4698      	mov	r8, r3
    fd9e:	469b      	mov	fp, r3
    fda0:	4656      	mov	r6, sl
    fda2:	4613      	mov	r3, r2
    fda4:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    fda8:	2a00      	cmp	r2, #0
    fdaa:	d152      	bne.n	fe52 <am_hal_uart_transfer+0x316>
    fdac:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fdae:	b3a7      	cbz	r7, fe1a <am_hal_uart_transfer+0x2de>
    fdb0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fdb4:	311c      	adds	r1, #28
    fdb6:	0309      	lsls	r1, r1, #12
    fdb8:	698a      	ldr	r2, [r1, #24]
    fdba:	06d0      	lsls	r0, r2, #27
    fdbc:	d432      	bmi.n	fe24 <am_hal_uart_transfer+0x2e8>
    fdbe:	680a      	ldr	r2, [r1, #0]
    fdc0:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    fdc4:	f040 80aa 	bne.w	ff1c <am_hal_uart_transfer+0x3e0>
    fdc8:	f108 38ff 	add.w	r8, r8, #4294967295
    fdcc:	e006      	b.n	fddc <am_hal_uart_transfer+0x2a0>
    fdce:	698a      	ldr	r2, [r1, #24]
    fdd0:	06d2      	lsls	r2, r2, #27
    fdd2:	d41f      	bmi.n	fe14 <am_hal_uart_transfer+0x2d8>
    fdd4:	680a      	ldr	r2, [r1, #0]
    fdd6:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    fdda:	d161      	bne.n	fea0 <am_hal_uart_transfer+0x364>
    fddc:	3401      	adds	r4, #1
    fdde:	42bc      	cmp	r4, r7
    fde0:	f808 2f01 	strb.w	r2, [r8, #1]!
    fde4:	d1f3      	bne.n	fdce <am_hal_uart_transfer+0x292>
    fde6:	469b      	mov	fp, r3
    fde8:	4426      	add	r6, r4
    fdea:	f1bb 0f00 	cmp.w	fp, #0
    fdee:	f43f af1c 	beq.w	fc2a <am_hal_uart_transfer+0xee>
    fdf2:	f8cb 6000 	str.w	r6, [fp]
    fdf6:	2700      	movs	r7, #0
    fdf8:	e6aa      	b.n	fb50 <am_hal_uart_transfer+0x14>
    fdfa:	9807      	ldr	r0, [sp, #28]
    fdfc:	f7fe fdc0 	bl	e980 <am_hal_interrupt_master_set>
    fe00:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fe02:	9802      	ldr	r0, [sp, #8]
    fe04:	42bc      	cmp	r4, r7
    fe06:	bf28      	it	cs
    fe08:	463c      	movcs	r4, r7
    fe0a:	4641      	mov	r1, r8
    fe0c:	4622      	mov	r2, r4
    fe0e:	f000 f9bf 	bl	10190 <am_hal_queue_item_get>
    fe12:	9b01      	ldr	r3, [sp, #4]
    fe14:	1b3f      	subs	r7, r7, r4
    fe16:	4426      	add	r6, r4
    fe18:	d104      	bne.n	fe24 <am_hal_uart_transfer+0x2e8>
    fe1a:	469b      	mov	fp, r3
    fe1c:	e7e5      	b.n	fdea <am_hal_uart_transfer+0x2ae>
    fe1e:	bf00      	nop
    fe20:	01ea9e06 	.word	0x01ea9e06
    fe24:	2010      	movs	r0, #16
    fe26:	9301      	str	r3, [sp, #4]
    fe28:	f7fe fb9c 	bl	e564 <am_hal_flash_delay>
    fe2c:	f1b9 3fff 	cmp.w	r9, #4294967295
    fe30:	9b01      	ldr	r3, [sp, #4]
    fe32:	d001      	beq.n	fe38 <am_hal_uart_transfer+0x2fc>
    fe34:	f10a 0a01 	add.w	sl, sl, #1
    fe38:	45d1      	cmp	r9, sl
    fe3a:	d9ee      	bls.n	fe1a <am_hal_uart_transfer+0x2de>
    fe3c:	682a      	ldr	r2, [r5, #0]
    fe3e:	9900      	ldr	r1, [sp, #0]
    fe40:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe44:	428a      	cmp	r2, r1
    fe46:	eb0b 0806 	add.w	r8, fp, r6
    fe4a:	d0ab      	beq.n	fda4 <am_hal_uart_transfer+0x268>
    fe4c:	469b      	mov	fp, r3
    fe4e:	2702      	movs	r7, #2
    fe50:	e6b8      	b.n	fbc4 <am_hal_uart_transfer+0x88>
    fe52:	9301      	str	r3, [sp, #4]
    fe54:	f7fe fd90 	bl	e978 <am_hal_interrupt_master_disable>
    fe58:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fe5a:	9007      	str	r0, [sp, #28]
    fe5c:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    fe60:	301c      	adds	r0, #28
    fe62:	9b01      	ldr	r3, [sp, #4]
    fe64:	0300      	lsls	r0, r0, #12
    fe66:	ac08      	add	r4, sp, #32
    fe68:	2200      	movs	r2, #0
    fe6a:	6981      	ldr	r1, [r0, #24]
    fe6c:	06c9      	lsls	r1, r1, #27
    fe6e:	d409      	bmi.n	fe84 <am_hal_uart_transfer+0x348>
    fe70:	6801      	ldr	r1, [r0, #0]
    fe72:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fe76:	f102 0201 	add.w	r2, r2, #1
    fe7a:	d118      	bne.n	feae <am_hal_uart_transfer+0x372>
    fe7c:	2a20      	cmp	r2, #32
    fe7e:	f804 1b01 	strb.w	r1, [r4], #1
    fe82:	d1f2      	bne.n	fe6a <am_hal_uart_transfer+0x32e>
    fe84:	a908      	add	r1, sp, #32
    fe86:	9802      	ldr	r0, [sp, #8]
    fe88:	9301      	str	r3, [sp, #4]
    fe8a:	f000 f949 	bl	10120 <am_hal_queue_item_add>
    fe8e:	9b01      	ldr	r3, [sp, #4]
    fe90:	2800      	cmp	r0, #0
    fe92:	d1b2      	bne.n	fdfa <am_hal_uart_transfer+0x2be>
    fe94:	4f45      	ldr	r7, [pc, #276]	; (ffac <am_hal_uart_transfer+0x470>)
    fe96:	469b      	mov	fp, r3
    fe98:	9807      	ldr	r0, [sp, #28]
    fe9a:	f7fe fd71 	bl	e980 <am_hal_interrupt_master_set>
    fe9e:	e691      	b.n	fbc4 <am_hal_uart_transfer+0x88>
    fea0:	469b      	mov	fp, r3
    fea2:	4426      	add	r6, r4
    fea4:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fea8:	e68c      	b.n	fbc4 <am_hal_uart_transfer+0x88>
    feaa:	46b8      	mov	r8, r7
    feac:	e71a      	b.n	fce4 <am_hal_uart_transfer+0x1a8>
    feae:	469b      	mov	fp, r3
    feb0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    feb4:	e7f0      	b.n	fe98 <am_hal_uart_transfer+0x35c>
    feb6:	463e      	mov	r6, r7
    feb8:	e797      	b.n	fdea <am_hal_uart_transfer+0x2ae>
    feba:	4616      	mov	r6, r2
    febc:	e6b2      	b.n	fc24 <am_hal_uart_transfer+0xe8>
    febe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    fec0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    fec2:	1a9b      	subs	r3, r3, r2
    fec4:	429e      	cmp	r6, r3
    fec6:	bf28      	it	cs
    fec8:	461e      	movcs	r6, r3
    feca:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    fece:	4651      	mov	r1, sl
    fed0:	4632      	mov	r2, r6
    fed2:	4620      	mov	r0, r4
    fed4:	f000 f924 	bl	10120 <am_hal_queue_item_add>
    fed8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    feda:	f7fe fd4d 	bl	e978 <am_hal_interrupt_master_disable>
    fede:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    fee2:	371c      	adds	r7, #28
    fee4:	033f      	lsls	r7, r7, #12
    fee6:	9005      	str	r0, [sp, #20]
    fee8:	e00d      	b.n	ff06 <am_hal_uart_transfer+0x3ca>
    feea:	f000 f951 	bl	10190 <am_hal_queue_item_get>
    feee:	b188      	cbz	r0, ff14 <am_hal_uart_transfer+0x3d8>
    fef0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fef2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fef6:	331c      	adds	r3, #28
    fef8:	031b      	lsls	r3, r3, #12
    fefa:	699a      	ldr	r2, [r3, #24]
    fefc:	0692      	lsls	r2, r2, #26
    fefe:	bf5c      	itt	pl
    ff00:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    ff04:	601a      	strpl	r2, [r3, #0]
    ff06:	69bb      	ldr	r3, [r7, #24]
    ff08:	069b      	lsls	r3, r3, #26
    ff0a:	f04f 0201 	mov.w	r2, #1
    ff0e:	a908      	add	r1, sp, #32
    ff10:	4620      	mov	r0, r4
    ff12:	d5ea      	bpl.n	feea <am_hal_uart_transfer+0x3ae>
    ff14:	9805      	ldr	r0, [sp, #20]
    ff16:	f7fe fd33 	bl	e980 <am_hal_interrupt_master_set>
    ff1a:	e683      	b.n	fc24 <am_hal_uart_transfer+0xe8>
    ff1c:	469b      	mov	fp, r3
    ff1e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff22:	e64f      	b.n	fbc4 <am_hal_uart_transfer+0x88>
    ff24:	461e      	mov	r6, r3
    ff26:	e67d      	b.n	fc24 <am_hal_uart_transfer+0xe8>
    ff28:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff2c:	e6b4      	b.n	fc98 <am_hal_uart_transfer+0x15c>
    ff2e:	9300      	str	r3, [sp, #0]
    ff30:	f7fe fd22 	bl	e978 <am_hal_interrupt_master_disable>
    ff34:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ff36:	9006      	str	r0, [sp, #24]
    ff38:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ff3c:	321c      	adds	r2, #28
    ff3e:	0311      	lsls	r1, r2, #12
    ff40:	a808      	add	r0, sp, #32
    ff42:	2200      	movs	r2, #0
    ff44:	9b00      	ldr	r3, [sp, #0]
    ff46:	e009      	b.n	ff5c <am_hal_uart_transfer+0x420>
    ff48:	680c      	ldr	r4, [r1, #0]
    ff4a:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ff4e:	f102 0201 	add.w	r2, r2, #1
    ff52:	d121      	bne.n	ff98 <am_hal_uart_transfer+0x45c>
    ff54:	2a20      	cmp	r2, #32
    ff56:	f800 4b01 	strb.w	r4, [r0], #1
    ff5a:	d002      	beq.n	ff62 <am_hal_uart_transfer+0x426>
    ff5c:	698c      	ldr	r4, [r1, #24]
    ff5e:	06e4      	lsls	r4, r4, #27
    ff60:	d5f2      	bpl.n	ff48 <am_hal_uart_transfer+0x40c>
    ff62:	f105 0648 	add.w	r6, r5, #72	; 0x48
    ff66:	a908      	add	r1, sp, #32
    ff68:	4630      	mov	r0, r6
    ff6a:	9300      	str	r3, [sp, #0]
    ff6c:	f000 f8d8 	bl	10120 <am_hal_queue_item_add>
    ff70:	b920      	cbnz	r0, ff7c <am_hal_uart_transfer+0x440>
    ff72:	4f0e      	ldr	r7, [pc, #56]	; (ffac <am_hal_uart_transfer+0x470>)
    ff74:	9806      	ldr	r0, [sp, #24]
    ff76:	f7fe fd03 	bl	e980 <am_hal_interrupt_master_set>
    ff7a:	e5e9      	b.n	fb50 <am_hal_uart_transfer+0x14>
    ff7c:	9806      	ldr	r0, [sp, #24]
    ff7e:	f7fe fcff 	bl	e980 <am_hal_interrupt_master_set>
    ff82:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ff84:	9b00      	ldr	r3, [sp, #0]
    ff86:	42bc      	cmp	r4, r7
    ff88:	bf28      	it	cs
    ff8a:	463c      	movcs	r4, r7
    ff8c:	4619      	mov	r1, r3
    ff8e:	4630      	mov	r0, r6
    ff90:	4622      	mov	r2, r4
    ff92:	f000 f8fd 	bl	10190 <am_hal_queue_item_get>
    ff96:	e67e      	b.n	fc96 <am_hal_uart_transfer+0x15a>
    ff98:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ff9c:	e7ea      	b.n	ff74 <am_hal_uart_transfer+0x438>
    ff9e:	4604      	mov	r4, r0
    ffa0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ffa4:	e678      	b.n	fc98 <am_hal_uart_transfer+0x15c>
    ffa6:	4627      	mov	r7, r4
    ffa8:	e676      	b.n	fc98 <am_hal_uart_transfer+0x15c>
    ffaa:	bf00      	nop
    ffac:	08000001 	.word	0x08000001

0000ffb0 <am_hal_uart_tx_flush>:
    ffb0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ffb4:	b570      	push	{r4, r5, r6, lr}
    ffb6:	4604      	mov	r4, r0
    ffb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ffba:	b15b      	cbz	r3, ffd4 <am_hal_uart_tx_flush+0x24>
    ffbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ffbe:	b14b      	cbz	r3, ffd4 <am_hal_uart_tx_flush+0x24>
    ffc0:	4e0e      	ldr	r6, [pc, #56]	; (fffc <am_hal_uart_tx_flush+0x4c>)
    ffc2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ffc4:	fbb6 f0f0 	udiv	r0, r6, r0
    ffc8:	0100      	lsls	r0, r0, #4
    ffca:	f7fe facb 	bl	e564 <am_hal_flash_delay>
    ffce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ffd0:	2b00      	cmp	r3, #0
    ffd2:	d1f6      	bne.n	ffc2 <am_hal_uart_tx_flush+0x12>
    ffd4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ffd8:	351c      	adds	r5, #28
    ffda:	032d      	lsls	r5, r5, #12
    ffdc:	69ab      	ldr	r3, [r5, #24]
    ffde:	071a      	lsls	r2, r3, #28
    ffe0:	d509      	bpl.n	fff6 <am_hal_uart_tx_flush+0x46>
    ffe2:	4e06      	ldr	r6, [pc, #24]	; (fffc <am_hal_uart_tx_flush+0x4c>)
    ffe4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ffe6:	fbb6 f0f0 	udiv	r0, r6, r0
    ffea:	0100      	lsls	r0, r0, #4
    ffec:	f7fe faba 	bl	e564 <am_hal_flash_delay>
    fff0:	69ab      	ldr	r3, [r5, #24]
    fff2:	071b      	lsls	r3, r3, #28
    fff4:	d4f6      	bmi.n	ffe4 <am_hal_uart_tx_flush+0x34>
    fff6:	2000      	movs	r0, #0
    fff8:	bd70      	pop	{r4, r5, r6, pc}
    fffa:	bf00      	nop
    fffc:	00b71b00 	.word	0x00b71b00

00010000 <am_hal_cmdq_init>:
   10000:	2807      	cmp	r0, #7
   10002:	d901      	bls.n	10008 <am_hal_cmdq_init+0x8>
   10004:	2005      	movs	r0, #5
   10006:	4770      	bx	lr
   10008:	b1c9      	cbz	r1, 1003e <am_hal_cmdq_init+0x3e>
   1000a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1000e:	684c      	ldr	r4, [r1, #4]
   10010:	b194      	cbz	r4, 10038 <am_hal_cmdq_init+0x38>
   10012:	b18a      	cbz	r2, 10038 <am_hal_cmdq_init+0x38>
   10014:	680e      	ldr	r6, [r1, #0]
   10016:	2e01      	cmp	r6, #1
   10018:	d90e      	bls.n	10038 <am_hal_cmdq_init+0x38>
   1001a:	272c      	movs	r7, #44	; 0x2c
   1001c:	f8df c09c 	ldr.w	ip, [pc, #156]	; 100bc <am_hal_cmdq_init+0xbc>
   10020:	fb07 f700 	mul.w	r7, r7, r0
   10024:	eb0c 0507 	add.w	r5, ip, r7
   10028:	f895 e003 	ldrb.w	lr, [r5, #3]
   1002c:	f01e 0301 	ands.w	r3, lr, #1
   10030:	d007      	beq.n	10042 <am_hal_cmdq_init+0x42>
   10032:	2007      	movs	r0, #7
   10034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10038:	2006      	movs	r0, #6
   1003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1003e:	2006      	movs	r0, #6
   10040:	4770      	bx	lr
   10042:	f04e 0e01 	orr.w	lr, lr, #1
   10046:	00f6      	lsls	r6, r6, #3
   10048:	f363 0e41 	bfi	lr, r3, #1, #1
   1004c:	f885 e003 	strb.w	lr, [r5, #3]
   10050:	eb06 0804 	add.w	r8, r6, r4
   10054:	f8df e068 	ldr.w	lr, [pc, #104]	; 100c0 <am_hal_cmdq_init+0xc0>
   10058:	f8c5 8008 	str.w	r8, [r5, #8]
   1005c:	606c      	str	r4, [r5, #4]
   1005e:	60ec      	str	r4, [r5, #12]
   10060:	616c      	str	r4, [r5, #20]
   10062:	612c      	str	r4, [r5, #16]
   10064:	61ae      	str	r6, [r5, #24]
   10066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1006a:	f85c 6007 	ldr.w	r6, [ip, r7]
   1006e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 100c4 <am_hal_cmdq_init+0xc4>
   10072:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
   10076:	f368 0617 	bfi	r6, r8, #0, #24
   1007a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1007e:	f84c 6007 	str.w	r6, [ip, r7]
   10082:	6268      	str	r0, [r5, #36]	; 0x24
   10084:	61eb      	str	r3, [r5, #28]
   10086:	622b      	str	r3, [r5, #32]
   10088:	f8ce 3000 	str.w	r3, [lr]
   1008c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1008e:	7a09      	ldrb	r1, [r1, #8]
   10090:	68c0      	ldr	r0, [r0, #12]
   10092:	6003      	str	r3, [r0, #0]
   10094:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10096:	6906      	ldr	r6, [r0, #16]
   10098:	6940      	ldr	r0, [r0, #20]
   1009a:	6837      	ldr	r7, [r6, #0]
   1009c:	4338      	orrs	r0, r7
   1009e:	6030      	str	r0, [r6, #0]
   100a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
   100a2:	6840      	ldr	r0, [r0, #4]
   100a4:	6004      	str	r4, [r0, #0]
   100a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   100a8:	0049      	lsls	r1, r1, #1
   100aa:	6804      	ldr	r4, [r0, #0]
   100ac:	f001 0102 	and.w	r1, r1, #2
   100b0:	6021      	str	r1, [r4, #0]
   100b2:	4618      	mov	r0, r3
   100b4:	6015      	str	r5, [r2, #0]
   100b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100ba:	bf00      	nop
   100bc:	10001194 	.word	0x10001194
   100c0:	00010840 	.word	0x00010840
   100c4:	00cdcdcd 	.word	0x00cdcdcd

000100c8 <am_hal_cmdq_enable>:
   100c8:	4603      	mov	r3, r0
   100ca:	b128      	cbz	r0, 100d8 <am_hal_cmdq_enable+0x10>
   100cc:	6802      	ldr	r2, [r0, #0]
   100ce:	490d      	ldr	r1, [pc, #52]	; (10104 <am_hal_cmdq_enable+0x3c>)
   100d0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   100d4:	428a      	cmp	r2, r1
   100d6:	d001      	beq.n	100dc <am_hal_cmdq_enable+0x14>
   100d8:	2002      	movs	r0, #2
   100da:	4770      	bx	lr
   100dc:	78c2      	ldrb	r2, [r0, #3]
   100de:	f002 0202 	and.w	r2, r2, #2
   100e2:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   100e6:	b952      	cbnz	r2, 100fe <am_hal_cmdq_enable+0x36>
   100e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   100ea:	6811      	ldr	r1, [r2, #0]
   100ec:	680a      	ldr	r2, [r1, #0]
   100ee:	f042 0201 	orr.w	r2, r2, #1
   100f2:	600a      	str	r2, [r1, #0]
   100f4:	78da      	ldrb	r2, [r3, #3]
   100f6:	f042 0202 	orr.w	r2, r2, #2
   100fa:	70da      	strb	r2, [r3, #3]
   100fc:	4770      	bx	lr
   100fe:	2000      	movs	r0, #0
   10100:	4770      	bx	lr
   10102:	bf00      	nop
   10104:	01cdcdcd 	.word	0x01cdcdcd

00010108 <am_hal_queue_init>:
   10108:	b410      	push	{r4}
   1010a:	2400      	movs	r4, #0
   1010c:	6004      	str	r4, [r0, #0]
   1010e:	6044      	str	r4, [r0, #4]
   10110:	6084      	str	r4, [r0, #8]
   10112:	60c3      	str	r3, [r0, #12]
   10114:	6102      	str	r2, [r0, #16]
   10116:	6141      	str	r1, [r0, #20]
   10118:	f85d 4b04 	ldr.w	r4, [sp], #4
   1011c:	4770      	bx	lr
   1011e:	bf00      	nop

00010120 <am_hal_queue_item_add>:
   10120:	b5f0      	push	{r4, r5, r6, r7, lr}
   10122:	4604      	mov	r4, r0
   10124:	6906      	ldr	r6, [r0, #16]
   10126:	b083      	sub	sp, #12
   10128:	fb06 f602 	mul.w	r6, r6, r2
   1012c:	460d      	mov	r5, r1
   1012e:	f7fe fc23 	bl	e978 <am_hal_interrupt_master_disable>
   10132:	68e7      	ldr	r7, [r4, #12]
   10134:	68a2      	ldr	r2, [r4, #8]
   10136:	9001      	str	r0, [sp, #4]
   10138:	1abb      	subs	r3, r7, r2
   1013a:	429e      	cmp	r6, r3
   1013c:	d826      	bhi.n	1018c <am_hal_queue_item_add+0x6c>
   1013e:	b196      	cbz	r6, 10166 <am_hal_queue_item_add+0x46>
   10140:	6823      	ldr	r3, [r4, #0]
   10142:	4629      	mov	r1, r5
   10144:	b1c5      	cbz	r5, 10178 <am_hal_queue_item_add+0x58>
   10146:	19af      	adds	r7, r5, r6
   10148:	6962      	ldr	r2, [r4, #20]
   1014a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1014e:	54d0      	strb	r0, [r2, r3]
   10150:	6823      	ldr	r3, [r4, #0]
   10152:	68e5      	ldr	r5, [r4, #12]
   10154:	3301      	adds	r3, #1
   10156:	42b9      	cmp	r1, r7
   10158:	fbb3 f0f5 	udiv	r0, r3, r5
   1015c:	fb05 3310 	mls	r3, r5, r0, r3
   10160:	6023      	str	r3, [r4, #0]
   10162:	d1f1      	bne.n	10148 <am_hal_queue_item_add+0x28>
   10164:	68a2      	ldr	r2, [r4, #8]
   10166:	4432      	add	r2, r6
   10168:	60a2      	str	r2, [r4, #8]
   1016a:	2401      	movs	r4, #1
   1016c:	9801      	ldr	r0, [sp, #4]
   1016e:	f7fe fc07 	bl	e980 <am_hal_interrupt_master_set>
   10172:	4620      	mov	r0, r4
   10174:	b003      	add	sp, #12
   10176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10178:	3101      	adds	r1, #1
   1017a:	3301      	adds	r3, #1
   1017c:	428e      	cmp	r6, r1
   1017e:	fbb3 f0f7 	udiv	r0, r3, r7
   10182:	fb07 3310 	mls	r3, r7, r0, r3
   10186:	d1f7      	bne.n	10178 <am_hal_queue_item_add+0x58>
   10188:	6023      	str	r3, [r4, #0]
   1018a:	e7ec      	b.n	10166 <am_hal_queue_item_add+0x46>
   1018c:	2400      	movs	r4, #0
   1018e:	e7ed      	b.n	1016c <am_hal_queue_item_add+0x4c>

00010190 <am_hal_queue_item_get>:
   10190:	b5f0      	push	{r4, r5, r6, r7, lr}
   10192:	4604      	mov	r4, r0
   10194:	6906      	ldr	r6, [r0, #16]
   10196:	b083      	sub	sp, #12
   10198:	fb06 f602 	mul.w	r6, r6, r2
   1019c:	460d      	mov	r5, r1
   1019e:	f7fe fbeb 	bl	e978 <am_hal_interrupt_master_disable>
   101a2:	68a2      	ldr	r2, [r4, #8]
   101a4:	9001      	str	r0, [sp, #4]
   101a6:	4296      	cmp	r6, r2
   101a8:	d81c      	bhi.n	101e4 <am_hal_queue_item_get+0x54>
   101aa:	b196      	cbz	r6, 101d2 <am_hal_queue_item_get+0x42>
   101ac:	6863      	ldr	r3, [r4, #4]
   101ae:	b1dd      	cbz	r5, 101e8 <am_hal_queue_item_get+0x58>
   101b0:	4629      	mov	r1, r5
   101b2:	19af      	adds	r7, r5, r6
   101b4:	6962      	ldr	r2, [r4, #20]
   101b6:	5cd3      	ldrb	r3, [r2, r3]
   101b8:	f801 3b01 	strb.w	r3, [r1], #1
   101bc:	6863      	ldr	r3, [r4, #4]
   101be:	68e5      	ldr	r5, [r4, #12]
   101c0:	3301      	adds	r3, #1
   101c2:	428f      	cmp	r7, r1
   101c4:	fbb3 f0f5 	udiv	r0, r3, r5
   101c8:	fb05 3310 	mls	r3, r5, r0, r3
   101cc:	6063      	str	r3, [r4, #4]
   101ce:	d1f1      	bne.n	101b4 <am_hal_queue_item_get+0x24>
   101d0:	68a2      	ldr	r2, [r4, #8]
   101d2:	1b92      	subs	r2, r2, r6
   101d4:	60a2      	str	r2, [r4, #8]
   101d6:	2401      	movs	r4, #1
   101d8:	9801      	ldr	r0, [sp, #4]
   101da:	f7fe fbd1 	bl	e980 <am_hal_interrupt_master_set>
   101de:	4620      	mov	r0, r4
   101e0:	b003      	add	sp, #12
   101e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101e4:	2400      	movs	r4, #0
   101e6:	e7f7      	b.n	101d8 <am_hal_queue_item_get+0x48>
   101e8:	68e0      	ldr	r0, [r4, #12]
   101ea:	4629      	mov	r1, r5
   101ec:	3101      	adds	r1, #1
   101ee:	3301      	adds	r3, #1
   101f0:	428e      	cmp	r6, r1
   101f2:	fbb3 f5f0 	udiv	r5, r3, r0
   101f6:	fb00 3315 	mls	r3, r0, r5, r3
   101fa:	d1f7      	bne.n	101ec <am_hal_queue_item_get+0x5c>
   101fc:	6063      	str	r3, [r4, #4]
   101fe:	e7e8      	b.n	101d2 <am_hal_queue_item_get+0x42>
   10200:	72617053 	.word	0x72617053
   10204:	6e75466b 	.word	0x6e75466b
   10208:	67644520 	.word	0x67644520
   1020c:	6f422065 	.word	0x6f422065
   10210:	20647261 	.word	0x20647261
   10214:	74736554 	.word	0x74736554
   10218:	0000000a 	.word	0x0000000a
   1021c:	323a3831 	.word	0x323a3831
   10220:	33303a37 	.word	0x33303a37
   10224:	00000000 	.word	0x00000000
   10228:	2072614d 	.word	0x2072614d
   1022c:	32203031 	.word	0x32203031
   10230:	00303230 	.word	0x00303230
   10234:	706d6f43 	.word	0x706d6f43
   10238:	64656c69 	.word	0x64656c69
   1023c:	206e6f20 	.word	0x206e6f20
   10240:	202c7325 	.word	0x202c7325
   10244:	0a0a7325 	.word	0x0a0a7325
   10248:	00000000 	.word	0x00000000
   1024c:	72617053 	.word	0x72617053
   10250:	6e75466b 	.word	0x6e75466b
   10254:	6e655420 	.word	0x6e655420
   10258:	66726f73 	.word	0x66726f73
   1025c:	20776f6c 	.word	0x20776f6c
   10260:	75626544 	.word	0x75626544
   10264:	754f2067 	.word	0x754f2067
   10268:	74757074 	.word	0x74757074
   1026c:	41552820 	.word	0x41552820
   10270:	0d295452 	.word	0x0d295452
   10274:	0000000a 	.word	0x0000000a
   10278:	6c6c6548 	.word	0x6c6c6548
   1027c:	55202c6f 	.word	0x55202c6f
   10280:	21545241 	.word	0x21545241
   10284:	00000a0d 	.word	0x00000a0d
   10288:	65636341 	.word	0x65636341
   1028c:	6f72656c 	.word	0x6f72656c
   10290:	6574656d 	.word	0x6574656d
   10294:	6e692072 	.word	0x6e692072
   10298:	72207469 	.word	0x72207469
   1029c:	72757465 	.word	0x72757465
   102a0:	2064656e 	.word	0x2064656e
   102a4:	0d783825 	.word	0x0d783825
   102a8:	0000000a 	.word	0x0000000a
   102ac:	20636341 	.word	0x20636341
   102b0:	5d676d5b 	.word	0x5d676d5b
   102b4:	34302520 	.word	0x34302520
   102b8:	2066322e 	.word	0x2066322e
   102bc:	25202c78 	.word	0x25202c78
   102c0:	322e3430 	.word	0x322e3430
   102c4:	2c792066 	.word	0x2c792066
   102c8:	34302520 	.word	0x34302520
   102cc:	2066322e 	.word	0x2066322e
   102d0:	54202c7a 	.word	0x54202c7a
   102d4:	20706d65 	.word	0x20706d65
   102d8:	6765645b 	.word	0x6765645b
   102dc:	205d4320 	.word	0x205d4320
   102e0:	2e343025 	.word	0x2e343025
   102e4:	202c6632 	.word	0x202c6632
   102e8:	3043494d 	.word	0x3043494d
   102ec:	6f635b20 	.word	0x6f635b20
   102f0:	73746e75 	.word	0x73746e75
   102f4:	32202f20 	.word	0x32202f20
   102f8:	5d34315e 	.word	0x5d34315e
   102fc:	0d642520 	.word	0x0d642520
   10300:	0000000a 	.word	0x0000000a
   10304:	0a0a0a0a 	.word	0x0a0a0a0a
   10308:	0a0a0a0a 	.word	0x0a0a0a0a
   1030c:	0a0a0a0a 	.word	0x0a0a0a0a
   10310:	0a0a0a0a 	.word	0x0a0a0a0a
   10314:	00000a0a 	.word	0x00000a0a
   10318:	6f727245 	.word	0x6f727245
   1031c:	202d2072 	.word	0x202d2072
   10320:	65736572 	.word	0x65736572
   10324:	74617672 	.word	0x74617672
   10328:	206e6f69 	.word	0x206e6f69
   1032c:	7420666f 	.word	0x7420666f
   10330:	41206568 	.word	0x41206568
   10334:	69204344 	.word	0x69204344
   10338:	6174736e 	.word	0x6174736e
   1033c:	2065636e 	.word	0x2065636e
   10340:	6c696166 	.word	0x6c696166
   10344:	0a2e6465 	.word	0x0a2e6465
   10348:	00000000 	.word	0x00000000
   1034c:	6f727245 	.word	0x6f727245
   10350:	202d2072 	.word	0x202d2072
   10354:	20434441 	.word	0x20434441
   10358:	65776f70 	.word	0x65776f70
   1035c:	6e6f2072 	.word	0x6e6f2072
   10360:	69616620 	.word	0x69616620
   10364:	2e64656c 	.word	0x2e64656c
   10368:	0000000a 	.word	0x0000000a
   1036c:	6f727245 	.word	0x6f727245
   10370:	202d2072 	.word	0x202d2072
   10374:	666e6f63 	.word	0x666e6f63
   10378:	72756769 	.word	0x72756769
   1037c:	20676e69 	.word	0x20676e69
   10380:	20434441 	.word	0x20434441
   10384:	6c696166 	.word	0x6c696166
   10388:	0a2e6465 	.word	0x0a2e6465
   1038c:	00000000 	.word	0x00000000
   10390:	6f727245 	.word	0x6f727245
   10394:	202d2072 	.word	0x202d2072
   10398:	666e6f63 	.word	0x666e6f63
   1039c:	72756769 	.word	0x72756769
   103a0:	20676e69 	.word	0x20676e69
   103a4:	20434441 	.word	0x20434441
   103a8:	746f6c53 	.word	0x746f6c53
   103ac:	66203020 	.word	0x66203020
   103b0:	656c6961 	.word	0x656c6961
   103b4:	000a2e64 	.word	0x000a2e64
   103b8:	6f727245 	.word	0x6f727245
   103bc:	202d2072 	.word	0x202d2072
   103c0:	62616e65 	.word	0x62616e65
   103c4:	676e696c 	.word	0x676e696c
   103c8:	43444120 	.word	0x43444120
   103cc:	69616620 	.word	0x69616620
   103d0:	2e64656c 	.word	0x2e64656c
   103d4:	0000000a 	.word	0x0000000a
   103d8:	6f727245 	.word	0x6f727245
   103dc:	65722072 	.word	0x65722072
   103e0:	6e696461 	.word	0x6e696461
   103e4:	44412067 	.word	0x44412067
   103e8:	6e692043 	.word	0x6e692043
   103ec:	72726574 	.word	0x72726574
   103f0:	20747075 	.word	0x20747075
   103f4:	74617473 	.word	0x74617473
   103f8:	000a7375 	.word	0x000a7375
   103fc:	6f727245 	.word	0x6f727245
   10400:	6c632072 	.word	0x6c632072
   10404:	69726165 	.word	0x69726165
   10408:	4120676e 	.word	0x4120676e
   1040c:	69204344 	.word	0x69204344
   10410:	7265746e 	.word	0x7265746e
   10414:	74707572 	.word	0x74707572
   10418:	61747320 	.word	0x61747320
   1041c:	0a737574 	.word	0x0a737574
   10420:	00000000 	.word	0x00000000
   10424:	6f727245 	.word	0x6f727245
   10428:	202d2072 	.word	0x202d2072
   1042c:	20434441 	.word	0x20434441
   10430:	706d6173 	.word	0x706d6173
   10434:	7220656c 	.word	0x7220656c
   10438:	20646165 	.word	0x20646165
   1043c:	6d6f7266 	.word	0x6d6f7266
   10440:	46494620 	.word	0x46494620
   10444:	6166204f 	.word	0x6166204f
   10448:	64656c69 	.word	0x64656c69
   1044c:	00000a2e 	.word	0x00000a2e
   10450:	6f727245 	.word	0x6f727245
   10454:	202d2072 	.word	0x202d2072
   10458:	61736964 	.word	0x61736964
   1045c:	20656c62 	.word	0x20656c62
   10460:	20434441 	.word	0x20434441
   10464:	6c696166 	.word	0x6c696166
   10468:	0a2e6465 	.word	0x0a2e6465
   1046c:	00000000 	.word	0x00000000
   10470:	6f727245 	.word	0x6f727245
   10474:	202d2072 	.word	0x202d2072
   10478:	61736964 	.word	0x61736964
   1047c:	6e696c62 	.word	0x6e696c62
   10480:	68742067 	.word	0x68742067
   10484:	44412065 	.word	0x44412065
   10488:	6f702043 	.word	0x6f702043
   1048c:	20726577 	.word	0x20726577
   10490:	616d6f64 	.word	0x616d6f64
   10494:	66206e69 	.word	0x66206e69
   10498:	656c6961 	.word	0x656c6961
   1049c:	000a2e64 	.word	0x000a2e64
   104a0:	6f727245 	.word	0x6f727245
   104a4:	202d2072 	.word	0x202d2072
   104a8:	75746572 	.word	0x75746572
   104ac:	6f206e72 	.word	0x6f206e72
   104b0:	68742066 	.word	0x68742066
   104b4:	44412065 	.word	0x44412065
   104b8:	6e692043 	.word	0x6e692043
   104bc:	6e617473 	.word	0x6e617473
   104c0:	66206563 	.word	0x66206563
   104c4:	656c6961 	.word	0x656c6961
   104c8:	000a2e64 	.word	0x000a2e64

000104cc <g_AM_PIN_11_ADCSE2>:
   104cc:	00000000 52206f4e 75622058 72656666     ....No RX buffer
   104dc:	6f727020 65646976 00000a64 646e6553      provided...Send
   104ec:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   104fc:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   1050c:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   1051c:	65646976 00000a64 646e6553 72726520     vided...Send err
   1052c:	68702820 20657361 203a2931 000a6425      (phase 1): %d..
   1053c:	616f6857 2820696d 756f6873 6220646c     Whoami (should b
   1054c:	78302065 3a293333 25783020 000a7832     e 0x33): 0x%2x..

0001055c <g_sBspUartConfig>:
   1055c:	0001c200 00000060 00000000 00000000     ....`...........
   1056c:	00000000 00000012 00000000 00000000     ................
	...

00010584 <g_AM_BSP_GPIO_COM_UART_RX>:
   10584:	00000000                                ....

00010588 <g_AM_BSP_GPIO_COM_UART_TX>:
   10588:	00000000                                ....

0001058c <g_AM_BSP_GPIO_IOM4_SCL>:
   1058c:	00040b44                                D...

00010590 <g_AM_BSP_GPIO_IOM4_SDA>:
   10590:	00040b44                                D...

00010594 <am_hal_cachectrl_defaults>:
   10594:	00000308                                ....

00010598 <g_AM_HAL_GPIO_INPUT>:
   10598:	00001003                                ....

0001059c <g_ui8Bit76Capabilities>:
   1059c:	02800101 80010180 80800101 80808080     ................
   105ac:	80808080 80808008 01800180 80808080     ................
   105bc:	80808080 01800402 01010401 80808080     ................
   105cc:	00000101                                ....

000105d0 <g_ui8NCEtable>:
   105d0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   105e0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   105f0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10600:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10610:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10620:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   10630:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   10640:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   10650:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   10660:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   10670:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10680:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10690:	32221202 43231303                       .."2..#C

00010698 <g_ui8Inpen>:
   10698:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   106a8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   106b8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   106c8:	00003130                                01..

000106cc <g_AM_HAL_GPIO_DISABLE>:
   106cc:	00000003                                ....

000106d0 <g_AM_HAL_GPIO_OUTPUT>:
   106d0:	00000403                                ....

000106d4 <g_ui8nCEpins>:
   106d4:	02070707 00080802 01020202 01010101     ................
   106e4:	01010101 01010101 01010101 01010101     ................
   106f4:	01010101 08010101 01010008 01010101     ................
   10704:	00000101                                ....

00010708 <g_AM_HAL_GPIO_OUTPUT_12>:
   10708:	00000703                                ....

0001070c <g_am_hal_mcuctrl_flash_size>:
   1070c:	00004000 00008000 00010000 00020000     .@..............
   1071c:	00040000 00080000 00100000 00200000     .............. .
   1072c:	00180000 00000000 00000000 00000000     ................
	...

0001074c <g_am_hal_mcuctrl_sram_size>:
   1074c:	00004000 00008000 00010000 00020000     .@..............
   1075c:	00040000 00080000 00100000 00060000     ................
   1076c:	000c0000 00000000 00000000 00000000     ................
	...

0001078c <am_hal_pwrctrl_peripheral_control>:
	...
   10798:	00000001 00000004 00000004 00000002     ................
   107a8:	00000008 00000008 00000004 00000008     ................
   107b8:	00000008 00000008 00000008 00000008     ................
   107c8:	00000010 00000010 00000010 00000020     ............ ...
   107d8:	00000010 00000010 00000040 00000010     ........@.......
   107e8:	00000010 00000080 00000004 00000004     ................
   107f8:	00000100 00000004 00000004 00000200     ................
   10808:	00000020 00000020 00000400 00000004      ... ...........
   10818:	00000004 00000800 00000040 00000040     ........@...@...
   10828:	00001000 00000080 00000080 00002000     ............. ..
   10838:	00000100 00000100                       ........

00010840 <gAmHalCmdQReg>:
   10840:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   10850:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10860:	00000004 00000002 50005294 50005298     .........R.P.R.P
   10870:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   10880:	5000529c 00000001 00000004 00000002     .R.P............
   10890:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   108a0:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   108b0:	00000004 00000002 50007294 50007298     .........r.P.r.P
   108c0:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   108d0:	5000729c 00000001 00000004 00000002     .r.P............
   108e0:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   108f0:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10900:	00000004 00000002 50009294 50009298     ...........P...P
   10910:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10920:	5000929c 00000001 00000004 00000002     ...P............
   10930:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   10940:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   10950:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10960:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   10970:	5000c250 00000001 00000004 00000002     P..P............
